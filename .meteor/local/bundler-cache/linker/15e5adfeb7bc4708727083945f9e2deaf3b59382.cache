[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsClient = Package['accounts-base'].AccountsClient;\nvar _ = Package.underscore._;\nvar Mongo = Package.mongo.Mongo;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar TimeSync = Package['mizzao:timesync'].TimeSync;\n\n/* Package-scope variables */\nvar __coffeescriptShare, MonitorInternals, UserStatus;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/mizzao_user-status/packages/mizzao_user-status.js                                 //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\n(function () {                                                                                // 1\n                                                                                              // 2\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// packages/mizzao:user-status/monitor.coffee.js                                           //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                                                                                              // 10\n/*                                                                                            // 11\n  The idle monitor watches for mouse, keyboard, and blur events,                              // 12\n  and reports idle status to the server.                                                      // 13\n                                                                                              // 14\n  It uses TimeSync to report accurate time.                                                   // 15\n                                                                                              // 16\n  Everything is reactive, of course!                                                          // 17\n */                                                                                           // 18\nvar activityDep, focused, idle, idleDep, isIdle, isMonitoring, lastActivity, lastActivityTime, monitor, monitorDep, monitorId, start, stop, touch;                              \n                                                                                              // 20\nmonitorId = null;                                                                             // 21\n                                                                                              // 22\nidle = false;                                                                                 // 23\n                                                                                              // 24\nlastActivityTime = void 0;                                                                    // 25\n                                                                                              // 26\nmonitorDep = new Deps.Dependency;                                                             // 27\n                                                                                              // 28\nidleDep = new Deps.Dependency;                                                                // 29\n                                                                                              // 30\nactivityDep = new Deps.Dependency;                                                            // 31\n                                                                                              // 32\nfocused = true;                                                                               // 33\n                                                                                              // 34\nMonitorInternals = {                                                                          // 35\n  idleThreshold: null,                                                                        // 36\n  idleOnBlur: false,                                                                          // 37\n  computeState: function(lastActiveTime, currentTime, isWindowFocused) {                      // 38\n    var inactiveTime;                                                                         // 39\n    inactiveTime = currentTime - lastActiveTime;                                              // 40\n    if (MonitorInternals.idleOnBlur && !isWindowFocused) {                                    // 41\n      return true;                                                                            // 42\n    }                                                                                         // 43\n    if (inactiveTime > MonitorInternals.idleThreshold) {                                      // 44\n      return true;                                                                            // 45\n    } else {                                                                                  // 46\n      return false;                                                                           // 47\n    }                                                                                         // 48\n  },                                                                                          // 49\n  connectionChange: function(isConnected, wasConnected) {                                     // 50\n    if (isConnected && !wasConnected && idle) {                                               // 51\n      return MonitorInternals.reportIdle(lastActivityTime);                                   // 52\n    }                                                                                         // 53\n  },                                                                                          // 54\n  onWindowBlur: function() {                                                                  // 55\n    focused = false;                                                                          // 56\n    return monitor();                                                                         // 57\n  },                                                                                          // 58\n  onWindowFocus: function() {                                                                 // 59\n    focused = true;                                                                           // 60\n    return monitor(true);                                                                     // 61\n  },                                                                                          // 62\n  reportIdle: function(time) {                                                                // 63\n    return Meteor.call(\"user-status-idle\", time);                                             // 64\n  },                                                                                          // 65\n  reportActive: function(time) {                                                              // 66\n    return Meteor.call(\"user-status-active\", time);                                           // 67\n  }                                                                                           // 68\n};                                                                                            // 69\n                                                                                              // 70\nstart = function(settings) {                                                                  // 71\n  var interval;                                                                               // 72\n  if (!TimeSync.isSynced()) {                                                                 // 73\n    throw new Error(\"Can't start idle monitor until synced to server\");                       // 74\n  }                                                                                           // 75\n  if (monitorId) {                                                                            // 76\n    throw new Error(\"Idle monitor is already active. Stop it first.\");                        // 77\n  }                                                                                           // 78\n  settings = settings || {};                                                                  // 79\n  MonitorInternals.idleThreshold = settings.threshold || 60000;                               // 80\n  interval = Math.max(settings.interval || 1000, 1000);                                       // 81\n  MonitorInternals.idleOnBlur = settings.idleOnBlur != null ? settings.idleOnBlur : false;    // 82\n  monitorId = Meteor.setInterval(monitor, interval);                                          // 83\n  monitorDep.changed();                                                                       // 84\n  if (lastActivityTime == null) {                                                             // 85\n    lastActivityTime = Deps.nonreactive(function() {                                          // 86\n      return TimeSync.serverTime();                                                           // 87\n    });                                                                                       // 88\n    activityDep.changed();                                                                    // 89\n  }                                                                                           // 90\n  monitor();                                                                                  // 91\n};                                                                                            // 92\n                                                                                              // 93\nstop = function() {                                                                           // 94\n  if (!monitorId) {                                                                           // 95\n    throw new Error(\"Idle monitor is not running.\");                                          // 96\n  }                                                                                           // 97\n  Meteor.clearInterval(monitorId);                                                            // 98\n  monitorId = null;                                                                           // 99\n  lastActivityTime = void 0;                                                                  // 100\n  monitorDep.changed();                                                                       // 101\n  if (idle) {                                                                                 // 102\n    idle = false;                                                                             // 103\n    idleDep.changed();                                                                        // 104\n    MonitorInternals.reportActive(Deps.nonreactive(function() {                               // 105\n      return TimeSync.serverTime();                                                           // 106\n    }));                                                                                      // 107\n  }                                                                                           // 108\n};                                                                                            // 109\n                                                                                              // 110\nmonitor = function(setAction) {                                                               // 111\n  var currentTime, newIdle;                                                                   // 112\n  if (!monitorId) {                                                                           // 113\n    return;                                                                                   // 114\n  }                                                                                           // 115\n  currentTime = Deps.nonreactive(function() {                                                 // 116\n    return TimeSync.serverTime();                                                             // 117\n  });                                                                                         // 118\n  if (currentTime == null) {                                                                  // 119\n    return;                                                                                   // 120\n  }                                                                                           // 121\n  if (setAction && (focused || !MonitorInternals.idleOnBlur)) {                               // 122\n    lastActivityTime = currentTime;                                                           // 123\n    activityDep.changed();                                                                    // 124\n  }                                                                                           // 125\n  newIdle = MonitorInternals.computeState(lastActivityTime, currentTime, focused);            // 126\n  if (newIdle !== idle) {                                                                     // 127\n    idle = newIdle;                                                                           // 128\n    idleDep.changed();                                                                        // 129\n  }                                                                                           // 130\n};                                                                                            // 131\n                                                                                              // 132\ntouch = function() {                                                                          // 133\n  if (!monitorId) {                                                                           // 134\n    Meteor._debug(\"Cannot touch as idle monitor is not running.\");                            // 135\n    return;                                                                                   // 136\n  }                                                                                           // 137\n  return monitor(true);                                                                       // 138\n};                                                                                            // 139\n                                                                                              // 140\nisIdle = function() {                                                                         // 141\n  idleDep.depend();                                                                           // 142\n  return idle;                                                                                // 143\n};                                                                                            // 144\n                                                                                              // 145\nisMonitoring = function() {                                                                   // 146\n  monitorDep.depend();                                                                        // 147\n  return monitorId != null;                                                                   // 148\n};                                                                                            // 149\n                                                                                              // 150\nlastActivity = function() {                                                                   // 151\n  if (!isMonitoring()) {                                                                      // 152\n    return;                                                                                   // 153\n  }                                                                                           // 154\n  activityDep.depend();                                                                       // 155\n  return lastActivityTime;                                                                    // 156\n};                                                                                            // 157\n                                                                                              // 158\nMeteor.startup(function() {                                                                   // 159\n  var wasConnected;                                                                           // 160\n  $(window).on(\"click keydown\", function() {                                                  // 161\n    return monitor(true);                                                                     // 162\n  });                                                                                         // 163\n  $(window).blur(MonitorInternals.onWindowBlur);                                              // 164\n  $(window).focus(MonitorInternals.onWindowFocus);                                            // 165\n  if (Meteor.isCordova) {                                                                     // 166\n    document.addEventListener(\"pause\", MonitorInternals.onWindowBlur);                        // 167\n    document.addEventListener(\"resume\", MonitorInternals.onWindowFocus);                      // 168\n  }                                                                                           // 169\n  focused = document.hasFocus();                                                              // 170\n  Deps.autorun(function() {                                                                   // 171\n    if (!isMonitoring()) {                                                                    // 172\n      return;                                                                                 // 173\n    }                                                                                         // 174\n    if (isIdle()) {                                                                           // 175\n      MonitorInternals.reportIdle(lastActivityTime);                                          // 176\n    } else {                                                                                  // 177\n      MonitorInternals.reportActive(lastActivityTime);                                        // 178\n    }                                                                                         // 179\n  });                                                                                         // 180\n  wasConnected = Meteor.status().connected;                                                   // 181\n  return Deps.autorun(function() {                                                            // 182\n    var connected;                                                                            // 183\n    connected = Meteor.status().connected;                                                    // 184\n    MonitorInternals.connectionChange(connected, wasConnected);                               // 185\n    wasConnected = connected;                                                                 // 186\n  });                                                                                         // 187\n});                                                                                           // 188\n                                                                                              // 189\nUserStatus = {                                                                                // 190\n  startMonitor: start,                                                                        // 191\n  stopMonitor: stop,                                                                          // 192\n  pingMonitor: touch,                                                                         // 193\n  isIdle: isIdle,                                                                             // 194\n  isMonitoring: isMonitoring,                                                                 // 195\n  lastActivity: lastActivity                                                                  // 196\n};                                                                                            // 197\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              // 199\n}).call(this);                                                                                // 200\n                                                                                              // 201\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['mizzao:user-status'] = {\n  UserStatus: UserStatus,\n  MonitorInternals: MonitorInternals\n};\n\n})();\n","servePath":"/packages/mizzao_user-status.js","sourceMap":{"version":3,"sources":["/packages/mizzao_user-status/packages/mizzao_user-status.js"],"names":[],"mappingsoG","file":"/packages/mizzao_user-status.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// packages/mizzao:user-status/monitor.coffee.js                                           //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n\n/*\n  The idle monitor watches for mouse, keyboard, and blur events,\n  and reports idle status to the server.\n\n  It uses TimeSync to report accurate time.\n\n  Everything is reactive, of course!\n */\nvar activityDep, focused, idle, idleDep, isIdle, isMonitoring, lastActivity, lastActivityTime, monitor, monitorDep, monitorId, start, stop, touch;                              \n\nmonitorId = null;\n\nidle = false;\n\nlastActivityTime = void 0;\n\nmonitorDep = new Deps.Dependency;\n\nidleDep = new Deps.Dependency;\n\nactivityDep = new Deps.Dependency;\n\nfocused = true;\n\nMonitorInternals = {\n  idleThreshold: null,\n  idleOnBlur: false,\n  computeState: function(lastActiveTime, currentTime, isWindowFocused) {\n    var inactiveTime;\n    inactiveTime = currentTime - lastActiveTime;\n    if (MonitorInternals.idleOnBlur && !isWindowFocused) {\n      return true;\n    }\n    if (inactiveTime > MonitorInternals.idleThreshold) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  connectionChange: function(isConnected, wasConnected) {\n    if (isConnected && !wasConnected && idle) {\n      return MonitorInternals.reportIdle(lastActivityTime);\n    }\n  },\n  onWindowBlur: function() {\n    focused = false;\n    return monitor();\n  },\n  onWindowFocus: function() {\n    focused = true;\n    return monitor(true);\n  },\n  reportIdle: function(time) {\n    return Meteor.call(\"user-status-idle\", time);\n  },\n  reportActive: function(time) {\n    return Meteor.call(\"user-status-active\", time);\n  }\n};\n\nstart = function(settings) {\n  var interval;\n  if (!TimeSync.isSynced()) {\n    throw new Error(\"Can't start idle monitor until synced to server\");\n  }\n  if (monitorId) {\n    throw new Error(\"Idle monitor is already active. Stop it first.\");\n  }\n  settings = settings || {};\n  MonitorInternals.idleThreshold = settings.threshold || 60000;\n  interval = Math.max(settings.interval || 1000, 1000);\n  MonitorInternals.idleOnBlur = settings.idleOnBlur != null ? settings.idleOnBlur : false;\n  monitorId = Meteor.setInterval(monitor, interval);\n  monitorDep.changed();\n  if (lastActivityTime == null) {\n    lastActivityTime = Deps.nonreactive(function() {\n      return TimeSync.serverTime();\n    });\n    activityDep.changed();\n  }\n  monitor();\n};\n\nstop = function() {\n  if (!monitorId) {\n    throw new Error(\"Idle monitor is not running.\");\n  }\n  Meteor.clearInterval(monitorId);\n  monitorId = null;\n  lastActivityTime = void 0;\n  monitorDep.changed();\n  if (idle) {\n    idle = false;\n    idleDep.changed();\n    MonitorInternals.reportActive(Deps.nonreactive(function() {\n      return TimeSync.serverTime();\n    }));\n  }\n};\n\nmonitor = function(setAction) {\n  var currentTime, newIdle;\n  if (!monitorId) {\n    return;\n  }\n  currentTime = Deps.nonreactive(function() {\n    return TimeSync.serverTime();\n  });\n  if (currentTime == null) {\n    return;\n  }\n  if (setAction && (focused || !MonitorInternals.idleOnBlur)) {\n    lastActivityTime = currentTime;\n    activityDep.changed();\n  }\n  newIdle = MonitorInternals.computeState(lastActivityTime, currentTime, focused);\n  if (newIdle !== idle) {\n    idle = newIdle;\n    idleDep.changed();\n  }\n};\n\ntouch = function() {\n  if (!monitorId) {\n    Meteor._debug(\"Cannot touch as idle monitor is not running.\");\n    return;\n  }\n  return monitor(true);\n};\n\nisIdle = function() {\n  idleDep.depend();\n  return idle;\n};\n\nisMonitoring = function() {\n  monitorDep.depend();\n  return monitorId != null;\n};\n\nlastActivity = function() {\n  if (!isMonitoring()) {\n    return;\n  }\n  activityDep.depend();\n  return lastActivityTime;\n};\n\nMeteor.startup(function() {\n  var wasConnected;\n  $(window).on(\"click keydown\", function() {\n    return monitor(true);\n  });\n  $(window).blur(MonitorInternals.onWindowBlur);\n  $(window).focus(MonitorInternals.onWindowFocus);\n  if (Meteor.isCordova) {\n    document.addEventListener(\"pause\", MonitorInternals.onWindowBlur);\n    document.addEventListener(\"resume\", MonitorInternals.onWindowFocus);\n  }\n  focused = document.hasFocus();\n  Deps.autorun(function() {\n    if (!isMonitoring()) {\n      return;\n    }\n    if (isIdle()) {\n      MonitorInternals.reportIdle(lastActivityTime);\n    } else {\n      MonitorInternals.reportActive(lastActivityTime);\n    }\n  });\n  wasConnected = Meteor.status().connected;\n  return Deps.autorun(function() {\n    var connected;\n    connected = Meteor.status().connected;\n    MonitorInternals.connectionChange(connected, wasConnected);\n    wasConnected = connected;\n  });\n});\n\nUserStatus = {\n  startMonitor: start,\n  stopMonitor: stop,\n  pingMonitor: touch,\n  isIdle: isIdle,\n  isMonitoring: isMonitoring,\n  lastActivity: lastActivity\n};\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]
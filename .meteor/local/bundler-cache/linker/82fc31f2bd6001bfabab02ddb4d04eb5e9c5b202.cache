[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar InjectData = Package['meteorhacks:inject-data'].InjectData;\nvar Cookie = Package['chuangbo:cookie'].Cookie;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsClient = Package['accounts-base'].AccountsClient;\n\n/* Package-scope variables */\nvar AddedToChanged, ApplyDDP, DeepExtend, IDTools, FastRender, collData, __init_fast_render;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/meteorhacks_fast-render/packages/meteorhacks_fast-render.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function () {                                                                                                         // 1\n                                                                                                                       // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 3\n//                                                                                                                //   // 4\n// packages/meteorhacks:fast-render/lib/utils.js                                                                  //   // 5\n//                                                                                                                //   // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 7\n                                                                                                                  //   // 8\nAddedToChanged = function(localCopy, added) {                                                                     // 1\n  added.msg = \"changed\";                                                                                          // 2\n  added.cleared = [];                                                                                             // 3\n  added.fields = added.fields || {};                                                                              // 4\n                                                                                                                  // 5\n  _.each(localCopy, function(value, key) {                                                                        // 6\n    if(key != '_id') {                                                                                            // 7\n      if(typeof added.fields[key] == \"undefined\") {                                                               // 8\n        added.cleared.push(key);                                                                                  // 9\n      }                                                                                                           // 10\n    }                                                                                                             // 11\n  });                                                                                                             // 12\n};                                                                                                                // 13\n                                                                                                                  // 14\nApplyDDP = function(existing, message) {                                                                          // 15\n  var newDoc = (!existing)? {}: _.clone(existing);                                                                // 16\n  if(message.msg == 'added') {                                                                                    // 17\n    _.each(message.fields, function(value, key) {                                                                 // 18\n      newDoc[key] = value;                                                                                        // 19\n    });                                                                                                           // 20\n  } else if(message.msg == \"changed\") {                                                                           // 21\n    _.each(message.fields, function(value, key) {                                                                 // 22\n      newDoc[key] = value;                                                                                        // 23\n    });                                                                                                           // 24\n    _.each(message.cleared, function(key) {                                                                       // 25\n      delete newDoc[key];                                                                                         // 26\n    });                                                                                                           // 27\n  } else if(message.msg == \"removed\") {                                                                           // 28\n    newDoc = null;                                                                                                // 29\n  }                                                                                                               // 30\n                                                                                                                  // 31\n  return newDoc;                                                                                                  // 32\n};                                                                                                                // 33\n                                                                                                                  // 34\n// source: https://gist.github.com/kurtmilam/1868955                                                              // 35\n//  modified a bit to not to expose this as an _ api                                                              // 36\nDeepExtend = function deepExtend (obj) {                                                                          // 37\n  var parentRE = /#{\\s*?_\\s*?}/,                                                                                  // 38\n      slice = Array.prototype.slice,                                                                              // 39\n      hasOwnProperty = Object.prototype.hasOwnProperty;                                                           // 40\n                                                                                                                  // 41\n  _.each(slice.call(arguments, 1), function(source) {                                                             // 42\n    for (var prop in source) {                                                                                    // 43\n      if (hasOwnProperty.call(source, prop)) {                                                                    // 44\n        if (_.isNull(obj[prop]) || _.isUndefined(obj[prop]) || _.isFunction(obj[prop]) || _.isNull(source[prop]) || _.isDate(source[prop])) {\n          obj[prop] = source[prop];                                                                               // 46\n        }                                                                                                         // 47\n        else if (_.isString(source[prop]) && parentRE.test(source[prop])) {                                       // 48\n          if (_.isString(obj[prop])) {                                                                            // 49\n            obj[prop] = source[prop].replace(parentRE, obj[prop]);                                                // 50\n          }                                                                                                       // 51\n        }                                                                                                         // 52\n        else if (_.isArray(obj[prop]) || _.isArray(source[prop])){                                                // 53\n          if (!_.isArray(obj[prop]) || !_.isArray(source[prop])){                                                 // 54\n            throw 'Error: Trying to combine an array with a non-array (' + prop + ')';                            // 55\n          } else {                                                                                                // 56\n            obj[prop] = _.reject(DeepExtend(obj[prop], source[prop]), function (item) { return _.isNull(item);}); // 57\n          }                                                                                                       // 58\n        }                                                                                                         // 59\n        else if (_.isObject(obj[prop]) || _.isObject(source[prop])){                                              // 60\n          if (!_.isObject(obj[prop]) || !_.isObject(source[prop])){                                               // 61\n            throw 'Error: Trying to combine an object with a non-object (' + prop + ')';                          // 62\n          } else {                                                                                                // 63\n            obj[prop] = DeepExtend(obj[prop], source[prop]);                                                      // 64\n          }                                                                                                       // 65\n        } else {                                                                                                  // 66\n          obj[prop] = source[prop];                                                                               // 67\n        }                                                                                                         // 68\n      }                                                                                                           // 69\n    }                                                                                                             // 70\n  });                                                                                                             // 71\n  return obj;                                                                                                     // 72\n};                                                                                                                // 73\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 82\n                                                                                                                       // 83\n}).call(this);                                                                                                         // 84\n                                                                                                                       // 85\n                                                                                                                       // 86\n                                                                                                                       // 87\n                                                                                                                       // 88\n                                                                                                                       // 89\n                                                                                                                       // 90\n(function () {                                                                                                         // 91\n                                                                                                                       // 92\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 93\n//                                                                                                                //   // 94\n// packages/meteorhacks:fast-render/lib/client/id_tools.js                                                        //   // 95\n//                                                                                                                //   // 96\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 97\n                                                                                                                  //   // 98\nIDTools = {};                                                                                                     // 1\nIDTools.idParse = LocalCollection._idParse;                                                                       // 2\nIDTools.idStringify = LocalCollection._idStringify;                                                               // 3\nIDTools.ObjectID = LocalCollection._ObjectID                                                                      // 4\n                                                                                                                  // 5\n// To support Meteor 1.2                                                                                          // 6\nif(Package['mongo-id']) {                                                                                         // 7\n  var MongoID = Package['mongo-id'].MongoID;                                                                      // 8\n  IDTools.idParse = MongoID.idParse;                                                                              // 9\n  IDTools.idStringify = MongoID.idStringify;                                                                      // 10\n  IDTools.ObjectID = MongoID.ObjectID;                                                                            // 11\n}                                                                                                                 // 12\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 111\n                                                                                                                       // 112\n}).call(this);                                                                                                         // 113\n                                                                                                                       // 114\n                                                                                                                       // 115\n                                                                                                                       // 116\n                                                                                                                       // 117\n                                                                                                                       // 118\n                                                                                                                       // 119\n(function () {                                                                                                         // 120\n                                                                                                                       // 121\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 122\n//                                                                                                                //   // 123\n// packages/meteorhacks:fast-render/lib/client/fast_render.js                                                     //   // 124\n//                                                                                                                //   // 125\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 126\n                                                                                                                  //   // 127\nFastRender = {};                                                                                                  // 1\nFastRender.enabled = typeof __fast_render_config != 'undefined';                                                  // 2\nFastRender._dataReceived = false;                                                                                 // 3\nFastRender._revertedBackToOriginal = false;                                                                       // 4\nFastRender._blockDDP = Meteor._localStorage.getItem('__frblockddp') != undefined;                                 // 5\nif(FastRender._blockDDP) {                                                                                        // 6\n  console.log(\"FastRender is blocking DDP messages. apply 'FastRender.debugger.unblockDDP()' to unblock again.\"); // 7\n}                                                                                                                 // 8\n                                                                                                                  // 9\nFastRender._disable = Meteor._localStorage.getItem('__frdisable') != undefined;                                   // 10\nif(FastRender._disable) {                                                                                         // 11\n  console.log(\"FastRender is disabled. apply 'FastRender.debugger.enableFR()' to enable it back.\")                // 12\n}                                                                                                                 // 13\n                                                                                                                  // 14\n// This allow us to apply DDP message even if Meteor block accepting messages                                     // 15\n//  When doing initial login, Meteor sends an login message                                                       // 16\n//  Then it'll block the accpeting DDP messages from server                                                       // 17\n//  This is the cure                                                                                              // 18\nFastRender.injectDdpMessage = function(conn, message) {                                                           // 19\n  FastRender[\"debugger\"].log('injecting ddp message:', message);                                                  // 20\n  var originalWait = conn._waitingForQuiescence;                                                                  // 21\n  conn._waitingForQuiescence = function() {return false};                                                         // 22\n  conn._livedata_data(message);                                                                                   // 23\n  conn._waitingForQuiescence = originalWait;                                                                      // 24\n};                                                                                                                // 25\n                                                                                                                  // 26\nFastRender.init = function(payload) {                                                                             // 27\n  if(FastRender._disable) return;                                                                                 // 28\n                                                                                                                  // 29\n  FastRender._securityCheck(payload);                                                                             // 30\n                                                                                                                  // 31\n  FastRender._subscriptions = (payload && payload.subscriptions) || {};                                           // 32\n  FastRender._subscriptionIdMap = {};                                                                             // 33\n  FastRender._dataReceived = true;                                                                                // 34\n  FastRender._payload = payload;                                                                                  // 35\n                                                                                                                  // 36\n  // merging data from different subscriptions                                                                    // 37\n  //  yes, this is a minimal mergeBox on the client                                                               // 38\n  var allData = {};                                                                                               // 39\n  if (payload) {                                                                                                  // 40\n    _.each(payload.collectionData, function(subData, collName) {                                                  // 41\n      if(!allData[collName]) {                                                                                    // 42\n        allData[collName] = {};                                                                                   // 43\n      }                                                                                                           // 44\n      collData = allData[collName];                                                                               // 45\n                                                                                                                  // 46\n      subData.forEach(function(dataSet) {                                                                         // 47\n        dataSet.forEach(function(item) {                                                                          // 48\n          if(!collData[item._id]) {                                                                               // 49\n            collData[item._id] = item;                                                                            // 50\n          } else {                                                                                                // 51\n            DeepExtend(collData[item._id], item);                                                                 // 52\n          }                                                                                                       // 53\n        });                                                                                                       // 54\n      });                                                                                                         // 55\n    });                                                                                                           // 56\n  }                                                                                                               // 57\n                                                                                                                  // 58\n  _.each(allData, function(collData, collName) {                                                                  // 59\n    _.each(collData, function(item, id) {                                                                         // 60\n      var id = IDTools.idStringify(item._id);                                                                     // 61\n      delete item._id;                                                                                            // 62\n                                                                                                                  // 63\n      var ddpMessage = {                                                                                          // 64\n        msg: 'added',                                                                                             // 65\n        collection: collName,                                                                                     // 66\n        id: id,                                                                                                   // 67\n        fields: item,                                                                                             // 68\n        frGen: true                                                                                               // 69\n      };                                                                                                          // 70\n                                                                                                                  // 71\n      FastRender.injectDdpMessage(Meteor.connection, ddpMessage);                                                 // 72\n    });                                                                                                           // 73\n  });                                                                                                             // 74\n                                                                                                                  // 75\n  // let Meteor know, user login process has been completed                                                       // 76\n  if(typeof Accounts != 'undefined') {                                                                            // 77\n    Accounts._setLoggingIn(false);                                                                                // 78\n  }                                                                                                               // 79\n};                                                                                                                // 80\n                                                                                                                  // 81\nFastRender._securityCheck = function(payload) {                                                                   // 82\n  if(payload && payload.loginToken) {                                                                             // 83\n    var localStorageLoginToken = Meteor._localStorage.getItem('Meteor.loginToken');                               // 84\n    if(localStorageLoginToken != payload.loginToken) {                                                            // 85\n      throw new Error(\"seems like cookie tossing is happening. visit here: http://git.io/q4IRHQ\");                // 86\n    }                                                                                                             // 87\n  }                                                                                                               // 88\n};                                                                                                                // 89\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 217\n                                                                                                                       // 218\n}).call(this);                                                                                                         // 219\n                                                                                                                       // 220\n                                                                                                                       // 221\n                                                                                                                       // 222\n                                                                                                                       // 223\n                                                                                                                       // 224\n                                                                                                                       // 225\n(function () {                                                                                                         // 226\n                                                                                                                       // 227\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 228\n//                                                                                                                //   // 229\n// packages/meteorhacks:fast-render/lib/client/debugger.js                                                        //   // 230\n//                                                                                                                //   // 231\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 232\n                                                                                                                  //   // 233\nFastRender[\"debugger\"] = {};                                                                                      // 1\nFastRender[\"debugger\"]._logs = [];                                                                                // 2\nFastRender[\"debugger\"].log = function function_name(message/*, args..*/) {                                        // 3\n  if(                                                                                                             // 4\n    typeof console != 'undefined' &&                                                                              // 5\n    typeof Meteor._localStorage != 'undefined' &&                                                                 // 6\n    Meteor._localStorage.getItem('__frlog') == \"1\")                                                               // 7\n  {                                                                                                               // 8\n    FastRender[\"debugger\"]._logs.push(arguments);                                                                 // 9\n    arguments[0] = \"FR: \" + arguments[0];                                                                         // 10\n    console.log.apply(console, arguments);                                                                        // 11\n  }                                                                                                               // 12\n}                                                                                                                 // 13\n                                                                                                                  // 14\nFastRender[\"debugger\"].showLogs = function() {                                                                    // 15\n  Meteor._localStorage.setItem('__frlog', \"1\");                                                                   // 16\n  location.reload();                                                                                              // 17\n};                                                                                                                // 18\n                                                                                                                  // 19\nFastRender[\"debugger\"].hideLogs = function() {                                                                    // 20\n  Meteor._localStorage.removeItem('__frlog');                                                                     // 21\n  location.reload();                                                                                              // 22\n};                                                                                                                // 23\n                                                                                                                  // 24\nFastRender[\"debugger\"].getLogs = function() {                                                                     // 25\n  return FastRender[\"debugger\"]._logs;                                                                            // 26\n};                                                                                                                // 27\n                                                                                                                  // 28\nFastRender[\"debugger\"].getLogsJSON = function() {                                                                 // 29\n  return JSON.stringify(FastRender[\"debugger\"]._logs);                                                            // 30\n};                                                                                                                // 31\n                                                                                                                  // 32\nFastRender[\"debugger\"].blockDDP = function() {                                                                    // 33\n  Meteor._localStorage.setItem('__frblockddp', \"1\");                                                              // 34\n  location.reload();                                                                                              // 35\n};                                                                                                                // 36\n                                                                                                                  // 37\nFastRender[\"debugger\"].unblockDDP = function() {                                                                  // 38\n  Meteor._localStorage.removeItem('__frblockddp');                                                                // 39\n  location.reload();                                                                                              // 40\n};                                                                                                                // 41\n                                                                                                                  // 42\nFastRender[\"debugger\"].disableFR = function() {                                                                   // 43\n  Meteor._localStorage.setItem('__frdisable', \"1\");                                                               // 44\n  location.reload();                                                                                              // 45\n};                                                                                                                // 46\n                                                                                                                  // 47\nFastRender[\"debugger\"].enableFR = function() {                                                                    // 48\n  Meteor._localStorage.removeItem('__frdisable');                                                                 // 49\n  location.reload();                                                                                              // 50\n};                                                                                                                // 51\n                                                                                                                  // 52\nFastRender[\"debugger\"].getPayload = function() {                                                                  // 53\n  return FastRender._payload;                                                                                     // 54\n};                                                                                                                // 55\n                                                                                                                  // 56\nFastRender[\"debugger\"].getPayloadJSON = function() {                                                              // 57\n  return JSON.stringify(FastRender._payload);                                                                     // 58\n};                                                                                                                // 59\n                                                                                                                  // 60\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 294\n                                                                                                                       // 295\n}).call(this);                                                                                                         // 296\n                                                                                                                       // 297\n                                                                                                                       // 298\n                                                                                                                       // 299\n                                                                                                                       // 300\n                                                                                                                       // 301\n                                                                                                                       // 302\n(function () {                                                                                                         // 303\n                                                                                                                       // 304\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 305\n//                                                                                                                //   // 306\n// packages/meteorhacks:fast-render/lib/client/ddp_update.js                                                      //   // 307\n//                                                                                                                //   // 308\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 309\n                                                                                                                  //   // 310\nvar reconnecting = false;                                                                                         // 1\n                                                                                                                  // 2\nvar originalLivedataData = Meteor.connection._livedata_data;                                                      // 3\nMeteor.connection._livedata_data = function(msg) {                                                                // 4\n  if(FastRender._blockDDP && !msg.frGen) {                                                                        // 5\n    FastRender[\"debugger\"].log('blocking incoming ddp', msg);                                                     // 6\n    return;                                                                                                       // 7\n  };                                                                                                              // 8\n  // fast-render adds data manually while initializing                                                            // 9\n  // But when the server sends actual data via DDP, it also tries to add                                          // 10\n  // Then we need to detect that and alter                                                                        // 11\n  //                                                                                                              // 12\n  // But we don't need to interfer with Meteor's simulation process                                               // 13\n  // That's why we are checking for serverDocs and ignore manual handling                                         // 14\n  //                                                                                                              // 15\n  // We don't need this logic after our special handling reverted back to                                         // 16\n  // original. But we can't detect when null publications completed or not                                        // 17\n  // That's why we need keep this logic                                                                           // 18\n  //                                                                                                              // 19\n  // It's okay to ignore this logic after sometime, but not sure when exactly                                     // 20\n                                                                                                                  // 21\n  if(msg.msg == 'added') {                                                                                        // 22\n    var id = IDTools.idParse(msg.id);                                                                             // 23\n    var serverDoc = this._getServerDoc(msg.collection, id);                                                       // 24\n                                                                                                                  // 25\n    if(!reconnecting && !serverDoc) {                                                                             // 26\n      var localCollection = this._mongo_livedata_collections[msg.collection];                                     // 27\n      var pendingStoreUpdates = this._updatesForUnknownStores[msg.collection];                                    // 28\n      if(localCollection) {                                                                                       // 29\n        var existingDoc = localCollection.findOne(id);                                                            // 30\n        if(existingDoc) {                                                                                         // 31\n          FastRender[\"debugger\"].log('re writing DDP for:', msg);                                                 // 32\n          AddedToChanged(existingDoc, msg);                                                                       // 33\n        }                                                                                                         // 34\n      } else if(pendingStoreUpdates) {                                                                            // 35\n        var mergedDoc = null;                                                                                     // 36\n        var existingDocs = _.filter(pendingStoreUpdates, function(doc) {                                          // 37\n          return doc.id == msg.id;                                                                                // 38\n        });                                                                                                       // 39\n                                                                                                                  // 40\n        _.each(existingDocs, function(cachedMsg) {                                                                // 41\n          mergedDoc = ApplyDDP(mergedDoc, cachedMsg);                                                             // 42\n        });                                                                                                       // 43\n                                                                                                                  // 44\n        if(mergedDoc) {                                                                                           // 45\n          FastRender[\"debugger\"].log('re writing DDP for:', msg);                                                 // 46\n          AddedToChanged(mergedDoc, msg);                                                                         // 47\n        }                                                                                                         // 48\n      }                                                                                                           // 49\n    }                                                                                                             // 50\n  }                                                                                                               // 51\n                                                                                                                  // 52\n  // if we've completed our tasks, no need of special handling                                                    // 53\n  if(!FastRender._revertedBackToOriginal && FastRender._dataReceived) {                                           // 54\n                                                                                                                  // 55\n    // This will take care of cleaning special subscription handling                                              // 56\n    // after the actual subscription comes out                                                                    // 57\n    if(msg.msg == 'ready' && !msg.frGen && FastRender._subscriptions) {                                           // 58\n      msg.subs.forEach(function(subId) {                                                                          // 59\n        var subscription = FastRender._subscriptionIdMap[subId];                                                  // 60\n        if(subscription) {                                                                                        // 61\n          FastRender[\"debugger\"].log('actual subscription completed:', subscription, subId);                      // 62\n          // we don't need to handle specially after this                                                         // 63\n          var paramsKeyMap = FastRender._subscriptions[subscription.name] || {};                                  // 64\n          delete paramsKeyMap[subscription.paramsKey];                                                            // 65\n          if(EJSON.equals(FastRender._subscriptions[subscription.name], {})) {                                    // 66\n            delete FastRender._subscriptions[subscription.name];                                                  // 67\n          }                                                                                                       // 68\n          delete FastRender._subscriptionIdMap[subId];                                                            // 69\n        }                                                                                                         // 70\n      });                                                                                                         // 71\n    }                                                                                                             // 72\n                                                                                                                  // 73\n    // if all the subscriptions have been processed,                                                              // 74\n    // there is no need to keep hijacking                                                                         // 75\n    if(EJSON.equals(FastRender._subscriptions, {})) {                                                             // 76\n      FastRender[\"debugger\"].log('fast rendering completed!');                                                    // 77\n      FastRender._revertedBackToOriginal = true;                                                                  // 78\n    }                                                                                                             // 79\n  }                                                                                                               // 80\n                                                                                                                  // 81\n  return originalLivedataData.call(this, msg);                                                                    // 82\n};                                                                                                                // 83\n                                                                                                                  // 84\nvar originalSend = Meteor.connection._send;                                                                       // 85\nMeteor.connection._send = function(msg) {                                                                         // 86\n  // if looking for connect again to the server, we must need to revert back to                                   // 87\n  // original to prevent some weird DDP issues                                                                    // 88\n  //  normally it is already reverted, but user may added subscriptions                                           // 89\n  //  in server, which are not subscribed from the client                                                         // 90\n  if(msg.msg == 'connect' && msg.session != undefined) {                                                          // 91\n    FastRender._revertedBackToOriginal = true;                                                                    // 92\n    reconnecting = true;                                                                                          // 93\n  }                                                                                                               // 94\n                                                                                                                  // 95\n  var self = this;                                                                                                // 96\n                                                                                                                  // 97\n  // if we've completed our tasks, no need of special handling                                                    // 98\n  if(!FastRender._revertedBackToOriginal && FastRender._dataReceived) {                                           // 99\n    var paramsKey = EJSON.stringify(msg.params);                                                                  // 100\n    var canSendFakeReady =                                                                                        // 101\n      msg.msg == 'sub' &&                                                                                         // 102\n      FastRender._subscriptions[msg.name] &&                                                                      // 103\n      FastRender._subscriptions[msg.name][paramsKey];                                                             // 104\n                                                                                                                  // 105\n    FastRender[\"debugger\"].log('new subscription:', msg.name);                                                    // 106\n    if(canSendFakeReady) {                                                                                        // 107\n      FastRender[\"debugger\"].log('sending fake ready for sub:', msg.name);                                        // 108\n      FastRender.injectDdpMessage(self, {msg:\"ready\",subs:[msg.id], frGen: true});                                // 109\n      // add the messageId to be handled later                                                                    // 110\n      FastRender._subscriptionIdMap[msg.id] = {                                                                   // 111\n        name: msg.name,                                                                                           // 112\n        paramsKey: paramsKey                                                                                      // 113\n      };                                                                                                          // 114\n    }                                                                                                             // 115\n  }                                                                                                               // 116\n                                                                                                                  // 117\n  return originalSend.call(this, msg);                                                                            // 118\n};                                                                                                                // 119\n                                                                                                                  // 120\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 431\n                                                                                                                       // 432\n}).call(this);                                                                                                         // 433\n                                                                                                                       // 434\n                                                                                                                       // 435\n                                                                                                                       // 436\n                                                                                                                       // 437\n                                                                                                                       // 438\n                                                                                                                       // 439\n(function () {                                                                                                         // 440\n                                                                                                                       // 441\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 442\n//                                                                                                                //   // 443\n// packages/meteorhacks:fast-render/lib/client/auth.js                                                            //   // 444\n//                                                                                                                //   // 445\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 446\n                                                                                                                  //   // 447\n// getting tokens for the first time                                                                              // 1\n//  Meteor calls Meteor._localStorage.setItem() on the boot                                                       // 2\n//  But we can do it ourselves also with this                                                                     // 3\nMeteor.startup(function() {                                                                                       // 4\n  resetToken();                                                                                                   // 5\n});                                                                                                               // 6\n                                                                                                                  // 7\n// override Meteor._localStorage methods and resetToken accordingly                                               // 8\nvar originalSetItem = Meteor._localStorage.setItem;                                                               // 9\nMeteor._localStorage.setItem = function(key, value) {                                                             // 10\n  if(key == 'Meteor.loginToken') {                                                                                // 11\n    Meteor.defer(resetToken);                                                                                     // 12\n  }                                                                                                               // 13\n  originalSetItem.call(Meteor._localStorage, key, value);                                                         // 14\n};                                                                                                                // 15\n                                                                                                                  // 16\nvar originalRemoveItem = Meteor._localStorage.removeItem;                                                         // 17\nMeteor._localStorage.removeItem = function(key) {                                                                 // 18\n  if(key == 'Meteor.loginToken') {                                                                                // 19\n    Meteor.defer(resetToken);                                                                                     // 20\n  }                                                                                                               // 21\n  originalRemoveItem.call(Meteor._localStorage, key);                                                             // 22\n}                                                                                                                 // 23\n                                                                                                                  // 24\nfunction resetToken() {                                                                                           // 25\n  var loginToken = Meteor._localStorage.getItem('Meteor.loginToken');                                             // 26\n  var loginTokenExpires = new Date(Meteor._localStorage.getItem('Meteor.loginTokenExpires'));                     // 27\n                                                                                                                  // 28\n  if(loginToken) {                                                                                                // 29\n    setToken(loginToken, loginTokenExpires);                                                                      // 30\n  } else {                                                                                                        // 31\n    setToken(null, -1);                                                                                           // 32\n  }                                                                                                               // 33\n}                                                                                                                 // 34\n                                                                                                                  // 35\nfunction setToken(loginToken, expires) {                                                                          // 36\n  Cookie.set('meteor_login_token', loginToken, {                                                                  // 37\n    path: '/',                                                                                                    // 38\n    expires: expires                                                                                              // 39\n  });                                                                                                             // 40\n}                                                                                                                 // 41\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 489\n                                                                                                                       // 490\n}).call(this);                                                                                                         // 491\n                                                                                                                       // 492\n                                                                                                                       // 493\n                                                                                                                       // 494\n                                                                                                                       // 495\n                                                                                                                       // 496\n                                                                                                                       // 497\n(function () {                                                                                                         // 498\n                                                                                                                       // 499\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 500\n//                                                                                                                //   // 501\n// packages/meteorhacks:fast-render/lib/client/boot.js                                                            //   // 502\n//                                                                                                                //   // 503\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 504\n                                                                                                                  //   // 505\nInjectData.getData('fast-render-data', function(payload) {                                                        // 1\n  FastRender.init(payload);                                                                                       // 2\n});                                                                                                               // 3\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   // 509\n                                                                                                                       // 510\n}).call(this);                                                                                                         // 511\n                                                                                                                       // 512\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['meteorhacks:fast-render'] = {\n  FastRender: FastRender,\n  __init_fast_render: __init_fast_render\n};\n\n})();\n","servePath":"/packages/meteorhacks_fast-render.js","sourceMap":{"version":3,"sources":["/packages/meteorhacks_fast-render/packages/meteorhacks_fast-render.js"],"names":[],"mappingsfile":"/packages/meteorhacks_fast-render.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks:fast-render/lib/utils.js                                                                  //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nAddedToChanged = function(localCopy, added) {                                                                     // 1\n  added.msg = \"changed\";                                                                                          // 2\n  added.cleared = [];                                                                                             // 3\n  added.fields = added.fields || {};                                                                              // 4\n                                                                                                                  // 5\n  _.each(localCopy, function(value, key) {                                                                        // 6\n    if(key != '_id') {                                                                                            // 7\n      if(typeof added.fields[key] == \"undefined\") {                                                               // 8\n        added.cleared.push(key);                                                                                  // 9\n      }                                                                                                           // 10\n    }                                                                                                             // 11\n  });                                                                                                             // 12\n};                                                                                                                // 13\n                                                                                                                  // 14\nApplyDDP = function(existing, message) {                                                                          // 15\n  var newDoc = (!existing)? {}: _.clone(existing);                                                                // 16\n  if(message.msg == 'added') {                                                                                    // 17\n    _.each(message.fields, function(value, key) {                                                                 // 18\n      newDoc[key] = value;                                                                                        // 19\n    });                                                                                                           // 20\n  } else if(message.msg == \"changed\") {                                                                           // 21\n    _.each(message.fields, function(value, key) {                                                                 // 22\n      newDoc[key] = value;                                                                                        // 23\n    });                                                                                                           // 24\n    _.each(message.cleared, function(key) {                                                                       // 25\n      delete newDoc[key];                                                                                         // 26\n    });                                                                                                           // 27\n  } else if(message.msg == \"removed\") {                                                                           // 28\n    newDoc = null;                                                                                                // 29\n  }                                                                                                               // 30\n                                                                                                                  // 31\n  return newDoc;                                                                                                  // 32\n};                                                                                                                // 33\n                                                                                                                  // 34\n// source: https://gist.github.com/kurtmilam/1868955                                                              // 35\n//  modified a bit to not to expose this as an _ api                                                              // 36\nDeepExtend = function deepExtend (obj) {                                                                          // 37\n  var parentRE = /#{\\s*?_\\s*?}/,                                                                                  // 38\n      slice = Array.prototype.slice,                                                                              // 39\n      hasOwnProperty = Object.prototype.hasOwnProperty;                                                           // 40\n                                                                                                                  // 41\n  _.each(slice.call(arguments, 1), function(source) {                                                             // 42\n    for (var prop in source) {                                                                                    // 43\n      if (hasOwnProperty.call(source, prop)) {                                                                    // 44\n        if (_.isNull(obj[prop]) || _.isUndefined(obj[prop]) || _.isFunction(obj[prop]) || _.isNull(source[prop]) || _.isDate(source[prop])) {\n          obj[prop] = source[prop];                                                                               // 46\n        }                                                                                                         // 47\n        else if (_.isString(source[prop]) && parentRE.test(source[prop])) {                                       // 48\n          if (_.isString(obj[prop])) {                                                                            // 49\n            obj[prop] = source[prop].replace(parentRE, obj[prop]);                                                // 50\n          }                                                                                                       // 51\n        }                                                                                                         // 52\n        else if (_.isArray(obj[prop]) || _.isArray(source[prop])){                                                // 53\n          if (!_.isArray(obj[prop]) || !_.isArray(source[prop])){                                                 // 54\n            throw 'Error: Trying to combine an array with a non-array (' + prop + ')';                            // 55\n          } else {                                                                                                // 56\n            obj[prop] = _.reject(DeepExtend(obj[prop], source[prop]), function (item) { return _.isNull(item);}); // 57\n          }                                                                                                       // 58\n        }                                                                                                         // 59\n        else if (_.isObject(obj[prop]) || _.isObject(source[prop])){                                              // 60\n          if (!_.isObject(obj[prop]) || !_.isObject(source[prop])){                                               // 61\n            throw 'Error: Trying to combine an object with a non-object (' + prop + ')';                          // 62\n          } else {                                                                                                // 63\n            obj[prop] = DeepExtend(obj[prop], source[prop]);                                                      // 64\n          }                                                                                                       // 65\n        } else {                                                                                                  // 66\n          obj[prop] = source[prop];                                                                               // 67\n        }                                                                                                         // 68\n      }                                                                                                           // 69\n    }                                                                                                             // 70\n  });                                                                                                             // 71\n  return obj;                                                                                                     // 72\n};                                                                                                                // 73\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks:fast-render/lib/client/id_tools.js                                                        //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nIDTools = {};                                                                                                     // 1\nIDTools.idParse = LocalCollection._idParse;                                                                       // 2\nIDTools.idStringify = LocalCollection._idStringify;                                                               // 3\nIDTools.ObjectID = LocalCollection._ObjectID                                                                      // 4\n                                                                                                                  // 5\n// To support Meteor 1.2                                                                                          // 6\nif(Package['mongo-id']) {                                                                                         // 7\n  var MongoID = Package['mongo-id'].MongoID;                                                                      // 8\n  IDTools.idParse = MongoID.idParse;                                                                              // 9\n  IDTools.idStringify = MongoID.idStringify;                                                                      // 10\n  IDTools.ObjectID = MongoID.ObjectID;                                                                            // 11\n}                                                                                                                 // 12\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks:fast-render/lib/client/fast_render.js                                                     //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nFastRender = {};                                                                                                  // 1\nFastRender.enabled = typeof __fast_render_config != 'undefined';                                                  // 2\nFastRender._dataReceived = false;                                                                                 // 3\nFastRender._revertedBackToOriginal = false;                                                                       // 4\nFastRender._blockDDP = Meteor._localStorage.getItem('__frblockddp') != undefined;                                 // 5\nif(FastRender._blockDDP) {                                                                                        // 6\n  console.log(\"FastRender is blocking DDP messages. apply 'FastRender.debugger.unblockDDP()' to unblock again.\"); // 7\n}                                                                                                                 // 8\n                                                                                                                  // 9\nFastRender._disable = Meteor._localStorage.getItem('__frdisable') != undefined;                                   // 10\nif(FastRender._disable) {                                                                                         // 11\n  console.log(\"FastRender is disabled. apply 'FastRender.debugger.enableFR()' to enable it back.\")                // 12\n}                                                                                                                 // 13\n                                                                                                                  // 14\n// This allow us to apply DDP message even if Meteor block accepting messages                                     // 15\n//  When doing initial login, Meteor sends an login message                                                       // 16\n//  Then it'll block the accpeting DDP messages from server                                                       // 17\n//  This is the cure                                                                                              // 18\nFastRender.injectDdpMessage = function(conn, message) {                                                           // 19\n  FastRender[\"debugger\"].log('injecting ddp message:', message);                                                  // 20\n  var originalWait = conn._waitingForQuiescence;                                                                  // 21\n  conn._waitingForQuiescence = function() {return false};                                                         // 22\n  conn._livedata_data(message);                                                                                   // 23\n  conn._waitingForQuiescence = originalWait;                                                                      // 24\n};                                                                                                                // 25\n                                                                                                                  // 26\nFastRender.init = function(payload) {                                                                             // 27\n  if(FastRender._disable) return;                                                                                 // 28\n                                                                                                                  // 29\n  FastRender._securityCheck(payload);                                                                             // 30\n                                                                                                                  // 31\n  FastRender._subscriptions = (payload && payload.subscriptions) || {};                                           // 32\n  FastRender._subscriptionIdMap = {};                                                                             // 33\n  FastRender._dataReceived = true;                                                                                // 34\n  FastRender._payload = payload;                                                                                  // 35\n                                                                                                                  // 36\n  // merging data from different subscriptions                                                                    // 37\n  //  yes, this is a minimal mergeBox on the client                                                               // 38\n  var allData = {};                                                                                               // 39\n  if (payload) {                                                                                                  // 40\n    _.each(payload.collectionData, function(subData, collName) {                                                  // 41\n      if(!allData[collName]) {                                                                                    // 42\n        allData[collName] = {};                                                                                   // 43\n      }                                                                                                           // 44\n      collData = allData[collName];                                                                               // 45\n                                                                                                                  // 46\n      subData.forEach(function(dataSet) {                                                                         // 47\n        dataSet.forEach(function(item) {                                                                          // 48\n          if(!collData[item._id]) {                                                                               // 49\n            collData[item._id] = item;                                                                            // 50\n          } else {                                                                                                // 51\n            DeepExtend(collData[item._id], item);                                                                 // 52\n          }                                                                                                       // 53\n        });                                                                                                       // 54\n      });                                                                                                         // 55\n    });                                                                                                           // 56\n  }                                                                                                               // 57\n                                                                                                                  // 58\n  _.each(allData, function(collData, collName) {                                                                  // 59\n    _.each(collData, function(item, id) {                                                                         // 60\n      var id = IDTools.idStringify(item._id);                                                                     // 61\n      delete item._id;                                                                                            // 62\n                                                                                                                  // 63\n      var ddpMessage = {                                                                                          // 64\n        msg: 'added',                                                                                             // 65\n        collection: collName,                                                                                     // 66\n        id: id,                                                                                                   // 67\n        fields: item,                                                                                             // 68\n        frGen: true                                                                                               // 69\n      };                                                                                                          // 70\n                                                                                                                  // 71\n      FastRender.injectDdpMessage(Meteor.connection, ddpMessage);                                                 // 72\n    });                                                                                                           // 73\n  });                                                                                                             // 74\n                                                                                                                  // 75\n  // let Meteor know, user login process has been completed                                                       // 76\n  if(typeof Accounts != 'undefined') {                                                                            // 77\n    Accounts._setLoggingIn(false);                                                                                // 78\n  }                                                                                                               // 79\n};                                                                                                                // 80\n                                                                                                                  // 81\nFastRender._securityCheck = function(payload) {                                                                   // 82\n  if(payload && payload.loginToken) {                                                                             // 83\n    var localStorageLoginToken = Meteor._localStorage.getItem('Meteor.loginToken');                               // 84\n    if(localStorageLoginToken != payload.loginToken) {                                                            // 85\n      throw new Error(\"seems like cookie tossing is happening. visit here: http://git.io/q4IRHQ\");                // 86\n    }                                                                                                             // 87\n  }                                                                                                               // 88\n};                                                                                                                // 89\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks:fast-render/lib/client/debugger.js                                                        //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nFastRender[\"debugger\"] = {};                                                                                      // 1\nFastRender[\"debugger\"]._logs = [];                                                                                // 2\nFastRender[\"debugger\"].log = function function_name(message/*, args..*/) {                                        // 3\n  if(                                                                                                             // 4\n    typeof console != 'undefined' &&                                                                              // 5\n    typeof Meteor._localStorage != 'undefined' &&                                                                 // 6\n    Meteor._localStorage.getItem('__frlog') == \"1\")                                                               // 7\n  {                                                                                                               // 8\n    FastRender[\"debugger\"]._logs.push(arguments);                                                                 // 9\n    arguments[0] = \"FR: \" + arguments[0];                                                                         // 10\n    console.log.apply(console, arguments);                                                                        // 11\n  }                                                                                                               // 12\n}                                                                                                                 // 13\n                                                                                                                  // 14\nFastRender[\"debugger\"].showLogs = function() {                                                                    // 15\n  Meteor._localStorage.setItem('__frlog', \"1\");                                                                   // 16\n  location.reload();                                                                                              // 17\n};                                                                                                                // 18\n                                                                                                                  // 19\nFastRender[\"debugger\"].hideLogs = function() {                                                                    // 20\n  Meteor._localStorage.removeItem('__frlog');                                                                     // 21\n  location.reload();                                                                                              // 22\n};                                                                                                                // 23\n                                                                                                                  // 24\nFastRender[\"debugger\"].getLogs = function() {                                                                     // 25\n  return FastRender[\"debugger\"]._logs;                                                                            // 26\n};                                                                                                                // 27\n                                                                                                                  // 28\nFastRender[\"debugger\"].getLogsJSON = function() {                                                                 // 29\n  return JSON.stringify(FastRender[\"debugger\"]._logs);                                                            // 30\n};                                                                                                                // 31\n                                                                                                                  // 32\nFastRender[\"debugger\"].blockDDP = function() {                                                                    // 33\n  Meteor._localStorage.setItem('__frblockddp', \"1\");                                                              // 34\n  location.reload();                                                                                              // 35\n};                                                                                                                // 36\n                                                                                                                  // 37\nFastRender[\"debugger\"].unblockDDP = function() {                                                                  // 38\n  Meteor._localStorage.removeItem('__frblockddp');                                                                // 39\n  location.reload();                                                                                              // 40\n};                                                                                                                // 41\n                                                                                                                  // 42\nFastRender[\"debugger\"].disableFR = function() {                                                                   // 43\n  Meteor._localStorage.setItem('__frdisable', \"1\");                                                               // 44\n  location.reload();                                                                                              // 45\n};                                                                                                                // 46\n                                                                                                                  // 47\nFastRender[\"debugger\"].enableFR = function() {                                                                    // 48\n  Meteor._localStorage.removeItem('__frdisable');                                                                 // 49\n  location.reload();                                                                                              // 50\n};                                                                                                                // 51\n                                                                                                                  // 52\nFastRender[\"debugger\"].getPayload = function() {                                                                  // 53\n  return FastRender._payload;                                                                                     // 54\n};                                                                                                                // 55\n                                                                                                                  // 56\nFastRender[\"debugger\"].getPayloadJSON = function() {                                                              // 57\n  return JSON.stringify(FastRender._payload);                                                                     // 58\n};                                                                                                                // 59\n                                                                                                                  // 60\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks:fast-render/lib/client/ddp_update.js                                                      //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar reconnecting = false;                                                                                         // 1\n                                                                                                                  // 2\nvar originalLivedataData = Meteor.connection._livedata_data;                                                      // 3\nMeteor.connection._livedata_data = function(msg) {                                                                // 4\n  if(FastRender._blockDDP && !msg.frGen) {                                                                        // 5\n    FastRender[\"debugger\"].log('blocking incoming ddp', msg);                                                     // 6\n    return;                                                                                                       // 7\n  };                                                                                                              // 8\n  // fast-render adds data manually while initializing                                                            // 9\n  // But when the server sends actual data via DDP, it also tries to add                                          // 10\n  // Then we need to detect that and alter                                                                        // 11\n  //                                                                                                              // 12\n  // But we don't need to interfer with Meteor's simulation process                                               // 13\n  // That's why we are checking for serverDocs and ignore manual handling                                         // 14\n  //                                                                                                              // 15\n  // We don't need this logic after our special handling reverted back to                                         // 16\n  // original. But we can't detect when null publications completed or not                                        // 17\n  // That's why we need keep this logic                                                                           // 18\n  //                                                                                                              // 19\n  // It's okay to ignore this logic after sometime, but not sure when exactly                                     // 20\n                                                                                                                  // 21\n  if(msg.msg == 'added') {                                                                                        // 22\n    var id = IDTools.idParse(msg.id);                                                                             // 23\n    var serverDoc = this._getServerDoc(msg.collection, id);                                                       // 24\n                                                                                                                  // 25\n    if(!reconnecting && !serverDoc) {                                                                             // 26\n      var localCollection = this._mongo_livedata_collections[msg.collection];                                     // 27\n      var pendingStoreUpdates = this._updatesForUnknownStores[msg.collection];                                    // 28\n      if(localCollection) {                                                                                       // 29\n        var existingDoc = localCollection.findOne(id);                                                            // 30\n        if(existingDoc) {                                                                                         // 31\n          FastRender[\"debugger\"].log('re writing DDP for:', msg);                                                 // 32\n          AddedToChanged(existingDoc, msg);                                                                       // 33\n        }                                                                                                         // 34\n      } else if(pendingStoreUpdates) {                                                                            // 35\n        var mergedDoc = null;                                                                                     // 36\n        var existingDocs = _.filter(pendingStoreUpdates, function(doc) {                                          // 37\n          return doc.id == msg.id;                                                                                // 38\n        });                                                                                                       // 39\n                                                                                                                  // 40\n        _.each(existingDocs, function(cachedMsg) {                                                                // 41\n          mergedDoc = ApplyDDP(mergedDoc, cachedMsg);                                                             // 42\n        });                                                                                                       // 43\n                                                                                                                  // 44\n        if(mergedDoc) {                                                                                           // 45\n          FastRender[\"debugger\"].log('re writing DDP for:', msg);                                                 // 46\n          AddedToChanged(mergedDoc, msg);                                                                         // 47\n        }                                                                                                         // 48\n      }                                                                                                           // 49\n    }                                                                                                             // 50\n  }                                                                                                               // 51\n                                                                                                                  // 52\n  // if we've completed our tasks, no need of special handling                                                    // 53\n  if(!FastRender._revertedBackToOriginal && FastRender._dataReceived) {                                           // 54\n                                                                                                                  // 55\n    // This will take care of cleaning special subscription handling                                              // 56\n    // after the actual subscription comes out                                                                    // 57\n    if(msg.msg == 'ready' && !msg.frGen && FastRender._subscriptions) {                                           // 58\n      msg.subs.forEach(function(subId) {                                                                          // 59\n        var subscription = FastRender._subscriptionIdMap[subId];                                                  // 60\n        if(subscription) {                                                                                        // 61\n          FastRender[\"debugger\"].log('actual subscription completed:', subscription, subId);                      // 62\n          // we don't need to handle specially after this                                                         // 63\n          var paramsKeyMap = FastRender._subscriptions[subscription.name] || {};                                  // 64\n          delete paramsKeyMap[subscription.paramsKey];                                                            // 65\n          if(EJSON.equals(FastRender._subscriptions[subscription.name], {})) {                                    // 66\n            delete FastRender._subscriptions[subscription.name];                                                  // 67\n          }                                                                                                       // 68\n          delete FastRender._subscriptionIdMap[subId];                                                            // 69\n        }                                                                                                         // 70\n      });                                                                                                         // 71\n    }                                                                                                             // 72\n                                                                                                                  // 73\n    // if all the subscriptions have been processed,                                                              // 74\n    // there is no need to keep hijacking                                                                         // 75\n    if(EJSON.equals(FastRender._subscriptions, {})) {                                                             // 76\n      FastRender[\"debugger\"].log('fast rendering completed!');                                                    // 77\n      FastRender._revertedBackToOriginal = true;                                                                  // 78\n    }                                                                                                             // 79\n  }                                                                                                               // 80\n                                                                                                                  // 81\n  return originalLivedataData.call(this, msg);                                                                    // 82\n};                                                                                                                // 83\n                                                                                                                  // 84\nvar originalSend = Meteor.connection._send;                                                                       // 85\nMeteor.connection._send = function(msg) {                                                                         // 86\n  // if looking for connect again to the server, we must need to revert back to                                   // 87\n  // original to prevent some weird DDP issues                                                                    // 88\n  //  normally it is already reverted, but user may added subscriptions                                           // 89\n  //  in server, which are not subscribed from the client                                                         // 90\n  if(msg.msg == 'connect' && msg.session != undefined) {                                                          // 91\n    FastRender._revertedBackToOriginal = true;                                                                    // 92\n    reconnecting = true;                                                                                          // 93\n  }                                                                                                               // 94\n                                                                                                                  // 95\n  var self = this;                                                                                                // 96\n                                                                                                                  // 97\n  // if we've completed our tasks, no need of special handling                                                    // 98\n  if(!FastRender._revertedBackToOriginal && FastRender._dataReceived) {                                           // 99\n    var paramsKey = EJSON.stringify(msg.params);                                                                  // 100\n    var canSendFakeReady =                                                                                        // 101\n      msg.msg == 'sub' &&                                                                                         // 102\n      FastRender._subscriptions[msg.name] &&                                                                      // 103\n      FastRender._subscriptions[msg.name][paramsKey];                                                             // 104\n                                                                                                                  // 105\n    FastRender[\"debugger\"].log('new subscription:', msg.name);                                                    // 106\n    if(canSendFakeReady) {                                                                                        // 107\n      FastRender[\"debugger\"].log('sending fake ready for sub:', msg.name);                                        // 108\n      FastRender.injectDdpMessage(self, {msg:\"ready\",subs:[msg.id], frGen: true});                                // 109\n      // add the messageId to be handled later                                                                    // 110\n      FastRender._subscriptionIdMap[msg.id] = {                                                                   // 111\n        name: msg.name,                                                                                           // 112\n        paramsKey: paramsKey                                                                                      // 113\n      };                                                                                                          // 114\n    }                                                                                                             // 115\n  }                                                                                                               // 116\n                                                                                                                  // 117\n  return originalSend.call(this, msg);                                                                            // 118\n};                                                                                                                // 119\n                                                                                                                  // 120\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks:fast-render/lib/client/auth.js                                                            //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n// getting tokens for the first time                                                                              // 1\n//  Meteor calls Meteor._localStorage.setItem() on the boot                                                       // 2\n//  But we can do it ourselves also with this                                                                     // 3\nMeteor.startup(function() {                                                                                       // 4\n  resetToken();                                                                                                   // 5\n});                                                                                                               // 6\n                                                                                                                  // 7\n// override Meteor._localStorage methods and resetToken accordingly                                               // 8\nvar originalSetItem = Meteor._localStorage.setItem;                                                               // 9\nMeteor._localStorage.setItem = function(key, value) {                                                             // 10\n  if(key == 'Meteor.loginToken') {                                                                                // 11\n    Meteor.defer(resetToken);                                                                                     // 12\n  }                                                                                                               // 13\n  originalSetItem.call(Meteor._localStorage, key, value);                                                         // 14\n};                                                                                                                // 15\n                                                                                                                  // 16\nvar originalRemoveItem = Meteor._localStorage.removeItem;                                                         // 17\nMeteor._localStorage.removeItem = function(key) {                                                                 // 18\n  if(key == 'Meteor.loginToken') {                                                                                // 19\n    Meteor.defer(resetToken);                                                                                     // 20\n  }                                                                                                               // 21\n  originalRemoveItem.call(Meteor._localStorage, key);                                                             // 22\n}                                                                                                                 // 23\n                                                                                                                  // 24\nfunction resetToken() {                                                                                           // 25\n  var loginToken = Meteor._localStorage.getItem('Meteor.loginToken');                                             // 26\n  var loginTokenExpires = new Date(Meteor._localStorage.getItem('Meteor.loginTokenExpires'));                     // 27\n                                                                                                                  // 28\n  if(loginToken) {                                                                                                // 29\n    setToken(loginToken, loginTokenExpires);                                                                      // 30\n  } else {                                                                                                        // 31\n    setToken(null, -1);                                                                                           // 32\n  }                                                                                                               // 33\n}                                                                                                                 // 34\n                                                                                                                  // 35\nfunction setToken(loginToken, expires) {                                                                          // 36\n  Cookie.set('meteor_login_token', loginToken, {                                                                  // 37\n    path: '/',                                                                                                    // 38\n    expires: expires                                                                                              // 39\n  });                                                                                                             // 40\n}                                                                                                                 // 41\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/meteorhacks:fast-render/lib/client/boot.js                                                            //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nInjectData.getData('fast-render-data', function(payload) {                                                        // 1\n  FastRender.init(payload);                                                                                       // 2\n});                                                                                                               // 3\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]
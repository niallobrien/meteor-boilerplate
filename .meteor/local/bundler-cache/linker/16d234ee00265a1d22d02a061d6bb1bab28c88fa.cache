[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsServer = Package['accounts-base'].AccountsServer;\nvar _ = Package.underscore._;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar __coffeescriptShare, UserStatus, StatusInternals;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/mizzao_user-status/packages/mizzao_user-status.js                                                    //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n(function () {                                                                                                   // 1\n                                                                                                                 // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/mizzao:user-status/status.coffee.js                                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                                                                                                                 // 10\n/*                                                                                                               // 11\n  Apparently, the new api.export takes care of issues here. No need to attach to global namespace.               // 12\n  See http://shiggyenterprises.wordpress.com/2013/09/09/meteor-packages-in-coffeescript-0-6-5/                   // 13\n                                                                                                                 // 14\n  We may want to make UserSessions a server collection to take advantage of indices.                             // 15\n  Will implement if someone has enough online users to warrant it.                                               // 16\n */                                                                                                              // 17\nvar UserConnections, activeSession, addSession, idleSession, loginSession, onStartup, removeSession, statusEvents, tryLogoutSession;                             \n                                                                                                                 // 19\nUserConnections = new Mongo.Collection(\"user_status_sessions\", {                                                 // 20\n  connection: null                                                                                               // 21\n});                                                                                                              // 22\n                                                                                                                 // 23\nstatusEvents = new (Npm.require('events').EventEmitter)();                                                       // 24\n                                                                                                                 // 25\n                                                                                                                 // 26\n/*                                                                                                               // 27\n  Multiplex login/logout events to status.online                                                                 // 28\n                                                                                                                 // 29\n  'online' field is \"true\" if user is online, and \"false\" otherwise                                              // 30\n                                                                                                                 // 31\n  'idle' field is tri-stated:                                                                                    // 32\n  - \"true\" if user is online and not idle                                                                        // 33\n  - \"false\" if user is online and idle                                                                           // 34\n  - null if user is offline                                                                                      // 35\n */                                                                                                              // 36\n                                                                                                                 // 37\nstatusEvents.on(\"connectionLogin\", function(advice) {                                                            // 38\n  var conns, update;                                                                                             // 39\n  update = {                                                                                                     // 40\n    $set: {                                                                                                      // 41\n      'status.online': true,                                                                                     // 42\n      'status.lastLogin': {                                                                                      // 43\n        date: advice.loginTime,                                                                                  // 44\n        ipAddr: advice.ipAddr,                                                                                   // 45\n        userAgent: advice.userAgent                                                                              // 46\n      }                                                                                                          // 47\n    }                                                                                                            // 48\n  };                                                                                                             // 49\n  conns = UserConnections.find({                                                                                 // 50\n    userId: advice.userId                                                                                        // 51\n  }).fetch();                                                                                                    // 52\n  if (!_.every(conns, function(c) {                                                                              // 53\n    return c.idle;                                                                                               // 54\n  })) {                                                                                                          // 55\n    update.$set['status.idle'] = false;                                                                          // 56\n    update.$unset = {                                                                                            // 57\n      'status.lastActivity': null                                                                                // 58\n    };                                                                                                           // 59\n  }                                                                                                              // 60\n  Meteor.users.update(advice.userId, update);                                                                    // 61\n});                                                                                                              // 62\n                                                                                                                 // 63\nstatusEvents.on(\"connectionLogout\", function(advice) {                                                           // 64\n  var conns;                                                                                                     // 65\n  conns = UserConnections.find({                                                                                 // 66\n    userId: advice.userId                                                                                        // 67\n  }).fetch();                                                                                                    // 68\n  if (conns.length === 0) {                                                                                      // 69\n    Meteor.users.update(advice.userId, {                                                                         // 70\n      $set: {                                                                                                    // 71\n        'status.online': false                                                                                   // 72\n      },                                                                                                         // 73\n      $unset: {                                                                                                  // 74\n        'status.idle': null,                                                                                     // 75\n        'status.lastActivity': null                                                                              // 76\n      }                                                                                                          // 77\n    });                                                                                                          // 78\n  } else if (_.every(conns, function(c) {                                                                        // 79\n    return c.idle;                                                                                               // 80\n  })) {                                                                                                          // 81\n                                                                                                                 // 82\n    /*                                                                                                           // 83\n      All remaining connections are idle:                                                                        // 84\n      - If the last active connection quit, then we should go idle with the most recent activity                 // 85\n                                                                                                                 // 86\n      - If an idle connection quit, nothing should happen; specifically, if the                                  // 87\n        most recently active idle connection quit, we shouldn't tick the value backwards.                        // 88\n        This may result in a no-op so we can be smart and skip the update.                                       // 89\n     */                                                                                                          // 90\n    if (advice.lastActivity != null) {                                                                           // 91\n      return;                                                                                                    // 92\n    }                                                                                                            // 93\n    Meteor.users.update(advice.userId, {                                                                         // 94\n      $set: {                                                                                                    // 95\n        'status.idle': true,                                                                                     // 96\n        'status.lastActivity': _.max(_.pluck(conns, \"lastActivity\"))                                             // 97\n      }                                                                                                          // 98\n    });                                                                                                          // 99\n  }                                                                                                              // 100\n});                                                                                                              // 101\n                                                                                                                 // 102\n                                                                                                                 // 103\n/*                                                                                                               // 104\n  Multiplex idle/active events to status.idle                                                                    // 105\n  TODO: Hopefully this is quick because it's all in memory, but we can use indices if it turns out to be slow    // 106\n                                                                                                                 // 107\n  TODO: There is a race condition when switching between tabs, leaving the user inactive while idle goes from one tab to the other.\n  It can probably be smoothed out.                                                                               // 109\n */                                                                                                              // 110\n                                                                                                                 // 111\nstatusEvents.on(\"connectionIdle\", function(advice) {                                                             // 112\n  var conns;                                                                                                     // 113\n  conns = UserConnections.find({                                                                                 // 114\n    userId: advice.userId                                                                                        // 115\n  }).fetch();                                                                                                    // 116\n  if (!_.every(conns, function(c) {                                                                              // 117\n    return c.idle;                                                                                               // 118\n  })) {                                                                                                          // 119\n    return;                                                                                                      // 120\n  }                                                                                                              // 121\n  Meteor.users.update(advice.userId, {                                                                           // 122\n    $set: {                                                                                                      // 123\n      'status.idle': true,                                                                                       // 124\n      'status.lastActivity': _.max(_.pluck(conns, \"lastActivity\"))                                               // 125\n    }                                                                                                            // 126\n  });                                                                                                            // 127\n});                                                                                                              // 128\n                                                                                                                 // 129\nstatusEvents.on(\"connectionActive\", function(advice) {                                                           // 130\n  Meteor.users.update(advice.userId, {                                                                           // 131\n    $set: {                                                                                                      // 132\n      'status.idle': false                                                                                       // 133\n    },                                                                                                           // 134\n    $unset: {                                                                                                    // 135\n      'status.lastActivity': null                                                                                // 136\n    }                                                                                                            // 137\n  });                                                                                                            // 138\n});                                                                                                              // 139\n                                                                                                                 // 140\nonStartup = function(selector) {                                                                                 // 141\n  if (selector == null) {                                                                                        // 142\n    selector = {};                                                                                               // 143\n  }                                                                                                              // 144\n  return Meteor.users.update(selector, {                                                                         // 145\n    $set: {                                                                                                      // 146\n      \"status.online\": false                                                                                     // 147\n    },                                                                                                           // 148\n    $unset: {                                                                                                    // 149\n      \"status.idle\": null,                                                                                       // 150\n      \"status.lastActivity\": null                                                                                // 151\n    }                                                                                                            // 152\n  }, {                                                                                                           // 153\n    multi: true                                                                                                  // 154\n  });                                                                                                            // 155\n};                                                                                                               // 156\n                                                                                                                 // 157\n                                                                                                                 // 158\n/*                                                                                                               // 159\n  Local session modifification functions - also used in testing                                                  // 160\n */                                                                                                              // 161\n                                                                                                                 // 162\naddSession = function(connection) {                                                                              // 163\n  UserConnections.upsert(connection.id, {                                                                        // 164\n    $set: {                                                                                                      // 165\n      ipAddr: connection.clientAddress,                                                                          // 166\n      userAgent: connection.httpHeaders['user-agent']                                                            // 167\n    }                                                                                                            // 168\n  });                                                                                                            // 169\n};                                                                                                               // 170\n                                                                                                                 // 171\nloginSession = function(connection, date, userId) {                                                              // 172\n  UserConnections.upsert(connection.id, {                                                                        // 173\n    $set: {                                                                                                      // 174\n      userId: userId,                                                                                            // 175\n      loginTime: date                                                                                            // 176\n    }                                                                                                            // 177\n  });                                                                                                            // 178\n  statusEvents.emit(\"connectionLogin\", {                                                                         // 179\n    userId: userId,                                                                                              // 180\n    connectionId: connection.id,                                                                                 // 181\n    ipAddr: connection.clientAddress,                                                                            // 182\n    userAgent: connection.httpHeaders['user-agent'],                                                             // 183\n    loginTime: date                                                                                              // 184\n  });                                                                                                            // 185\n};                                                                                                               // 186\n                                                                                                                 // 187\ntryLogoutSession = function(connection, date) {                                                                  // 188\n  var conn;                                                                                                      // 189\n  if ((conn = UserConnections.findOne({                                                                          // 190\n    _id: connection.id,                                                                                          // 191\n    userId: {                                                                                                    // 192\n      $exists: true                                                                                              // 193\n    }                                                                                                            // 194\n  })) == null) {                                                                                                 // 195\n    return false;                                                                                                // 196\n  }                                                                                                              // 197\n  UserConnections.upsert(connection.id, {                                                                        // 198\n    $unset: {                                                                                                    // 199\n      userId: null,                                                                                              // 200\n      loginTime: null                                                                                            // 201\n    }                                                                                                            // 202\n  });                                                                                                            // 203\n  return statusEvents.emit(\"connectionLogout\", {                                                                 // 204\n    userId: conn.userId,                                                                                         // 205\n    connectionId: connection.id,                                                                                 // 206\n    lastActivity: conn.lastActivity,                                                                             // 207\n    logoutTime: date                                                                                             // 208\n  });                                                                                                            // 209\n};                                                                                                               // 210\n                                                                                                                 // 211\nremoveSession = function(connection, date) {                                                                     // 212\n  tryLogoutSession(connection, date);                                                                            // 213\n  UserConnections.remove(connection.id);                                                                         // 214\n};                                                                                                               // 215\n                                                                                                                 // 216\nidleSession = function(connection, date, userId) {                                                               // 217\n  UserConnections.update(connection.id, {                                                                        // 218\n    $set: {                                                                                                      // 219\n      idle: true,                                                                                                // 220\n      lastActivity: date                                                                                         // 221\n    }                                                                                                            // 222\n  });                                                                                                            // 223\n  statusEvents.emit(\"connectionIdle\", {                                                                          // 224\n    userId: userId,                                                                                              // 225\n    connectionId: connection.id,                                                                                 // 226\n    lastActivity: date                                                                                           // 227\n  });                                                                                                            // 228\n};                                                                                                               // 229\n                                                                                                                 // 230\nactiveSession = function(connection, date, userId) {                                                             // 231\n  UserConnections.update(connection.id, {                                                                        // 232\n    $set: {                                                                                                      // 233\n      idle: false                                                                                                // 234\n    },                                                                                                           // 235\n    $unset: {                                                                                                    // 236\n      lastActivity: null                                                                                         // 237\n    }                                                                                                            // 238\n  });                                                                                                            // 239\n  statusEvents.emit(\"connectionActive\", {                                                                        // 240\n    userId: userId,                                                                                              // 241\n    connectionId: connection.id,                                                                                 // 242\n    lastActivity: date                                                                                           // 243\n  });                                                                                                            // 244\n};                                                                                                               // 245\n                                                                                                                 // 246\n                                                                                                                 // 247\n/*                                                                                                               // 248\n  Handlers for various client-side events                                                                        // 249\n */                                                                                                              // 250\n                                                                                                                 // 251\nMeteor.startup(onStartup);                                                                                       // 252\n                                                                                                                 // 253\nMeteor.onConnection(function(connection) {                                                                       // 254\n  addSession(connection);                                                                                        // 255\n  return connection.onClose(function() {                                                                         // 256\n    return removeSession(connection, new Date());                                                                // 257\n  });                                                                                                            // 258\n});                                                                                                              // 259\n                                                                                                                 // 260\nAccounts.onLogin(function(info) {                                                                                // 261\n  return loginSession(info.connection, new Date(), info.user._id);                                               // 262\n});                                                                                                              // 263\n                                                                                                                 // 264\nMeteor.publish(null, function() {                                                                                // 265\n  if (this._session == null) {                                                                                   // 266\n    return [];                                                                                                   // 267\n  }                                                                                                              // 268\n  if (this.userId == null) {                                                                                     // 269\n    tryLogoutSession(this._session.connectionHandle, new Date());                                                // 270\n  }                                                                                                              // 271\n  return [];                                                                                                     // 272\n});                                                                                                              // 273\n                                                                                                                 // 274\nMeteor.methods({                                                                                                 // 275\n  \"user-status-idle\": function(timestamp) {                                                                      // 276\n    var date;                                                                                                    // 277\n    check(timestamp, Match.OneOf(null, void 0, Date, Number));                                                   // 278\n    date = timestamp != null ? new Date(timestamp) : new Date();                                                 // 279\n    idleSession(this.connection, date, this.userId);                                                             // 280\n  },                                                                                                             // 281\n  \"user-status-active\": function(timestamp) {                                                                    // 282\n    var date;                                                                                                    // 283\n    check(timestamp, Match.OneOf(null, void 0, Date, Number));                                                   // 284\n    date = timestamp != null ? new Date(timestamp) : new Date();                                                 // 285\n    activeSession(this.connection, date, this.userId);                                                           // 286\n  }                                                                                                              // 287\n});                                                                                                              // 288\n                                                                                                                 // 289\nUserStatus = {                                                                                                   // 290\n  connections: UserConnections,                                                                                  // 291\n  events: statusEvents                                                                                           // 292\n};                                                                                                               // 293\n                                                                                                                 // 294\nStatusInternals = {                                                                                              // 295\n  onStartup: onStartup,                                                                                          // 296\n  addSession: addSession,                                                                                        // 297\n  removeSession: removeSession,                                                                                  // 298\n  loginSession: loginSession,                                                                                    // 299\n  tryLogoutSession: tryLogoutSession,                                                                            // 300\n  idleSession: idleSession,                                                                                      // 301\n  activeSession: activeSession                                                                                   // 302\n};                                                                                                               // 303\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 // 305\n}).call(this);                                                                                                   // 306\n                                                                                                                 // 307\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['mizzao:user-status'] = {\n  UserStatus: UserStatus,\n  StatusInternals: StatusInternals\n};\n\n})();\n","servePath":"/packages/mizzao_user-status.js","sourceMap":{"version":3,"sources":["/packages/mizzao_user-status/packages/mizzao_user-status.js"],"names":[],"mappingsuH","file":"/packages/mizzao_user-status.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/mizzao:user-status/status.coffee.js                                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n\n/*\n  Apparently, the new api.export takes care of issues here. No need to attach to global namespace.\n  See http://shiggyenterprises.wordpress.com/2013/09/09/meteor-packages-in-coffeescript-0-6-5/\n\n  We may want to make UserSessions a server collection to take advantage of indices.\n  Will implement if someone has enough online users to warrant it.\n */\nvar UserConnections, activeSession, addSession, idleSession, loginSession, onStartup, removeSession, statusEvents, tryLogoutSession;                             \n\nUserConnections = new Mongo.Collection(\"user_status_sessions\", {\n  connection: null\n});\n\nstatusEvents = new (Npm.require('events').EventEmitter)();\n\n\n/*\n  Multiplex login/logout events to status.online\n\n  'online' field is \"true\" if user is online, and \"false\" otherwise\n\n  'idle' field is tri-stated:\n  - \"true\" if user is online and not idle\n  - \"false\" if user is online and idle\n  - null if user is offline\n */\n\nstatusEvents.on(\"connectionLogin\", function(advice) {\n  var conns, update;\n  update = {\n    $set: {\n      'status.online': true,\n      'status.lastLogin': {\n        date: advice.loginTime,\n        ipAddr: advice.ipAddr,\n        userAgent: advice.userAgent\n      }\n    }\n  };\n  conns = UserConnections.find({\n    userId: advice.userId\n  }).fetch();\n  if (!_.every(conns, function(c) {\n    return c.idle;\n  })) {\n    update.$set['status.idle'] = false;\n    update.$unset = {\n      'status.lastActivity': null\n    };\n  }\n  Meteor.users.update(advice.userId, update);\n});\n\nstatusEvents.on(\"connectionLogout\", function(advice) {\n  var conns;\n  conns = UserConnections.find({\n    userId: advice.userId\n  }).fetch();\n  if (conns.length === 0) {\n    Meteor.users.update(advice.userId, {\n      $set: {\n        'status.online': false\n      },\n      $unset: {\n        'status.idle': null,\n        'status.lastActivity': null\n      }\n    });\n  } else if (_.every(conns, function(c) {\n    return c.idle;\n  })) {\n\n    /*\n      All remaining connections are idle:\n      - If the last active connection quit, then we should go idle with the most recent activity\n    \n      - If an idle connection quit, nothing should happen; specifically, if the\n        most recently active idle connection quit, we shouldn't tick the value backwards.\n        This may result in a no-op so we can be smart and skip the update.\n     */\n    if (advice.lastActivity != null) {\n      return;\n    }\n    Meteor.users.update(advice.userId, {\n      $set: {\n        'status.idle': true,\n        'status.lastActivity': _.max(_.pluck(conns, \"lastActivity\"))\n      }\n    });\n  }\n});\n\n\n/*\n  Multiplex idle/active events to status.idle\n  TODO: Hopefully this is quick because it's all in memory, but we can use indices if it turns out to be slow\n\n  TODO: There is a race condition when switching between tabs, leaving the user inactive while idle goes from one tab to the other.\n  It can probably be smoothed out.\n */\n\nstatusEvents.on(\"connectionIdle\", function(advice) {\n  var conns;\n  conns = UserConnections.find({\n    userId: advice.userId\n  }).fetch();\n  if (!_.every(conns, function(c) {\n    return c.idle;\n  })) {\n    return;\n  }\n  Meteor.users.update(advice.userId, {\n    $set: {\n      'status.idle': true,\n      'status.lastActivity': _.max(_.pluck(conns, \"lastActivity\"))\n    }\n  });\n});\n\nstatusEvents.on(\"connectionActive\", function(advice) {\n  Meteor.users.update(advice.userId, {\n    $set: {\n      'status.idle': false\n    },\n    $unset: {\n      'status.lastActivity': null\n    }\n  });\n});\n\nonStartup = function(selector) {\n  if (selector == null) {\n    selector = {};\n  }\n  return Meteor.users.update(selector, {\n    $set: {\n      \"status.online\": false\n    },\n    $unset: {\n      \"status.idle\": null,\n      \"status.lastActivity\": null\n    }\n  }, {\n    multi: true\n  });\n};\n\n\n/*\n  Local session modifification functions - also used in testing\n */\n\naddSession = function(connection) {\n  UserConnections.upsert(connection.id, {\n    $set: {\n      ipAddr: connection.clientAddress,\n      userAgent: connection.httpHeaders['user-agent']\n    }\n  });\n};\n\nloginSession = function(connection, date, userId) {\n  UserConnections.upsert(connection.id, {\n    $set: {\n      userId: userId,\n      loginTime: date\n    }\n  });\n  statusEvents.emit(\"connectionLogin\", {\n    userId: userId,\n    connectionId: connection.id,\n    ipAddr: connection.clientAddress,\n    userAgent: connection.httpHeaders['user-agent'],\n    loginTime: date\n  });\n};\n\ntryLogoutSession = function(connection, date) {\n  var conn;\n  if ((conn = UserConnections.findOne({\n    _id: connection.id,\n    userId: {\n      $exists: true\n    }\n  })) == null) {\n    return false;\n  }\n  UserConnections.upsert(connection.id, {\n    $unset: {\n      userId: null,\n      loginTime: null\n    }\n  });\n  return statusEvents.emit(\"connectionLogout\", {\n    userId: conn.userId,\n    connectionId: connection.id,\n    lastActivity: conn.lastActivity,\n    logoutTime: date\n  });\n};\n\nremoveSession = function(connection, date) {\n  tryLogoutSession(connection, date);\n  UserConnections.remove(connection.id);\n};\n\nidleSession = function(connection, date, userId) {\n  UserConnections.update(connection.id, {\n    $set: {\n      idle: true,\n      lastActivity: date\n    }\n  });\n  statusEvents.emit(\"connectionIdle\", {\n    userId: userId,\n    connectionId: connection.id,\n    lastActivity: date\n  });\n};\n\nactiveSession = function(connection, date, userId) {\n  UserConnections.update(connection.id, {\n    $set: {\n      idle: false\n    },\n    $unset: {\n      lastActivity: null\n    }\n  });\n  statusEvents.emit(\"connectionActive\", {\n    userId: userId,\n    connectionId: connection.id,\n    lastActivity: date\n  });\n};\n\n\n/*\n  Handlers for various client-side events\n */\n\nMeteor.startup(onStartup);\n\nMeteor.onConnection(function(connection) {\n  addSession(connection);\n  return connection.onClose(function() {\n    return removeSession(connection, new Date());\n  });\n});\n\nAccounts.onLogin(function(info) {\n  return loginSession(info.connection, new Date(), info.user._id);\n});\n\nMeteor.publish(null, function() {\n  if (this._session == null) {\n    return [];\n  }\n  if (this.userId == null) {\n    tryLogoutSession(this._session.connectionHandle, new Date());\n  }\n  return [];\n});\n\nMeteor.methods({\n  \"user-status-idle\": function(timestamp) {\n    var date;\n    check(timestamp, Match.OneOf(null, void 0, Date, Number));\n    date = timestamp != null ? new Date(timestamp) : new Date();\n    idleSession(this.connection, date, this.userId);\n  },\n  \"user-status-active\": function(timestamp) {\n    var date;\n    check(timestamp, Match.OneOf(null, void 0, Date, Number));\n    date = timestamp != null ? new Date(timestamp) : new Date();\n    activeSession(this.connection, date, this.userId);\n  }\n});\n\nUserStatus = {\n  connections: UserConnections,\n  events: statusEvents\n};\n\nStatusInternals = {\n  onStartup: onStartup,\n  addSession: addSession,\n  removeSession: removeSession,\n  loginSession: loginSession,\n  tryLogoutSession: tryLogoutSession,\n  idleSession: idleSession,\n  activeSession: activeSession\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]
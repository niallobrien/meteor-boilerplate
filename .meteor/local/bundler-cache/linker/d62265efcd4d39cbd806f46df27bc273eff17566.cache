[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar DDP = Package['ddp-client'].DDP;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar MongoID = Package['mongo-id'].MongoID;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\n\n/* Package-scope variables */\nvar LocalCollectionDriver, Mongo;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/local_collection_driver.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nLocalCollectionDriver = function () {                                                                                 // 1\n  var self = this;                                                                                                    // 2\n  self.noConnCollections = {};                                                                                        // 3\n};                                                                                                                    // 4\n                                                                                                                      // 5\nvar ensureCollection = function (name, collections) {                                                                 // 6\n  if (!(name in collections))                                                                                         // 7\n    collections[name] = new LocalCollection(name);                                                                    // 8\n  return collections[name];                                                                                           // 9\n};                                                                                                                    // 10\n                                                                                                                      // 11\n_.extend(LocalCollectionDriver.prototype, {                                                                           // 12\n  open: function (name, conn) {                                                                                       // 13\n    var self = this;                                                                                                  // 14\n    if (!name)                                                                                                        // 15\n      return new LocalCollection;                                                                                     // 16\n    if (! conn) {                                                                                                     // 17\n      return ensureCollection(name, self.noConnCollections);                                                          // 18\n    }                                                                                                                 // 19\n    if (! conn._mongo_livedata_collections)                                                                           // 20\n      conn._mongo_livedata_collections = {};                                                                          // 21\n    // XXX is there a way to keep track of a connection's collections without                                         // 22\n    // dangling it off the connection object?                                                                         // 23\n    return ensureCollection(name, conn._mongo_livedata_collections);                                                  // 24\n  }                                                                                                                   // 25\n});                                                                                                                   // 26\n                                                                                                                      // 27\n// singleton                                                                                                          // 28\nLocalCollectionDriver = new LocalCollectionDriver;                                                                    // 29\n                                                                                                                      // 30\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/collection.js                                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// options.connection, if given, is a LivedataClient or LivedataServer                                                // 1\n// XXX presently there is no way to destroy/clean up a Collection                                                     // 2\n                                                                                                                      // 3\n/**                                                                                                                   // 4\n * @summary Namespace for MongoDB-related items                                                                       // 5\n * @namespace                                                                                                         // 6\n */                                                                                                                   // 7\nMongo = {};                                                                                                           // 8\n                                                                                                                      // 9\n/**                                                                                                                   // 10\n * @summary Constructor for a Collection                                                                              // 11\n * @locus Anywhere                                                                                                    // 12\n * @instancename collection                                                                                           // 13\n * @class                                                                                                             // 14\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]                                                                                          // 16\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n                                                                                                                      // 19\n - **`'STRING'`**: random strings                                                                                     // 20\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values                                                 // 21\n                                                                                                                      // 22\nThe default id generation technique is `'STRING'`.                                                                    // 23\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n */                                                                                                                   // 25\nMongo.Collection = function (name, options) {                                                                         // 26\n  var self = this;                                                                                                    // 27\n  if (! (self instanceof Mongo.Collection))                                                                           // 28\n    throw new Error('use \"new\" to construct a Mongo.Collection');                                                     // 29\n                                                                                                                      // 30\n  if (!name && (name !== null)) {                                                                                     // 31\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +                                         // 32\n                  \"saved or synchronized over the network. (Pass null for \" +                                         // 33\n                  \"the collection name to turn off this warning.)\");                                                  // 34\n    name = null;                                                                                                      // 35\n  }                                                                                                                   // 36\n                                                                                                                      // 37\n  if (name !== null && typeof name !== \"string\") {                                                                    // 38\n    throw new Error(                                                                                                  // 39\n      \"First argument to new Mongo.Collection must be a string or null\");                                             // 40\n  }                                                                                                                   // 41\n                                                                                                                      // 42\n  if (options && options.methods) {                                                                                   // 43\n    // Backwards compatibility hack with original signature (which passed                                             // 44\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"                                // 45\n    // method.)                                                                                                       // 46\n    // XXX remove before 1.0                                                                                          // 47\n    options = {connection: options};                                                                                  // 48\n  }                                                                                                                   // 49\n  // Backwards compatibility: \"connection\" used to be called \"manager\".                                               // 50\n  if (options && options.manager && !options.connection) {                                                            // 51\n    options.connection = options.manager;                                                                             // 52\n  }                                                                                                                   // 53\n  options = _.extend({                                                                                                // 54\n    connection: undefined,                                                                                            // 55\n    idGeneration: 'STRING',                                                                                           // 56\n    transform: null,                                                                                                  // 57\n    _driver: undefined,                                                                                               // 58\n    _preventAutopublish: false                                                                                        // 59\n  }, options);                                                                                                        // 60\n                                                                                                                      // 61\n  switch (options.idGeneration) {                                                                                     // 62\n  case 'MONGO':                                                                                                       // 63\n    self._makeNewID = function () {                                                                                   // 64\n      var src = name ? DDP.randomStream('/collection/' + name) : Random;                                              // 65\n      return new Mongo.ObjectID(src.hexString(24));                                                                   // 66\n    };                                                                                                                // 67\n    break;                                                                                                            // 68\n  case 'STRING':                                                                                                      // 69\n  default:                                                                                                            // 70\n    self._makeNewID = function () {                                                                                   // 71\n      var src = name ? DDP.randomStream('/collection/' + name) : Random;                                              // 72\n      return src.id();                                                                                                // 73\n    };                                                                                                                // 74\n    break;                                                                                                            // 75\n  }                                                                                                                   // 76\n                                                                                                                      // 77\n  self._transform = LocalCollection.wrapTransform(options.transform);                                                 // 78\n                                                                                                                      // 79\n  if (! name || options.connection === null)                                                                          // 80\n    // note: nameless collections never have a connection                                                             // 81\n    self._connection = null;                                                                                          // 82\n  else if (options.connection)                                                                                        // 83\n    self._connection = options.connection;                                                                            // 84\n  else if (Meteor.isClient)                                                                                           // 85\n    self._connection = Meteor.connection;                                                                             // 86\n  else                                                                                                                // 87\n    self._connection = Meteor.server;                                                                                 // 88\n                                                                                                                      // 89\n  if (!options._driver) {                                                                                             // 90\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==                                         // 91\n    // null. We should fully support the case of \"want to use a Mongo-backed                                          // 92\n    // collection from Node code without webapp\", but we don't yet.                                                   // 93\n    // #MeteorServerNull                                                                                              // 94\n    if (name && self._connection === Meteor.server &&                                                                 // 95\n        typeof MongoInternals !== \"undefined\" &&                                                                      // 96\n        MongoInternals.defaultRemoteCollectionDriver) {                                                               // 97\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();                                               // 98\n    } else {                                                                                                          // 99\n      options._driver = LocalCollectionDriver;                                                                        // 100\n    }                                                                                                                 // 101\n  }                                                                                                                   // 102\n                                                                                                                      // 103\n  self._collection = options._driver.open(name, self._connection);                                                    // 104\n  self._name = name;                                                                                                  // 105\n  self._driver = options._driver;                                                                                     // 106\n                                                                                                                      // 107\n  if (self._connection && self._connection.registerStore) {                                                           // 108\n    // OK, we're going to be a slave, replicating some remote                                                         // 109\n    // database, except possibly with some temporary divergence while                                                 // 110\n    // we have unacknowledged RPC's.                                                                                  // 111\n    var ok = self._connection.registerStore(name, {                                                                   // 112\n      // Called at the beginning of a batch of updates. batchSize is the number                                       // 113\n      // of update calls to expect.                                                                                   // 114\n      //                                                                                                              // 115\n      // XXX This interface is pretty janky. reset probably ought to go back to                                       // 116\n      // being its own function, and callers shouldn't have to calculate                                              // 117\n      // batchSize. The optimization of not calling pause/remove should be                                            // 118\n      // delayed until later: the first call to update() should buffer its                                            // 119\n      // message, and then we can either directly apply it at endUpdate time if                                       // 120\n      // it was the only update, or do pauseObservers/apply/apply at the next                                         // 121\n      // update() if there's another one.                                                                             // 122\n      beginUpdate: function (batchSize, reset) {                                                                      // 123\n        // pause observers so users don't see flicker when updating several                                           // 124\n        // objects at once (including the post-reconnect reset-and-reapply                                            // 125\n        // stage), and so that a re-sorting of a query can take advantage of the                                      // 126\n        // full _diffQuery moved calculation instead of applying change one at a                                      // 127\n        // time.                                                                                                      // 128\n        if (batchSize > 1 || reset)                                                                                   // 129\n          self._collection.pauseObservers();                                                                          // 130\n                                                                                                                      // 131\n        if (reset)                                                                                                    // 132\n          self._collection.remove({});                                                                                // 133\n      },                                                                                                              // 134\n                                                                                                                      // 135\n      // Apply an update.                                                                                             // 136\n      // XXX better specify this interface (not in terms of a wire message)?                                          // 137\n      update: function (msg) {                                                                                        // 138\n        var mongoId = MongoID.idParse(msg.id);                                                                        // 139\n        var doc = self._collection.findOne(mongoId);                                                                  // 140\n                                                                                                                      // 141\n        // Is this a \"replace the whole doc\" message coming from the quiescence                                       // 142\n        // of method writes to an object? (Note that 'undefined' is a valid                                           // 143\n        // value meaning \"remove it\".)                                                                                // 144\n        if (msg.msg === 'replace') {                                                                                  // 145\n          var replace = msg.replace;                                                                                  // 146\n          if (!replace) {                                                                                             // 147\n            if (doc)                                                                                                  // 148\n              self._collection.remove(mongoId);                                                                       // 149\n          } else if (!doc) {                                                                                          // 150\n            self._collection.insert(replace);                                                                         // 151\n          } else {                                                                                                    // 152\n            // XXX check that replace has no $ ops                                                                    // 153\n            self._collection.update(mongoId, replace);                                                                // 154\n          }                                                                                                           // 155\n          return;                                                                                                     // 156\n        } else if (msg.msg === 'added') {                                                                             // 157\n          if (doc) {                                                                                                  // 158\n            throw new Error(\"Expected not to find a document already present for an add\");                            // 159\n          }                                                                                                           // 160\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));                                              // 161\n        } else if (msg.msg === 'removed') {                                                                           // 162\n          if (!doc)                                                                                                   // 163\n            throw new Error(\"Expected to find a document already present for removed\");                               // 164\n          self._collection.remove(mongoId);                                                                           // 165\n        } else if (msg.msg === 'changed') {                                                                           // 166\n          if (!doc)                                                                                                   // 167\n            throw new Error(\"Expected to find a document to change\");                                                 // 168\n          if (!_.isEmpty(msg.fields)) {                                                                               // 169\n            var modifier = {};                                                                                        // 170\n            _.each(msg.fields, function (value, key) {                                                                // 171\n              if (value === undefined) {                                                                              // 172\n                if (!modifier.$unset)                                                                                 // 173\n                  modifier.$unset = {};                                                                               // 174\n                modifier.$unset[key] = 1;                                                                             // 175\n              } else {                                                                                                // 176\n                if (!modifier.$set)                                                                                   // 177\n                  modifier.$set = {};                                                                                 // 178\n                modifier.$set[key] = value;                                                                           // 179\n              }                                                                                                       // 180\n            });                                                                                                       // 181\n            self._collection.update(mongoId, modifier);                                                               // 182\n          }                                                                                                           // 183\n        } else {                                                                                                      // 184\n          throw new Error(\"I don't know how to deal with this message\");                                              // 185\n        }                                                                                                             // 186\n                                                                                                                      // 187\n      },                                                                                                              // 188\n                                                                                                                      // 189\n      // Called at the end of a batch of updates.                                                                     // 190\n      endUpdate: function () {                                                                                        // 191\n        self._collection.resumeObservers();                                                                           // 192\n      },                                                                                                              // 193\n                                                                                                                      // 194\n      // Called around method stub invocations to capture the original versions                                       // 195\n      // of modified documents.                                                                                       // 196\n      saveOriginals: function () {                                                                                    // 197\n        self._collection.saveOriginals();                                                                             // 198\n      },                                                                                                              // 199\n      retrieveOriginals: function () {                                                                                // 200\n        return self._collection.retrieveOriginals();                                                                  // 201\n      },                                                                                                              // 202\n                                                                                                                      // 203\n      // Used to preserve current versions of documents across a store reset.                                         // 204\n      getDoc: function(id) {                                                                                          // 205\n        return self.findOne(id);                                                                                      // 206\n      },                                                                                                              // 207\n    });                                                                                                               // 208\n                                                                                                                      // 209\n    if (!ok)                                                                                                          // 210\n      throw new Error(\"There is already a collection named '\" + name + \"'\");                                          // 211\n  }                                                                                                                   // 212\n                                                                                                                      // 213\n  self._defineMutationMethods();                                                                                      // 214\n                                                                                                                      // 215\n  // autopublish                                                                                                      // 216\n  if (Package.autopublish && !options._preventAutopublish && self._connection                                         // 217\n      && self._connection.publish) {                                                                                  // 218\n    self._connection.publish(null, function () {                                                                      // 219\n      return self.find();                                                                                             // 220\n    }, {is_auto: true});                                                                                              // 221\n  }                                                                                                                   // 222\n};                                                                                                                    // 223\n                                                                                                                      // 224\n///                                                                                                                   // 225\n/// Main collection API                                                                                               // 226\n///                                                                                                                   // 227\n                                                                                                                      // 228\n                                                                                                                      // 229\n_.extend(Mongo.Collection.prototype, {                                                                                // 230\n                                                                                                                      // 231\n  _getFindSelector: function (args) {                                                                                 // 232\n    if (args.length == 0)                                                                                             // 233\n      return {};                                                                                                      // 234\n    else                                                                                                              // 235\n      return args[0];                                                                                                 // 236\n  },                                                                                                                  // 237\n                                                                                                                      // 238\n  _getFindOptions: function (args) {                                                                                  // 239\n    var self = this;                                                                                                  // 240\n    if (args.length < 2) {                                                                                            // 241\n      return { transform: self._transform };                                                                          // 242\n    } else {                                                                                                          // 243\n      check(args[1], Match.Optional(Match.ObjectIncluding({                                                           // 244\n        fields: Match.Optional(Match.OneOf(Object, undefined)),                                                       // 245\n        sort: Match.Optional(Match.OneOf(Object, Array, undefined)),                                                  // 246\n        limit: Match.Optional(Match.OneOf(Number, undefined)),                                                        // 247\n        skip: Match.Optional(Match.OneOf(Number, undefined))                                                          // 248\n     })));                                                                                                            // 249\n                                                                                                                      // 250\n      return _.extend({                                                                                               // 251\n        transform: self._transform                                                                                    // 252\n      }, args[1]);                                                                                                    // 253\n    }                                                                                                                 // 254\n  },                                                                                                                  // 255\n                                                                                                                      // 256\n  /**                                                                                                                 // 257\n   * @summary Find the documents in a collection that match the selector.                                             // 258\n   * @locus Anywhere                                                                                                  // 259\n   * @method find                                                                                                     // 260\n   * @memberOf Mongo.Collection                                                                                       // 261\n   * @instance                                                                                                        // 262\n   * @param {MongoSelector} [selector] A query describing the documents to find                                       // 263\n   * @param {Object} [options]                                                                                        // 264\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     // 265\n   * @param {Number} options.skip Number of results to skip at the beginning                                          // 266\n   * @param {Number} options.limit Maximum number of results to return                                                // 267\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           // 268\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity               // 269\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Mongo.Cursor}                                                                                          // 271\n   */                                                                                                                 // 272\n  find: function (/* selector, options */) {                                                                          // 273\n    // Collection.find() (return all docs) behaves differently                                                        // 274\n    // from Collection.find(undefined) (return 0 docs).  so be                                                        // 275\n    // careful about the length of arguments.                                                                         // 276\n    var self = this;                                                                                                  // 277\n    var argArray = _.toArray(arguments);                                                                              // 278\n    return self._collection.find(self._getFindSelector(argArray),                                                     // 279\n                                 self._getFindOptions(argArray));                                                     // 280\n  },                                                                                                                  // 281\n                                                                                                                      // 282\n  /**                                                                                                                 // 283\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options.                // 284\n   * @locus Anywhere                                                                                                  // 285\n   * @method findOne                                                                                                  // 286\n   * @memberOf Mongo.Collection                                                                                       // 287\n   * @instance                                                                                                        // 288\n   * @param {MongoSelector} [selector] A query describing the documents to find                                       // 289\n   * @param {Object} [options]                                                                                        // 290\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     // 291\n   * @param {Number} options.skip Number of results to skip at the beginning                                          // 292\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           // 293\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity                   // 294\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}                                                                                                // 296\n   */                                                                                                                 // 297\n  findOne: function (/* selector, options */) {                                                                       // 298\n    var self = this;                                                                                                  // 299\n    var argArray = _.toArray(arguments);                                                                              // 300\n    return self._collection.findOne(self._getFindSelector(argArray),                                                  // 301\n                                    self._getFindOptions(argArray));                                                  // 302\n  }                                                                                                                   // 303\n                                                                                                                      // 304\n});                                                                                                                   // 305\n                                                                                                                      // 306\nMongo.Collection._publishCursor = function (cursor, sub, collection) {                                                // 307\n  var observeHandle = cursor.observeChanges({                                                                         // 308\n    added: function (id, fields) {                                                                                    // 309\n      sub.added(collection, id, fields);                                                                              // 310\n    },                                                                                                                // 311\n    changed: function (id, fields) {                                                                                  // 312\n      sub.changed(collection, id, fields);                                                                            // 313\n    },                                                                                                                // 314\n    removed: function (id) {                                                                                          // 315\n      sub.removed(collection, id);                                                                                    // 316\n    }                                                                                                                 // 317\n  });                                                                                                                 // 318\n                                                                                                                      // 319\n  // We don't call sub.ready() here: it gets called in livedata_server, after                                         // 320\n  // possibly calling _publishCursor on multiple returned cursors.                                                    // 321\n                                                                                                                      // 322\n  // register stop callback (expects lambda w/ no args).                                                              // 323\n  sub.onStop(function () {observeHandle.stop();});                                                                    // 324\n};                                                                                                                    // 325\n                                                                                                                      // 326\n// protect against dangerous selectors.  falsey and {_id: falsey} are both                                            // 327\n// likely programmer error, and not what you want, particularly for destructive                                       // 328\n// operations.  JS regexps don't serialize over DDP but can be trivially                                              // 329\n// replaced by $regex.                                                                                                // 330\nMongo.Collection._rewriteSelector = function (selector) {                                                             // 331\n  // shorthand -- scalars match _id                                                                                   // 332\n  if (LocalCollection._selectorIsId(selector))                                                                        // 333\n    selector = {_id: selector};                                                                                       // 334\n                                                                                                                      // 335\n  if (_.isArray(selector)) {                                                                                          // 336\n    // This is consistent with the Mongo console itself; if we don't do this                                          // 337\n    // check passing an empty array ends up selecting all items                                                       // 338\n    throw new Error(\"Mongo selector can't be an array.\");                                                             // 339\n  }                                                                                                                   // 340\n                                                                                                                      // 341\n  if (!selector || (('_id' in selector) && !selector._id))                                                            // 342\n    // can't match anything                                                                                           // 343\n    return {_id: Random.id()};                                                                                        // 344\n                                                                                                                      // 345\n  var ret = {};                                                                                                       // 346\n  _.each(selector, function (value, key) {                                                                            // 347\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}                                                // 348\n    if (value instanceof RegExp) {                                                                                    // 349\n      ret[key] = convertRegexpToMongoSelector(value);                                                                 // 350\n    } else if (value && value.$regex instanceof RegExp) {                                                             // 351\n      ret[key] = convertRegexpToMongoSelector(value.$regex);                                                          // 352\n      // if value is {$regex: /foo/, $options: ...} then $options                                                     // 353\n      // override the ones set on $regex.                                                                             // 354\n      if (value.$options !== undefined)                                                                               // 355\n        ret[key].$options = value.$options;                                                                           // 356\n    }                                                                                                                 // 357\n    else if (_.contains(['$or','$and','$nor'], key)) {                                                                // 358\n      // Translate lower levels of $and/$or/$nor                                                                      // 359\n      ret[key] = _.map(value, function (v) {                                                                          // 360\n        return Mongo.Collection._rewriteSelector(v);                                                                  // 361\n      });                                                                                                             // 362\n    } else {                                                                                                          // 363\n      ret[key] = value;                                                                                               // 364\n    }                                                                                                                 // 365\n  });                                                                                                                 // 366\n  return ret;                                                                                                         // 367\n};                                                                                                                    // 368\n                                                                                                                      // 369\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}                                                 // 370\n// selector                                                                                                           // 371\nvar convertRegexpToMongoSelector = function (regexp) {                                                                // 372\n  check(regexp, RegExp); // safety belt                                                                               // 373\n                                                                                                                      // 374\n  var selector = {$regex: regexp.source};                                                                             // 375\n  var regexOptions = '';                                                                                              // 376\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options                                                // 377\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.                                                  // 378\n  if (regexp.ignoreCase)                                                                                              // 379\n    regexOptions += 'i';                                                                                              // 380\n  if (regexp.multiline)                                                                                               // 381\n    regexOptions += 'm';                                                                                              // 382\n  if (regexOptions)                                                                                                   // 383\n    selector.$options = regexOptions;                                                                                 // 384\n                                                                                                                      // 385\n  return selector;                                                                                                    // 386\n};                                                                                                                    // 387\n                                                                                                                      // 388\nvar throwIfSelectorIsNotId = function (selector, methodName) {                                                        // 389\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                                      // 390\n    throw new Meteor.Error(                                                                                           // 391\n      403, \"Not permitted. Untrusted code may only \" + methodName +                                                   // 392\n        \" documents by ID.\");                                                                                         // 393\n  }                                                                                                                   // 394\n};                                                                                                                    // 395\n                                                                                                                      // 396\n// 'insert' immediately returns the inserted document's new _id.                                                      // 397\n// The others return values immediately if you are in a stub, an in-memory                                            // 398\n// unmanaged collection, or a mongo-backed collection and you don't pass a                                            // 399\n// callback. 'update' and 'remove' return the number of affected                                                      // 400\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an                                        // 401\n// insert happened, 'insertedId'.                                                                                     // 402\n//                                                                                                                    // 403\n// Otherwise, the semantics are exactly like other methods: they take                                                 // 404\n// a callback as an optional last argument; if no callback is                                                         // 405\n// provided, they block until the operation is complete, and throw an                                                 // 406\n// exception if it fails; if a callback is provided, then they don't                                                  // 407\n// necessarily block, and they call the callback when they finish with error and                                      // 408\n// result arguments.  (The insert method provides the document ID as its result;                                      // 409\n// update and remove provide the number of affected docs as the result; upsert                                        // 410\n// provides an object with numberAffected and maybe insertedId.)                                                      // 411\n//                                                                                                                    // 412\n// On the client, blocking is impossible, so if a callback                                                            // 413\n// isn't provided, they just return immediately and any error                                                         // 414\n// information is lost.                                                                                               // 415\n//                                                                                                                    // 416\n// There's one more tweak. On the client, if you don't provide a                                                      // 417\n// callback, then if there is an error, a message will be logged with                                                 // 418\n// Meteor._debug.                                                                                                     // 419\n//                                                                                                                    // 420\n// The intent (though this is actually determined by the underlying                                                   // 421\n// drivers) is that the operations should be done synchronously, not                                                  // 422\n// generating their result until the database has acknowledged                                                        // 423\n// them. In the future maybe we should provide a flag to turn this                                                    // 424\n// off.                                                                                                               // 425\n                                                                                                                      // 426\n/**                                                                                                                   // 427\n * @summary Insert a document in the collection.  Returns its unique _id.                                             // 428\n * @locus Anywhere                                                                                                    // 429\n * @method  insert                                                                                                    // 430\n * @memberOf Mongo.Collection                                                                                         // 431\n * @instance                                                                                                          // 432\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */                                                                                                                   // 435\n                                                                                                                      // 436\n/**                                                                                                                   // 437\n * @summary Modify one or more documents in the collection. Returns the number of affected documents.                 // 438\n * @locus Anywhere                                                                                                    // 439\n * @method update                                                                                                     // 440\n * @memberOf Mongo.Collection                                                                                         // 441\n * @instance                                                                                                          // 442\n * @param {MongoSelector} selector Specifies which documents to modify                                                // 443\n * @param {MongoModifier} modifier Specifies how to modify the documents                                              // 444\n * @param {Object} [options]                                                                                          // 445\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.                      // 447\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */                                                                                                                   // 449\n                                                                                                                      // 450\n/**                                                                                                                   // 451\n * @summary Remove documents from the collection                                                                      // 452\n * @locus Anywhere                                                                                                    // 453\n * @method remove                                                                                                     // 454\n * @memberOf Mongo.Collection                                                                                         // 455\n * @instance                                                                                                          // 456\n * @param {MongoSelector} selector Specifies which documents to remove                                                // 457\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.                   // 458\n */                                                                                                                   // 459\n                                                                                                                      // 460\n_.each([\"insert\", \"update\", \"remove\"], function (name) {                                                              // 461\n  Mongo.Collection.prototype[name] = function (/* arguments */) {                                                     // 462\n    var self = this;                                                                                                  // 463\n    var args = _.toArray(arguments);                                                                                  // 464\n    var callback;                                                                                                     // 465\n    var insertId;                                                                                                     // 466\n    var ret;                                                                                                          // 467\n                                                                                                                      // 468\n    // Pull off any callback (or perhaps a 'callback' variable that was passed                                        // 469\n    // in undefined, like how 'upsert' does it).                                                                      // 470\n    if (args.length &&                                                                                                // 471\n        (args[args.length - 1] === undefined ||                                                                       // 472\n         args[args.length - 1] instanceof Function)) {                                                                // 473\n      callback = args.pop();                                                                                          // 474\n    }                                                                                                                 // 475\n                                                                                                                      // 476\n    if (name === \"insert\") {                                                                                          // 477\n      if (!args.length)                                                                                               // 478\n        throw new Error(\"insert requires an argument\");                                                               // 479\n      // shallow-copy the document and generate an ID                                                                 // 480\n      args[0] = _.extend({}, args[0]);                                                                                // 481\n      if ('_id' in args[0]) {                                                                                         // 482\n        insertId = args[0]._id;                                                                                       // 483\n        if (!insertId || !(typeof insertId === 'string'                                                               // 484\n              || insertId instanceof Mongo.ObjectID))                                                                 // 485\n          throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");                // 486\n      } else {                                                                                                        // 487\n        var generateId = true;                                                                                        // 488\n        // Don't generate the id if we're the client and the 'outermost' call                                         // 489\n        // This optimization saves us passing both the randomSeed and the id                                          // 490\n        // Passing both is redundant.                                                                                 // 491\n        if (self._connection && self._connection !== Meteor.server) {                                                 // 492\n          var enclosing = DDP._CurrentInvocation.get();                                                               // 493\n          if (!enclosing) {                                                                                           // 494\n            generateId = false;                                                                                       // 495\n          }                                                                                                           // 496\n        }                                                                                                             // 497\n        if (generateId) {                                                                                             // 498\n          insertId = args[0]._id = self._makeNewID();                                                                 // 499\n        }                                                                                                             // 500\n      }                                                                                                               // 501\n    } else {                                                                                                          // 502\n      args[0] = Mongo.Collection._rewriteSelector(args[0]);                                                           // 503\n                                                                                                                      // 504\n      if (name === \"update\") {                                                                                        // 505\n        // Mutate args but copy the original options object. We need to add                                           // 506\n        // insertedId to options, but don't want to mutate the caller's options                                       // 507\n        // object. We need to mutate `args` because we pass `args` into the                                           // 508\n        // driver below.                                                                                              // 509\n        var options = args[2] = _.clone(args[2]) || {};                                                               // 510\n        if (options && typeof options !== \"function\" && options.upsert) {                                             // 511\n          // set `insertedId` if absent.  `insertedId` is a Meteor extension.                                         // 512\n          if (options.insertedId) {                                                                                   // 513\n            if (!(typeof options.insertedId === 'string'                                                              // 514\n                  || options.insertedId instanceof Mongo.ObjectID))                                                   // 515\n              throw new Error(\"insertedId must be string or ObjectID\");                                               // 516\n          } else if (! args[0]._id) {                                                                                 // 517\n            options.insertedId = self._makeNewID();                                                                   // 518\n          }                                                                                                           // 519\n        }                                                                                                             // 520\n      }                                                                                                               // 521\n    }                                                                                                                 // 522\n                                                                                                                      // 523\n    // On inserts, always return the id that we generated; on all other                                               // 524\n    // operations, just return the result from the collection.                                                        // 525\n    var chooseReturnValueFromCollectionResult = function (result) {                                                   // 526\n      if (name === \"insert\") {                                                                                        // 527\n        if (!insertId && result) {                                                                                    // 528\n          insertId = result;                                                                                          // 529\n        }                                                                                                             // 530\n        return insertId;                                                                                              // 531\n      } else {                                                                                                        // 532\n        return result;                                                                                                // 533\n      }                                                                                                               // 534\n    };                                                                                                                // 535\n                                                                                                                      // 536\n    var wrappedCallback;                                                                                              // 537\n    if (callback) {                                                                                                   // 538\n      wrappedCallback = function (error, result) {                                                                    // 539\n        callback(error, ! error && chooseReturnValueFromCollectionResult(result));                                    // 540\n      };                                                                                                              // 541\n    }                                                                                                                 // 542\n                                                                                                                      // 543\n    // XXX see #MeteorServerNull                                                                                      // 544\n    if (self._connection && self._connection !== Meteor.server) {                                                     // 545\n      // just remote to another endpoint, propagate return value or                                                   // 546\n      // exception.                                                                                                   // 547\n                                                                                                                      // 548\n      var enclosing = DDP._CurrentInvocation.get();                                                                   // 549\n      var alreadyInSimulation = enclosing && enclosing.isSimulation;                                                  // 550\n                                                                                                                      // 551\n      if (Meteor.isClient && !wrappedCallback && ! alreadyInSimulation) {                                             // 552\n        // Client can't block, so it can't report errors by exception,                                                // 553\n        // only by callback. If they forget the callback, give them a                                                 // 554\n        // default one that logs the error, so they aren't totally                                                    // 555\n        // baffled if their writes don't work because their database is                                               // 556\n        // down.                                                                                                      // 557\n        // Don't give a default callback in simulation, because inside stubs we                                       // 558\n        // want to return the results from the local collection immediately and                                       // 559\n        // not force a callback.                                                                                      // 560\n        wrappedCallback = function (err) {                                                                            // 561\n          if (err)                                                                                                    // 562\n            Meteor._debug(name + \" failed: \" + (err.reason || err.stack));                                            // 563\n        };                                                                                                            // 564\n      }                                                                                                               // 565\n                                                                                                                      // 566\n      if (!alreadyInSimulation && name !== \"insert\") {                                                                // 567\n        // If we're about to actually send an RPC, we should throw an error if                                        // 568\n        // this is a non-ID selector, because the mutation methods only allow                                         // 569\n        // single-ID selectors. (If we don't throw here, we'll see flicker.)                                          // 570\n        throwIfSelectorIsNotId(args[0], name);                                                                        // 571\n      }                                                                                                               // 572\n                                                                                                                      // 573\n      ret = chooseReturnValueFromCollectionResult(                                                                    // 574\n        self._connection.apply(self._prefix + name, args, {returnStubValue: true}, wrappedCallback)                   // 575\n      );                                                                                                              // 576\n                                                                                                                      // 577\n    } else {                                                                                                          // 578\n      // it's my collection.  descend into the collection object                                                      // 579\n      // and propagate any exception.                                                                                 // 580\n      args.push(wrappedCallback);                                                                                     // 581\n      try {                                                                                                           // 582\n        // If the user provided a callback and the collection implements this                                         // 583\n        // operation asynchronously, then queryRet will be undefined, and the                                         // 584\n        // result will be returned through the callback instead.                                                      // 585\n        var queryRet = self._collection[name].apply(self._collection, args);                                          // 586\n        ret = chooseReturnValueFromCollectionResult(queryRet);                                                        // 587\n      } catch (e) {                                                                                                   // 588\n        if (callback) {                                                                                               // 589\n          callback(e);                                                                                                // 590\n          return null;                                                                                                // 591\n        }                                                                                                             // 592\n        throw e;                                                                                                      // 593\n      }                                                                                                               // 594\n    }                                                                                                                 // 595\n                                                                                                                      // 596\n    // both sync and async, unless we threw an exception, return ret                                                  // 597\n    // (new document ID for insert, num affected for update/remove, object with                                       // 598\n    // numberAffected and maybe insertedId for upsert).                                                               // 599\n    return ret;                                                                                                       // 600\n  };                                                                                                                  // 601\n});                                                                                                                   // 602\n                                                                                                                      // 603\n/**                                                                                                                   // 604\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere                                                                                                    // 606\n * @param {MongoSelector} selector Specifies which documents to modify                                                // 607\n * @param {MongoModifier} modifier Specifies how to modify the documents                                              // 608\n * @param {Object} [options]                                                                                          // 609\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */                                                                                                                   // 612\nMongo.Collection.prototype.upsert = function (selector, modifier,                                                     // 613\n                                               options, callback) {                                                   // 614\n  var self = this;                                                                                                    // 615\n  if (! callback && typeof options === \"function\") {                                                                  // 616\n    callback = options;                                                                                               // 617\n    options = {};                                                                                                     // 618\n  }                                                                                                                   // 619\n  return self.update(selector, modifier,                                                                              // 620\n              _.extend({}, options, { _returnObject: true, upsert: true }),                                           // 621\n              callback);                                                                                              // 622\n};                                                                                                                    // 623\n                                                                                                                      // 624\n// We'll actually design an index API later. For now, we just pass through to                                         // 625\n// Mongo's, but make it synchronous.                                                                                  // 626\nMongo.Collection.prototype._ensureIndex = function (index, options) {                                                 // 627\n  var self = this;                                                                                                    // 628\n  if (!self._collection._ensureIndex)                                                                                 // 629\n    throw new Error(\"Can only call _ensureIndex on server collections\");                                              // 630\n  self._collection._ensureIndex(index, options);                                                                      // 631\n};                                                                                                                    // 632\nMongo.Collection.prototype._dropIndex = function (index) {                                                            // 633\n  var self = this;                                                                                                    // 634\n  if (!self._collection._dropIndex)                                                                                   // 635\n    throw new Error(\"Can only call _dropIndex on server collections\");                                                // 636\n  self._collection._dropIndex(index);                                                                                 // 637\n};                                                                                                                    // 638\nMongo.Collection.prototype._dropCollection = function () {                                                            // 639\n  var self = this;                                                                                                    // 640\n  if (!self._collection.dropCollection)                                                                               // 641\n    throw new Error(\"Can only call _dropCollection on server collections\");                                           // 642\n  self._collection.dropCollection();                                                                                  // 643\n};                                                                                                                    // 644\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {                              // 645\n  var self = this;                                                                                                    // 646\n  if (!self._collection._createCappedCollection)                                                                      // 647\n    throw new Error(\"Can only call _createCappedCollection on server collections\");                                   // 648\n  self._collection._createCappedCollection(byteSize, maxDocuments);                                                   // 649\n};                                                                                                                    // 650\n                                                                                                                      // 651\n/**                                                                                                                   // 652\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server                                                                                                      // 654\n */                                                                                                                   // 655\nMongo.Collection.prototype.rawCollection = function () {                                                              // 656\n  var self = this;                                                                                                    // 657\n  if (! self._collection.rawCollection) {                                                                             // 658\n    throw new Error(\"Can only call rawCollection on server collections\");                                             // 659\n  }                                                                                                                   // 660\n  return self._collection.rawCollection();                                                                            // 661\n};                                                                                                                    // 662\n                                                                                                                      // 663\n/**                                                                                                                   // 664\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server                                                                                                      // 666\n */                                                                                                                   // 667\nMongo.Collection.prototype.rawDatabase = function () {                                                                // 668\n  var self = this;                                                                                                    // 669\n  if (! (self._driver.mongo && self._driver.mongo.db)) {                                                              // 670\n    throw new Error(\"Can only call rawDatabase on server collections\");                                               // 671\n  }                                                                                                                   // 672\n  return self._driver.mongo.db;                                                                                       // 673\n};                                                                                                                    // 674\n                                                                                                                      // 675\n                                                                                                                      // 676\n/**                                                                                                                   // 677\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere                                                                                                    // 679\n * @class                                                                                                             // 680\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create             // 681\n */                                                                                                                   // 682\nMongo.ObjectID = MongoID.ObjectID;                                                                                    // 683\n                                                                                                                      // 684\n/**                                                                                                                   // 685\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.            // 686\n * @class                                                                                                             // 687\n * @instanceName cursor                                                                                               // 688\n */                                                                                                                   // 689\nMongo.Cursor = LocalCollection.Cursor;                                                                                // 690\n                                                                                                                      // 691\n/**                                                                                                                   // 692\n * @deprecated in 0.9.1                                                                                               // 693\n */                                                                                                                   // 694\nMongo.Collection.Cursor = Mongo.Cursor;                                                                               // 695\n                                                                                                                      // 696\n/**                                                                                                                   // 697\n * @deprecated in 0.9.1                                                                                               // 698\n */                                                                                                                   // 699\nMongo.Collection.ObjectID = Mongo.ObjectID;                                                                           // 700\n                                                                                                                      // 701\n///                                                                                                                   // 702\n/// Remote methods and access control.                                                                                // 703\n///                                                                                                                   // 704\n                                                                                                                      // 705\n// Restrict default mutators on collection. allow() and deny() take the                                               // 706\n// same options:                                                                                                      // 707\n//                                                                                                                    // 708\n// options.insert {Function(userId, doc)}                                                                             // 709\n//   return true to allow/deny adding this document                                                                   // 710\n//                                                                                                                    // 711\n// options.update {Function(userId, docs, fields, modifier)}                                                          // 712\n//   return true to allow/deny updating these documents.                                                              // 713\n//   `fields` is passed as an array of fields that are to be modified                                                 // 714\n//                                                                                                                    // 715\n// options.remove {Function(userId, docs)}                                                                            // 716\n//   return true to allow/deny removing these documents                                                               // 717\n//                                                                                                                    // 718\n// options.fetch {Array}                                                                                              // 719\n//   Fields to fetch for these validators. If any call to allow or deny                                               // 720\n//   does not have this option then all fields are loaded.                                                            // 721\n//                                                                                                                    // 722\n// allow and deny can be called multiple times. The validators are                                                    // 723\n// evaluated as follows:                                                                                              // 724\n// - If neither deny() nor allow() has been called on the collection,                                                 // 725\n//   then the request is allowed if and only if the \"insecure\" smart                                                  // 726\n//   package is in use.                                                                                               // 727\n// - Otherwise, if any deny() function returns true, the request is denied.                                           // 728\n// - Otherwise, if any allow() function returns true, the request is allowed.                                         // 729\n// - Otherwise, the request is denied.                                                                                // 730\n//                                                                                                                    // 731\n// Meteor may call your deny() and allow() functions in any order, and may not                                        // 732\n// call all of them if it is able to make a decision without calling them all                                         // 733\n// (so don't include side effects).                                                                                   // 734\n                                                                                                                      // 735\n(function () {                                                                                                        // 736\n  var addValidator = function(allowOrDeny, options) {                                                                 // 737\n    // validate keys                                                                                                  // 738\n    var VALID_KEYS = ['insert', 'update', 'remove', 'fetch', 'transform'];                                            // 739\n    _.each(_.keys(options), function (key) {                                                                          // 740\n      if (!_.contains(VALID_KEYS, key))                                                                               // 741\n        throw new Error(allowOrDeny + \": Invalid key: \" + key);                                                       // 742\n    });                                                                                                               // 743\n                                                                                                                      // 744\n    var self = this;                                                                                                  // 745\n    self._restricted = true;                                                                                          // 746\n                                                                                                                      // 747\n    _.each(['insert', 'update', 'remove'], function (name) {                                                          // 748\n      if (options[name]) {                                                                                            // 749\n        if (!(options[name] instanceof Function)) {                                                                   // 750\n          throw new Error(allowOrDeny + \": Value for `\" + name + \"` must be a function\");                             // 751\n        }                                                                                                             // 752\n                                                                                                                      // 753\n        // If the transform is specified at all (including as 'null') in this                                         // 754\n        // call, then take that; otherwise, take the transform from the                                               // 755\n        // collection.                                                                                                // 756\n        if (options.transform === undefined) {                                                                        // 757\n          options[name].transform = self._transform;  // already wrapped                                              // 758\n        } else {                                                                                                      // 759\n          options[name].transform = LocalCollection.wrapTransform(                                                    // 760\n            options.transform);                                                                                       // 761\n        }                                                                                                             // 762\n                                                                                                                      // 763\n        self._validators[name][allowOrDeny].push(options[name]);                                                      // 764\n      }                                                                                                               // 765\n    });                                                                                                               // 766\n                                                                                                                      // 767\n    // Only update the fetch fields if we're passed things that affect                                                // 768\n    // fetching. This way allow({}) and allow({insert: f}) don't result in                                            // 769\n    // setting fetchAllFields                                                                                         // 770\n    if (options.update || options.remove || options.fetch) {                                                          // 771\n      if (options.fetch && !(options.fetch instanceof Array)) {                                                       // 772\n        throw new Error(allowOrDeny + \": Value for `fetch` must be an array\");                                        // 773\n      }                                                                                                               // 774\n      self._updateFetch(options.fetch);                                                                               // 775\n    }                                                                                                                 // 776\n  };                                                                                                                  // 777\n                                                                                                                      // 778\n  /**                                                                                                                 // 779\n   * @summary Allow users to write directly to this collection from client code, subject to limitations you define.   // 780\n   * @locus Server                                                                                                    // 781\n   * @param {Object} options                                                                                          // 782\n   * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.\n   * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.\n   */                                                                                                                 // 786\n  Mongo.Collection.prototype.allow = function(options) {                                                              // 787\n    addValidator.call(this, 'allow', options);                                                                        // 788\n  };                                                                                                                  // 789\n                                                                                                                      // 790\n  /**                                                                                                                 // 791\n   * @summary Override `allow` rules.                                                                                 // 792\n   * @locus Server                                                                                                    // 793\n   * @param {Object} options                                                                                          // 794\n   * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.\n   * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.\n   */                                                                                                                 // 798\n  Mongo.Collection.prototype.deny = function(options) {                                                               // 799\n    addValidator.call(this, 'deny', options);                                                                         // 800\n  };                                                                                                                  // 801\n})();                                                                                                                 // 802\n                                                                                                                      // 803\n                                                                                                                      // 804\nMongo.Collection.prototype._defineMutationMethods = function() {                                                      // 805\n  var self = this;                                                                                                    // 806\n                                                                                                                      // 807\n  // set to true once we call any allow or deny methods. If true, use                                                 // 808\n  // allow/deny semantics. If false, use insecure mode semantics.                                                     // 809\n  self._restricted = false;                                                                                           // 810\n                                                                                                                      // 811\n  // Insecure mode (default to allowing writes). Defaults to 'undefined' which                                        // 812\n  // means insecure iff the insecure package is loaded. This property can be                                          // 813\n  // overriden by tests or packages wishing to change insecure mode behavior of                                       // 814\n  // their collections.                                                                                               // 815\n  self._insecure = undefined;                                                                                         // 816\n                                                                                                                      // 817\n  self._validators = {                                                                                                // 818\n    insert: {allow: [], deny: []},                                                                                    // 819\n    update: {allow: [], deny: []},                                                                                    // 820\n    remove: {allow: [], deny: []},                                                                                    // 821\n    upsert: {allow: [], deny: []}, // dummy arrays; can't set these!                                                  // 822\n    fetch: [],                                                                                                        // 823\n    fetchAllFields: false                                                                                             // 824\n  };                                                                                                                  // 825\n                                                                                                                      // 826\n  if (!self._name)                                                                                                    // 827\n    return; // anonymous collection                                                                                   // 828\n                                                                                                                      // 829\n  // XXX Think about method namespacing. Maybe methods should be                                                      // 830\n  // \"Meteor:Mongo:insert/NAME\"?                                                                                      // 831\n  self._prefix = '/' + self._name + '/';                                                                              // 832\n                                                                                                                      // 833\n  // mutation methods                                                                                                 // 834\n  if (self._connection) {                                                                                             // 835\n    var m = {};                                                                                                       // 836\n                                                                                                                      // 837\n    _.each(['insert', 'update', 'remove'], function (method) {                                                        // 838\n      m[self._prefix + method] = function (/* ... */) {                                                               // 839\n        // All the methods do their own validation, instead of using check().                                         // 840\n        check(arguments, [Match.Any]);                                                                                // 841\n        var args = _.toArray(arguments);                                                                              // 842\n        try {                                                                                                         // 843\n          // For an insert, if the client didn't specify an _id, generate one                                         // 844\n          // now; because this uses DDP.randomStream, it will be consistent with                                      // 845\n          // what the client generated. We generate it now rather than later so                                       // 846\n          // that if (eg) an allow/deny rule does an insert to the same                                               // 847\n          // collection (not that it really should), the generated _id will                                           // 848\n          // still be the first use of the stream and will be consistent.                                             // 849\n          //                                                                                                          // 850\n          // However, we don't actually stick the _id onto the document yet,                                          // 851\n          // because we want allow/deny rules to be able to differentiate                                             // 852\n          // between arbitrary client-specified _id fields and merely                                                 // 853\n          // client-controlled-via-randomSeed fields.                                                                 // 854\n          var generatedId = null;                                                                                     // 855\n          if (method === \"insert\" && !_.has(args[0], '_id')) {                                                        // 856\n            generatedId = self._makeNewID();                                                                          // 857\n          }                                                                                                           // 858\n                                                                                                                      // 859\n          if (this.isSimulation) {                                                                                    // 860\n            // In a client simulation, you can do any mutation (even with a                                           // 861\n            // complex selector).                                                                                     // 862\n            if (generatedId !== null)                                                                                 // 863\n              args[0]._id = generatedId;                                                                              // 864\n            return self._collection[method].apply(                                                                    // 865\n              self._collection, args);                                                                                // 866\n          }                                                                                                           // 867\n                                                                                                                      // 868\n          // This is the server receiving a method call from the client.                                              // 869\n                                                                                                                      // 870\n          // We don't allow arbitrary selectors in mutations from the client: only                                    // 871\n          // single-ID selectors.                                                                                     // 872\n          if (method !== 'insert')                                                                                    // 873\n            throwIfSelectorIsNotId(args[0], method);                                                                  // 874\n                                                                                                                      // 875\n          if (self._restricted) {                                                                                     // 876\n            // short circuit if there is no way it will pass.                                                         // 877\n            if (self._validators[method].allow.length === 0) {                                                        // 878\n              throw new Meteor.Error(                                                                                 // 879\n                403, \"Access denied. No allow validators set on restricted \" +                                        // 880\n                  \"collection for method '\" + method + \"'.\");                                                         // 881\n            }                                                                                                         // 882\n                                                                                                                      // 883\n            var validatedMethodName =                                                                                 // 884\n                  '_validated' + method.charAt(0).toUpperCase() + method.slice(1);                                    // 885\n            args.unshift(this.userId);                                                                                // 886\n            method === 'insert' && args.push(generatedId);                                                            // 887\n            return self[validatedMethodName].apply(self, args);                                                       // 888\n          } else if (self._isInsecure()) {                                                                            // 889\n            if (generatedId !== null)                                                                                 // 890\n              args[0]._id = generatedId;                                                                              // 891\n            // In insecure mode, allow any mutation (with a simple selector).                                         // 892\n            // XXX This is kind of bogus.  Instead of blindly passing whatever                                        // 893\n            //     we get from the network to this function, we should actually                                       // 894\n            //     know the correct arguments for the function and pass just                                          // 895\n            //     them.  For example, if you have an extraneous extra null                                           // 896\n            //     argument and this is Mongo on the server, the .wrapAsync'd                                         // 897\n            //     functions like update will get confused and pass the                                               // 898\n            //     \"fut.resolver()\" in the wrong slot, where _update will never                                       // 899\n            //     invoke it. Bam, broken DDP connection.  Probably should just                                       // 900\n            //     take this whole method and write it three times, invoking                                          // 901\n            //     helpers for the common code.                                                                       // 902\n            return self._collection[method].apply(self._collection, args);                                            // 903\n          } else {                                                                                                    // 904\n            // In secure mode, if we haven't called allow or deny, then nothing                                       // 905\n            // is permitted.                                                                                          // 906\n            throw new Meteor.Error(403, \"Access denied\");                                                             // 907\n          }                                                                                                           // 908\n        } catch (e) {                                                                                                 // 909\n          if (e.name === 'MongoError' || e.name === 'MinimongoError') {                                               // 910\n            throw new Meteor.Error(409, e.toString());                                                                // 911\n          } else {                                                                                                    // 912\n            throw e;                                                                                                  // 913\n          }                                                                                                           // 914\n        }                                                                                                             // 915\n      };                                                                                                              // 916\n    });                                                                                                               // 917\n    // Minimongo on the server gets no stubs; instead, by default                                                     // 918\n    // it wait()s until its result is ready, yielding.                                                                // 919\n    // This matches the behavior of macromongo on the server better.                                                  // 920\n    // XXX see #MeteorServerNull                                                                                      // 921\n    if (Meteor.isClient || self._connection === Meteor.server)                                                        // 922\n      self._connection.methods(m);                                                                                    // 923\n  }                                                                                                                   // 924\n};                                                                                                                    // 925\n                                                                                                                      // 926\n                                                                                                                      // 927\nMongo.Collection.prototype._updateFetch = function (fields) {                                                         // 928\n  var self = this;                                                                                                    // 929\n                                                                                                                      // 930\n  if (!self._validators.fetchAllFields) {                                                                             // 931\n    if (fields) {                                                                                                     // 932\n      self._validators.fetch = _.union(self._validators.fetch, fields);                                               // 933\n    } else {                                                                                                          // 934\n      self._validators.fetchAllFields = true;                                                                         // 935\n      // clear fetch just to make sure we don't accidentally read it                                                  // 936\n      self._validators.fetch = null;                                                                                  // 937\n    }                                                                                                                 // 938\n  }                                                                                                                   // 939\n};                                                                                                                    // 940\n                                                                                                                      // 941\nMongo.Collection.prototype._isInsecure = function () {                                                                // 942\n  var self = this;                                                                                                    // 943\n  if (self._insecure === undefined)                                                                                   // 944\n    return !!Package.insecure;                                                                                        // 945\n  return self._insecure;                                                                                              // 946\n};                                                                                                                    // 947\n                                                                                                                      // 948\nvar docToValidate = function (validator, doc, generatedId) {                                                          // 949\n  var ret = doc;                                                                                                      // 950\n  if (validator.transform) {                                                                                          // 951\n    ret = EJSON.clone(doc);                                                                                           // 952\n    // If you set a server-side transform on your collection, then you don't get                                      // 953\n    // to tell the difference between \"client specified the ID\" and \"server                                           // 954\n    // generated the ID\", because transforms expect to get _id.  If you want to                                       // 955\n    // do that check, you can do it with a specific                                                                   // 956\n    // `C.allow({insert: f, transform: null})` validator.                                                             // 957\n    if (generatedId !== null) {                                                                                       // 958\n      ret._id = generatedId;                                                                                          // 959\n    }                                                                                                                 // 960\n    ret = validator.transform(ret);                                                                                   // 961\n  }                                                                                                                   // 962\n  return ret;                                                                                                         // 963\n};                                                                                                                    // 964\n                                                                                                                      // 965\nMongo.Collection.prototype._validatedInsert = function (userId, doc,                                                  // 966\n                                                         generatedId) {                                               // 967\n  var self = this;                                                                                                    // 968\n                                                                                                                      // 969\n  // call user validators.                                                                                            // 970\n  // Any deny returns true means denied.                                                                              // 971\n  if (_.any(self._validators.insert.deny, function(validator) {                                                       // 972\n    return validator(userId, docToValidate(validator, doc, generatedId));                                             // 973\n  })) {                                                                                                               // 974\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 975\n  }                                                                                                                   // 976\n  // Any allow returns true means proceed. Throw error if they all fail.                                              // 977\n  if (_.all(self._validators.insert.allow, function(validator) {                                                      // 978\n    return !validator(userId, docToValidate(validator, doc, generatedId));                                            // 979\n  })) {                                                                                                               // 980\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 981\n  }                                                                                                                   // 982\n                                                                                                                      // 983\n  // If we generated an ID above, insert it now: after the validation, but                                            // 984\n  // before actually inserting.                                                                                       // 985\n  if (generatedId !== null)                                                                                           // 986\n    doc._id = generatedId;                                                                                            // 987\n                                                                                                                      // 988\n  self._collection.insert.call(self._collection, doc);                                                                // 989\n};                                                                                                                    // 990\n                                                                                                                      // 991\nvar transformDoc = function (validator, doc) {                                                                        // 992\n  if (validator.transform)                                                                                            // 993\n    return validator.transform(doc);                                                                                  // 994\n  return doc;                                                                                                         // 995\n};                                                                                                                    // 996\n                                                                                                                      // 997\n// Simulate a mongo `update` operation while validating that the access                                               // 998\n// control rules set by calls to `allow/deny` are satisfied. If all                                                   // 999\n// pass, rewrite the mongo operation to use $in to set the list of                                                    // 1000\n// document ids to change ##ValidatedChange                                                                           // 1001\nMongo.Collection.prototype._validatedUpdate = function(                                                               // 1002\n    userId, selector, mutator, options) {                                                                             // 1003\n  var self = this;                                                                                                    // 1004\n                                                                                                                      // 1005\n  check(mutator, Object);                                                                                             // 1006\n                                                                                                                      // 1007\n  options = _.clone(options) || {};                                                                                   // 1008\n                                                                                                                      // 1009\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector))                                                        // 1010\n    throw new Error(\"validated update should be of a single ID\");                                                     // 1011\n                                                                                                                      // 1012\n  // We don't support upserts because they don't fit nicely into allow/deny                                           // 1013\n  // rules.                                                                                                           // 1014\n  if (options.upsert)                                                                                                 // 1015\n    throw new Meteor.Error(403, \"Access denied. Upserts not \" +                                                       // 1016\n                           \"allowed in a restricted collection.\");                                                    // 1017\n                                                                                                                      // 1018\n  var noReplaceError = \"Access denied. In a restricted collection you can only\" +                                     // 1019\n        \" update documents, not replace them. Use a Mongo update operator, such \" +                                   // 1020\n        \"as '$set'.\";                                                                                                 // 1021\n                                                                                                                      // 1022\n  // compute modified fields                                                                                          // 1023\n  var fields = [];                                                                                                    // 1024\n  if (_.isEmpty(mutator)) {                                                                                           // 1025\n    throw new Meteor.Error(403, noReplaceError);                                                                      // 1026\n  }                                                                                                                   // 1027\n  _.each(mutator, function (params, op) {                                                                             // 1028\n    if (op.charAt(0) !== '$') {                                                                                       // 1029\n      throw new Meteor.Error(403, noReplaceError);                                                                    // 1030\n    } else if (!_.has(ALLOWED_UPDATE_OPERATIONS, op)) {                                                               // 1031\n      throw new Meteor.Error(                                                                                         // 1032\n        403, \"Access denied. Operator \" + op + \" not allowed in a restricted collection.\");                           // 1033\n    } else {                                                                                                          // 1034\n      _.each(_.keys(params), function (field) {                                                                       // 1035\n        // treat dotted fields as if they are replacing their                                                         // 1036\n        // top-level part                                                                                             // 1037\n        if (field.indexOf('.') !== -1)                                                                                // 1038\n          field = field.substring(0, field.indexOf('.'));                                                             // 1039\n                                                                                                                      // 1040\n        // record the field we are trying to change                                                                   // 1041\n        if (!_.contains(fields, field))                                                                               // 1042\n          fields.push(field);                                                                                         // 1043\n      });                                                                                                             // 1044\n    }                                                                                                                 // 1045\n  });                                                                                                                 // 1046\n                                                                                                                      // 1047\n  var findOptions = {transform: null};                                                                                // 1048\n  if (!self._validators.fetchAllFields) {                                                                             // 1049\n    findOptions.fields = {};                                                                                          // 1050\n    _.each(self._validators.fetch, function(fieldName) {                                                              // 1051\n      findOptions.fields[fieldName] = 1;                                                                              // 1052\n    });                                                                                                               // 1053\n  }                                                                                                                   // 1054\n                                                                                                                      // 1055\n  var doc = self._collection.findOne(selector, findOptions);                                                          // 1056\n  if (!doc)  // none satisfied!                                                                                       // 1057\n    return 0;                                                                                                         // 1058\n                                                                                                                      // 1059\n  // call user validators.                                                                                            // 1060\n  // Any deny returns true means denied.                                                                              // 1061\n  if (_.any(self._validators.update.deny, function(validator) {                                                       // 1062\n    var factoriedDoc = transformDoc(validator, doc);                                                                  // 1063\n    return validator(userId,                                                                                          // 1064\n                     factoriedDoc,                                                                                    // 1065\n                     fields,                                                                                          // 1066\n                     mutator);                                                                                        // 1067\n  })) {                                                                                                               // 1068\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 1069\n  }                                                                                                                   // 1070\n  // Any allow returns true means proceed. Throw error if they all fail.                                              // 1071\n  if (_.all(self._validators.update.allow, function(validator) {                                                      // 1072\n    var factoriedDoc = transformDoc(validator, doc);                                                                  // 1073\n    return !validator(userId,                                                                                         // 1074\n                      factoriedDoc,                                                                                   // 1075\n                      fields,                                                                                         // 1076\n                      mutator);                                                                                       // 1077\n  })) {                                                                                                               // 1078\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 1079\n  }                                                                                                                   // 1080\n                                                                                                                      // 1081\n  options._forbidReplace = true;                                                                                      // 1082\n                                                                                                                      // 1083\n  // Back when we supported arbitrary client-provided selectors, we actually                                          // 1084\n  // rewrote the selector to include an _id clause before passing to Mongo to                                         // 1085\n  // avoid races, but since selector is guaranteed to already just be an ID, we                                       // 1086\n  // don't have to any more.                                                                                          // 1087\n                                                                                                                      // 1088\n  return self._collection.update.call(                                                                                // 1089\n    self._collection, selector, mutator, options);                                                                    // 1090\n};                                                                                                                    // 1091\n                                                                                                                      // 1092\n// Only allow these operations in validated updates. Specifically                                                     // 1093\n// whitelist operations, rather than blacklist, so new complex                                                        // 1094\n// operations that are added aren't automatically allowed. A complex                                                  // 1095\n// operation is one that does more than just modify its target                                                        // 1096\n// field. For now this contains all update operations except '$rename'.                                               // 1097\n// http://docs.mongodb.org/manual/reference/operators/#update                                                         // 1098\nvar ALLOWED_UPDATE_OPERATIONS = {                                                                                     // 1099\n  $inc:1, $set:1, $unset:1, $addToSet:1, $pop:1, $pullAll:1, $pull:1,                                                 // 1100\n  $pushAll:1, $push:1, $bit:1                                                                                         // 1101\n};                                                                                                                    // 1102\n                                                                                                                      // 1103\n// Simulate a mongo `remove` operation while validating access control                                                // 1104\n// rules. See #ValidatedChange                                                                                        // 1105\nMongo.Collection.prototype._validatedRemove = function(userId, selector) {                                            // 1106\n  var self = this;                                                                                                    // 1107\n                                                                                                                      // 1108\n  var findOptions = {transform: null};                                                                                // 1109\n  if (!self._validators.fetchAllFields) {                                                                             // 1110\n    findOptions.fields = {};                                                                                          // 1111\n    _.each(self._validators.fetch, function(fieldName) {                                                              // 1112\n      findOptions.fields[fieldName] = 1;                                                                              // 1113\n    });                                                                                                               // 1114\n  }                                                                                                                   // 1115\n                                                                                                                      // 1116\n  var doc = self._collection.findOne(selector, findOptions);                                                          // 1117\n  if (!doc)                                                                                                           // 1118\n    return 0;                                                                                                         // 1119\n                                                                                                                      // 1120\n  // call user validators.                                                                                            // 1121\n  // Any deny returns true means denied.                                                                              // 1122\n  if (_.any(self._validators.remove.deny, function(validator) {                                                       // 1123\n    return validator(userId, transformDoc(validator, doc));                                                           // 1124\n  })) {                                                                                                               // 1125\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 1126\n  }                                                                                                                   // 1127\n  // Any allow returns true means proceed. Throw error if they all fail.                                              // 1128\n  if (_.all(self._validators.remove.allow, function(validator) {                                                      // 1129\n    return !validator(userId, transformDoc(validator, doc));                                                          // 1130\n  })) {                                                                                                               // 1131\n    throw new Meteor.Error(403, \"Access denied\");                                                                     // 1132\n  }                                                                                                                   // 1133\n                                                                                                                      // 1134\n  // Back when we supported arbitrary client-provided selectors, we actually                                          // 1135\n  // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to                                      // 1136\n  // Mongo to avoid races, but since selector is guaranteed to already just be                                        // 1137\n  // an ID, we don't have to any more.                                                                                // 1138\n                                                                                                                      // 1139\n  return self._collection.remove.call(self._collection, selector);                                                    // 1140\n};                                                                                                                    // 1141\n                                                                                                                      // 1142\n/**                                                                                                                   // 1143\n * @deprecated in 0.9.1                                                                                               // 1144\n */                                                                                                                   // 1145\nMeteor.Collection = Mongo.Collection;                                                                                 // 1146\n                                                                                                                      // 1147\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.mongo = {\n  Mongo: Mongo\n};\n\n})();\n","servePath":"/packages/mongo.js","sourceMap":{"version":3,"sources":["/packages/mongo/local_collection_driver.js","/packages/mongo/collection.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H","file":"/packages/mongo.js","sourcesContent":["LocalCollectionDriver = function () {\n  var self = this;\n  self.noConnCollections = {};\n};\n\nvar ensureCollection = function (name, collections) {\n  if (!(name in collections))\n    collections[name] = new LocalCollection(name);\n  return collections[name];\n};\n\n_.extend(LocalCollectionDriver.prototype, {\n  open: function (name, conn) {\n    var self = this;\n    if (!name)\n      return new LocalCollection;\n    if (! conn) {\n      return ensureCollection(name, self.noConnCollections);\n    }\n    if (! conn._mongo_livedata_collections)\n      conn._mongo_livedata_collections = {};\n    // XXX is there a way to keep track of a connection's collections without\n    // dangling it off the connection object?\n    return ensureCollection(name, conn._mongo_livedata_collections);\n  }\n});\n\n// singleton\nLocalCollectionDriver = new LocalCollectionDriver;\n","// options.connection, if given, is a LivedataClient or LivedataServer\n// XXX presently there is no way to destroy/clean up a Collection\n\n/**\n * @summary Namespace for MongoDB-related items\n * @namespace\n */\nMongo = {};\n\n/**\n * @summary Constructor for a Collection\n * @locus Anywhere\n * @instancename collection\n * @class\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n\n - **`'STRING'`**: random strings\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values\n\nThe default id generation technique is `'STRING'`.\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n */\nMongo.Collection = function (name, options) {\n  var self = this;\n  if (! (self instanceof Mongo.Collection))\n    throw new Error('use \"new\" to construct a Mongo.Collection');\n\n  if (!name && (name !== null)) {\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +\n                  \"saved or synchronized over the network. (Pass null for \" +\n                  \"the collection name to turn off this warning.)\");\n    name = null;\n  }\n\n  if (name !== null && typeof name !== \"string\") {\n    throw new Error(\n      \"First argument to new Mongo.Collection must be a string or null\");\n  }\n\n  if (options && options.methods) {\n    // Backwards compatibility hack with original signature (which passed\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\n    // method.)\n    // XXX remove before 1.0\n    options = {connection: options};\n  }\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\n  if (options && options.manager && !options.connection) {\n    options.connection = options.manager;\n  }\n  options = _.extend({\n    connection: undefined,\n    idGeneration: 'STRING',\n    transform: null,\n    _driver: undefined,\n    _preventAutopublish: false\n  }, options);\n\n  switch (options.idGeneration) {\n  case 'MONGO':\n    self._makeNewID = function () {\n      var src = name ? DDP.randomStream('/collection/' + name) : Random;\n      return new Mongo.ObjectID(src.hexString(24));\n    };\n    break;\n  case 'STRING':\n  default:\n    self._makeNewID = function () {\n      var src = name ? DDP.randomStream('/collection/' + name) : Random;\n      return src.id();\n    };\n    break;\n  }\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  if (! name || options.connection === null)\n    // note: nameless collections never have a connection\n    self._connection = null;\n  else if (options.connection)\n    self._connection = options.connection;\n  else if (Meteor.isClient)\n    self._connection = Meteor.connection;\n  else\n    self._connection = Meteor.server;\n\n  if (!options._driver) {\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==\n    // null. We should fully support the case of \"want to use a Mongo-backed\n    // collection from Node code without webapp\", but we don't yet.\n    // #MeteorServerNull\n    if (name && self._connection === Meteor.server &&\n        typeof MongoInternals !== \"undefined\" &&\n        MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\n    } else {\n      options._driver = LocalCollectionDriver;\n    }\n  }\n\n  self._collection = options._driver.open(name, self._connection);\n  self._name = name;\n  self._driver = options._driver;\n\n  if (self._connection && self._connection.registerStore) {\n    // OK, we're going to be a slave, replicating some remote\n    // database, except possibly with some temporary divergence while\n    // we have unacknowledged RPC's.\n    var ok = self._connection.registerStore(name, {\n      // Called at the beginning of a batch of updates. batchSize is the number\n      // of update calls to expect.\n      //\n      // XXX This interface is pretty janky. reset probably ought to go back to\n      // being its own function, and callers shouldn't have to calculate\n      // batchSize. The optimization of not calling pause/remove should be\n      // delayed until later: the first call to update() should buffer its\n      // message, and then we can either directly apply it at endUpdate time if\n      // it was the only update, or do pauseObservers/apply/apply at the next\n      // update() if there's another one.\n      beginUpdate: function (batchSize, reset) {\n        // pause observers so users don't see flicker when updating several\n        // objects at once (including the post-reconnect reset-and-reapply\n        // stage), and so that a re-sorting of a query can take advantage of the\n        // full _diffQuery moved calculation instead of applying change one at a\n        // time.\n        if (batchSize > 1 || reset)\n          self._collection.pauseObservers();\n\n        if (reset)\n          self._collection.remove({});\n      },\n\n      // Apply an update.\n      // XXX better specify this interface (not in terms of a wire message)?\n      update: function (msg) {\n        var mongoId = MongoID.idParse(msg.id);\n        var doc = self._collection.findOne(mongoId);\n\n        // Is this a \"replace the whole doc\" message coming from the quiescence\n        // of method writes to an object? (Note that 'undefined' is a valid\n        // value meaning \"remove it\".)\n        if (msg.msg === 'replace') {\n          var replace = msg.replace;\n          if (!replace) {\n            if (doc)\n              self._collection.remove(mongoId);\n          } else if (!doc) {\n            self._collection.insert(replace);\n          } else {\n            // XXX check that replace has no $ ops\n            self._collection.update(mongoId, replace);\n          }\n          return;\n        } else if (msg.msg === 'added') {\n          if (doc) {\n            throw new Error(\"Expected not to find a document already present for an add\");\n          }\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));\n        } else if (msg.msg === 'removed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document already present for removed\");\n          self._collection.remove(mongoId);\n        } else if (msg.msg === 'changed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document to change\");\n          if (!_.isEmpty(msg.fields)) {\n            var modifier = {};\n            _.each(msg.fields, function (value, key) {\n              if (value === undefined) {\n                if (!modifier.$unset)\n                  modifier.$unset = {};\n                modifier.$unset[key] = 1;\n              } else {\n                if (!modifier.$set)\n                  modifier.$set = {};\n                modifier.$set[key] = value;\n              }\n            });\n            self._collection.update(mongoId, modifier);\n          }\n        } else {\n          throw new Error(\"I don't know how to deal with this message\");\n        }\n\n      },\n\n      // Called at the end of a batch of updates.\n      endUpdate: function () {\n        self._collection.resumeObservers();\n      },\n\n      // Called around method stub invocations to capture the original versions\n      // of modified documents.\n      saveOriginals: function () {\n        self._collection.saveOriginals();\n      },\n      retrieveOriginals: function () {\n        return self._collection.retrieveOriginals();\n      },\n\n      // Used to preserve current versions of documents across a store reset.\n      getDoc: function(id) {\n        return self.findOne(id);\n      },\n    });\n\n    if (!ok)\n      throw new Error(\"There is already a collection named '\" + name + \"'\");\n  }\n\n  self._defineMutationMethods();\n\n  // autopublish\n  if (Package.autopublish && !options._preventAutopublish && self._connection\n      && self._connection.publish) {\n    self._connection.publish(null, function () {\n      return self.find();\n    }, {is_auto: true});\n  }\n};\n\n///\n/// Main collection API\n///\n\n\n_.extend(Mongo.Collection.prototype, {\n\n  _getFindSelector: function (args) {\n    if (args.length == 0)\n      return {};\n    else\n      return args[0];\n  },\n\n  _getFindOptions: function (args) {\n    var self = this;\n    if (args.length < 2) {\n      return { transform: self._transform };\n    } else {\n      check(args[1], Match.Optional(Match.ObjectIncluding({\n        fields: Match.Optional(Match.OneOf(Object, undefined)),\n        sort: Match.Optional(Match.OneOf(Object, Array, undefined)),\n        limit: Match.Optional(Match.OneOf(Number, undefined)),\n        skip: Match.Optional(Match.OneOf(Number, undefined))\n     })));\n\n      return _.extend({\n        transform: self._transform\n      }, args[1]);\n    }\n  },\n\n  /**\n   * @summary Find the documents in a collection that match the selector.\n   * @locus Anywhere\n   * @method find\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {Number} options.limit Maximum number of results to return\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Mongo.Cursor}\n   */\n  find: function (/* selector, options */) {\n    // Collection.find() (return all docs) behaves differently\n    // from Collection.find(undefined) (return 0 docs).  so be\n    // careful about the length of arguments.\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.find(self._getFindSelector(argArray),\n                                 self._getFindOptions(argArray));\n  },\n\n  /**\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options.\n   * @locus Anywhere\n   * @method findOne\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}\n   */\n  findOne: function (/* selector, options */) {\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.findOne(self._getFindSelector(argArray),\n                                    self._getFindOptions(argArray));\n  }\n\n});\n\nMongo.Collection._publishCursor = function (cursor, sub, collection) {\n  var observeHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      sub.added(collection, id, fields);\n    },\n    changed: function (id, fields) {\n      sub.changed(collection, id, fields);\n    },\n    removed: function (id) {\n      sub.removed(collection, id);\n    }\n  });\n\n  // We don't call sub.ready() here: it gets called in livedata_server, after\n  // possibly calling _publishCursor on multiple returned cursors.\n\n  // register stop callback (expects lambda w/ no args).\n  sub.onStop(function () {observeHandle.stop();});\n};\n\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\n// likely programmer error, and not what you want, particularly for destructive\n// operations.  JS regexps don't serialize over DDP but can be trivially\n// replaced by $regex.\nMongo.Collection._rewriteSelector = function (selector) {\n  // shorthand -- scalars match _id\n  if (LocalCollection._selectorIsId(selector))\n    selector = {_id: selector};\n\n  if (_.isArray(selector)) {\n    // This is consistent with the Mongo console itself; if we don't do this\n    // check passing an empty array ends up selecting all items\n    throw new Error(\"Mongo selector can't be an array.\");\n  }\n\n  if (!selector || (('_id' in selector) && !selector._id))\n    // can't match anything\n    return {_id: Random.id()};\n\n  var ret = {};\n  _.each(selector, function (value, key) {\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\n    if (value instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value);\n    } else if (value && value.$regex instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\n      // if value is {$regex: /foo/, $options: ...} then $options\n      // override the ones set on $regex.\n      if (value.$options !== undefined)\n        ret[key].$options = value.$options;\n    }\n    else if (_.contains(['$or','$and','$nor'], key)) {\n      // Translate lower levels of $and/$or/$nor\n      ret[key] = _.map(value, function (v) {\n        return Mongo.Collection._rewriteSelector(v);\n      });\n    } else {\n      ret[key] = value;\n    }\n  });\n  return ret;\n};\n\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\n// selector\nvar convertRegexpToMongoSelector = function (regexp) {\n  check(regexp, RegExp); // safety belt\n\n  var selector = {$regex: regexp.source};\n  var regexOptions = '';\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\n  if (regexp.ignoreCase)\n    regexOptions += 'i';\n  if (regexp.multiline)\n    regexOptions += 'm';\n  if (regexOptions)\n    selector.$options = regexOptions;\n\n  return selector;\n};\n\nvar throwIfSelectorIsNotId = function (selector, methodName) {\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n    throw new Meteor.Error(\n      403, \"Not permitted. Untrusted code may only \" + methodName +\n        \" documents by ID.\");\n  }\n};\n\n// 'insert' immediately returns the inserted document's new _id.\n// The others return values immediately if you are in a stub, an in-memory\n// unmanaged collection, or a mongo-backed collection and you don't pass a\n// callback. 'update' and 'remove' return the number of affected\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an\n// insert happened, 'insertedId'.\n//\n// Otherwise, the semantics are exactly like other methods: they take\n// a callback as an optional last argument; if no callback is\n// provided, they block until the operation is complete, and throw an\n// exception if it fails; if a callback is provided, then they don't\n// necessarily block, and they call the callback when they finish with error and\n// result arguments.  (The insert method provides the document ID as its result;\n// update and remove provide the number of affected docs as the result; upsert\n// provides an object with numberAffected and maybe insertedId.)\n//\n// On the client, blocking is impossible, so if a callback\n// isn't provided, they just return immediately and any error\n// information is lost.\n//\n// There's one more tweak. On the client, if you don't provide a\n// callback, then if there is an error, a message will be logged with\n// Meteor._debug.\n//\n// The intent (though this is actually determined by the underlying\n// drivers) is that the operations should be done synchronously, not\n// generating their result until the database has acknowledged\n// them. In the future maybe we should provide a flag to turn this\n// off.\n\n/**\n * @summary Insert a document in the collection.  Returns its unique _id.\n * @locus Anywhere\n * @method  insert\n * @memberOf Mongo.Collection\n * @instance\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */\n\n/**\n * @summary Modify one or more documents in the collection. Returns the number of affected documents.\n * @locus Anywhere\n * @method update\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\n\n/**\n * @summary Remove documents from the collection\n * @locus Anywhere\n * @method remove\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to remove\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.\n */\n\n_.each([\"insert\", \"update\", \"remove\"], function (name) {\n  Mongo.Collection.prototype[name] = function (/* arguments */) {\n    var self = this;\n    var args = _.toArray(arguments);\n    var callback;\n    var insertId;\n    var ret;\n\n    // Pull off any callback (or perhaps a 'callback' variable that was passed\n    // in undefined, like how 'upsert' does it).\n    if (args.length &&\n        (args[args.length - 1] === undefined ||\n         args[args.length - 1] instanceof Function)) {\n      callback = args.pop();\n    }\n\n    if (name === \"insert\") {\n      if (!args.length)\n        throw new Error(\"insert requires an argument\");\n      // shallow-copy the document and generate an ID\n      args[0] = _.extend({}, args[0]);\n      if ('_id' in args[0]) {\n        insertId = args[0]._id;\n        if (!insertId || !(typeof insertId === 'string'\n              || insertId instanceof Mongo.ObjectID))\n          throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");\n      } else {\n        var generateId = true;\n        // Don't generate the id if we're the client and the 'outermost' call\n        // This optimization saves us passing both the randomSeed and the id\n        // Passing both is redundant.\n        if (self._connection && self._connection !== Meteor.server) {\n          var enclosing = DDP._CurrentInvocation.get();\n          if (!enclosing) {\n            generateId = false;\n          }\n        }\n        if (generateId) {\n          insertId = args[0]._id = self._makeNewID();\n        }\n      }\n    } else {\n      args[0] = Mongo.Collection._rewriteSelector(args[0]);\n\n      if (name === \"update\") {\n        // Mutate args but copy the original options object. We need to add\n        // insertedId to options, but don't want to mutate the caller's options\n        // object. We need to mutate `args` because we pass `args` into the\n        // driver below.\n        var options = args[2] = _.clone(args[2]) || {};\n        if (options && typeof options !== \"function\" && options.upsert) {\n          // set `insertedId` if absent.  `insertedId` is a Meteor extension.\n          if (options.insertedId) {\n            if (!(typeof options.insertedId === 'string'\n                  || options.insertedId instanceof Mongo.ObjectID))\n              throw new Error(\"insertedId must be string or ObjectID\");\n          } else if (! args[0]._id) {\n            options.insertedId = self._makeNewID();\n          }\n        }\n      }\n    }\n\n    // On inserts, always return the id that we generated; on all other\n    // operations, just return the result from the collection.\n    var chooseReturnValueFromCollectionResult = function (result) {\n      if (name === \"insert\") {\n        if (!insertId && result) {\n          insertId = result;\n        }\n        return insertId;\n      } else {\n        return result;\n      }\n    };\n\n    var wrappedCallback;\n    if (callback) {\n      wrappedCallback = function (error, result) {\n        callback(error, ! error && chooseReturnValueFromCollectionResult(result));\n      };\n    }\n\n    // XXX see #MeteorServerNull\n    if (self._connection && self._connection !== Meteor.server) {\n      // just remote to another endpoint, propagate return value or\n      // exception.\n\n      var enclosing = DDP._CurrentInvocation.get();\n      var alreadyInSimulation = enclosing && enclosing.isSimulation;\n\n      if (Meteor.isClient && !wrappedCallback && ! alreadyInSimulation) {\n        // Client can't block, so it can't report errors by exception,\n        // only by callback. If they forget the callback, give them a\n        // default one that logs the error, so they aren't totally\n        // baffled if their writes don't work because their database is\n        // down.\n        // Don't give a default callback in simulation, because inside stubs we\n        // want to return the results from the local collection immediately and\n        // not force a callback.\n        wrappedCallback = function (err) {\n          if (err)\n            Meteor._debug(name + \" failed: \" + (err.reason || err.stack));\n        };\n      }\n\n      if (!alreadyInSimulation && name !== \"insert\") {\n        // If we're about to actually send an RPC, we should throw an error if\n        // this is a non-ID selector, because the mutation methods only allow\n        // single-ID selectors. (If we don't throw here, we'll see flicker.)\n        throwIfSelectorIsNotId(args[0], name);\n      }\n\n      ret = chooseReturnValueFromCollectionResult(\n        self._connection.apply(self._prefix + name, args, {returnStubValue: true}, wrappedCallback)\n      );\n\n    } else {\n      // it's my collection.  descend into the collection object\n      // and propagate any exception.\n      args.push(wrappedCallback);\n      try {\n        // If the user provided a callback and the collection implements this\n        // operation asynchronously, then queryRet will be undefined, and the\n        // result will be returned through the callback instead.\n        var queryRet = self._collection[name].apply(self._collection, args);\n        ret = chooseReturnValueFromCollectionResult(queryRet);\n      } catch (e) {\n        if (callback) {\n          callback(e);\n          return null;\n        }\n        throw e;\n      }\n    }\n\n    // both sync and async, unless we threw an exception, return ret\n    // (new document ID for insert, num affected for update/remove, object with\n    // numberAffected and maybe insertedId for upsert).\n    return ret;\n  };\n});\n\n/**\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.upsert = function (selector, modifier,\n                                               options, callback) {\n  var self = this;\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  return self.update(selector, modifier,\n              _.extend({}, options, { _returnObject: true, upsert: true }),\n              callback);\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongo.Collection.prototype._ensureIndex = function (index, options) {\n  var self = this;\n  if (!self._collection._ensureIndex)\n    throw new Error(\"Can only call _ensureIndex on server collections\");\n  self._collection._ensureIndex(index, options);\n};\nMongo.Collection.prototype._dropIndex = function (index) {\n  var self = this;\n  if (!self._collection._dropIndex)\n    throw new Error(\"Can only call _dropIndex on server collections\");\n  self._collection._dropIndex(index);\n};\nMongo.Collection.prototype._dropCollection = function () {\n  var self = this;\n  if (!self._collection.dropCollection)\n    throw new Error(\"Can only call _dropCollection on server collections\");\n  self._collection.dropCollection();\n};\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {\n  var self = this;\n  if (!self._collection._createCappedCollection)\n    throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);\n};\n\n/**\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawCollection = function () {\n  var self = this;\n  if (! self._collection.rawCollection) {\n    throw new Error(\"Can only call rawCollection on server collections\");\n  }\n  return self._collection.rawCollection();\n};\n\n/**\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawDatabase = function () {\n  var self = this;\n  if (! (self._driver.mongo && self._driver.mongo.db)) {\n    throw new Error(\"Can only call rawDatabase on server collections\");\n  }\n  return self._driver.mongo.db;\n};\n\n\n/**\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere\n * @class\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create\n */\nMongo.ObjectID = MongoID.ObjectID;\n\n/**\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n * @class\n * @instanceName cursor\n */\nMongo.Cursor = LocalCollection.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.Cursor = Mongo.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.ObjectID = Mongo.ObjectID;\n\n///\n/// Remote methods and access control.\n///\n\n// Restrict default mutators on collection. allow() and deny() take the\n// same options:\n//\n// options.insert {Function(userId, doc)}\n//   return true to allow/deny adding this document\n//\n// options.update {Function(userId, docs, fields, modifier)}\n//   return true to allow/deny updating these documents.\n//   `fields` is passed as an array of fields that are to be modified\n//\n// options.remove {Function(userId, docs)}\n//   return true to allow/deny removing these documents\n//\n// options.fetch {Array}\n//   Fields to fetch for these validators. If any call to allow or deny\n//   does not have this option then all fields are loaded.\n//\n// allow and deny can be called multiple times. The validators are\n// evaluated as follows:\n// - If neither deny() nor allow() has been called on the collection,\n//   then the request is allowed if and only if the \"insecure\" smart\n//   package is in use.\n// - Otherwise, if any deny() function returns true, the request is denied.\n// - Otherwise, if any allow() function returns true, the request is allowed.\n// - Otherwise, the request is denied.\n//\n// Meteor may call your deny() and allow() functions in any order, and may not\n// call all of them if it is able to make a decision without calling them all\n// (so don't include side effects).\n\n(function () {\n  var addValidator = function(allowOrDeny, options) {\n    // validate keys\n    var VALID_KEYS = ['insert', 'update', 'remove', 'fetch', 'transform'];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key))\n        throw new Error(allowOrDeny + \": Invalid key: \" + key);\n    });\n\n    var self = this;\n    self._restricted = true;\n\n    _.each(['insert', 'update', 'remove'], function (name) {\n      if (options[name]) {\n        if (!(options[name] instanceof Function)) {\n          throw new Error(allowOrDeny + \": Value for `\" + name + \"` must be a function\");\n        }\n\n        // If the transform is specified at all (including as 'null') in this\n        // call, then take that; otherwise, take the transform from the\n        // collection.\n        if (options.transform === undefined) {\n          options[name].transform = self._transform;  // already wrapped\n        } else {\n          options[name].transform = LocalCollection.wrapTransform(\n            options.transform);\n        }\n\n        self._validators[name][allowOrDeny].push(options[name]);\n      }\n    });\n\n    // Only update the fetch fields if we're passed things that affect\n    // fetching. This way allow({}) and allow({insert: f}) don't result in\n    // setting fetchAllFields\n    if (options.update || options.remove || options.fetch) {\n      if (options.fetch && !(options.fetch instanceof Array)) {\n        throw new Error(allowOrDeny + \": Value for `fetch` must be an array\");\n      }\n      self._updateFetch(options.fetch);\n    }\n  };\n\n  /**\n   * @summary Allow users to write directly to this collection from client code, subject to limitations you define.\n   * @locus Server\n   * @param {Object} options\n   * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.\n   * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.\n   */\n  Mongo.Collection.prototype.allow = function(options) {\n    addValidator.call(this, 'allow', options);\n  };\n\n  /**\n   * @summary Override `allow` rules.\n   * @locus Server\n   * @param {Object} options\n   * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.\n   * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.\n   */\n  Mongo.Collection.prototype.deny = function(options) {\n    addValidator.call(this, 'deny', options);\n  };\n})();\n\n\nMongo.Collection.prototype._defineMutationMethods = function() {\n  var self = this;\n\n  // set to true once we call any allow or deny methods. If true, use\n  // allow/deny semantics. If false, use insecure mode semantics.\n  self._restricted = false;\n\n  // Insecure mode (default to allowing writes). Defaults to 'undefined' which\n  // means insecure iff the insecure package is loaded. This property can be\n  // overriden by tests or packages wishing to change insecure mode behavior of\n  // their collections.\n  self._insecure = undefined;\n\n  self._validators = {\n    insert: {allow: [], deny: []},\n    update: {allow: [], deny: []},\n    remove: {allow: [], deny: []},\n    upsert: {allow: [], deny: []}, // dummy arrays; can't set these!\n    fetch: [],\n    fetchAllFields: false\n  };\n\n  if (!self._name)\n    return; // anonymous collection\n\n  // XXX Think about method namespacing. Maybe methods should be\n  // \"Meteor:Mongo:insert/NAME\"?\n  self._prefix = '/' + self._name + '/';\n\n  // mutation methods\n  if (self._connection) {\n    var m = {};\n\n    _.each(['insert', 'update', 'remove'], function (method) {\n      m[self._prefix + method] = function (/* ... */) {\n        // All the methods do their own validation, instead of using check().\n        check(arguments, [Match.Any]);\n        var args = _.toArray(arguments);\n        try {\n          // For an insert, if the client didn't specify an _id, generate one\n          // now; because this uses DDP.randomStream, it will be consistent with\n          // what the client generated. We generate it now rather than later so\n          // that if (eg) an allow/deny rule does an insert to the same\n          // collection (not that it really should), the generated _id will\n          // still be the first use of the stream and will be consistent.\n          //\n          // However, we don't actually stick the _id onto the document yet,\n          // because we want allow/deny rules to be able to differentiate\n          // between arbitrary client-specified _id fields and merely\n          // client-controlled-via-randomSeed fields.\n          var generatedId = null;\n          if (method === \"insert\" && !_.has(args[0], '_id')) {\n            generatedId = self._makeNewID();\n          }\n\n          if (this.isSimulation) {\n            // In a client simulation, you can do any mutation (even with a\n            // complex selector).\n            if (generatedId !== null)\n              args[0]._id = generatedId;\n            return self._collection[method].apply(\n              self._collection, args);\n          }\n\n          // This is the server receiving a method call from the client.\n\n          // We don't allow arbitrary selectors in mutations from the client: only\n          // single-ID selectors.\n          if (method !== 'insert')\n            throwIfSelectorIsNotId(args[0], method);\n\n          if (self._restricted) {\n            // short circuit if there is no way it will pass.\n            if (self._validators[method].allow.length === 0) {\n              throw new Meteor.Error(\n                403, \"Access denied. No allow validators set on restricted \" +\n                  \"collection for method '\" + method + \"'.\");\n            }\n\n            var validatedMethodName =\n                  '_validated' + method.charAt(0).toUpperCase() + method.slice(1);\n            args.unshift(this.userId);\n            method === 'insert' && args.push(generatedId);\n            return self[validatedMethodName].apply(self, args);\n          } else if (self._isInsecure()) {\n            if (generatedId !== null)\n              args[0]._id = generatedId;\n            // In insecure mode, allow any mutation (with a simple selector).\n            // XXX This is kind of bogus.  Instead of blindly passing whatever\n            //     we get from the network to this function, we should actually\n            //     know the correct arguments for the function and pass just\n            //     them.  For example, if you have an extraneous extra null\n            //     argument and this is Mongo on the server, the .wrapAsync'd\n            //     functions like update will get confused and pass the\n            //     \"fut.resolver()\" in the wrong slot, where _update will never\n            //     invoke it. Bam, broken DDP connection.  Probably should just\n            //     take this whole method and write it three times, invoking\n            //     helpers for the common code.\n            return self._collection[method].apply(self._collection, args);\n          } else {\n            // In secure mode, if we haven't called allow or deny, then nothing\n            // is permitted.\n            throw new Meteor.Error(403, \"Access denied\");\n          }\n        } catch (e) {\n          if (e.name === 'MongoError' || e.name === 'MinimongoError') {\n            throw new Meteor.Error(409, e.toString());\n          } else {\n            throw e;\n          }\n        }\n      };\n    });\n    // Minimongo on the server gets no stubs; instead, by default\n    // it wait()s until its result is ready, yielding.\n    // This matches the behavior of macromongo on the server better.\n    // XXX see #MeteorServerNull\n    if (Meteor.isClient || self._connection === Meteor.server)\n      self._connection.methods(m);\n  }\n};\n\n\nMongo.Collection.prototype._updateFetch = function (fields) {\n  var self = this;\n\n  if (!self._validators.fetchAllFields) {\n    if (fields) {\n      self._validators.fetch = _.union(self._validators.fetch, fields);\n    } else {\n      self._validators.fetchAllFields = true;\n      // clear fetch just to make sure we don't accidentally read it\n      self._validators.fetch = null;\n    }\n  }\n};\n\nMongo.Collection.prototype._isInsecure = function () {\n  var self = this;\n  if (self._insecure === undefined)\n    return !!Package.insecure;\n  return self._insecure;\n};\n\nvar docToValidate = function (validator, doc, generatedId) {\n  var ret = doc;\n  if (validator.transform) {\n    ret = EJSON.clone(doc);\n    // If you set a server-side transform on your collection, then you don't get\n    // to tell the difference between \"client specified the ID\" and \"server\n    // generated the ID\", because transforms expect to get _id.  If you want to\n    // do that check, you can do it with a specific\n    // `C.allow({insert: f, transform: null})` validator.\n    if (generatedId !== null) {\n      ret._id = generatedId;\n    }\n    ret = validator.transform(ret);\n  }\n  return ret;\n};\n\nMongo.Collection.prototype._validatedInsert = function (userId, doc,\n                                                         generatedId) {\n  var self = this;\n\n  // call user validators.\n  // Any deny returns true means denied.\n  if (_.any(self._validators.insert.deny, function(validator) {\n    return validator(userId, docToValidate(validator, doc, generatedId));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n  // Any allow returns true means proceed. Throw error if they all fail.\n  if (_.all(self._validators.insert.allow, function(validator) {\n    return !validator(userId, docToValidate(validator, doc, generatedId));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n\n  // If we generated an ID above, insert it now: after the validation, but\n  // before actually inserting.\n  if (generatedId !== null)\n    doc._id = generatedId;\n\n  self._collection.insert.call(self._collection, doc);\n};\n\nvar transformDoc = function (validator, doc) {\n  if (validator.transform)\n    return validator.transform(doc);\n  return doc;\n};\n\n// Simulate a mongo `update` operation while validating that the access\n// control rules set by calls to `allow/deny` are satisfied. If all\n// pass, rewrite the mongo operation to use $in to set the list of\n// document ids to change ##ValidatedChange\nMongo.Collection.prototype._validatedUpdate = function(\n    userId, selector, mutator, options) {\n  var self = this;\n\n  check(mutator, Object);\n\n  options = _.clone(options) || {};\n\n  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector))\n    throw new Error(\"validated update should be of a single ID\");\n\n  // We don't support upserts because they don't fit nicely into allow/deny\n  // rules.\n  if (options.upsert)\n    throw new Meteor.Error(403, \"Access denied. Upserts not \" +\n                           \"allowed in a restricted collection.\");\n\n  var noReplaceError = \"Access denied. In a restricted collection you can only\" +\n        \" update documents, not replace them. Use a Mongo update operator, such \" +\n        \"as '$set'.\";\n\n  // compute modified fields\n  var fields = [];\n  if (_.isEmpty(mutator)) {\n    throw new Meteor.Error(403, noReplaceError);\n  }\n  _.each(mutator, function (params, op) {\n    if (op.charAt(0) !== '$') {\n      throw new Meteor.Error(403, noReplaceError);\n    } else if (!_.has(ALLOWED_UPDATE_OPERATIONS, op)) {\n      throw new Meteor.Error(\n        403, \"Access denied. Operator \" + op + \" not allowed in a restricted collection.\");\n    } else {\n      _.each(_.keys(params), function (field) {\n        // treat dotted fields as if they are replacing their\n        // top-level part\n        if (field.indexOf('.') !== -1)\n          field = field.substring(0, field.indexOf('.'));\n\n        // record the field we are trying to change\n        if (!_.contains(fields, field))\n          fields.push(field);\n      });\n    }\n  });\n\n  var findOptions = {transform: null};\n  if (!self._validators.fetchAllFields) {\n    findOptions.fields = {};\n    _.each(self._validators.fetch, function(fieldName) {\n      findOptions.fields[fieldName] = 1;\n    });\n  }\n\n  var doc = self._collection.findOne(selector, findOptions);\n  if (!doc)  // none satisfied!\n    return 0;\n\n  // call user validators.\n  // Any deny returns true means denied.\n  if (_.any(self._validators.update.deny, function(validator) {\n    var factoriedDoc = transformDoc(validator, doc);\n    return validator(userId,\n                     factoriedDoc,\n                     fields,\n                     mutator);\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n  // Any allow returns true means proceed. Throw error if they all fail.\n  if (_.all(self._validators.update.allow, function(validator) {\n    var factoriedDoc = transformDoc(validator, doc);\n    return !validator(userId,\n                      factoriedDoc,\n                      fields,\n                      mutator);\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n\n  options._forbidReplace = true;\n\n  // Back when we supported arbitrary client-provided selectors, we actually\n  // rewrote the selector to include an _id clause before passing to Mongo to\n  // avoid races, but since selector is guaranteed to already just be an ID, we\n  // don't have to any more.\n\n  return self._collection.update.call(\n    self._collection, selector, mutator, options);\n};\n\n// Only allow these operations in validated updates. Specifically\n// whitelist operations, rather than blacklist, so new complex\n// operations that are added aren't automatically allowed. A complex\n// operation is one that does more than just modify its target\n// field. For now this contains all update operations except '$rename'.\n// http://docs.mongodb.org/manual/reference/operators/#update\nvar ALLOWED_UPDATE_OPERATIONS = {\n  $inc:1, $set:1, $unset:1, $addToSet:1, $pop:1, $pullAll:1, $pull:1,\n  $pushAll:1, $push:1, $bit:1\n};\n\n// Simulate a mongo `remove` operation while validating access control\n// rules. See #ValidatedChange\nMongo.Collection.prototype._validatedRemove = function(userId, selector) {\n  var self = this;\n\n  var findOptions = {transform: null};\n  if (!self._validators.fetchAllFields) {\n    findOptions.fields = {};\n    _.each(self._validators.fetch, function(fieldName) {\n      findOptions.fields[fieldName] = 1;\n    });\n  }\n\n  var doc = self._collection.findOne(selector, findOptions);\n  if (!doc)\n    return 0;\n\n  // call user validators.\n  // Any deny returns true means denied.\n  if (_.any(self._validators.remove.deny, function(validator) {\n    return validator(userId, transformDoc(validator, doc));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n  // Any allow returns true means proceed. Throw error if they all fail.\n  if (_.all(self._validators.remove.allow, function(validator) {\n    return !validator(userId, transformDoc(validator, doc));\n  })) {\n    throw new Meteor.Error(403, \"Access denied\");\n  }\n\n  // Back when we supported arbitrary client-provided selectors, we actually\n  // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to\n  // Mongo to avoid races, but since selector is guaranteed to already just be\n  // an ID, we don't have to any more.\n\n  return self._collection.remove.call(self._collection, selector);\n};\n\n/**\n * @deprecated in 0.9.1\n */\nMeteor.Collection = Mongo.Collection;\n"]}}]
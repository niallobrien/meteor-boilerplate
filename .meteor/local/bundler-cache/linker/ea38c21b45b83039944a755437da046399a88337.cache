[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar __coffeescriptShare, ActiveRoute;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/zimme_active-route/packages/zimme_active-route.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n(function () {                                                                                                        // 1\n                                                                                                                      // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/zimme:active-route/lib/activeroute.coffee.js                                                           //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar checkArgument, checkRouterPackages, errorMessages, fr, ir, test;                                                  // 10\n                                                                                                                      // 11\nfr = ir = null;                                                                                                       // 12\n                                                                                                                      // 13\ncheckArgument = function(arg) {                                                                                       // 14\n  var error;                                                                                                          // 15\n  try {                                                                                                               // 16\n    return check(arg, Match.OneOf(RegExp, String));                                                                   // 17\n  } catch (_error) {                                                                                                  // 18\n    error = _error;                                                                                                   // 19\n    throw new Error(errorMessages.invalidArgument);                                                                   // 20\n  }                                                                                                                   // 21\n};                                                                                                                    // 22\n                                                                                                                      // 23\ncheckRouterPackages = function() {                                                                                    // 24\n  var _ref;                                                                                                           // 25\n  fr = (_ref = Package['kadira:flow-router']) != null ? _ref : Package['meteorhacks:flow-router'];                    // 26\n  ir = Package['iron:router'];                                                                                        // 27\n  if (!(ir || fr)) {                                                                                                  // 28\n    throw new Error(errorMessages.noSupportedRouter);                                                                 // 29\n  }                                                                                                                   // 30\n};                                                                                                                    // 31\n                                                                                                                      // 32\nerrorMessages = {                                                                                                     // 33\n  noSupportedRouter: 'No supported router installed. Please install ' + 'iron:router or meteorhacks:flow-router.',    // 34\n  invalidArgument: 'Invalid argument, must be String or RegExp.'                                                      // 35\n};                                                                                                                    // 36\n                                                                                                                      // 37\nshare.config = new ReactiveDict('activeRouteConfig');                                                                 // 38\n                                                                                                                      // 39\nshare.config.setDefault({                                                                                             // 40\n  activeClass: 'active',                                                                                              // 41\n  caseSensitive: true,                                                                                                // 42\n  disabledClass: 'disabled'                                                                                           // 43\n});                                                                                                                   // 44\n                                                                                                                      // 45\ntest = function(value, pattern) {                                                                                     // 46\n  var result;                                                                                                         // 47\n  if (!value) {                                                                                                       // 48\n    return false;                                                                                                     // 49\n  }                                                                                                                   // 50\n  if (Match.test(pattern, RegExp)) {                                                                                  // 51\n    result = value.search(pattern);                                                                                   // 52\n    result = result > -1;                                                                                             // 53\n  } else if (Match.test(pattern, String)) {                                                                           // 54\n    if (share.config.equals('caseSensitive', false)) {                                                                // 55\n      value = value.toLowerCase();                                                                                    // 56\n      pattern = pattern.toLowerCase();                                                                                // 57\n    }                                                                                                                 // 58\n    result = value === pattern;                                                                                       // 59\n  }                                                                                                                   // 60\n  return result != null ? result : result = false;                                                                    // 61\n};                                                                                                                    // 62\n                                                                                                                      // 63\nActiveRoute = {                                                                                                       // 64\n  config: function() {                                                                                                // 65\n    return this.configure.apply(this, arguments);                                                                     // 66\n  },                                                                                                                  // 67\n  configure: function(options) {                                                                                      // 68\n    if (Meteor.isServer) {                                                                                            // 69\n      return;                                                                                                         // 70\n    }                                                                                                                 // 71\n    share.config.set(options);                                                                                        // 72\n  },                                                                                                                  // 73\n  name: function(routeName) {                                                                                         // 74\n    var currentRouteName, _ref, _ref1;                                                                                // 75\n    checkRouterPackages();                                                                                            // 76\n    if (Meteor.isServer) {                                                                                            // 77\n      return;                                                                                                         // 78\n    }                                                                                                                 // 79\n    checkArgument(routeName);                                                                                         // 80\n    if (ir) {                                                                                                         // 81\n      currentRouteName = (_ref = ir.Router.current()) != null ? (_ref1 = _ref.route) != null ? typeof _ref1.getName === \"function\" ? _ref1.getName() : void 0 : void 0 : void 0;\n    }                                                                                                                 // 83\n    if (fr) {                                                                                                         // 84\n      if (currentRouteName == null) {                                                                                 // 85\n        currentRouteName = fr.FlowRouter.getRouteName();                                                              // 86\n      }                                                                                                               // 87\n    }                                                                                                                 // 88\n    return test(currentRouteName, routeName);                                                                         // 89\n  },                                                                                                                  // 90\n  path: function(path) {                                                                                              // 91\n    var controller, currentPath;                                                                                      // 92\n    checkRouterPackages();                                                                                            // 93\n    if (Meteor.isServer) {                                                                                            // 94\n      return;                                                                                                         // 95\n    }                                                                                                                 // 96\n    checkArgument(path);                                                                                              // 97\n    if (ir) {                                                                                                         // 98\n      controller = ir.Router.current();                                                                               // 99\n      if (controller != null ? controller.route : void 0) {                                                           // 100\n        currentPath = controller != null ? controller.location.get().path : void 0;                                   // 101\n      }                                                                                                               // 102\n    }                                                                                                                 // 103\n    if (fr) {                                                                                                         // 104\n      fr.FlowRouter.watchPathChange();                                                                                // 105\n      if (currentPath == null) {                                                                                      // 106\n        currentPath = fr.FlowRouter.current().path;                                                                   // 107\n      }                                                                                                               // 108\n    }                                                                                                                 // 109\n    return test(currentPath, path);                                                                                   // 110\n  }                                                                                                                   // 111\n};                                                                                                                    // 112\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 114\n}).call(this);                                                                                                        // 115\n                                                                                                                      // 116\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['zimme:active-route'] = {\n  ActiveRoute: ActiveRoute\n};\n\n})();\n","servePath":"/packages/zimme_active-route.js","sourceMap":{"version":3,"sources":["/packages/zimme_active-route/packages/zimme_active-route.js"],"names":[],"mappingsfile":"/packages/zimme_active-route.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/zimme:active-route/lib/activeroute.coffee.js                                                           //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar checkArgument, checkRouterPackages, errorMessages, fr, ir, test;             \n\nfr = ir = null;\n\ncheckArgument = function(arg) {\n  var error;\n  try {\n    return check(arg, Match.OneOf(RegExp, String));\n  } catch (_error) {\n    error = _error;\n    throw new Error(errorMessages.invalidArgument);\n  }\n};\n\ncheckRouterPackages = function() {\n  var _ref;\n  fr = (_ref = Package['kadira:flow-router']) != null ? _ref : Package['meteorhacks:flow-router'];\n  ir = Package['iron:router'];\n  if (!(ir || fr)) {\n    throw new Error(errorMessages.noSupportedRouter);\n  }\n};\n\nerrorMessages = {\n  noSupportedRouter: 'No supported router installed. Please install ' + 'iron:router or meteorhacks:flow-router.',\n  invalidArgument: 'Invalid argument, must be String or RegExp.'\n};\n\nshare.config = new ReactiveDict('activeRouteConfig');\n\nshare.config.setDefault({\n  activeClass: 'active',\n  caseSensitive: true,\n  disabledClass: 'disabled'\n});\n\ntest = function(value, pattern) {\n  var result;\n  if (!value) {\n    return false;\n  }\n  if (Match.test(pattern, RegExp)) {\n    result = value.search(pattern);\n    result = result > -1;\n  } else if (Match.test(pattern, String)) {\n    if (share.config.equals('caseSensitive', false)) {\n      value = value.toLowerCase();\n      pattern = pattern.toLowerCase();\n    }\n    result = value === pattern;\n  }\n  return result != null ? result : result = false;\n};\n\nActiveRoute = {\n  config: function() {\n    return this.configure.apply(this, arguments);\n  },\n  configure: function(options) {\n    if (Meteor.isServer) {\n      return;\n    }\n    share.config.set(options);\n  },\n  name: function(routeName) {\n    var currentRouteName, _ref, _ref1;\n    checkRouterPackages();\n    if (Meteor.isServer) {\n      return;\n    }\n    checkArgument(routeName);\n    if (ir) {\n      currentRouteName = (_ref = ir.Router.current()) != null ? (_ref1 = _ref.route) != null ? typeof _ref1.getName === \"function\" ? _ref1.getName() : void 0 : void 0 : void 0;\n    }\n    if (fr) {\n      if (currentRouteName == null) {\n        currentRouteName = fr.FlowRouter.getRouteName();\n      }\n    }\n    return test(currentRouteName, routeName);\n  },\n  path: function(path) {\n    var controller, currentPath;\n    checkRouterPackages();\n    if (Meteor.isServer) {\n      return;\n    }\n    checkArgument(path);\n    if (ir) {\n      controller = ir.Router.current();\n      if (controller != null ? controller.route : void 0) {\n        currentPath = controller != null ? controller.location.get().path : void 0;\n      }\n    }\n    if (fr) {\n      fr.FlowRouter.watchPathChange();\n      if (currentPath == null) {\n        currentPath = fr.FlowRouter.current().path;\n      }\n    }\n    return test(currentPath, path);\n  }\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]
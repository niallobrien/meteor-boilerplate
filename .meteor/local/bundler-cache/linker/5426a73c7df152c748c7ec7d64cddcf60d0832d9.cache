[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Astro = Package['jagi:astronomy'].Astro;\nvar Astronomy = Package['jagi:astronomy'].Astronomy;\nvar ReactiveMap = Package['jagi:reactive-map'].ReactiveMap;\nvar _ = Package.underscore._;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Validators, ValidationError, ValidatorDefinition, onInitModule, onInitClass, onInitInstance;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/jagi_astronomy-validators/packages/jagi_astronomy-validators.js                         //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n(function () {                                                                                      // 1\n                                                                                                    // 2\n///////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                           //     // 4\n// packages/jagi:astronomy-validators/lib/module/global.js                                   //     // 5\n//                                                                                           //     // 6\n///////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                             //     // 8\nAstro.validators = Validators = {};                                                          // 1   // 9\n                                                                                             // 2   // 10\n///////////////////////////////////////////////////////////////////////////////////////////////     // 11\n                                                                                                    // 12\n}).call(this);                                                                                      // 13\n                                                                                                    // 14\n                                                                                                    // 15\n                                                                                                    // 16\n                                                                                                    // 17\n                                                                                                    // 18\n                                                                                                    // 19\n(function () {                                                                                      // 20\n                                                                                                    // 21\n///////////////////////////////////////////////////////////////////////////////////////////////     // 22\n//                                                                                           //     // 23\n// packages/jagi:astronomy-validators/lib/module/error.js                                    //     // 24\n//                                                                                           //     // 25\n///////////////////////////////////////////////////////////////////////////////////////////////     // 26\n                                                                                             //     // 27\nValidationError = function(errors) {                                                         // 1   // 28\n  this.errors = errors;                                                                      // 2   // 29\n};                                                                                           // 3   // 30\n                                                                                             // 4   // 31\n///////////////////////////////////////////////////////////////////////////////////////////////     // 32\n                                                                                                    // 33\n}).call(this);                                                                                      // 34\n                                                                                                    // 35\n                                                                                                    // 36\n                                                                                                    // 37\n                                                                                                    // 38\n                                                                                                    // 39\n                                                                                                    // 40\n(function () {                                                                                      // 41\n                                                                                                    // 42\n///////////////////////////////////////////////////////////////////////////////////////////////     // 43\n//                                                                                           //     // 44\n// packages/jagi:astronomy-validators/lib/module/utils.js                                    //     // 45\n//                                                                                           //     // 46\n///////////////////////////////////////////////////////////////////////////////////////////////     // 47\n                                                                                             //     // 48\nAstro.utils.validators = {                                                                   // 1   // 49\n  findValidator: function(Class, validatorName) {                                            // 2   // 50\n    return Astro.utils.class.findInClass(Class, function(Class) {                            // 3   // 51\n      return Class.getValidator(validatorName);                                              // 4   // 52\n    });                                                                                      // 5   // 53\n  },                                                                                         // 6   // 54\n                                                                                             // 7   // 55\n  getAllValidators: function(Class) {                                                        // 8   // 56\n    var validators = {};                                                                     // 9   // 57\n                                                                                             // 10  // 58\n    Astro.utils.class.eachClass(Class, function(Class) {                                     // 11  // 59\n      _.extend(validators, Class.getValidators());                                           // 12  // 60\n    });                                                                                      // 13  // 61\n                                                                                             // 14  // 62\n    return validators;                                                                       // 15  // 63\n  }                                                                                          // 16  // 64\n};                                                                                           // 17  // 65\n                                                                                             // 18  // 66\n///////////////////////////////////////////////////////////////////////////////////////////////     // 67\n                                                                                                    // 68\n}).call(this);                                                                                      // 69\n                                                                                                    // 70\n                                                                                                    // 71\n                                                                                                    // 72\n                                                                                                    // 73\n                                                                                                    // 74\n                                                                                                    // 75\n(function () {                                                                                      // 76\n                                                                                                    // 77\n///////////////////////////////////////////////////////////////////////////////////////////////     // 78\n//                                                                                           //     // 79\n// packages/jagi:astronomy-validators/lib/module/validator_definition.js                     //     // 80\n//                                                                                           //     // 81\n///////////////////////////////////////////////////////////////////////////////////////////////     // 82\n                                                                                             //     // 83\nvar checks = {                                                                               // 1   // 84\n  validatorDefinition: function(validatorDefinition) {                                       // 2   // 85\n    // Check if the validator definition is an object.                                       // 3   // 86\n    if (!_.isObject(validatorDefinition)) {                                                  // 4   // 87\n      throw new Error('Provide a validator definition');                                     // 5   // 88\n    }                                                                                        // 6   // 89\n                                                                                             // 7   // 90\n    // Check if the validator name is provided.                                              // 8   // 91\n    if (!_.has(validatorDefinition, 'name')) {                                               // 9   // 92\n      throw new Error('Provide a validator name');                                           // 10  // 93\n    }                                                                                        // 11  // 94\n                                                                                             // 12  // 95\n    // Check if the validator name is a string.                                              // 13  // 96\n    if (!_.isString(validatorDefinition.name)) {                                             // 14  // 97\n      throw new Error('The validator name has to be a string');                              // 15  // 98\n    }                                                                                        // 16  // 99\n                                                                                             // 17  // 100\n    // Check if the validator with the given name already exists.                            // 18  // 101\n    if (_.has(Validators, validatorDefinition.name)) {                                       // 19  // 102\n      throw new Error('Validator with the name `' + validatorDefinition.name +               // 20  // 103\n        '` is already defined');                                                             // 21  // 104\n    }                                                                                        // 22  // 105\n                                                                                             // 23  // 106\n    // Check if the validation function is provided.                                         // 24  // 107\n    if (!_.has(validatorDefinition, 'validate')) {                                           // 25  // 108\n      throw new Error('Provide the `validate` function');                                    // 26  // 109\n    }                                                                                        // 27  // 110\n                                                                                             // 28  // 111\n    // Check if the `validate` attribute is function.                                        // 29  // 112\n    if (!_.isFunction(validatorDefinition.validate)) {                                       // 30  // 113\n      throw new Error('The `validate` attribute has to be a function');                      // 31  // 114\n    }                                                                                        // 32  // 115\n  }                                                                                          // 33  // 116\n};                                                                                           // 34  // 117\n                                                                                             // 35  // 118\nValidatorDefinition = function(validatorDefinition) {                                        // 36  // 119\n  checks.validatorDefinition(validatorDefinition);                                           // 37  // 120\n                                                                                             // 38  // 121\n  var self = this;                                                                           // 39  // 122\n                                                                                             // 40  // 123\n  self.name = validatorDefinition.name;                                                      // 41  // 124\n  self.validate = validatorDefinition.validate;                                              // 42  // 125\n                                                                                             // 43  // 126\n  if (_.has(validatorDefinition, 'events')) {                                                // 44  // 127\n    _.each(validatorDefinition.events, function(eventHandler, eventName) {                   // 45  // 128\n      self.on(eventName, eventHandler);                                                      // 46  // 129\n    });                                                                                      // 47  // 130\n  }                                                                                          // 48  // 131\n};                                                                                           // 49  // 132\n                                                                                             // 50  // 133\nAstro.Events.mixin(ValidatorDefinition.prototype);                                           // 51  // 134\n                                                                                             // 52  // 135\n///////////////////////////////////////////////////////////////////////////////////////////////     // 136\n                                                                                                    // 137\n}).call(this);                                                                                      // 138\n                                                                                                    // 139\n                                                                                                    // 140\n                                                                                                    // 141\n                                                                                                    // 142\n                                                                                                    // 143\n                                                                                                    // 144\n(function () {                                                                                      // 145\n                                                                                                    // 146\n///////////////////////////////////////////////////////////////////////////////////////////////     // 147\n//                                                                                           //     // 148\n// packages/jagi:astronomy-validators/lib/module/validator.js                                //     // 149\n//                                                                                           //     // 150\n///////////////////////////////////////////////////////////////////////////////////////////////     // 151\n                                                                                             //     // 152\nAstro.createValidator = function(validatorDefinition) {                                      // 1   // 153\n  var definition = new ValidatorDefinition(validatorDefinition);                             // 2   // 154\n                                                                                             // 3   // 155\n  var validatorGenerator = function(options, userMessage) {                                  // 4   // 156\n    var validator = function(fieldValue, fieldName) {                                        // 5   // 157\n      return validator.definition.validate.call(                                             // 6   // 158\n        this,                                                                                // 7   // 159\n        fieldValue,                                                                          // 8   // 160\n        fieldName,                                                                           // 9   // 161\n        options, // Validator options passed by user.                                        // 10  // 162\n        validator // Parent validator.                                                       // 11  // 163\n      );                                                                                     // 12  // 164\n    };                                                                                       // 13  // 165\n                                                                                             // 14  // 166\n    _.extend(validator, {                                                                    // 15  // 167\n      definition: definition,                                                                // 16  // 168\n      options: options,                                                                      // 17  // 169\n      message: userMessage                                                                   // 18  // 170\n    });                                                                                      // 19  // 171\n                                                                                             // 20  // 172\n    return validator;                                                                        // 21  // 173\n  };                                                                                         // 22  // 174\n                                                                                             // 23  // 175\n  // Validator is just a function with the \"definition\" property where all the               // 24  // 176\n  // validator definition is stored.                                                         // 25  // 177\n  Validators[definition.name] = validatorGenerator;                                          // 26  // 178\n                                                                                             // 27  // 179\n  // We also return created validator if someone would like not to use long                  // 28  // 180\n  // default namespace which is e.g. `Validators.isString`.                                  // 29  // 181\n  return validatorGenerator;                                                                 // 30  // 182\n};                                                                                           // 31  // 183\n                                                                                             // 32  // 184\n///////////////////////////////////////////////////////////////////////////////////////////////     // 185\n                                                                                                    // 186\n}).call(this);                                                                                      // 187\n                                                                                                    // 188\n                                                                                                    // 189\n                                                                                                    // 190\n                                                                                                    // 191\n                                                                                                    // 192\n                                                                                                    // 193\n(function () {                                                                                      // 194\n                                                                                                    // 195\n///////////////////////////////////////////////////////////////////////////////////////////////     // 196\n//                                                                                           //     // 197\n// packages/jagi:astronomy-validators/lib/module/init_module.js                              //     // 198\n//                                                                                           //     // 199\n///////////////////////////////////////////////////////////////////////////////////////////////     // 200\n                                                                                             //     // 201\nvar generateMessage = function(validator, fieldName, fieldValue) {                           // 1   // 202\n  // Prepare an event object for the \"validationerror\" event.                                // 2   // 203\n  var event = new Astro.Event('validationerror', {                                           // 3   // 204\n    validator: _.has(validator, 'definition') ? validator.definition.name : '',              // 4   // 205\n    value: fieldValue,                                                                       // 5   // 206\n    field: fieldName,                                                                        // 6   // 207\n    options: validator.options,                                                              // 7   // 208\n    message: null,                                                                           // 8   // 209\n  });                                                                                        // 9   // 210\n  event.target = this;                                                                       // 10  // 211\n                                                                                             // 11  // 212\n  // Prepare variable for storing an error message.                                          // 12  // 213\n  var errorMessage;                                                                          // 13  // 214\n                                                                                             // 14  // 215\n  // VALIDATION MESSAGE PASSED TO VALIDATOR.                                                 // 15  // 216\n  if (_.isString(validator.message)) {                                                       // 16  // 217\n    // If user passed a string message then use it.                                          // 17  // 218\n    errorMessage = validator.message;                                                        // 18  // 219\n  } else if (_.isFunction(validator.message)) {                                              // 19  // 220\n    // If user passed a function message then run it as it would be an event.                // 20  // 221\n    validator.message.call(this, event);                                                     // 21  // 222\n    errorMessage = event.data.message;                                                       // 22  // 223\n  }                                                                                          // 23  // 224\n  if (errorMessage) {                                                                        // 24  // 225\n    return errorMessage;                                                                     // 25  // 226\n  }                                                                                          // 26  // 227\n                                                                                             // 27  // 228\n  // VALIDATION MESSAGE ON THE LEVEL OF THE CLASS OR IN THE GLOBAL SCOPE.                    // 28  // 229\n  // If user haven't defined any custom validation message then check                        // 29  // 230\n  // whether there are any \"validationerror\" events that could generate                      // 30  // 231\n  // error message.                                                                          // 31  // 232\n  this.constructor.emitEvent(event);                                                         // 32  // 233\n  errorMessage = event.data.message;                                                         // 33  // 234\n  if (errorMessage) {                                                                        // 34  // 235\n    return errorMessage;                                                                     // 35  // 236\n  }                                                                                          // 36  // 237\n                                                                                             // 37  // 238\n  // DEFAULT VALIDATOR MESSAGE.                                                              // 38  // 239\n  // If in this place the \"errorMessage\" variable is still not set, then we                  // 39  // 240\n  // have to look for the \"validationerror\" event in the validator's                         // 40  // 241\n  // definition.                                                                             // 41  // 242\n  if (                                                                                       // 42  // 243\n    validator.definition &&                                                                  // 43  // 244\n    _.isFunction(validator.definition.emit)                                                  // 44  // 245\n  ) {                                                                                        // 45  // 246\n    validator.definition.emit(event);                                                        // 46  // 247\n    errorMessage = event.data.message;                                                       // 47  // 248\n  }                                                                                          // 48  // 249\n  if (errorMessage) {                                                                        // 49  // 250\n    return errorMessage;                                                                     // 50  // 251\n  }                                                                                          // 51  // 252\n                                                                                             // 52  // 253\n  // DEFAULT MESSAGE.                                                                        // 53  // 254\n  errorMessage = 'The \"' + fieldName + '\" field\\'s value is invalid';                        // 54  // 255\n  return errorMessage;                                                                       // 55  // 256\n};                                                                                           // 56  // 257\n                                                                                             // 57  // 258\nvar validateList = function(validatorsList, patternOrFieldName) {                            // 58  // 259\n  var doc = this;                                                                            // 59  // 260\n  var Class = doc.constructor;                                                               // 60  // 261\n                                                                                             // 61  // 262\n  // Variable for storing fields names. When the second argument of the                      // 62  // 263\n  // \"validateList\" function is pattern, then we have to take fields names out               // 63  // 264\n  // of this pattern. If the argument is a single field name then we just put it             // 64  // 265\n  // in the array.                                                                           // 65  // 266\n  var fieldsNames;                                                                           // 66  // 267\n  // Variable for storing information if the second argument is pattern or just              // 67  // 268\n  // a field name.                                                                           // 68  // 269\n  var isPattern = false;                                                                     // 69  // 270\n  // Try finding the \".$\" string which indicates that it's a pattern.                        // 70  // 271\n  if (patternOrFieldName.indexOf('.$') !== -1) {                                             // 71  // 272\n    // Get fields out of the pattern.                                                        // 72  // 273\n    fieldsNames = Astro.utils.fields.getFieldsNamesFromPattern(                              // 73  // 274\n      doc,                                                                                   // 74  // 275\n      patternOrFieldName                                                                     // 75  // 276\n    );                                                                                       // 76  // 277\n    isPattern = true;                                                                        // 77  // 278\n  } else {                                                                                   // 78  // 279\n    fieldsNames = [patternOrFieldName];                                                      // 79  // 280\n  }                                                                                          // 80  // 281\n                                                                                             // 81  // 282\n  // Loop through list of all fileds names and perform validation on each field.             // 82  // 283\n  _.each(fieldsNames, function(fieldName) {                                                  // 83  // 284\n    // Get the field's value.                                                                // 84  // 285\n    var fieldValue = Astro.utils.fields.getValue(doc, fieldName);                            // 85  // 286\n                                                                                             // 86  // 287\n    // Loop through validators list and run each one.                                        // 87  // 288\n    _.each(validatorsList, function(validator) {                                             // 88  // 289\n      var isValid = validator.call(doc, fieldValue, fieldName);                              // 89  // 290\n                                                                                             // 90  // 291\n      if (!isValid) {                                                                        // 91  // 292\n        // Prepare an object for storing error messages.                                     // 92  // 293\n        var errors = [];                                                                     // 93  // 294\n                                                                                             // 94  // 295\n        // Add a validation error message for the given field.                               // 95  // 296\n        errors.push({                                                                        // 96  // 297\n          validator: validator,                                                              // 97  // 298\n          patternOrFieldName: fieldName,                                                     // 98  // 299\n          fieldValue: fieldValue                                                             // 99  // 300\n        });                                                                                  // 100\n                                                                                             // 101\n        if (isPattern) {                                                                     // 102\n          // Add a validation error message for the given pattern.                           // 103\n          errors.push({                                                                      // 104\n            validator: validator,                                                            // 105\n            patternOrFieldName: patternOrFieldName,                                          // 106\n            fieldValue: fieldValue                                                           // 107\n          });                                                                                // 108\n        }                                                                                    // 109\n                                                                                             // 110\n        // Throw errors.                                                                     // 111\n        throw new ValidationError(errors);                                                   // 112\n      } else {                                                                               // 113\n        // Remove a validator error message if present.                                      // 114\n        doc._errors.delete(fieldName);                                                       // 115\n                                                                                             // 116\n        if (isPattern) {                                                                     // 117\n          doc._errors.delete(patternOrFieldName);                                            // 118\n        }                                                                                    // 119\n      }                                                                                      // 120\n    });                                                                                      // 121\n  });                                                                                        // 122\n};                                                                                           // 123\n                                                                                             // 124\nvar validateOne = function(patternOrFieldName) {                                             // 125\n  var doc = this;                                                                            // 126\n  var Class = doc.constructor;                                                               // 127\n                                                                                             // 128\n  var errors = [];                                                                           // 129\n                                                                                             // 130\n  try {                                                                                      // 131\n    // Get validators only for the given field name.                                         // 132\n    var validatorsList = Astro.utils.validators.findValidator(                               // 133\n      Class,                                                                                 // 134\n      patternOrFieldName                                                                     // 135\n    );                                                                                       // 136\n    // Validate field only if there are any validators.                                      // 137\n    if (validatorsList) {                                                                    // 138\n      validateList.call(doc, validatorsList, patternOrFieldName);                            // 139\n    }                                                                                        // 140\n  } catch (e) {                                                                              // 141\n    if (e instanceof ValidationError) {                                                      // 142\n      errors = errors.concat(e.errors);                                                      // 143\n    }                                                                                        // 144\n  }                                                                                          // 145\n                                                                                             // 146\n  return errors;                                                                             // 147\n};                                                                                           // 148\n                                                                                             // 149\nvar validateAll = function(stopOnFirst) {                                                    // 150\n  if (_.isUndefined(stopOnFirst)) {                                                          // 151\n    stopOnFirst = true;                                                                      // 152\n  }                                                                                          // 153\n                                                                                             // 154\n  var doc = this;                                                                            // 155\n  var Class = doc.constructor;                                                               // 156\n                                                                                             // 157\n  // Get list of the all validators for the given class and run validation.                  // 158\n  var validatorsLists = Astro.utils.validators.getAllValidators(Class);                      // 159\n                                                                                             // 160\n  // Get validation order.                                                                   // 161\n  var validationOrder = Class.getValidationOrder();                                          // 162\n  if (validationOrder) {                                                                     // 163\n    // Get keys of validators that are not present in validation order. We will              // 164\n    // add them at the end of the validation order to ensure that all validators             // 165\n    // have been invoked.                                                                    // 166\n    var diff = _.difference(_.keys(validatorsLists), validationOrder);                       // 167\n    // Add the rest of the validators at the end.                                            // 168\n    if (diff.length > 0) {                                                                   // 169\n      validationOrder = validationOrder.concat(diff);                                        // 170\n    }                                                                                        // 171\n  } else {                                                                                   // 172\n    validationOrder = _.keys(validatorsLists);                                               // 173\n  }                                                                                          // 174\n                                                                                             // 175\n  // Callect errors. If the \"stopOnFirst\" flag is set, then we stop collecting               // 176\n  // errors after first error. Otherwise, we continue until we reach the last                // 177\n  // validatorsList.                                                                         // 178\n  var errors = [];                                                                           // 179\n  _.every(validationOrder, function(patternOrFieldName) {                                    // 180\n    try {                                                                                    // 181\n      var validatorsList = validatorsLists[patternOrFieldName];                              // 182\n      if (validatorsList) {                                                                  // 183\n        validateList.call(doc, validatorsList, patternOrFieldName);                          // 184\n      }                                                                                      // 185\n    } catch (e) {                                                                            // 186\n      if (e instanceof ValidationError) {                                                    // 187\n        errors = errors.concat(e.errors);                                                    // 188\n      }                                                                                      // 189\n    }                                                                                        // 190\n                                                                                             // 191\n    if (stopOnFirst && errors.length > 0) {                                                  // 192\n      return false;                                                                          // 193\n    } else {                                                                                 // 194\n      return true;                                                                           // 195\n    }                                                                                        // 196\n  });                                                                                        // 197\n                                                                                             // 198\n  return errors;                                                                             // 199\n};                                                                                           // 200\n                                                                                             // 201\nvar setErrors = function(errors) {                                                           // 202\n  var doc = this;                                                                            // 203\n                                                                                             // 204\n  _.each(errors, function(error) {                                                           // 205\n    var message = generateMessage.call(                                                      // 206\n      doc,                                                                                   // 207\n      error.validator,                                                                       // 208\n      error.patternOrFieldName,                                                              // 209\n      error.fieldValue                                                                       // 210\n    );                                                                                       // 211\n    doc._errors.set(error.patternOrFieldName, message);                                      // 212\n  });                                                                                        // 213\n};                                                                                           // 214\n                                                                                             // 215\nvar methods = {                                                                              // 216\n  validate: function() {                                                                     // 217\n    var doc = this;                                                                          // 218\n                                                                                             // 219\n    var errors;                                                                              // 220\n    if (arguments.length === 1) {                                                            // 221\n      errors = validateOne.call(doc, arguments[0]);                                          // 222\n    } else if (arguments.length === 0) {                                                     // 223\n      errors = validateAll.call(doc);                                                        // 224\n    }                                                                                        // 225\n                                                                                             // 226\n    setErrors.call(doc, errors);                                                             // 227\n                                                                                             // 228\n    return errors.length === 0;                                                              // 229\n  },                                                                                         // 230\n                                                                                             // 231\n  validateAll: function() {                                                                  // 232\n    var doc = this;                                                                          // 233\n                                                                                             // 234\n    var errors = validateAll.call(doc, false);                                               // 235\n                                                                                             // 236\n    setErrors.call(doc, errors);                                                             // 237\n                                                                                             // 238\n    return errors.length === 0;                                                              // 239\n  },                                                                                         // 240\n                                                                                             // 241\n  getValidationError: function(fieldName) {                                                  // 242\n    return this._errors.get(fieldName);                                                      // 243\n  },                                                                                         // 244\n                                                                                             // 245\n  getValidationErrors: function() {                                                          // 246\n    return this._errors.all();                                                               // 247\n  },                                                                                         // 248\n                                                                                             // 249\n  hasValidationError: function(fieldName) {                                                  // 250\n    return this._errors.has(fieldName);                                                      // 251\n  },                                                                                         // 252\n                                                                                             // 253\n  hasValidationErrors: function() {                                                          // 254\n    return this._errors.size() > 0;                                                          // 255\n  },                                                                                         // 256\n                                                                                             // 257\n  throwValidationException: function() {                                                     // 258\n    throw new Meteor.Error('validation-error', this.getValidationErrors());                  // 259\n  },                                                                                         // 260\n                                                                                             // 261\n  catchValidationException: function(exception) {                                            // 262\n    if (!(exception instanceof Meteor.Error) ||                                              // 263\n      exception.error !== 'validation-error' ||                                              // 264\n      !_.isObject(exception.reason)                                                          // 265\n    ) {                                                                                      // 266\n      return;                                                                                // 267\n    }                                                                                        // 268\n                                                                                             // 269\n    this._errors.set(exception.reason);                                                      // 270\n  }                                                                                          // 271\n};                                                                                           // 272\n                                                                                             // 273\nvar events = {                                                                               // 274\n  toJsonValue: function(e) {                                                                 // 275\n    var self = this;                                                                         // 276\n                                                                                             // 277\n    Tracker.nonreactive(function() {                                                         // 278\n      e.data.errors = self._errors.all();                                                    // 279\n    });                                                                                      // 280\n  },                                                                                         // 281\n                                                                                             // 282\n  fromJsonValue: function(e) {                                                               // 283\n    this._errors.set(e.data.errors);                                                         // 284\n  }                                                                                          // 285\n};                                                                                           // 286\n                                                                                             // 287\nonInitModule = function() {                                                                  // 288\n  _.extend(Astro.BaseClass.prototype, methods);                                              // 289\n                                                                                             // 290\n  Astro.eventManager.on('toJsonValue', events.toJsonValue);                                  // 291\n  Astro.eventManager.on('fromJsonValue', events.fromJsonValue);                              // 292\n};                                                                                           // 293\n                                                                                             // 294\n///////////////////////////////////////////////////////////////////////////////////////////////     // 496\n                                                                                                    // 497\n}).call(this);                                                                                      // 498\n                                                                                                    // 499\n                                                                                                    // 500\n                                                                                                    // 501\n                                                                                                    // 502\n                                                                                                    // 503\n                                                                                                    // 504\n(function () {                                                                                      // 505\n                                                                                                    // 506\n///////////////////////////////////////////////////////////////////////////////////////////////     // 507\n//                                                                                           //     // 508\n// packages/jagi:astronomy-validators/lib/module/init_class.js                               //     // 509\n//                                                                                           //     // 510\n///////////////////////////////////////////////////////////////////////////////////////////////     // 511\n                                                                                             //     // 512\nvar checks = {                                                                               // 1   // 513\n  fieldName: function(fieldName) {                                                           // 2   // 514\n    if (!Match.test(fieldName, String)) {                                                    // 3   // 515\n      throw new Error(                                                                       // 4   // 516\n        'The validator\\'s field name in the \"' + this.getName() +                            // 5   // 517\n        '\" class schema has to be a string'                                                  // 6   // 518\n      );                                                                                     // 7   // 519\n    }                                                                                        // 8   // 520\n  },                                                                                         // 9   // 521\n                                                                                             // 10  // 522\n  validator: function(fieldName, validator) {                                                // 11  // 523\n    if (!Match.test(validator, Match.OneOf(Function, [Function]))) {                         // 12  // 524\n      throw new Error(                                                                       // 13  // 525\n        'The validator for the \"' + fieldName +                                              // 14  // 526\n        '\" field in the \"' + this.getName() +                                                // 15  // 527\n        '\" class schema has to be a function or an array of functions'                       // 16  // 528\n      );                                                                                     // 17  // 529\n    }                                                                                        // 18  // 530\n  },                                                                                         // 19  // 531\n                                                                                             // 20  // 532\n  validators: function(validators) {                                                         // 21  // 533\n    if (!Match.test(validators, Object)) {                                                   // 22  // 534\n      throw new Error(                                                                       // 23  // 535\n        'The validator functions definition in the \"' + this.getName() +                     // 24  // 536\n        '\" class schema has to be an object'                                                 // 25  // 537\n      );                                                                                     // 26  // 538\n    }                                                                                        // 27  // 539\n  },                                                                                         // 28  // 540\n                                                                                             // 29  // 541\n  validationOrder: function(validationOrder) {                                               // 30  // 542\n    if (!Match.test(validationOrder, [String])) {                                            // 31  // 543\n      throw new Error(                                                                       // 32  // 544\n        'The validation order definition in the \"' + this.getName() +                        // 33  // 545\n        '\" class schema has to be an array of strings'                                       // 34  // 546\n      );                                                                                     // 35  // 547\n    }                                                                                        // 36  // 548\n  }                                                                                          // 37  // 549\n};                                                                                           // 38  // 550\n                                                                                             // 39  // 551\nvar methods = {                                                                              // 40  // 552\n  hasValidator: function(fieldName) {                                                        // 41  // 553\n    checks.fieldName.call(this, fieldName);                                                  // 42  // 554\n                                                                                             // 43  // 555\n    return _.has(this.schema.validators, fieldName);                                         // 44  // 556\n  },                                                                                         // 45  // 557\n                                                                                             // 46  // 558\n  getValidator: function(fieldName) {                                                        // 47  // 559\n    checks.fieldName.call(this, fieldName);                                                  // 48  // 560\n                                                                                             // 49  // 561\n    return this.schema.validators[fieldName];                                                // 50  // 562\n  },                                                                                         // 51  // 563\n                                                                                             // 52  // 564\n  getValidators: function() {                                                                // 53  // 565\n    return this.schema.validators;                                                           // 54  // 566\n  },                                                                                         // 55  // 567\n                                                                                             // 56  // 568\n  addValidator: function(fieldName, validators) {                                            // 57  // 569\n    // Check if field name had been provided and is a string.                                // 58  // 570\n    checks.fieldName.call(this, fieldName);                                                  // 59  // 571\n    // Check if validator is a function.                                                     // 60  // 572\n    checks.validator.call(this, fieldName, validators);                                      // 61  // 573\n                                                                                             // 62  // 574\n    this.schema.validators[fieldName] = this.schema.validators[fieldName] || [];             // 63  // 575\n    this.schema.validators[fieldName] = this.schema.validators[fieldName].                   // 64  // 576\n    concat(validators);                                                                      // 65  // 577\n  },                                                                                         // 66  // 578\n                                                                                             // 67  // 579\n  addValidators: function(validators) {                                                      // 68  // 580\n    var self = this;                                                                         // 69  // 581\n                                                                                             // 70  // 582\n    // Validators data has to be an object.                                                  // 71  // 583\n    checks.validators.call(self, validators);                                                // 72  // 584\n                                                                                             // 73  // 585\n    // Loop through list of validators data and add each one.                                // 74  // 586\n    _.each(validators, function(validator, fieldName) {                                      // 75  // 587\n      self.addValidator(fieldName, validator);                                               // 76  // 588\n    });                                                                                      // 77  // 589\n  },                                                                                         // 78  // 590\n                                                                                             // 79  // 591\n  setValidationOrder: function(validationOrder) {                                            // 80  // 592\n    // Check validity of the validation order option.                                        // 81  // 593\n    checks.validationOrder.call(this, validationOrder);                                      // 82  // 594\n                                                                                             // 83  // 595\n    this.schema.validationOrder = validationOrder;                                           // 84  // 596\n  },                                                                                         // 85  // 597\n                                                                                             // 86  // 598\n  getValidationOrder: function() {                                                           // 87  // 599\n    return this.schema.validationOrder;                                                      // 88  // 600\n  }                                                                                          // 89  // 601\n};                                                                                           // 90  // 602\n                                                                                             // 91  // 603\nvar events = {                                                                               // 92  // 604\n  afterset: function(e) {                                                                    // 93  // 605\n    var fieldName = e.data.field;                                                            // 94  // 606\n                                                                                             // 95  // 607\n    // If a validator is defined for given field then clear error message for                // 96  // 608\n    // that field.                                                                           // 97  // 609\n    this._errors.delete(fieldName);                                                          // 98  // 610\n  }                                                                                          // 99  // 611\n};                                                                                           // 100\n                                                                                             // 101\nonInitClass = function(schemaDefinition) {                                                   // 102\n  var Class = this;                                                                          // 103\n                                                                                             // 104\n  _.extend(Class, methods);                                                                  // 105\n                                                                                             // 106\n  // Add the \"validators\" attribute to the schema.                                           // 107\n  Class.schema.validators = {};                                                              // 108\n                                                                                             // 109\n  // Add validators that are defined next to the field definition.                           // 110\n  _.each(                                                                                    // 111\n    schemaDefinition.fields,                                                                 // 112\n    function(fieldDefinition, patternOrFieldName) {                                          // 113\n      if (_.has(fieldDefinition, 'validators')) {                                            // 114\n        Class.addValidator(patternOrFieldName, fieldDefinition.validators);                  // 115\n      }                                                                                      // 116\n    }                                                                                        // 117\n  );                                                                                         // 118\n                                                                                             // 119\n  if (_.has(schemaDefinition, 'validators')) {                                               // 120\n    Class.addValidators(schemaDefinition.validators);                                        // 121\n                                                                                             // 122\n    // Add \"afterset\" event to all classes having validators.                                // 123\n    Class.addEvents(events);                                                                 // 124\n  }                                                                                          // 125\n                                                                                             // 126\n  if (_.has(schemaDefinition, 'validationOrder')) {                                          // 127\n    // Add the validation order option to the class.                                         // 128\n    Class.setValidationOrder(schemaDefinition.validationOrder);                              // 129\n  }                                                                                          // 130\n};                                                                                           // 131\n                                                                                             // 132\n///////////////////////////////////////////////////////////////////////////////////////////////     // 645\n                                                                                                    // 646\n}).call(this);                                                                                      // 647\n                                                                                                    // 648\n                                                                                                    // 649\n                                                                                                    // 650\n                                                                                                    // 651\n                                                                                                    // 652\n                                                                                                    // 653\n(function () {                                                                                      // 654\n                                                                                                    // 655\n///////////////////////////////////////////////////////////////////////////////////////////////     // 656\n//                                                                                           //     // 657\n// packages/jagi:astronomy-validators/lib/module/init_instance.js                            //     // 658\n//                                                                                           //     // 659\n///////////////////////////////////////////////////////////////////////////////////////////////     // 660\n                                                                                             //     // 661\nonInitInstance = function(attrs) {                                                           // 1   // 662\n  this._errors = new ReactiveMap();                                                          // 2   // 663\n};                                                                                           // 3   // 664\n                                                                                             // 4   // 665\n///////////////////////////////////////////////////////////////////////////////////////////////     // 666\n                                                                                                    // 667\n}).call(this);                                                                                      // 668\n                                                                                                    // 669\n                                                                                                    // 670\n                                                                                                    // 671\n                                                                                                    // 672\n                                                                                                    // 673\n                                                                                                    // 674\n(function () {                                                                                      // 675\n                                                                                                    // 676\n///////////////////////////////////////////////////////////////////////////////////////////////     // 677\n//                                                                                           //     // 678\n// packages/jagi:astronomy-validators/lib/module/module.js                                   //     // 679\n//                                                                                           //     // 680\n///////////////////////////////////////////////////////////////////////////////////////////////     // 681\n                                                                                             //     // 682\nAstro.createModule({                                                                         // 1   // 683\n  name: 'validators',                                                                        // 2   // 684\n  init: onInitModule,                                                                        // 3   // 685\n  events: {                                                                                  // 4   // 686\n    initclass: onInitClass,                                                                  // 5   // 687\n    initinstance: onInitInstance                                                             // 6   // 688\n  }                                                                                          // 7   // 689\n});                                                                                          // 8   // 690\n                                                                                             // 9   // 691\n///////////////////////////////////////////////////////////////////////////////////////////////     // 692\n                                                                                                    // 693\n}).call(this);                                                                                      // 694\n                                                                                                    // 695\n                                                                                                    // 696\n                                                                                                    // 697\n                                                                                                    // 698\n                                                                                                    // 699\n                                                                                                    // 700\n(function () {                                                                                      // 701\n                                                                                                    // 702\n///////////////////////////////////////////////////////////////////////////////////////////////     // 703\n//                                                                                           //     // 704\n// packages/jagi:astronomy-validators/lib/validators/type/string.js                          //     // 705\n//                                                                                           //     // 706\n///////////////////////////////////////////////////////////////////////////////////////////////     // 707\n                                                                                             //     // 708\nAstro.createValidator({                                                                      // 1   // 709\n  name: 'string',                                                                            // 2   // 710\n  validate: _.isString,                                                                      // 3   // 711\n  events: {                                                                                  // 4   // 712\n    validationerror: function(e) {                                                           // 5   // 713\n      var fieldName = e.data.field;                                                          // 6   // 714\n                                                                                             // 7   // 715\n      e.data.message = 'The \"' + fieldName +                                                 // 8   // 716\n        '\" field\\'s value has to be a string';                                               // 9   // 717\n    }                                                                                        // 10  // 718\n  }                                                                                          // 11  // 719\n});                                                                                          // 12  // 720\n                                                                                             // 13  // 721\n///////////////////////////////////////////////////////////////////////////////////////////////     // 722\n                                                                                                    // 723\n}).call(this);                                                                                      // 724\n                                                                                                    // 725\n                                                                                                    // 726\n                                                                                                    // 727\n                                                                                                    // 728\n                                                                                                    // 729\n                                                                                                    // 730\n(function () {                                                                                      // 731\n                                                                                                    // 732\n///////////////////////////////////////////////////////////////////////////////////////////////     // 733\n//                                                                                           //     // 734\n// packages/jagi:astronomy-validators/lib/validators/type/number.js                          //     // 735\n//                                                                                           //     // 736\n///////////////////////////////////////////////////////////////////////////////////////////////     // 737\n                                                                                             //     // 738\nAstro.createValidator({                                                                      // 1   // 739\n  name: 'number',                                                                            // 2   // 740\n  validate: function(value) {                                                                // 3   // 741\n    return !_.isNaN(value) && _.isNumber(value);                                             // 4   // 742\n  },                                                                                         // 5   // 743\n  events: {                                                                                  // 6   // 744\n    validationerror: function(e) {                                                           // 7   // 745\n      var fieldName = e.data.field;                                                          // 8   // 746\n                                                                                             // 9   // 747\n      e.data.message = 'The \"' + fieldName +                                                 // 10  // 748\n        '\" field\\'s value has to be a number';                                               // 11  // 749\n    }                                                                                        // 12  // 750\n  }                                                                                          // 13  // 751\n});                                                                                          // 14  // 752\n                                                                                             // 15  // 753\n///////////////////////////////////////////////////////////////////////////////////////////////     // 754\n                                                                                                    // 755\n}).call(this);                                                                                      // 756\n                                                                                                    // 757\n                                                                                                    // 758\n                                                                                                    // 759\n                                                                                                    // 760\n                                                                                                    // 761\n                                                                                                    // 762\n(function () {                                                                                      // 763\n                                                                                                    // 764\n///////////////////////////////////////////////////////////////////////////////////////////////     // 765\n//                                                                                           //     // 766\n// packages/jagi:astronomy-validators/lib/validators/type/boolean.js                         //     // 767\n//                                                                                           //     // 768\n///////////////////////////////////////////////////////////////////////////////////////////////     // 769\n                                                                                             //     // 770\nAstro.createValidator({                                                                      // 1   // 771\n  name: 'boolean',                                                                           // 2   // 772\n  validate: _.isBoolean,                                                                     // 3   // 773\n  events: {                                                                                  // 4   // 774\n    validationerror: function(e) {                                                           // 5   // 775\n      var fieldName = e.data.field;                                                          // 6   // 776\n                                                                                             // 7   // 777\n      e.data.message = 'The \"' + fieldName +                                                 // 8   // 778\n        '\" field\\'s value has to be a boolean';                                              // 9   // 779\n    }                                                                                        // 10  // 780\n  }                                                                                          // 11  // 781\n});                                                                                          // 12  // 782\n                                                                                             // 13  // 783\n///////////////////////////////////////////////////////////////////////////////////////////////     // 784\n                                                                                                    // 785\n}).call(this);                                                                                      // 786\n                                                                                                    // 787\n                                                                                                    // 788\n                                                                                                    // 789\n                                                                                                    // 790\n                                                                                                    // 791\n                                                                                                    // 792\n(function () {                                                                                      // 793\n                                                                                                    // 794\n///////////////////////////////////////////////////////////////////////////////////////////////     // 795\n//                                                                                           //     // 796\n// packages/jagi:astronomy-validators/lib/validators/type/array.js                           //     // 797\n//                                                                                           //     // 798\n///////////////////////////////////////////////////////////////////////////////////////////////     // 799\n                                                                                             //     // 800\nAstro.createValidator({                                                                      // 1   // 801\n  name: 'array',                                                                             // 2   // 802\n  validate: _.isArray,                                                                       // 3   // 803\n  events: {                                                                                  // 4   // 804\n    validationerror: function(e) {                                                           // 5   // 805\n      var fieldName = e.data.field;                                                          // 6   // 806\n                                                                                             // 7   // 807\n      e.data.message = 'The \"' + fieldName +                                                 // 8   // 808\n        '\" field\\'s value has to be an array';                                               // 9   // 809\n    }                                                                                        // 10  // 810\n  }                                                                                          // 11  // 811\n});                                                                                          // 12  // 812\n                                                                                             // 13  // 813\n///////////////////////////////////////////////////////////////////////////////////////////////     // 814\n                                                                                                    // 815\n}).call(this);                                                                                      // 816\n                                                                                                    // 817\n                                                                                                    // 818\n                                                                                                    // 819\n                                                                                                    // 820\n                                                                                                    // 821\n                                                                                                    // 822\n(function () {                                                                                      // 823\n                                                                                                    // 824\n///////////////////////////////////////////////////////////////////////////////////////////////     // 825\n//                                                                                           //     // 826\n// packages/jagi:astronomy-validators/lib/validators/type/object.js                          //     // 827\n//                                                                                           //     // 828\n///////////////////////////////////////////////////////////////////////////////////////////////     // 829\n                                                                                             //     // 830\nAstro.createValidator({                                                                      // 1   // 831\n  name: 'object',                                                                            // 2   // 832\n  validate: _.isObject,                                                                      // 3   // 833\n  events: {                                                                                  // 4   // 834\n    validationerror: function(e) {                                                           // 5   // 835\n      var fieldName = e.data.field;                                                          // 6   // 836\n                                                                                             // 7   // 837\n      e.data.message = 'The \"' + fieldName +                                                 // 8   // 838\n        '\" field\\'s value has to be an object';                                              // 9   // 839\n    }                                                                                        // 10  // 840\n  }                                                                                          // 11  // 841\n});                                                                                          // 12  // 842\n                                                                                             // 13  // 843\n///////////////////////////////////////////////////////////////////////////////////////////////     // 844\n                                                                                                    // 845\n}).call(this);                                                                                      // 846\n                                                                                                    // 847\n                                                                                                    // 848\n                                                                                                    // 849\n                                                                                                    // 850\n                                                                                                    // 851\n                                                                                                    // 852\n(function () {                                                                                      // 853\n                                                                                                    // 854\n///////////////////////////////////////////////////////////////////////////////////////////////     // 855\n//                                                                                           //     // 856\n// packages/jagi:astronomy-validators/lib/validators/type/date.js                            //     // 857\n//                                                                                           //     // 858\n///////////////////////////////////////////////////////////////////////////////////////////////     // 859\n                                                                                             //     // 860\nAstro.createValidator({                                                                      // 1   // 861\n  name: 'date',                                                                              // 2   // 862\n  validate: _.isDate,                                                                        // 3   // 863\n  events: {                                                                                  // 4   // 864\n    validationerror: function(e) {                                                           // 5   // 865\n      var fieldName = e.data.field;                                                          // 6   // 866\n                                                                                             // 7   // 867\n      e.data.message = 'The \"' + fieldName +                                                 // 8   // 868\n        '\" field\\'s value has to be a date';                                                 // 9   // 869\n    }                                                                                        // 10  // 870\n  }                                                                                          // 11  // 871\n});                                                                                          // 12  // 872\n                                                                                             // 13  // 873\n///////////////////////////////////////////////////////////////////////////////////////////////     // 874\n                                                                                                    // 875\n}).call(this);                                                                                      // 876\n                                                                                                    // 877\n                                                                                                    // 878\n                                                                                                    // 879\n                                                                                                    // 880\n                                                                                                    // 881\n                                                                                                    // 882\n(function () {                                                                                      // 883\n                                                                                                    // 884\n///////////////////////////////////////////////////////////////////////////////////////////////     // 885\n//                                                                                           //     // 886\n// packages/jagi:astronomy-validators/lib/validators/type/email.js                           //     // 887\n//                                                                                           //     // 888\n///////////////////////////////////////////////////////////////////////////////////////////////     // 889\n                                                                                             //     // 890\nAstro.createValidator({                                                                      // 1   // 891\n  name: 'email',                                                                             // 2   // 892\n  validate: function(fieldValue) {                                                           // 3   // 893\n    // Create email regular expression.                                                      // 4   // 894\n    var re = /^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,}$/i;                                 // 5   // 895\n                                                                                             // 6   // 896\n    return re.test(fieldValue);                                                              // 7   // 897\n  },                                                                                         // 8   // 898\n  events: {                                                                                  // 9   // 899\n    validationerror: function(e) {                                                           // 10  // 900\n      var fieldName = e.data.field;                                                          // 11  // 901\n                                                                                             // 12  // 902\n      e.data.message = 'The \"' + fieldName +                                                 // 13  // 903\n        '\" field\\'s value has to be an appropiate email address';                            // 14  // 904\n    }                                                                                        // 15  // 905\n  }                                                                                          // 16  // 906\n});                                                                                          // 17  // 907\n                                                                                             // 18  // 908\n///////////////////////////////////////////////////////////////////////////////////////////////     // 909\n                                                                                                    // 910\n}).call(this);                                                                                      // 911\n                                                                                                    // 912\n                                                                                                    // 913\n                                                                                                    // 914\n                                                                                                    // 915\n                                                                                                    // 916\n                                                                                                    // 917\n(function () {                                                                                      // 918\n                                                                                                    // 919\n///////////////////////////////////////////////////////////////////////////////////////////////     // 920\n//                                                                                           //     // 921\n// packages/jagi:astronomy-validators/lib/validators/existence/required.js                   //     // 922\n//                                                                                           //     // 923\n///////////////////////////////////////////////////////////////////////////////////////////////     // 924\n                                                                                             //     // 925\nAstro.createValidator({                                                                      // 1   // 926\n  name: 'required',                                                                          // 2   // 927\n  validate: function(fieldValue) {                                                           // 3   // 928\n    return !_.isNull(fieldValue) && fieldValue !== '';                                       // 4   // 929\n  },                                                                                         // 5   // 930\n  events: {                                                                                  // 6   // 931\n    validationerror: function(e) {                                                           // 7   // 932\n      var fieldName = e.data.field;                                                          // 8   // 933\n                                                                                             // 9   // 934\n      e.data.message = 'The \"' + fieldName +                                                 // 10  // 935\n        '\" field\\'s value is required';                                                      // 11  // 936\n    }                                                                                        // 12  // 937\n  }                                                                                          // 13  // 938\n});                                                                                          // 14  // 939\n                                                                                             // 15  // 940\n///////////////////////////////////////////////////////////////////////////////////////////////     // 941\n                                                                                                    // 942\n}).call(this);                                                                                      // 943\n                                                                                                    // 944\n                                                                                                    // 945\n                                                                                                    // 946\n                                                                                                    // 947\n                                                                                                    // 948\n                                                                                                    // 949\n(function () {                                                                                      // 950\n                                                                                                    // 951\n///////////////////////////////////////////////////////////////////////////////////////////////     // 952\n//                                                                                           //     // 953\n// packages/jagi:astronomy-validators/lib/validators/existence/null.js                       //     // 954\n//                                                                                           //     // 955\n///////////////////////////////////////////////////////////////////////////////////////////////     // 956\n                                                                                             //     // 957\nAstro.createValidator({                                                                      // 1   // 958\n  name: 'null',                                                                              // 2   // 959\n  validate: _.isNull,                                                                        // 3   // 960\n  events: {                                                                                  // 4   // 961\n    validationerror: function(e) {                                                           // 5   // 962\n      var fieldName = e.data.field;                                                          // 6   // 963\n                                                                                             // 7   // 964\n      e.data.message = 'The \"' + fieldName +                                                 // 8   // 965\n        '\" field\\'s value has to be null';                                                   // 9   // 966\n    }                                                                                        // 10  // 967\n  }                                                                                          // 11  // 968\n});                                                                                          // 12  // 969\n                                                                                             // 13  // 970\n///////////////////////////////////////////////////////////////////////////////////////////////     // 971\n                                                                                                    // 972\n}).call(this);                                                                                      // 973\n                                                                                                    // 974\n                                                                                                    // 975\n                                                                                                    // 976\n                                                                                                    // 977\n                                                                                                    // 978\n                                                                                                    // 979\n(function () {                                                                                      // 980\n                                                                                                    // 981\n///////////////////////////////////////////////////////////////////////////////////////////////     // 982\n//                                                                                           //     // 983\n// packages/jagi:astronomy-validators/lib/validators/existence/not_null.js                   //     // 984\n//                                                                                           //     // 985\n///////////////////////////////////////////////////////////////////////////////////////////////     // 986\n                                                                                             //     // 987\nAstro.createValidator({                                                                      // 1   // 988\n  name: 'notNull',                                                                           // 2   // 989\n  validate: function(fieldValue) {                                                           // 3   // 990\n    return !_.isNull(fieldValue);                                                            // 4   // 991\n  },                                                                                         // 5   // 992\n  events: {                                                                                  // 6   // 993\n    validationerror: function(e) {                                                           // 7   // 994\n      var fieldName = e.data.field;                                                          // 8   // 995\n                                                                                             // 9   // 996\n      e.data.message = 'The \"' + fieldName +                                                 // 10  // 997\n        '\" field\\'s value can\\'t be null';                                                   // 11  // 998\n    }                                                                                        // 12  // 999\n  }                                                                                          // 13  // 1000\n});                                                                                          // 14  // 1001\n                                                                                             // 15  // 1002\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1003\n                                                                                                    // 1004\n}).call(this);                                                                                      // 1005\n                                                                                                    // 1006\n                                                                                                    // 1007\n                                                                                                    // 1008\n                                                                                                    // 1009\n                                                                                                    // 1010\n                                                                                                    // 1011\n(function () {                                                                                      // 1012\n                                                                                                    // 1013\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1014\n//                                                                                           //     // 1015\n// packages/jagi:astronomy-validators/lib/validators/existence/has.js                        //     // 1016\n//                                                                                           //     // 1017\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1018\n                                                                                             //     // 1019\nAstro.createValidator({                                                                      // 1   // 1020\n  name: 'has',                                                                               // 2   // 1021\n  validate: function(fieldValue, fieldName, propertyName) {                                  // 3   // 1022\n    return _.has(fieldValue, propertyName);                                                  // 4   // 1023\n  },                                                                                         // 5   // 1024\n  events: {                                                                                  // 6   // 1025\n    validationerror: function(e) {                                                           // 7   // 1026\n      var fieldName = e.data.field;                                                          // 8   // 1027\n      var propertyName = e.data.options;                                                     // 9   // 1028\n                                                                                             // 10  // 1029\n      e.data.message = 'The \"' + fieldName +                                                 // 11  // 1030\n        '\" field\\'s value has to have \"' + propertyName + '\" property';                      // 12  // 1031\n    }                                                                                        // 13  // 1032\n  }                                                                                          // 14  // 1033\n});                                                                                          // 15  // 1034\n                                                                                             // 16  // 1035\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1036\n                                                                                                    // 1037\n}).call(this);                                                                                      // 1038\n                                                                                                    // 1039\n                                                                                                    // 1040\n                                                                                                    // 1041\n                                                                                                    // 1042\n                                                                                                    // 1043\n                                                                                                    // 1044\n(function () {                                                                                      // 1045\n                                                                                                    // 1046\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1047\n//                                                                                           //     // 1048\n// packages/jagi:astronomy-validators/lib/validators/size/length.js                          //     // 1049\n//                                                                                           //     // 1050\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1051\n                                                                                             //     // 1052\nAstro.createValidator({                                                                      // 1   // 1053\n  name: 'length',                                                                            // 2   // 1054\n  validate: function(fieldValue, fieldName, length) {                                        // 3   // 1055\n    if (!fieldValue) {                                                                       // 4   // 1056\n      return false;                                                                          // 5   // 1057\n    }                                                                                        // 6   // 1058\n                                                                                             // 7   // 1059\n    return fieldValue.length === length;                                                     // 8   // 1060\n  },                                                                                         // 9   // 1061\n  events: {                                                                                  // 10  // 1062\n    validationerror: function(e) {                                                           // 11  // 1063\n      var fieldName = e.data.field;                                                          // 12  // 1064\n      var length = e.data.options;                                                           // 13  // 1065\n                                                                                             // 14  // 1066\n      e.data.message = 'The \"' + fieldName +                                                 // 15  // 1067\n        '\" field\\'s value length has to be ' + length;                                       // 16  // 1068\n    }                                                                                        // 17  // 1069\n  }                                                                                          // 18  // 1070\n});                                                                                          // 19  // 1071\n                                                                                             // 20  // 1072\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1073\n                                                                                                    // 1074\n}).call(this);                                                                                      // 1075\n                                                                                                    // 1076\n                                                                                                    // 1077\n                                                                                                    // 1078\n                                                                                                    // 1079\n                                                                                                    // 1080\n                                                                                                    // 1081\n(function () {                                                                                      // 1082\n                                                                                                    // 1083\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1084\n//                                                                                           //     // 1085\n// packages/jagi:astronomy-validators/lib/validators/size/min_length.js                      //     // 1086\n//                                                                                           //     // 1087\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1088\n                                                                                             //     // 1089\nAstro.createValidator({                                                                      // 1   // 1090\n  name: 'minLength',                                                                         // 2   // 1091\n  validate: function(fieldValue, fieldName, minLength) {                                     // 3   // 1092\n    if (!fieldValue) {                                                                       // 4   // 1093\n      return false;                                                                          // 5   // 1094\n    }                                                                                        // 6   // 1095\n                                                                                             // 7   // 1096\n    return fieldValue.length >= minLength;                                                   // 8   // 1097\n  },                                                                                         // 9   // 1098\n  events: {                                                                                  // 10  // 1099\n    validationerror: function(e) {                                                           // 11  // 1100\n      var fieldName = e.data.field;                                                          // 12  // 1101\n      var minLength = e.data.options;                                                        // 13  // 1102\n                                                                                             // 14  // 1103\n      e.data.message = 'The \"' + fieldName +                                                 // 15  // 1104\n        '\" field\\'s value length has to be at least ' + minLength;                           // 16  // 1105\n    }                                                                                        // 17  // 1106\n  }                                                                                          // 18  // 1107\n});                                                                                          // 19  // 1108\n                                                                                             // 20  // 1109\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1110\n                                                                                                    // 1111\n}).call(this);                                                                                      // 1112\n                                                                                                    // 1113\n                                                                                                    // 1114\n                                                                                                    // 1115\n                                                                                                    // 1116\n                                                                                                    // 1117\n                                                                                                    // 1118\n(function () {                                                                                      // 1119\n                                                                                                    // 1120\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1121\n//                                                                                           //     // 1122\n// packages/jagi:astronomy-validators/lib/validators/size/max_length.js                      //     // 1123\n//                                                                                           //     // 1124\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1125\n                                                                                             //     // 1126\nAstro.createValidator({                                                                      // 1   // 1127\n  name: 'maxLength',                                                                         // 2   // 1128\n  validate: function(fieldValue, fieldName, maxLength) {                                     // 3   // 1129\n    if (_.isNull(fieldValue) || _.isUndefined(fieldValue) || !_.has(fieldValue, 'length')) { // 4   // 1130\n      return false;                                                                          // 5   // 1131\n    }                                                                                        // 6   // 1132\n                                                                                             // 7   // 1133\n    return fieldValue.length <= maxLength;                                                   // 8   // 1134\n  },                                                                                         // 9   // 1135\n  events: {                                                                                  // 10  // 1136\n    validationerror: function(e) {                                                           // 11  // 1137\n      var fieldName = e.data.field;                                                          // 12  // 1138\n      var maxLength = e.data.options;                                                        // 13  // 1139\n                                                                                             // 14  // 1140\n      e.data.message = 'The \"' + fieldName +                                                 // 15  // 1141\n        '\" field\\'s value length has to be at most ' + maxLength;                            // 16  // 1142\n    }                                                                                        // 17  // 1143\n  }                                                                                          // 18  // 1144\n});                                                                                          // 19  // 1145\n                                                                                             // 20  // 1146\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1147\n                                                                                                    // 1148\n}).call(this);                                                                                      // 1149\n                                                                                                    // 1150\n                                                                                                    // 1151\n                                                                                                    // 1152\n                                                                                                    // 1153\n                                                                                                    // 1154\n                                                                                                    // 1155\n(function () {                                                                                      // 1156\n                                                                                                    // 1157\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1158\n//                                                                                           //     // 1159\n// packages/jagi:astronomy-validators/lib/validators/size/gt.js                              //     // 1160\n//                                                                                           //     // 1161\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1162\n                                                                                             //     // 1163\nAstro.createValidator({                                                                      // 1   // 1164\n  name: 'gt',                                                                                // 2   // 1165\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3   // 1166\n    if (_.isFunction(compareValue)) {                                                        // 4   // 1167\n      compareValue = compareValue.call(this);                                                // 5   // 1168\n    }                                                                                        // 6   // 1169\n                                                                                             // 7   // 1170\n    return fieldValue > compareValue;                                                        // 8   // 1171\n  },                                                                                         // 9   // 1172\n  events: {                                                                                  // 10  // 1173\n    validationerror: function(e) {                                                           // 11  // 1174\n      var fieldName = e.data.field;                                                          // 12  // 1175\n      var compareValue = e.data.options;                                                     // 13  // 1176\n                                                                                             // 14  // 1177\n      if (_.isFunction(compareValue)) {                                                      // 15  // 1178\n        compareValue = compareValue.call(this);                                              // 16  // 1179\n      }                                                                                      // 17  // 1180\n                                                                                             // 18  // 1181\n      e.data.message = 'The \"' + fieldName +                                                 // 19  // 1182\n        '\" field\\'s value has to be greater than \"' + compareValue + '\"';                    // 20  // 1183\n    }                                                                                        // 21  // 1184\n  }                                                                                          // 22  // 1185\n});                                                                                          // 23  // 1186\n                                                                                             // 24  // 1187\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1188\n                                                                                                    // 1189\n}).call(this);                                                                                      // 1190\n                                                                                                    // 1191\n                                                                                                    // 1192\n                                                                                                    // 1193\n                                                                                                    // 1194\n                                                                                                    // 1195\n                                                                                                    // 1196\n(function () {                                                                                      // 1197\n                                                                                                    // 1198\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1199\n//                                                                                           //     // 1200\n// packages/jagi:astronomy-validators/lib/validators/size/gte.js                             //     // 1201\n//                                                                                           //     // 1202\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1203\n                                                                                             //     // 1204\nAstro.createValidator({                                                                      // 1   // 1205\n  name: 'gte',                                                                               // 2   // 1206\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3   // 1207\n    if (_.isFunction(compareValue)) {                                                        // 4   // 1208\n      compareValue = compareValue.call(this);                                                // 5   // 1209\n    }                                                                                        // 6   // 1210\n                                                                                             // 7   // 1211\n    return fieldValue >= compareValue;                                                       // 8   // 1212\n  },                                                                                         // 9   // 1213\n  events: {                                                                                  // 10  // 1214\n    validationerror: function(e) {                                                           // 11  // 1215\n      var fieldName = e.data.field;                                                          // 12  // 1216\n      var compareValue = e.data.options;                                                     // 13  // 1217\n                                                                                             // 14  // 1218\n      if (_.isFunction(compareValue)) {                                                      // 15  // 1219\n        compareValue = compareValue.call(this);                                              // 16  // 1220\n      }                                                                                      // 17  // 1221\n                                                                                             // 18  // 1222\n      e.data.message = 'The \"' + fieldName +                                                 // 19  // 1223\n        '\" field\\'s value has to be greater than or equal \"' +                               // 20  // 1224\n        compareValue + '\"';                                                                  // 21  // 1225\n    }                                                                                        // 22  // 1226\n  }                                                                                          // 23  // 1227\n});                                                                                          // 24  // 1228\n                                                                                             // 25  // 1229\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1230\n                                                                                                    // 1231\n}).call(this);                                                                                      // 1232\n                                                                                                    // 1233\n                                                                                                    // 1234\n                                                                                                    // 1235\n                                                                                                    // 1236\n                                                                                                    // 1237\n                                                                                                    // 1238\n(function () {                                                                                      // 1239\n                                                                                                    // 1240\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1241\n//                                                                                           //     // 1242\n// packages/jagi:astronomy-validators/lib/validators/size/lt.js                              //     // 1243\n//                                                                                           //     // 1244\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1245\n                                                                                             //     // 1246\nAstro.createValidator({                                                                      // 1   // 1247\n  name: 'lt',                                                                                // 2   // 1248\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3   // 1249\n    if (_.isFunction(compareValue)) {                                                        // 4   // 1250\n      compareValue = compareValue.call(this);                                                // 5   // 1251\n    }                                                                                        // 6   // 1252\n                                                                                             // 7   // 1253\n    return fieldValue < compareValue;                                                        // 8   // 1254\n  },                                                                                         // 9   // 1255\n  events: {                                                                                  // 10  // 1256\n    validationerror: function(e) {                                                           // 11  // 1257\n      var fieldName = e.data.field;                                                          // 12  // 1258\n      var compareValue = e.data.options;                                                     // 13  // 1259\n                                                                                             // 14  // 1260\n      if (_.isFunction(compareValue)) {                                                      // 15  // 1261\n        compareValue = compareValue.call(this);                                              // 16  // 1262\n      }                                                                                      // 17  // 1263\n                                                                                             // 18  // 1264\n      e.data.message = 'The \"' + fieldName +                                                 // 19  // 1265\n        '\" field\\'s value has to be less than \"' + compareValue + '\"';                       // 20  // 1266\n    }                                                                                        // 21  // 1267\n  }                                                                                          // 22  // 1268\n});                                                                                          // 23  // 1269\n                                                                                             // 24  // 1270\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1271\n                                                                                                    // 1272\n}).call(this);                                                                                      // 1273\n                                                                                                    // 1274\n                                                                                                    // 1275\n                                                                                                    // 1276\n                                                                                                    // 1277\n                                                                                                    // 1278\n                                                                                                    // 1279\n(function () {                                                                                      // 1280\n                                                                                                    // 1281\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1282\n//                                                                                           //     // 1283\n// packages/jagi:astronomy-validators/lib/validators/size/lte.js                             //     // 1284\n//                                                                                           //     // 1285\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1286\n                                                                                             //     // 1287\nAstro.createValidator({                                                                      // 1   // 1288\n  name: 'lte',                                                                               // 2   // 1289\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3   // 1290\n    if (_.isFunction(compareValue)) {                                                        // 4   // 1291\n      compareValue = compareValue.call(this);                                                // 5   // 1292\n    }                                                                                        // 6   // 1293\n                                                                                             // 7   // 1294\n    return fieldValue <= compareValue;                                                       // 8   // 1295\n  },                                                                                         // 9   // 1296\n  events: {                                                                                  // 10  // 1297\n    validationerror: function(e) {                                                           // 11  // 1298\n      var fieldName = e.data.field;                                                          // 12  // 1299\n      var compareValue = e.data.options;                                                     // 13  // 1300\n                                                                                             // 14  // 1301\n      if (_.isFunction(compareValue)) {                                                      // 15  // 1302\n        compareValue = compareValue.call(this);                                              // 16  // 1303\n      }                                                                                      // 17  // 1304\n                                                                                             // 18  // 1305\n      e.data.message = 'The \"' + fieldName +                                                 // 19  // 1306\n        '\" field\\'s value has to be less than or equal \"' + compareValue +                   // 20  // 1307\n        '\"';                                                                                 // 21  // 1308\n    }                                                                                        // 22  // 1309\n  }                                                                                          // 23  // 1310\n});                                                                                          // 24  // 1311\n                                                                                             // 25  // 1312\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1313\n                                                                                                    // 1314\n}).call(this);                                                                                      // 1315\n                                                                                                    // 1316\n                                                                                                    // 1317\n                                                                                                    // 1318\n                                                                                                    // 1319\n                                                                                                    // 1320\n                                                                                                    // 1321\n(function () {                                                                                      // 1322\n                                                                                                    // 1323\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1324\n//                                                                                           //     // 1325\n// packages/jagi:astronomy-validators/lib/validators/comparison/choice.js                    //     // 1326\n//                                                                                           //     // 1327\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1328\n                                                                                             //     // 1329\nAstro.createValidator({                                                                      // 1   // 1330\n  name: 'choice',                                                                            // 2   // 1331\n  validate: function(fieldValue, fieldName, choices) {                                       // 3   // 1332\n    return _.contains(choices, fieldValue);                                                  // 4   // 1333\n  },                                                                                         // 5   // 1334\n  events: {                                                                                  // 6   // 1335\n    validationerror: function(e) {                                                           // 7   // 1336\n      var fieldName = e.data.field;                                                          // 8   // 1337\n      var choices = e.data.options;                                                          // 9   // 1338\n                                                                                             // 10  // 1339\n      e.data.message = 'The \"' + fieldName +                                                 // 11  // 1340\n        '\" field\\'s value has to be one of \"' + choices.join('\", \"') +                       // 12  // 1341\n        '\"';                                                                                 // 13  // 1342\n    }                                                                                        // 14  // 1343\n  }                                                                                          // 15  // 1344\n});                                                                                          // 16  // 1345\n                                                                                             // 17  // 1346\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1347\n                                                                                                    // 1348\n}).call(this);                                                                                      // 1349\n                                                                                                    // 1350\n                                                                                                    // 1351\n                                                                                                    // 1352\n                                                                                                    // 1353\n                                                                                                    // 1354\n                                                                                                    // 1355\n(function () {                                                                                      // 1356\n                                                                                                    // 1357\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1358\n//                                                                                           //     // 1359\n// packages/jagi:astronomy-validators/lib/validators/comparison/unique.js                    //     // 1360\n//                                                                                           //     // 1361\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1362\n                                                                                             //     // 1363\nAstro.createValidator({                                                                      // 1   // 1364\n  name: 'unique',                                                                            // 2   // 1365\n  validate: function(fieldValue, fieldName) {                                                // 3   // 1366\n    var Collection = this.constructor.getCollection();                                       // 4   // 1367\n                                                                                             // 5   // 1368\n    // If a Class is not related with any collection then document is unique.                // 6   // 1369\n    if (!Collection) {                                                                       // 7   // 1370\n      return true;                                                                           // 8   // 1371\n    }                                                                                        // 9   // 1372\n                                                                                             // 10  // 1373\n    // The unique validator is used only during insert operation. If the \"_id\"               // 11  // 1374\n    // fields is present, then object is being updated not inserted.                         // 12  // 1375\n    if (this._id) {                                                                          // 13  // 1376\n      return true;                                                                           // 14  // 1377\n    }                                                                                        // 15  // 1378\n                                                                                             // 16  // 1379\n    // Prepare selector.                                                                     // 17  // 1380\n    var selector = {};                                                                       // 18  // 1381\n    selector[fieldName] = fieldValue;                                                        // 19  // 1382\n                                                                                             // 20  // 1383\n    // Check if a record with the given field value exists.                                  // 21  // 1384\n    return _.isUndefined(Collection.findOne(selector));                                      // 22  // 1385\n  },                                                                                         // 23  // 1386\n  events: {                                                                                  // 24  // 1387\n    validationerror: function(e) {                                                           // 25  // 1388\n      var fieldName = e.data.field;                                                          // 26  // 1389\n                                                                                             // 27  // 1390\n      e.data.message = 'The \"' + fieldName +                                                 // 28  // 1391\n        '\" field\\'s value has to be unique';                                                 // 29  // 1392\n    }                                                                                        // 30  // 1393\n  }                                                                                          // 31  // 1394\n});                                                                                          // 32  // 1395\n                                                                                             // 33  // 1396\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1397\n                                                                                                    // 1398\n}).call(this);                                                                                      // 1399\n                                                                                                    // 1400\n                                                                                                    // 1401\n                                                                                                    // 1402\n                                                                                                    // 1403\n                                                                                                    // 1404\n                                                                                                    // 1405\n(function () {                                                                                      // 1406\n                                                                                                    // 1407\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1408\n//                                                                                           //     // 1409\n// packages/jagi:astronomy-validators/lib/validators/comparison/equal.js                     //     // 1410\n//                                                                                           //     // 1411\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1412\n                                                                                             //     // 1413\nAstro.createValidator({                                                                      // 1   // 1414\n  name: 'equal',                                                                             // 2   // 1415\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3   // 1416\n    if (_.isFunction(compareValue)) {                                                        // 4   // 1417\n      compareValue = compareValue.call(this);                                                // 5   // 1418\n    }                                                                                        // 6   // 1419\n                                                                                             // 7   // 1420\n    return fieldValue === compareValue;                                                      // 8   // 1421\n  },                                                                                         // 9   // 1422\n  events: {                                                                                  // 10  // 1423\n    validationerror: function(e) {                                                           // 11  // 1424\n      var fieldName = e.data.field;                                                          // 12  // 1425\n      var compareValue = e.data.options;                                                     // 13  // 1426\n                                                                                             // 14  // 1427\n      if (_.isFunction(compareValue)) {                                                      // 15  // 1428\n        compareValue = compareValue.call(this);                                              // 16  // 1429\n      }                                                                                      // 17  // 1430\n                                                                                             // 18  // 1431\n      e.data.message = 'The \"' + fieldName +                                                 // 19  // 1432\n        '\" field\\'s value has to be equal \"' + compareValue + '\"';                           // 20  // 1433\n    }                                                                                        // 21  // 1434\n  }                                                                                          // 22  // 1435\n});                                                                                          // 23  // 1436\n                                                                                             // 24  // 1437\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1438\n                                                                                                    // 1439\n}).call(this);                                                                                      // 1440\n                                                                                                    // 1441\n                                                                                                    // 1442\n                                                                                                    // 1443\n                                                                                                    // 1444\n                                                                                                    // 1445\n                                                                                                    // 1446\n(function () {                                                                                      // 1447\n                                                                                                    // 1448\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1449\n//                                                                                           //     // 1450\n// packages/jagi:astronomy-validators/lib/validators/comparison/equal_to.js                  //     // 1451\n//                                                                                           //     // 1452\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1453\n                                                                                             //     // 1454\nAstro.createValidator({                                                                      // 1   // 1455\n  name: 'equalTo',                                                                           // 2   // 1456\n  validate: function(fieldValue, fieldName, compareFieldName) {                              // 3   // 1457\n    var compareValue = this.get(compareFieldName);                                           // 4   // 1458\n                                                                                             // 5   // 1459\n    return fieldValue === compareValue;                                                      // 6   // 1460\n  },                                                                                         // 7   // 1461\n  events: {                                                                                  // 8   // 1462\n    validationerror: function(e) {                                                           // 9   // 1463\n      var fieldName = e.data.field;                                                          // 10  // 1464\n      var compareValue = e.data.options;                                                     // 11  // 1465\n                                                                                             // 12  // 1466\n      if (_.isFunction(compareValue)) {                                                      // 13  // 1467\n        compareValue = compareValue.call(this);                                              // 14  // 1468\n      }                                                                                      // 15  // 1469\n                                                                                             // 16  // 1470\n      e.data.message = 'The \"' + fieldName + '\" and \"' + compareValue +                      // 17  // 1471\n        '\" field\\'s values have to be equal';                                                // 18  // 1472\n    }                                                                                        // 19  // 1473\n  }                                                                                          // 20  // 1474\n});                                                                                          // 21  // 1475\n                                                                                             // 22  // 1476\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1477\n                                                                                                    // 1478\n}).call(this);                                                                                      // 1479\n                                                                                                    // 1480\n                                                                                                    // 1481\n                                                                                                    // 1482\n                                                                                                    // 1483\n                                                                                                    // 1484\n                                                                                                    // 1485\n(function () {                                                                                      // 1486\n                                                                                                    // 1487\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1488\n//                                                                                           //     // 1489\n// packages/jagi:astronomy-validators/lib/validators/comparison/regexp.js                    //     // 1490\n//                                                                                           //     // 1491\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1492\n                                                                                             //     // 1493\nAstro.createValidator({                                                                      // 1   // 1494\n  name: 'regexp',                                                                            // 2   // 1495\n  validate: function(fieldValue, fieldName, pattern) {                                       // 3   // 1496\n    return pattern.test(fieldValue);                                                         // 4   // 1497\n  },                                                                                         // 5   // 1498\n  events: {                                                                                  // 6   // 1499\n    validationerror: function(e) {                                                           // 7   // 1500\n      var fieldName = e.data.field;                                                          // 8   // 1501\n      var pattern = e.data.options.toString();                                               // 9   // 1502\n                                                                                             // 10  // 1503\n      e.data.message = 'The \"' + fieldName +                                                 // 11  // 1504\n        '\" field\\'s value has to match \"' + pattern +                                        // 12  // 1505\n        '\" regular expression';                                                              // 13  // 1506\n    }                                                                                        // 14  // 1507\n  }                                                                                          // 15  // 1508\n});                                                                                          // 16  // 1509\n                                                                                             // 17  // 1510\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1511\n                                                                                                    // 1512\n}).call(this);                                                                                      // 1513\n                                                                                                    // 1514\n                                                                                                    // 1515\n                                                                                                    // 1516\n                                                                                                    // 1517\n                                                                                                    // 1518\n                                                                                                    // 1519\n(function () {                                                                                      // 1520\n                                                                                                    // 1521\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1522\n//                                                                                           //     // 1523\n// packages/jagi:astronomy-validators/lib/validators/logical/and.js                          //     // 1524\n//                                                                                           //     // 1525\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1526\n                                                                                             //     // 1527\nAstro.createValidator({                                                                      // 1   // 1528\n  name: 'and',                                                                               // 2   // 1529\n  validate: function(fieldValue, fieldName, validators) {                                    // 3   // 1530\n    var error;                                                                               // 4   // 1531\n    var doc = this;                                                                          // 5   // 1532\n                                                                                             // 6   // 1533\n    var isValid = _.every(validators, function(validator, index) {                           // 7   // 1534\n      try {                                                                                  // 8   // 1535\n        var isValid = validator.call(doc, fieldValue, fieldName);                            // 9   // 1536\n        if (!isValid && !error) {                                                            // 10  // 1537\n          error = new ValidationError([{                                                     // 11  // 1538\n            validator: validator,                                                            // 12  // 1539\n            patternOrFieldName: fieldName,                                                   // 13  // 1540\n            fieldValue: fieldValue,                                                          // 14  // 1541\n            name: validator.definition.name                                                  // 15  // 1542\n          }]);                                                                               // 16  // 1543\n        }                                                                                    // 17  // 1544\n        return isValid;                                                                      // 18  // 1545\n      } catch (e) {                                                                          // 19  // 1546\n        if (!error) {                                                                        // 20  // 1547\n          error = e;                                                                         // 21  // 1548\n        }                                                                                    // 22  // 1549\n        return false;                                                                        // 23  // 1550\n      }                                                                                      // 24  // 1551\n    });                                                                                      // 25  // 1552\n                                                                                             // 26  // 1553\n    if (!isValid && error) {                                                                 // 27  // 1554\n      throw error;                                                                           // 28  // 1555\n    }                                                                                        // 29  // 1556\n                                                                                             // 30  // 1557\n    return isValid;                                                                          // 31  // 1558\n  }                                                                                          // 32  // 1559\n});                                                                                          // 33  // 1560\n                                                                                             // 34  // 1561\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1562\n                                                                                                    // 1563\n}).call(this);                                                                                      // 1564\n                                                                                                    // 1565\n                                                                                                    // 1566\n                                                                                                    // 1567\n                                                                                                    // 1568\n                                                                                                    // 1569\n                                                                                                    // 1570\n(function () {                                                                                      // 1571\n                                                                                                    // 1572\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1573\n//                                                                                           //     // 1574\n// packages/jagi:astronomy-validators/lib/validators/logical/or.js                           //     // 1575\n//                                                                                           //     // 1576\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1577\n                                                                                             //     // 1578\nAstro.createValidator({                                                                      // 1   // 1579\n  name: 'or',                                                                                // 2   // 1580\n  validate: function(fieldValue, fieldName, validators) {                                    // 3   // 1581\n    var error;                                                                               // 4   // 1582\n    var doc = this;                                                                          // 5   // 1583\n                                                                                             // 6   // 1584\n    var isValid = _.some(validators, function(validator, index) {                            // 7   // 1585\n      try {                                                                                  // 8   // 1586\n        var isValid = validator.call(doc, fieldValue, fieldName);                            // 9   // 1587\n        if (!isValid && !error) {                                                            // 10  // 1588\n          error = new ValidationError([{                                                     // 11  // 1589\n            validator: validator,                                                            // 12  // 1590\n            patternOrFieldName: fieldName,                                                   // 13  // 1591\n            fieldValue: fieldValue,                                                          // 14  // 1592\n            name: validator.definition.name                                                  // 15  // 1593\n          }]);                                                                               // 16  // 1594\n        }                                                                                    // 17  // 1595\n        return isValid;                                                                      // 18  // 1596\n      } catch (e) {                                                                          // 19  // 1597\n        if (!error) {                                                                        // 20  // 1598\n          error = e;                                                                         // 21  // 1599\n        }                                                                                    // 22  // 1600\n        return false;                                                                        // 23  // 1601\n      }                                                                                      // 24  // 1602\n    });                                                                                      // 25  // 1603\n                                                                                             // 26  // 1604\n    if (!isValid && error) {                                                                 // 27  // 1605\n      throw error;                                                                           // 28  // 1606\n    }                                                                                        // 29  // 1607\n                                                                                             // 30  // 1608\n    return isValid;                                                                          // 31  // 1609\n  }                                                                                          // 32  // 1610\n});                                                                                          // 33  // 1611\n                                                                                             // 34  // 1612\n///////////////////////////////////////////////////////////////////////////////////////////////     // 1613\n                                                                                                    // 1614\n}).call(this);                                                                                      // 1615\n                                                                                                    // 1616\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['jagi:astronomy-validators'] = {\n  Validators: Validators\n};\n\n})();\n","servePath":"/packages/jagi_astronomy-validators.js","sourceMap":{"version":3,"sources":["/packages/jagi_astronomy-validators/packages/jagi_astronomy-validators.js"],"names":[],"mappingsfile":"/packages/jagi_astronomy-validators.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/global.js                                   //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.validators = Validators = {};                                                          // 1\n                                                                                             // 2\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/error.js                                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nValidationError = function(errors) {                                                         // 1\n  this.errors = errors;                                                                      // 2\n};                                                                                           // 3\n                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/utils.js                                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.utils.validators = {                                                                   // 1\n  findValidator: function(Class, validatorName) {                                            // 2\n    return Astro.utils.class.findInClass(Class, function(Class) {                            // 3\n      return Class.getValidator(validatorName);                                              // 4\n    });                                                                                      // 5\n  },                                                                                         // 6\n                                                                                             // 7\n  getAllValidators: function(Class) {                                                        // 8\n    var validators = {};                                                                     // 9\n                                                                                             // 10\n    Astro.utils.class.eachClass(Class, function(Class) {                                     // 11\n      _.extend(validators, Class.getValidators());                                           // 12\n    });                                                                                      // 13\n                                                                                             // 14\n    return validators;                                                                       // 15\n  }                                                                                          // 16\n};                                                                                           // 17\n                                                                                             // 18\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/validator_definition.js                     //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nvar checks = {                                                                               // 1\n  validatorDefinition: function(validatorDefinition) {                                       // 2\n    // Check if the validator definition is an object.                                       // 3\n    if (!_.isObject(validatorDefinition)) {                                                  // 4\n      throw new Error('Provide a validator definition');                                     // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    // Check if the validator name is provided.                                              // 8\n    if (!_.has(validatorDefinition, 'name')) {                                               // 9\n      throw new Error('Provide a validator name');                                           // 10\n    }                                                                                        // 11\n                                                                                             // 12\n    // Check if the validator name is a string.                                              // 13\n    if (!_.isString(validatorDefinition.name)) {                                             // 14\n      throw new Error('The validator name has to be a string');                              // 15\n    }                                                                                        // 16\n                                                                                             // 17\n    // Check if the validator with the given name already exists.                            // 18\n    if (_.has(Validators, validatorDefinition.name)) {                                       // 19\n      throw new Error('Validator with the name `' + validatorDefinition.name +               // 20\n        '` is already defined');                                                             // 21\n    }                                                                                        // 22\n                                                                                             // 23\n    // Check if the validation function is provided.                                         // 24\n    if (!_.has(validatorDefinition, 'validate')) {                                           // 25\n      throw new Error('Provide the `validate` function');                                    // 26\n    }                                                                                        // 27\n                                                                                             // 28\n    // Check if the `validate` attribute is function.                                        // 29\n    if (!_.isFunction(validatorDefinition.validate)) {                                       // 30\n      throw new Error('The `validate` attribute has to be a function');                      // 31\n    }                                                                                        // 32\n  }                                                                                          // 33\n};                                                                                           // 34\n                                                                                             // 35\nValidatorDefinition = function(validatorDefinition) {                                        // 36\n  checks.validatorDefinition(validatorDefinition);                                           // 37\n                                                                                             // 38\n  var self = this;                                                                           // 39\n                                                                                             // 40\n  self.name = validatorDefinition.name;                                                      // 41\n  self.validate = validatorDefinition.validate;                                              // 42\n                                                                                             // 43\n  if (_.has(validatorDefinition, 'events')) {                                                // 44\n    _.each(validatorDefinition.events, function(eventHandler, eventName) {                   // 45\n      self.on(eventName, eventHandler);                                                      // 46\n    });                                                                                      // 47\n  }                                                                                          // 48\n};                                                                                           // 49\n                                                                                             // 50\nAstro.Events.mixin(ValidatorDefinition.prototype);                                           // 51\n                                                                                             // 52\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/validator.js                                //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator = function(validatorDefinition) {                                      // 1\n  var definition = new ValidatorDefinition(validatorDefinition);                             // 2\n                                                                                             // 3\n  var validatorGenerator = function(options, userMessage) {                                  // 4\n    var validator = function(fieldValue, fieldName) {                                        // 5\n      return validator.definition.validate.call(                                             // 6\n        this,                                                                                // 7\n        fieldValue,                                                                          // 8\n        fieldName,                                                                           // 9\n        options, // Validator options passed by user.                                        // 10\n        validator // Parent validator.                                                       // 11\n      );                                                                                     // 12\n    };                                                                                       // 13\n                                                                                             // 14\n    _.extend(validator, {                                                                    // 15\n      definition: definition,                                                                // 16\n      options: options,                                                                      // 17\n      message: userMessage                                                                   // 18\n    });                                                                                      // 19\n                                                                                             // 20\n    return validator;                                                                        // 21\n  };                                                                                         // 22\n                                                                                             // 23\n  // Validator is just a function with the \"definition\" property where all the               // 24\n  // validator definition is stored.                                                         // 25\n  Validators[definition.name] = validatorGenerator;                                          // 26\n                                                                                             // 27\n  // We also return created validator if someone would like not to use long                  // 28\n  // default namespace which is e.g. `Validators.isString`.                                  // 29\n  return validatorGenerator;                                                                 // 30\n};                                                                                           // 31\n                                                                                             // 32\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/init_module.js                              //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nvar generateMessage = function(validator, fieldName, fieldValue) {                           // 1\n  // Prepare an event object for the \"validationerror\" event.                                // 2\n  var event = new Astro.Event('validationerror', {                                           // 3\n    validator: _.has(validator, 'definition') ? validator.definition.name : '',              // 4\n    value: fieldValue,                                                                       // 5\n    field: fieldName,                                                                        // 6\n    options: validator.options,                                                              // 7\n    message: null,                                                                           // 8\n  });                                                                                        // 9\n  event.target = this;                                                                       // 10\n                                                                                             // 11\n  // Prepare variable for storing an error message.                                          // 12\n  var errorMessage;                                                                          // 13\n                                                                                             // 14\n  // VALIDATION MESSAGE PASSED TO VALIDATOR.                                                 // 15\n  if (_.isString(validator.message)) {                                                       // 16\n    // If user passed a string message then use it.                                          // 17\n    errorMessage = validator.message;                                                        // 18\n  } else if (_.isFunction(validator.message)) {                                              // 19\n    // If user passed a function message then run it as it would be an event.                // 20\n    validator.message.call(this, event);                                                     // 21\n    errorMessage = event.data.message;                                                       // 22\n  }                                                                                          // 23\n  if (errorMessage) {                                                                        // 24\n    return errorMessage;                                                                     // 25\n  }                                                                                          // 26\n                                                                                             // 27\n  // VALIDATION MESSAGE ON THE LEVEL OF THE CLASS OR IN THE GLOBAL SCOPE.                    // 28\n  // If user haven't defined any custom validation message then check                        // 29\n  // whether there are any \"validationerror\" events that could generate                      // 30\n  // error message.                                                                          // 31\n  this.constructor.emitEvent(event);                                                         // 32\n  errorMessage = event.data.message;                                                         // 33\n  if (errorMessage) {                                                                        // 34\n    return errorMessage;                                                                     // 35\n  }                                                                                          // 36\n                                                                                             // 37\n  // DEFAULT VALIDATOR MESSAGE.                                                              // 38\n  // If in this place the \"errorMessage\" variable is still not set, then we                  // 39\n  // have to look for the \"validationerror\" event in the validator's                         // 40\n  // definition.                                                                             // 41\n  if (                                                                                       // 42\n    validator.definition &&                                                                  // 43\n    _.isFunction(validator.definition.emit)                                                  // 44\n  ) {                                                                                        // 45\n    validator.definition.emit(event);                                                        // 46\n    errorMessage = event.data.message;                                                       // 47\n  }                                                                                          // 48\n  if (errorMessage) {                                                                        // 49\n    return errorMessage;                                                                     // 50\n  }                                                                                          // 51\n                                                                                             // 52\n  // DEFAULT MESSAGE.                                                                        // 53\n  errorMessage = 'The \"' + fieldName + '\" field\\'s value is invalid';                        // 54\n  return errorMessage;                                                                       // 55\n};                                                                                           // 56\n                                                                                             // 57\nvar validateList = function(validatorsList, patternOrFieldName) {                            // 58\n  var doc = this;                                                                            // 59\n  var Class = doc.constructor;                                                               // 60\n                                                                                             // 61\n  // Variable for storing fields names. When the second argument of the                      // 62\n  // \"validateList\" function is pattern, then we have to take fields names out               // 63\n  // of this pattern. If the argument is a single field name then we just put it             // 64\n  // in the array.                                                                           // 65\n  var fieldsNames;                                                                           // 66\n  // Variable for storing information if the second argument is pattern or just              // 67\n  // a field name.                                                                           // 68\n  var isPattern = false;                                                                     // 69\n  // Try finding the \".$\" string which indicates that it's a pattern.                        // 70\n  if (patternOrFieldName.indexOf('.$') !== -1) {                                             // 71\n    // Get fields out of the pattern.                                                        // 72\n    fieldsNames = Astro.utils.fields.getFieldsNamesFromPattern(                              // 73\n      doc,                                                                                   // 74\n      patternOrFieldName                                                                     // 75\n    );                                                                                       // 76\n    isPattern = true;                                                                        // 77\n  } else {                                                                                   // 78\n    fieldsNames = [patternOrFieldName];                                                      // 79\n  }                                                                                          // 80\n                                                                                             // 81\n  // Loop through list of all fileds names and perform validation on each field.             // 82\n  _.each(fieldsNames, function(fieldName) {                                                  // 83\n    // Get the field's value.                                                                // 84\n    var fieldValue = Astro.utils.fields.getValue(doc, fieldName);                            // 85\n                                                                                             // 86\n    // Loop through validators list and run each one.                                        // 87\n    _.each(validatorsList, function(validator) {                                             // 88\n      var isValid = validator.call(doc, fieldValue, fieldName);                              // 89\n                                                                                             // 90\n      if (!isValid) {                                                                        // 91\n        // Prepare an object for storing error messages.                                     // 92\n        var errors = [];                                                                     // 93\n                                                                                             // 94\n        // Add a validation error message for the given field.                               // 95\n        errors.push({                                                                        // 96\n          validator: validator,                                                              // 97\n          patternOrFieldName: fieldName,                                                     // 98\n          fieldValue: fieldValue                                                             // 99\n        });                                                                                  // 100\n                                                                                             // 101\n        if (isPattern) {                                                                     // 102\n          // Add a validation error message for the given pattern.                           // 103\n          errors.push({                                                                      // 104\n            validator: validator,                                                            // 105\n            patternOrFieldName: patternOrFieldName,                                          // 106\n            fieldValue: fieldValue                                                           // 107\n          });                                                                                // 108\n        }                                                                                    // 109\n                                                                                             // 110\n        // Throw errors.                                                                     // 111\n        throw new ValidationError(errors);                                                   // 112\n      } else {                                                                               // 113\n        // Remove a validator error message if present.                                      // 114\n        doc._errors.delete(fieldName);                                                       // 115\n                                                                                             // 116\n        if (isPattern) {                                                                     // 117\n          doc._errors.delete(patternOrFieldName);                                            // 118\n        }                                                                                    // 119\n      }                                                                                      // 120\n    });                                                                                      // 121\n  });                                                                                        // 122\n};                                                                                           // 123\n                                                                                             // 124\nvar validateOne = function(patternOrFieldName) {                                             // 125\n  var doc = this;                                                                            // 126\n  var Class = doc.constructor;                                                               // 127\n                                                                                             // 128\n  var errors = [];                                                                           // 129\n                                                                                             // 130\n  try {                                                                                      // 131\n    // Get validators only for the given field name.                                         // 132\n    var validatorsList = Astro.utils.validators.findValidator(                               // 133\n      Class,                                                                                 // 134\n      patternOrFieldName                                                                     // 135\n    );                                                                                       // 136\n    // Validate field only if there are any validators.                                      // 137\n    if (validatorsList) {                                                                    // 138\n      validateList.call(doc, validatorsList, patternOrFieldName);                            // 139\n    }                                                                                        // 140\n  } catch (e) {                                                                              // 141\n    if (e instanceof ValidationError) {                                                      // 142\n      errors = errors.concat(e.errors);                                                      // 143\n    }                                                                                        // 144\n  }                                                                                          // 145\n                                                                                             // 146\n  return errors;                                                                             // 147\n};                                                                                           // 148\n                                                                                             // 149\nvar validateAll = function(stopOnFirst) {                                                    // 150\n  if (_.isUndefined(stopOnFirst)) {                                                          // 151\n    stopOnFirst = true;                                                                      // 152\n  }                                                                                          // 153\n                                                                                             // 154\n  var doc = this;                                                                            // 155\n  var Class = doc.constructor;                                                               // 156\n                                                                                             // 157\n  // Get list of the all validators for the given class and run validation.                  // 158\n  var validatorsLists = Astro.utils.validators.getAllValidators(Class);                      // 159\n                                                                                             // 160\n  // Get validation order.                                                                   // 161\n  var validationOrder = Class.getValidationOrder();                                          // 162\n  if (validationOrder) {                                                                     // 163\n    // Get keys of validators that are not present in validation order. We will              // 164\n    // add them at the end of the validation order to ensure that all validators             // 165\n    // have been invoked.                                                                    // 166\n    var diff = _.difference(_.keys(validatorsLists), validationOrder);                       // 167\n    // Add the rest of the validators at the end.                                            // 168\n    if (diff.length > 0) {                                                                   // 169\n      validationOrder = validationOrder.concat(diff);                                        // 170\n    }                                                                                        // 171\n  } else {                                                                                   // 172\n    validationOrder = _.keys(validatorsLists);                                               // 173\n  }                                                                                          // 174\n                                                                                             // 175\n  // Callect errors. If the \"stopOnFirst\" flag is set, then we stop collecting               // 176\n  // errors after first error. Otherwise, we continue until we reach the last                // 177\n  // validatorsList.                                                                         // 178\n  var errors = [];                                                                           // 179\n  _.every(validationOrder, function(patternOrFieldName) {                                    // 180\n    try {                                                                                    // 181\n      var validatorsList = validatorsLists[patternOrFieldName];                              // 182\n      if (validatorsList) {                                                                  // 183\n        validateList.call(doc, validatorsList, patternOrFieldName);                          // 184\n      }                                                                                      // 185\n    } catch (e) {                                                                            // 186\n      if (e instanceof ValidationError) {                                                    // 187\n        errors = errors.concat(e.errors);                                                    // 188\n      }                                                                                      // 189\n    }                                                                                        // 190\n                                                                                             // 191\n    if (stopOnFirst && errors.length > 0) {                                                  // 192\n      return false;                                                                          // 193\n    } else {                                                                                 // 194\n      return true;                                                                           // 195\n    }                                                                                        // 196\n  });                                                                                        // 197\n                                                                                             // 198\n  return errors;                                                                             // 199\n};                                                                                           // 200\n                                                                                             // 201\nvar setErrors = function(errors) {                                                           // 202\n  var doc = this;                                                                            // 203\n                                                                                             // 204\n  _.each(errors, function(error) {                                                           // 205\n    var message = generateMessage.call(                                                      // 206\n      doc,                                                                                   // 207\n      error.validator,                                                                       // 208\n      error.patternOrFieldName,                                                              // 209\n      error.fieldValue                                                                       // 210\n    );                                                                                       // 211\n    doc._errors.set(error.patternOrFieldName, message);                                      // 212\n  });                                                                                        // 213\n};                                                                                           // 214\n                                                                                             // 215\nvar methods = {                                                                              // 216\n  validate: function() {                                                                     // 217\n    var doc = this;                                                                          // 218\n                                                                                             // 219\n    var errors;                                                                              // 220\n    if (arguments.length === 1) {                                                            // 221\n      errors = validateOne.call(doc, arguments[0]);                                          // 222\n    } else if (arguments.length === 0) {                                                     // 223\n      errors = validateAll.call(doc);                                                        // 224\n    }                                                                                        // 225\n                                                                                             // 226\n    setErrors.call(doc, errors);                                                             // 227\n                                                                                             // 228\n    return errors.length === 0;                                                              // 229\n  },                                                                                         // 230\n                                                                                             // 231\n  validateAll: function() {                                                                  // 232\n    var doc = this;                                                                          // 233\n                                                                                             // 234\n    var errors = validateAll.call(doc, false);                                               // 235\n                                                                                             // 236\n    setErrors.call(doc, errors);                                                             // 237\n                                                                                             // 238\n    return errors.length === 0;                                                              // 239\n  },                                                                                         // 240\n                                                                                             // 241\n  getValidationError: function(fieldName) {                                                  // 242\n    return this._errors.get(fieldName);                                                      // 243\n  },                                                                                         // 244\n                                                                                             // 245\n  getValidationErrors: function() {                                                          // 246\n    return this._errors.all();                                                               // 247\n  },                                                                                         // 248\n                                                                                             // 249\n  hasValidationError: function(fieldName) {                                                  // 250\n    return this._errors.has(fieldName);                                                      // 251\n  },                                                                                         // 252\n                                                                                             // 253\n  hasValidationErrors: function() {                                                          // 254\n    return this._errors.size() > 0;                                                          // 255\n  },                                                                                         // 256\n                                                                                             // 257\n  throwValidationException: function() {                                                     // 258\n    throw new Meteor.Error('validation-error', this.getValidationErrors());                  // 259\n  },                                                                                         // 260\n                                                                                             // 261\n  catchValidationException: function(exception) {                                            // 262\n    if (!(exception instanceof Meteor.Error) ||                                              // 263\n      exception.error !== 'validation-error' ||                                              // 264\n      !_.isObject(exception.reason)                                                          // 265\n    ) {                                                                                      // 266\n      return;                                                                                // 267\n    }                                                                                        // 268\n                                                                                             // 269\n    this._errors.set(exception.reason);                                                      // 270\n  }                                                                                          // 271\n};                                                                                           // 272\n                                                                                             // 273\nvar events = {                                                                               // 274\n  toJsonValue: function(e) {                                                                 // 275\n    var self = this;                                                                         // 276\n                                                                                             // 277\n    Tracker.nonreactive(function() {                                                         // 278\n      e.data.errors = self._errors.all();                                                    // 279\n    });                                                                                      // 280\n  },                                                                                         // 281\n                                                                                             // 282\n  fromJsonValue: function(e) {                                                               // 283\n    this._errors.set(e.data.errors);                                                         // 284\n  }                                                                                          // 285\n};                                                                                           // 286\n                                                                                             // 287\nonInitModule = function() {                                                                  // 288\n  _.extend(Astro.BaseClass.prototype, methods);                                              // 289\n                                                                                             // 290\n  Astro.eventManager.on('toJsonValue', events.toJsonValue);                                  // 291\n  Astro.eventManager.on('fromJsonValue', events.fromJsonValue);                              // 292\n};                                                                                           // 293\n                                                                                             // 294\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/init_class.js                               //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nvar checks = {                                                                               // 1\n  fieldName: function(fieldName) {                                                           // 2\n    if (!Match.test(fieldName, String)) {                                                    // 3\n      throw new Error(                                                                       // 4\n        'The validator\\'s field name in the \"' + this.getName() +                            // 5\n        '\" class schema has to be a string'                                                  // 6\n      );                                                                                     // 7\n    }                                                                                        // 8\n  },                                                                                         // 9\n                                                                                             // 10\n  validator: function(fieldName, validator) {                                                // 11\n    if (!Match.test(validator, Match.OneOf(Function, [Function]))) {                         // 12\n      throw new Error(                                                                       // 13\n        'The validator for the \"' + fieldName +                                              // 14\n        '\" field in the \"' + this.getName() +                                                // 15\n        '\" class schema has to be a function or an array of functions'                       // 16\n      );                                                                                     // 17\n    }                                                                                        // 18\n  },                                                                                         // 19\n                                                                                             // 20\n  validators: function(validators) {                                                         // 21\n    if (!Match.test(validators, Object)) {                                                   // 22\n      throw new Error(                                                                       // 23\n        'The validator functions definition in the \"' + this.getName() +                     // 24\n        '\" class schema has to be an object'                                                 // 25\n      );                                                                                     // 26\n    }                                                                                        // 27\n  },                                                                                         // 28\n                                                                                             // 29\n  validationOrder: function(validationOrder) {                                               // 30\n    if (!Match.test(validationOrder, [String])) {                                            // 31\n      throw new Error(                                                                       // 32\n        'The validation order definition in the \"' + this.getName() +                        // 33\n        '\" class schema has to be an array of strings'                                       // 34\n      );                                                                                     // 35\n    }                                                                                        // 36\n  }                                                                                          // 37\n};                                                                                           // 38\n                                                                                             // 39\nvar methods = {                                                                              // 40\n  hasValidator: function(fieldName) {                                                        // 41\n    checks.fieldName.call(this, fieldName);                                                  // 42\n                                                                                             // 43\n    return _.has(this.schema.validators, fieldName);                                         // 44\n  },                                                                                         // 45\n                                                                                             // 46\n  getValidator: function(fieldName) {                                                        // 47\n    checks.fieldName.call(this, fieldName);                                                  // 48\n                                                                                             // 49\n    return this.schema.validators[fieldName];                                                // 50\n  },                                                                                         // 51\n                                                                                             // 52\n  getValidators: function() {                                                                // 53\n    return this.schema.validators;                                                           // 54\n  },                                                                                         // 55\n                                                                                             // 56\n  addValidator: function(fieldName, validators) {                                            // 57\n    // Check if field name had been provided and is a string.                                // 58\n    checks.fieldName.call(this, fieldName);                                                  // 59\n    // Check if validator is a function.                                                     // 60\n    checks.validator.call(this, fieldName, validators);                                      // 61\n                                                                                             // 62\n    this.schema.validators[fieldName] = this.schema.validators[fieldName] || [];             // 63\n    this.schema.validators[fieldName] = this.schema.validators[fieldName].                   // 64\n    concat(validators);                                                                      // 65\n  },                                                                                         // 66\n                                                                                             // 67\n  addValidators: function(validators) {                                                      // 68\n    var self = this;                                                                         // 69\n                                                                                             // 70\n    // Validators data has to be an object.                                                  // 71\n    checks.validators.call(self, validators);                                                // 72\n                                                                                             // 73\n    // Loop through list of validators data and add each one.                                // 74\n    _.each(validators, function(validator, fieldName) {                                      // 75\n      self.addValidator(fieldName, validator);                                               // 76\n    });                                                                                      // 77\n  },                                                                                         // 78\n                                                                                             // 79\n  setValidationOrder: function(validationOrder) {                                            // 80\n    // Check validity of the validation order option.                                        // 81\n    checks.validationOrder.call(this, validationOrder);                                      // 82\n                                                                                             // 83\n    this.schema.validationOrder = validationOrder;                                           // 84\n  },                                                                                         // 85\n                                                                                             // 86\n  getValidationOrder: function() {                                                           // 87\n    return this.schema.validationOrder;                                                      // 88\n  }                                                                                          // 89\n};                                                                                           // 90\n                                                                                             // 91\nvar events = {                                                                               // 92\n  afterset: function(e) {                                                                    // 93\n    var fieldName = e.data.field;                                                            // 94\n                                                                                             // 95\n    // If a validator is defined for given field then clear error message for                // 96\n    // that field.                                                                           // 97\n    this._errors.delete(fieldName);                                                          // 98\n  }                                                                                          // 99\n};                                                                                           // 100\n                                                                                             // 101\nonInitClass = function(schemaDefinition) {                                                   // 102\n  var Class = this;                                                                          // 103\n                                                                                             // 104\n  _.extend(Class, methods);                                                                  // 105\n                                                                                             // 106\n  // Add the \"validators\" attribute to the schema.                                           // 107\n  Class.schema.validators = {};                                                              // 108\n                                                                                             // 109\n  // Add validators that are defined next to the field definition.                           // 110\n  _.each(                                                                                    // 111\n    schemaDefinition.fields,                                                                 // 112\n    function(fieldDefinition, patternOrFieldName) {                                          // 113\n      if (_.has(fieldDefinition, 'validators')) {                                            // 114\n        Class.addValidator(patternOrFieldName, fieldDefinition.validators);                  // 115\n      }                                                                                      // 116\n    }                                                                                        // 117\n  );                                                                                         // 118\n                                                                                             // 119\n  if (_.has(schemaDefinition, 'validators')) {                                               // 120\n    Class.addValidators(schemaDefinition.validators);                                        // 121\n                                                                                             // 122\n    // Add \"afterset\" event to all classes having validators.                                // 123\n    Class.addEvents(events);                                                                 // 124\n  }                                                                                          // 125\n                                                                                             // 126\n  if (_.has(schemaDefinition, 'validationOrder')) {                                          // 127\n    // Add the validation order option to the class.                                         // 128\n    Class.setValidationOrder(schemaDefinition.validationOrder);                              // 129\n  }                                                                                          // 130\n};                                                                                           // 131\n                                                                                             // 132\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/init_instance.js                            //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nonInitInstance = function(attrs) {                                                           // 1\n  this._errors = new ReactiveMap();                                                          // 2\n};                                                                                           // 3\n                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/module.js                                   //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createModule({                                                                         // 1\n  name: 'validators',                                                                        // 2\n  init: onInitModule,                                                                        // 3\n  events: {                                                                                  // 4\n    initclass: onInitClass,                                                                  // 5\n    initinstance: onInitInstance                                                             // 6\n  }                                                                                          // 7\n});                                                                                          // 8\n                                                                                             // 9\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/string.js                          //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'string',                                                                            // 2\n  validate: _.isString,                                                                      // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be a string';                                               // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/number.js                          //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'number',                                                                            // 2\n  validate: function(value) {                                                                // 3\n    return !_.isNaN(value) && _.isNumber(value);                                             // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n                                                                                             // 9\n      e.data.message = 'The \"' + fieldName +                                                 // 10\n        '\" field\\'s value has to be a number';                                               // 11\n    }                                                                                        // 12\n  }                                                                                          // 13\n});                                                                                          // 14\n                                                                                             // 15\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/boolean.js                         //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'boolean',                                                                           // 2\n  validate: _.isBoolean,                                                                     // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be a boolean';                                              // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/array.js                           //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'array',                                                                             // 2\n  validate: _.isArray,                                                                       // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be an array';                                               // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/object.js                          //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'object',                                                                            // 2\n  validate: _.isObject,                                                                      // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be an object';                                              // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/date.js                            //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'date',                                                                              // 2\n  validate: _.isDate,                                                                        // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be a date';                                                 // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/email.js                           //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'email',                                                                             // 2\n  validate: function(fieldValue) {                                                           // 3\n    // Create email regular expression.                                                      // 4\n    var re = /^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,}$/i;                                 // 5\n                                                                                             // 6\n    return re.test(fieldValue);                                                              // 7\n  },                                                                                         // 8\n  events: {                                                                                  // 9\n    validationerror: function(e) {                                                           // 10\n      var fieldName = e.data.field;                                                          // 11\n                                                                                             // 12\n      e.data.message = 'The \"' + fieldName +                                                 // 13\n        '\" field\\'s value has to be an appropiate email address';                            // 14\n    }                                                                                        // 15\n  }                                                                                          // 16\n});                                                                                          // 17\n                                                                                             // 18\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/existence/required.js                   //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'required',                                                                          // 2\n  validate: function(fieldValue) {                                                           // 3\n    return !_.isNull(fieldValue) && fieldValue !== '';                                       // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n                                                                                             // 9\n      e.data.message = 'The \"' + fieldName +                                                 // 10\n        '\" field\\'s value is required';                                                      // 11\n    }                                                                                        // 12\n  }                                                                                          // 13\n});                                                                                          // 14\n                                                                                             // 15\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/existence/null.js                       //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'null',                                                                              // 2\n  validate: _.isNull,                                                                        // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be null';                                                   // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/existence/not_null.js                   //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'notNull',                                                                           // 2\n  validate: function(fieldValue) {                                                           // 3\n    return !_.isNull(fieldValue);                                                            // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n                                                                                             // 9\n      e.data.message = 'The \"' + fieldName +                                                 // 10\n        '\" field\\'s value can\\'t be null';                                                   // 11\n    }                                                                                        // 12\n  }                                                                                          // 13\n});                                                                                          // 14\n                                                                                             // 15\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/existence/has.js                        //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'has',                                                                               // 2\n  validate: function(fieldValue, fieldName, propertyName) {                                  // 3\n    return _.has(fieldValue, propertyName);                                                  // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n      var propertyName = e.data.options;                                                     // 9\n                                                                                             // 10\n      e.data.message = 'The \"' + fieldName +                                                 // 11\n        '\" field\\'s value has to have \"' + propertyName + '\" property';                      // 12\n    }                                                                                        // 13\n  }                                                                                          // 14\n});                                                                                          // 15\n                                                                                             // 16\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/length.js                          //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'length',                                                                            // 2\n  validate: function(fieldValue, fieldName, length) {                                        // 3\n    if (!fieldValue) {                                                                       // 4\n      return false;                                                                          // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue.length === length;                                                     // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var length = e.data.options;                                                           // 13\n                                                                                             // 14\n      e.data.message = 'The \"' + fieldName +                                                 // 15\n        '\" field\\'s value length has to be ' + length;                                       // 16\n    }                                                                                        // 17\n  }                                                                                          // 18\n});                                                                                          // 19\n                                                                                             // 20\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/min_length.js                      //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'minLength',                                                                         // 2\n  validate: function(fieldValue, fieldName, minLength) {                                     // 3\n    if (!fieldValue) {                                                                       // 4\n      return false;                                                                          // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue.length >= minLength;                                                   // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var minLength = e.data.options;                                                        // 13\n                                                                                             // 14\n      e.data.message = 'The \"' + fieldName +                                                 // 15\n        '\" field\\'s value length has to be at least ' + minLength;                           // 16\n    }                                                                                        // 17\n  }                                                                                          // 18\n});                                                                                          // 19\n                                                                                             // 20\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/max_length.js                      //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'maxLength',                                                                         // 2\n  validate: function(fieldValue, fieldName, maxLength) {                                     // 3\n    if (_.isNull(fieldValue) || _.isUndefined(fieldValue) || !_.has(fieldValue, 'length')) { // 4\n      return false;                                                                          // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue.length <= maxLength;                                                   // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var maxLength = e.data.options;                                                        // 13\n                                                                                             // 14\n      e.data.message = 'The \"' + fieldName +                                                 // 15\n        '\" field\\'s value length has to be at most ' + maxLength;                            // 16\n    }                                                                                        // 17\n  }                                                                                          // 18\n});                                                                                          // 19\n                                                                                             // 20\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/gt.js                              //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'gt',                                                                                // 2\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3\n    if (_.isFunction(compareValue)) {                                                        // 4\n      compareValue = compareValue.call(this);                                                // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue > compareValue;                                                        // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var compareValue = e.data.options;                                                     // 13\n                                                                                             // 14\n      if (_.isFunction(compareValue)) {                                                      // 15\n        compareValue = compareValue.call(this);                                              // 16\n      }                                                                                      // 17\n                                                                                             // 18\n      e.data.message = 'The \"' + fieldName +                                                 // 19\n        '\" field\\'s value has to be greater than \"' + compareValue + '\"';                    // 20\n    }                                                                                        // 21\n  }                                                                                          // 22\n});                                                                                          // 23\n                                                                                             // 24\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/gte.js                             //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'gte',                                                                               // 2\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3\n    if (_.isFunction(compareValue)) {                                                        // 4\n      compareValue = compareValue.call(this);                                                // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue >= compareValue;                                                       // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var compareValue = e.data.options;                                                     // 13\n                                                                                             // 14\n      if (_.isFunction(compareValue)) {                                                      // 15\n        compareValue = compareValue.call(this);                                              // 16\n      }                                                                                      // 17\n                                                                                             // 18\n      e.data.message = 'The \"' + fieldName +                                                 // 19\n        '\" field\\'s value has to be greater than or equal \"' +                               // 20\n        compareValue + '\"';                                                                  // 21\n    }                                                                                        // 22\n  }                                                                                          // 23\n});                                                                                          // 24\n                                                                                             // 25\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/lt.js                              //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'lt',                                                                                // 2\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3\n    if (_.isFunction(compareValue)) {                                                        // 4\n      compareValue = compareValue.call(this);                                                // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue < compareValue;                                                        // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var compareValue = e.data.options;                                                     // 13\n                                                                                             // 14\n      if (_.isFunction(compareValue)) {                                                      // 15\n        compareValue = compareValue.call(this);                                              // 16\n      }                                                                                      // 17\n                                                                                             // 18\n      e.data.message = 'The \"' + fieldName +                                                 // 19\n        '\" field\\'s value has to be less than \"' + compareValue + '\"';                       // 20\n    }                                                                                        // 21\n  }                                                                                          // 22\n});                                                                                          // 23\n                                                                                             // 24\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/lte.js                             //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'lte',                                                                               // 2\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3\n    if (_.isFunction(compareValue)) {                                                        // 4\n      compareValue = compareValue.call(this);                                                // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue <= compareValue;                                                       // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var compareValue = e.data.options;                                                     // 13\n                                                                                             // 14\n      if (_.isFunction(compareValue)) {                                                      // 15\n        compareValue = compareValue.call(this);                                              // 16\n      }                                                                                      // 17\n                                                                                             // 18\n      e.data.message = 'The \"' + fieldName +                                                 // 19\n        '\" field\\'s value has to be less than or equal \"' + compareValue +                   // 20\n        '\"';                                                                                 // 21\n    }                                                                                        // 22\n  }                                                                                          // 23\n});                                                                                          // 24\n                                                                                             // 25\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/comparison/choice.js                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'choice',                                                                            // 2\n  validate: function(fieldValue, fieldName, choices) {                                       // 3\n    return _.contains(choices, fieldValue);                                                  // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n      var choices = e.data.options;                                                          // 9\n                                                                                             // 10\n      e.data.message = 'The \"' + fieldName +                                                 // 11\n        '\" field\\'s value has to be one of \"' + choices.join('\", \"') +                       // 12\n        '\"';                                                                                 // 13\n    }                                                                                        // 14\n  }                                                                                          // 15\n});                                                                                          // 16\n                                                                                             // 17\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/comparison/unique.js                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'unique',                                                                            // 2\n  validate: function(fieldValue, fieldName) {                                                // 3\n    var Collection = this.constructor.getCollection();                                       // 4\n                                                                                             // 5\n    // If a Class is not related with any collection then document is unique.                // 6\n    if (!Collection) {                                                                       // 7\n      return true;                                                                           // 8\n    }                                                                                        // 9\n                                                                                             // 10\n    // The unique validator is used only during insert operation. If the \"_id\"               // 11\n    // fields is present, then object is being updated not inserted.                         // 12\n    if (this._id) {                                                                          // 13\n      return true;                                                                           // 14\n    }                                                                                        // 15\n                                                                                             // 16\n    // Prepare selector.                                                                     // 17\n    var selector = {};                                                                       // 18\n    selector[fieldName] = fieldValue;                                                        // 19\n                                                                                             // 20\n    // Check if a record with the given field value exists.                                  // 21\n    return _.isUndefined(Collection.findOne(selector));                                      // 22\n  },                                                                                         // 23\n  events: {                                                                                  // 24\n    validationerror: function(e) {                                                           // 25\n      var fieldName = e.data.field;                                                          // 26\n                                                                                             // 27\n      e.data.message = 'The \"' + fieldName +                                                 // 28\n        '\" field\\'s value has to be unique';                                                 // 29\n    }                                                                                        // 30\n  }                                                                                          // 31\n});                                                                                          // 32\n                                                                                             // 33\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/comparison/equal.js                     //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'equal',                                                                             // 2\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3\n    if (_.isFunction(compareValue)) {                                                        // 4\n      compareValue = compareValue.call(this);                                                // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue === compareValue;                                                      // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var compareValue = e.data.options;                                                     // 13\n                                                                                             // 14\n      if (_.isFunction(compareValue)) {                                                      // 15\n        compareValue = compareValue.call(this);                                              // 16\n      }                                                                                      // 17\n                                                                                             // 18\n      e.data.message = 'The \"' + fieldName +                                                 // 19\n        '\" field\\'s value has to be equal \"' + compareValue + '\"';                           // 20\n    }                                                                                        // 21\n  }                                                                                          // 22\n});                                                                                          // 23\n                                                                                             // 24\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/comparison/equal_to.js                  //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'equalTo',                                                                           // 2\n  validate: function(fieldValue, fieldName, compareFieldName) {                              // 3\n    var compareValue = this.get(compareFieldName);                                           // 4\n                                                                                             // 5\n    return fieldValue === compareValue;                                                      // 6\n  },                                                                                         // 7\n  events: {                                                                                  // 8\n    validationerror: function(e) {                                                           // 9\n      var fieldName = e.data.field;                                                          // 10\n      var compareValue = e.data.options;                                                     // 11\n                                                                                             // 12\n      if (_.isFunction(compareValue)) {                                                      // 13\n        compareValue = compareValue.call(this);                                              // 14\n      }                                                                                      // 15\n                                                                                             // 16\n      e.data.message = 'The \"' + fieldName + '\" and \"' + compareValue +                      // 17\n        '\" field\\'s values have to be equal';                                                // 18\n    }                                                                                        // 19\n  }                                                                                          // 20\n});                                                                                          // 21\n                                                                                             // 22\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/comparison/regexp.js                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'regexp',                                                                            // 2\n  validate: function(fieldValue, fieldName, pattern) {                                       // 3\n    return pattern.test(fieldValue);                                                         // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n      var pattern = e.data.options.toString();                                               // 9\n                                                                                             // 10\n      e.data.message = 'The \"' + fieldName +                                                 // 11\n        '\" field\\'s value has to match \"' + pattern +                                        // 12\n        '\" regular expression';                                                              // 13\n    }                                                                                        // 14\n  }                                                                                          // 15\n});                                                                                          // 16\n                                                                                             // 17\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/logical/and.js                          //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'and',                                                                               // 2\n  validate: function(fieldValue, fieldName, validators) {                                    // 3\n    var error;                                                                               // 4\n    var doc = this;                                                                          // 5\n                                                                                             // 6\n    var isValid = _.every(validators, function(validator, index) {                           // 7\n      try {                                                                                  // 8\n        var isValid = validator.call(doc, fieldValue, fieldName);                            // 9\n        if (!isValid && !error) {                                                            // 10\n          error = new ValidationError([{                                                     // 11\n            validator: validator,                                                            // 12\n            patternOrFieldName: fieldName,                                                   // 13\n            fieldValue: fieldValue,                                                          // 14\n            name: validator.definition.name                                                  // 15\n          }]);                                                                               // 16\n        }                                                                                    // 17\n        return isValid;                                                                      // 18\n      } catch (e) {                                                                          // 19\n        if (!error) {                                                                        // 20\n          error = e;                                                                         // 21\n        }                                                                                    // 22\n        return false;                                                                        // 23\n      }                                                                                      // 24\n    });                                                                                      // 25\n                                                                                             // 26\n    if (!isValid && error) {                                                                 // 27\n      throw error;                                                                           // 28\n    }                                                                                        // 29\n                                                                                             // 30\n    return isValid;                                                                          // 31\n  }                                                                                          // 32\n});                                                                                          // 33\n                                                                                             // 34\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/logical/or.js                           //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'or',                                                                                // 2\n  validate: function(fieldValue, fieldName, validators) {                                    // 3\n    var error;                                                                               // 4\n    var doc = this;                                                                          // 5\n                                                                                             // 6\n    var isValid = _.some(validators, function(validator, index) {                            // 7\n      try {                                                                                  // 8\n        var isValid = validator.call(doc, fieldValue, fieldName);                            // 9\n        if (!isValid && !error) {                                                            // 10\n          error = new ValidationError([{                                                     // 11\n            validator: validator,                                                            // 12\n            patternOrFieldName: fieldName,                                                   // 13\n            fieldValue: fieldValue,                                                          // 14\n            name: validator.definition.name                                                  // 15\n          }]);                                                                               // 16\n        }                                                                                    // 17\n        return isValid;                                                                      // 18\n      } catch (e) {                                                                          // 19\n        if (!error) {                                                                        // 20\n          error = e;                                                                         // 21\n        }                                                                                    // 22\n        return false;                                                                        // 23\n      }                                                                                      // 24\n    });                                                                                      // 25\n                                                                                             // 26\n    if (!isValid && error) {                                                                 // 27\n      throw error;                                                                           // 28\n    }                                                                                        // 29\n                                                                                             // 30\n    return isValid;                                                                          // 31\n  }                                                                                          // 32\n});                                                                                          // 33\n                                                                                             // 34\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]
[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\n\n/* Package-scope variables */\nvar BrowserPolicy;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////\n//                                                                        //\n// packages/browser-policy-common/browser-policy-common.js                //\n//                                                                        //\n////////////////////////////////////////////////////////////////////////////\n                                                                          //\nBrowserPolicy = {};                                                       // 1\n                                                                          // 2\nvar inTest = false;                                                       // 3\n                                                                          // 4\nBrowserPolicy._runningTest = function () {                                // 5\n  return inTest;                                                          // 6\n};                                                                        // 7\n                                                                          // 8\nBrowserPolicy._setRunningTest = function () {                             // 9\n  inTest = true;                                                          // 10\n};                                                                        // 11\n                                                                          // 12\nWebApp.connectHandlers.use(function (req, res, next) {                    // 13\n  // Never set headers inside tests because they could break other tests.\n  if (BrowserPolicy._runningTest())                                       // 15\n    return next();                                                        // 16\n                                                                          // 17\n  var xFrameOptions = BrowserPolicy.framing &&                            // 18\n        BrowserPolicy.framing._constructXFrameOptions();                  // 19\n  var csp = BrowserPolicy.content &&                                      // 20\n        BrowserPolicy.content._constructCsp();                            // 21\n  if (xFrameOptions) {                                                    // 22\n    res.setHeader(\"X-Frame-Options\", xFrameOptions);                      // 23\n  }                                                                       // 24\n  if (csp) {                                                              // 25\n    res.setHeader(\"Content-Security-Policy\", csp);                        // 26\n  }                                                                       // 27\n  next();                                                                 // 28\n});                                                                       // 29\n                                                                          // 30\n// We use `rawConnectHandlers` to set X-Content-Type-Options on all       // 31\n// requests, including static files.                                      // 32\n// XXX We should probably use `rawConnectHandlers` for X-Frame-Options    // 33\n// and Content-Security-Policy too, but let's make sure that doesn't      // 34\n// break anything first (e.g. the OAuth popup flow won't work well with   // 35\n// a CSP that disallows inline scripts).                                  // 36\nWebApp.rawConnectHandlers.use(function (req, res, next) {                 // 37\n  if (BrowserPolicy._runningTest())                                       // 38\n    return next();                                                        // 39\n                                                                          // 40\n  var contentTypeOptions = BrowserPolicy.content &&                       // 41\n        BrowserPolicy.content._xContentTypeOptions();                     // 42\n  if (contentTypeOptions) {                                               // 43\n    res.setHeader(\"X-Content-Type-Options\", contentTypeOptions);          // 44\n  }                                                                       // 45\n  next();                                                                 // 46\n});                                                                       // 47\n                                                                          // 48\n////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['browser-policy-common'] = {\n  BrowserPolicy: BrowserPolicy\n};\n\n})();\n","servePath":"/packages/browser-policy-common.js","sourceMap":{"version":3,"sources":["/packages/browser-policy-common/browser-policy-common.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+E","file":"/packages/browser-policy-common.js","sourcesContent":["BrowserPolicy = {};\n\nvar inTest = false;\n\nBrowserPolicy._runningTest = function () {\n  return inTest;\n};\n\nBrowserPolicy._setRunningTest = function () {\n  inTest = true;\n};\n\nWebApp.connectHandlers.use(function (req, res, next) {\n  // Never set headers inside tests because they could break other tests.\n  if (BrowserPolicy._runningTest())\n    return next();\n\n  var xFrameOptions = BrowserPolicy.framing &&\n        BrowserPolicy.framing._constructXFrameOptions();\n  var csp = BrowserPolicy.content &&\n        BrowserPolicy.content._constructCsp();\n  if (xFrameOptions) {\n    res.setHeader(\"X-Frame-Options\", xFrameOptions);\n  }\n  if (csp) {\n    res.setHeader(\"Content-Security-Policy\", csp);\n  }\n  next();\n});\n\n// We use `rawConnectHandlers` to set X-Content-Type-Options on all\n// requests, including static files.\n// XXX We should probably use `rawConnectHandlers` for X-Frame-Options\n// and Content-Security-Policy too, but let's make sure that doesn't\n// break anything first (e.g. the OAuth popup flow won't work well with\n// a CSP that disallows inline scripts).\nWebApp.rawConnectHandlers.use(function (req, res, next) {\n  if (BrowserPolicy._runningTest())\n    return next();\n\n  var contentTypeOptions = BrowserPolicy.content &&\n        BrowserPolicy.content._xContentTypeOptions();\n  if (contentTypeOptions) {\n    res.setHeader(\"X-Content-Type-Options\", contentTypeOptions);\n  }\n  next();\n});\n"]}}]
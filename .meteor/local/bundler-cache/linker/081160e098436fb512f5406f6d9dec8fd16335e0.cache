[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar BrowserPolicy = Package['browser-policy-common'].BrowserPolicy;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/browser-policy-content/browser-policy-content.js                     //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n// By adding this package, you get the following default policy:                 // 1\n// No eval or other string-to-code, and content can only be loaded from the      // 2\n// same origin as the app (except for XHRs and websocket connections, which can  // 3\n// go to any origin). Browsers will also be told not to sniff content types      // 4\n// away from declared content types (X-Content-Type-Options: nosniff).           // 5\n//                                                                               // 6\n// Apps should call BrowserPolicy.content.disallowInlineScripts() if they are    // 7\n// not using any inline script tags and are willing to accept an extra round     // 8\n// trip on page load.                                                            // 9\n//                                                                               // 10\n// BrowserPolicy.content functions for tweaking CSP:                             // 11\n// allowInlineScripts()                                                          // 12\n// disallowInlineScripts(): adds extra round-trip to page load time              // 13\n// allowInlineStyles()                                                           // 14\n// disallowInlineStyles()                                                        // 15\n// allowEval()                                                                   // 16\n// disallowEval()                                                                // 17\n//                                                                               // 18\n// For each type of content (script, object, image, media, font, connect,        // 19\n// style), there are the following functions:                                    // 20\n// allow<content type>Origin(origin): allows the type of content to be loaded    // 21\n// from the given origin                                                         // 22\n// allow<content type>DataUrl(): allows the content to be loaded from data: URLs\n// allow<content type>SameOrigin(): allows the content to be loaded from the     // 24\n// same origin                                                                   // 25\n// disallow<content type>(): disallows this type of content all together (can't  // 26\n// be called for script)                                                         // 27\n//                                                                               // 28\n// The following functions allow you to set rules for all types of content at    // 29\n// once:                                                                         // 30\n// allowAllContentOrigin(origin)                                                 // 31\n// allowAllContentDataUrl()                                                      // 32\n// allowAllContentSameOrigin()                                                   // 33\n// disallowAllContent()                                                          // 34\n//                                                                               // 35\n// You can allow content type sniffing by calling                                // 36\n// `BrowserPolicy.content.allowContentTypeSniffing()`.                           // 37\n                                                                                 // 38\nvar cspSrcs;                                                                     // 39\nvar cachedCsp; // Avoid constructing the header out of cspSrcs when possible.    // 40\n                                                                                 // 41\n// CSP keywords have to be single-quoted.                                        // 42\nvar keywords = {                                                                 // 43\n  unsafeInline: \"'unsafe-inline'\",                                               // 44\n  unsafeEval: \"'unsafe-eval'\",                                                   // 45\n  self: \"'self'\",                                                                // 46\n  none: \"'none'\"                                                                 // 47\n};                                                                               // 48\n                                                                                 // 49\n// If false, we set the X-Content-Type-Options header to 'nosniff'.              // 50\nvar contentSniffingAllowed = false;                                              // 51\n                                                                                 // 52\nBrowserPolicy.content = {};                                                      // 53\n                                                                                 // 54\nvar parseCsp = function (csp) {                                                  // 55\n  var policies = csp.split(\"; \");                                                // 56\n  cspSrcs = {};                                                                  // 57\n  _.each(policies, function (policy) {                                           // 58\n    if (policy[policy.length - 1] === \";\")                                       // 59\n      policy = policy.substring(0, policy.length - 1);                           // 60\n    var srcs = policy.split(\" \");                                                // 61\n    var directive = srcs[0];                                                     // 62\n    if (_.indexOf(srcs, keywords.none) !== -1)                                   // 63\n      cspSrcs[directive] = null;                                                 // 64\n    else                                                                         // 65\n      cspSrcs[directive] = srcs.slice(1);                                        // 66\n  });                                                                            // 67\n                                                                                 // 68\n  if (cspSrcs[\"default-src\"] === undefined)                                      // 69\n    throw new Error(\"Content Security Policies used with \" +                     // 70\n                    \"browser-policy must specify a default-src.\");               // 71\n                                                                                 // 72\n  // Copy default-src sources to other directives.                               // 73\n  _.each(cspSrcs, function (sources, directive) {                                // 74\n    cspSrcs[directive] = _.union(sources || [], cspSrcs[\"default-src\"] || []);   // 75\n  });                                                                            // 76\n};                                                                               // 77\n                                                                                 // 78\nvar removeCspSrc = function (directive, src) {                                   // 79\n  cspSrcs[directive] = _.without(cspSrcs[directive] || [], src);                 // 80\n};                                                                               // 81\n                                                                                 // 82\n// Prepare for a change to cspSrcs. Ensure that we have a key in the dictionary  // 83\n// and clear any cached CSP.                                                     // 84\nvar prepareForCspDirective = function (directive) {                              // 85\n  cspSrcs = cspSrcs || {};                                                       // 86\n  cachedCsp = null;                                                              // 87\n  if (! _.has(cspSrcs, directive))                                               // 88\n    cspSrcs[directive] = _.clone(cspSrcs[\"default-src\"]);                        // 89\n};                                                                               // 90\n                                                                                 // 91\n// Add `src` to the list of allowed sources for `directive`, with the            // 92\n// following modifications if `src` is an origin:                                // 93\n// - If `src` does not have a protocol specified, then add both                  // 94\n//   http://<src> and https://<src>. This is to mask differing                   // 95\n//   cross-browser behavior; some browsers interpret an origin without a         // 96\n//   protocol as http://<src> and some interpret it as both http://<src>         // 97\n//   and https://<src>                                                           // 98\n// - Trim trailing slashes from `src`, since some browsers interpret             // 99\n//   \"foo.com/\" as \"foo.com\" and some don't.                                     // 100\nvar addSourceForDirective = function (directive, src) {                          // 101\n  if (_.contains(_.values(keywords), src)) {                                     // 102\n    cspSrcs[directive].push(src);                                                // 103\n  } else {                                                                       // 104\n    src = src.toLowerCase();                                                     // 105\n                                                                                 // 106\n    // Trim trailing slashes.                                                    // 107\n    src = src.replace(/\\/+$/, '');                                               // 108\n                                                                                 // 109\n    var toAdd = [];                                                              // 110\n    // If there is no protocol, add both http:// and https://.                   // 111\n    if (! /^([a-z0-9.+-]+:)/.test(src)) {                                        // 112\n      toAdd.push(\"http://\" + src);                                               // 113\n      toAdd.push(\"https://\" + src);                                              // 114\n    } else {                                                                     // 115\n      toAdd.push(src);                                                           // 116\n    }                                                                            // 117\n    _.each(toAdd, function (s) {                                                 // 118\n      cspSrcs[directive].push(s);                                                // 119\n    });                                                                          // 120\n  }                                                                              // 121\n};                                                                               // 122\n                                                                                 // 123\nvar setDefaultPolicy = function () {                                             // 124\n  // By default, unsafe inline scripts and styles are allowed, since we expect   // 125\n  // many apps will use them for analytics, etc. Unsafe eval is disallowed, and  // 126\n  // the only allowable content source is the same origin or data, except for    // 127\n  // connect which allows anything (since meteor.com apps make websocket         // 128\n  // connections to a lot of different origins).                                 // 129\n  BrowserPolicy.content.setPolicy(\"default-src 'self'; \" +                       // 130\n                                  \"script-src 'self' 'unsafe-inline'; \" +        // 131\n                                  \"connect-src *; \" +                            // 132\n                                  \"img-src data: 'self'; \" +                     // 133\n                                  \"style-src 'self' 'unsafe-inline';\");          // 134\n  contentSniffingAllowed = false;                                                // 135\n};                                                                               // 136\n                                                                                 // 137\nvar setWebAppInlineScripts = function (value) {                                  // 138\n  if (! BrowserPolicy._runningTest())                                            // 139\n    WebAppInternals.setInlineScriptsAllowed(value);                              // 140\n};                                                                               // 141\n                                                                                 // 142\n_.extend(BrowserPolicy.content, {                                                // 143\n  allowContentTypeSniffing: function () {                                        // 144\n    contentSniffingAllowed = true;                                               // 145\n  },                                                                             // 146\n  // Exported for tests and browser-policy-common.                               // 147\n  _constructCsp: function () {                                                   // 148\n    if (! cspSrcs || _.isEmpty(cspSrcs))                                         // 149\n      return null;                                                               // 150\n                                                                                 // 151\n    if (cachedCsp)                                                               // 152\n      return cachedCsp;                                                          // 153\n                                                                                 // 154\n    var header = _.map(cspSrcs, function (srcs, directive) {                     // 155\n      srcs = srcs || [];                                                         // 156\n      if (_.isEmpty(srcs))                                                       // 157\n        srcs = [keywords.none];                                                  // 158\n      var directiveCsp = _.uniq(srcs).join(\" \");                                 // 159\n      return directive + \" \" + directiveCsp + \";\";                               // 160\n    });                                                                          // 161\n                                                                                 // 162\n    header = header.join(\" \");                                                   // 163\n    cachedCsp = header;                                                          // 164\n    return header;                                                               // 165\n  },                                                                             // 166\n  _reset: function () {                                                          // 167\n    cachedCsp = null;                                                            // 168\n    setDefaultPolicy();                                                          // 169\n  },                                                                             // 170\n                                                                                 // 171\n  setPolicy: function (csp) {                                                    // 172\n    cachedCsp = null;                                                            // 173\n    parseCsp(csp);                                                               // 174\n    setWebAppInlineScripts(                                                      // 175\n      BrowserPolicy.content._keywordAllowed(\"script-src\", keywords.unsafeInline)\n    );                                                                           // 177\n  },                                                                             // 178\n                                                                                 // 179\n  _keywordAllowed: function (directive, keyword) {                               // 180\n    return (cspSrcs[directive] &&                                                // 181\n            _.indexOf(cspSrcs[directive], keyword) !== -1);                      // 182\n  },                                                                             // 183\n                                                                                 // 184\n  // Helpers for creating content security policies                              // 185\n                                                                                 // 186\n  allowInlineScripts: function () {                                              // 187\n    prepareForCspDirective(\"script-src\");                                        // 188\n    cspSrcs[\"script-src\"].push(keywords.unsafeInline);                           // 189\n    setWebAppInlineScripts(true);                                                // 190\n  },                                                                             // 191\n  disallowInlineScripts: function () {                                           // 192\n    prepareForCspDirective(\"script-src\");                                        // 193\n    removeCspSrc(\"script-src\", keywords.unsafeInline);                           // 194\n    setWebAppInlineScripts(false);                                               // 195\n  },                                                                             // 196\n  allowEval: function () {                                                       // 197\n    prepareForCspDirective(\"script-src\");                                        // 198\n    cspSrcs[\"script-src\"].push(keywords.unsafeEval);                             // 199\n  },                                                                             // 200\n  disallowEval: function () {                                                    // 201\n    prepareForCspDirective(\"script-src\");                                        // 202\n    removeCspSrc(\"script-src\", keywords.unsafeEval);                             // 203\n  },                                                                             // 204\n  allowInlineStyles: function () {                                               // 205\n    prepareForCspDirective(\"style-src\");                                         // 206\n    cspSrcs[\"style-src\"].push(keywords.unsafeInline);                            // 207\n  },                                                                             // 208\n  disallowInlineStyles: function () {                                            // 209\n    prepareForCspDirective(\"style-src\");                                         // 210\n    removeCspSrc(\"style-src\", keywords.unsafeInline);                            // 211\n  },                                                                             // 212\n                                                                                 // 213\n  // Functions for setting defaults                                              // 214\n  allowSameOriginForAll: function () {                                           // 215\n    BrowserPolicy.content.allowOriginForAll(keywords.self);                      // 216\n  },                                                                             // 217\n  allowDataUrlForAll: function () {                                              // 218\n    BrowserPolicy.content.allowOriginForAll(\"data:\");                            // 219\n  },                                                                             // 220\n  allowOriginForAll: function (origin) {                                         // 221\n    prepareForCspDirective(\"default-src\");                                       // 222\n    _.each(_.keys(cspSrcs), function (directive) {                               // 223\n      addSourceForDirective(directive, origin);                                  // 224\n    });                                                                          // 225\n  },                                                                             // 226\n  disallowAll: function () {                                                     // 227\n    cachedCsp = null;                                                            // 228\n    cspSrcs = {                                                                  // 229\n      \"default-src\": []                                                          // 230\n    };                                                                           // 231\n    setWebAppInlineScripts(false);                                               // 232\n  },                                                                             // 233\n                                                                                 // 234\n  _xContentTypeOptions: function () {                                            // 235\n    if (! contentSniffingAllowed) {                                              // 236\n      return \"nosniff\";                                                          // 237\n    }                                                                            // 238\n  }                                                                              // 239\n});                                                                              // 240\n                                                                                 // 241\n// allow<Resource>Origin, allow<Resource>Data, allow<Resource>self, and          // 242\n// disallow<Resource> methods for each type of resource.                         // 243\n_.each([\"script\", \"object\", \"img\", \"media\",                                      // 244\n        \"font\", \"connect\", \"style\", \"frame\"],                                    // 245\n       function (resource) {                                                     // 246\n         var directive = resource + \"-src\";                                      // 247\n         var methodResource;                                                     // 248\n         if (resource !== \"img\") {                                               // 249\n           methodResource = resource.charAt(0).toUpperCase() +                   // 250\n             resource.slice(1);                                                  // 251\n         } else {                                                                // 252\n           methodResource = \"Image\";                                             // 253\n         }                                                                       // 254\n         var allowMethodName = \"allow\" + methodResource + \"Origin\";              // 255\n         var disallowMethodName = \"disallow\" + methodResource;                   // 256\n         var allowDataMethodName = \"allow\" + methodResource + \"DataUrl\";         // 257\n         var allowSelfMethodName = \"allow\" + methodResource + \"SameOrigin\";      // 258\n                                                                                 // 259\n         var disallow = function () {                                            // 260\n           cachedCsp = null;                                                     // 261\n           cspSrcs[directive] = [];                                              // 262\n         };                                                                      // 263\n                                                                                 // 264\n         BrowserPolicy.content[allowMethodName] = function (src) {               // 265\n           prepareForCspDirective(directive);                                    // 266\n           addSourceForDirective(directive, src);                                // 267\n         };                                                                      // 268\n         if (resource === \"script\") {                                            // 269\n           BrowserPolicy.content[disallowMethodName] = function () {             // 270\n             disallow();                                                         // 271\n             setWebAppInlineScripts(false);                                      // 272\n           };                                                                    // 273\n         } else {                                                                // 274\n           BrowserPolicy.content[disallowMethodName] = disallow;                 // 275\n         }                                                                       // 276\n         BrowserPolicy.content[allowDataMethodName] = function () {              // 277\n           prepareForCspDirective(directive);                                    // 278\n           cspSrcs[directive].push(\"data:\");                                     // 279\n         };                                                                      // 280\n         BrowserPolicy.content[allowSelfMethodName] = function () {              // 281\n           prepareForCspDirective(directive);                                    // 282\n           cspSrcs[directive].push(keywords.self);                               // 283\n         };                                                                      // 284\n       });                                                                       // 285\n                                                                                 // 286\n                                                                                 // 287\nsetDefaultPolicy();                                                              // 288\n                                                                                 // 289\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['browser-policy-content'] = {};\n\n})();\n","servePath":"/packages/browser-policy-content.js","sourceMap":{"version":3,"sources":["/packages/browser-policy-content/browser-policy-content.js"],"names":[],"mappingsuF","file":"/packages/browser-policy-content.js","sourcesContent":["// By adding this package, you get the following default policy:\n// No eval or other string-to-code, and content can only be loaded from the\n// same origin as the app (except for XHRs and websocket connections, which can\n// go to any origin). Browsers will also be told not to sniff content types\n// away from declared content types (X-Content-Type-Options: nosniff).\n//\n// Apps should call BrowserPolicy.content.disallowInlineScripts() if they are\n// not using any inline script tags and are willing to accept an extra round\n// trip on page load.\n//\n// BrowserPolicy.content functions for tweaking CSP:\n// allowInlineScripts()\n// disallowInlineScripts(): adds extra round-trip to page load time\n// allowInlineStyles()\n// disallowInlineStyles()\n// allowEval()\n// disallowEval()\n//\n// For each type of content (script, object, image, media, font, connect,\n// style), there are the following functions:\n// allow<content type>Origin(origin): allows the type of content to be loaded\n// from the given origin\n// allow<content type>DataUrl(): allows the content to be loaded from data: URLs\n// allow<content type>SameOrigin(): allows the content to be loaded from the\n// same origin\n// disallow<content type>(): disallows this type of content all together (can't\n// be called for script)\n//\n// The following functions allow you to set rules for all types of content at\n// once:\n// allowAllContentOrigin(origin)\n// allowAllContentDataUrl()\n// allowAllContentSameOrigin()\n// disallowAllContent()\n//\n// You can allow content type sniffing by calling\n// `BrowserPolicy.content.allowContentTypeSniffing()`.\n\nvar cspSrcs;\nvar cachedCsp; // Avoid constructing the header out of cspSrcs when possible.\n\n// CSP keywords have to be single-quoted.\nvar keywords = {\n  unsafeInline: \"'unsafe-inline'\",\n  unsafeEval: \"'unsafe-eval'\",\n  self: \"'self'\",\n  none: \"'none'\"\n};\n\n// If false, we set the X-Content-Type-Options header to 'nosniff'.\nvar contentSniffingAllowed = false;\n\nBrowserPolicy.content = {};\n\nvar parseCsp = function (csp) {\n  var policies = csp.split(\"; \");\n  cspSrcs = {};\n  _.each(policies, function (policy) {\n    if (policy[policy.length - 1] === \";\")\n      policy = policy.substring(0, policy.length - 1);\n    var srcs = policy.split(\" \");\n    var directive = srcs[0];\n    if (_.indexOf(srcs, keywords.none) !== -1)\n      cspSrcs[directive] = null;\n    else\n      cspSrcs[directive] = srcs.slice(1);\n  });\n\n  if (cspSrcs[\"default-src\"] === undefined)\n    throw new Error(\"Content Security Policies used with \" +\n                    \"browser-policy must specify a default-src.\");\n\n  // Copy default-src sources to other directives.\n  _.each(cspSrcs, function (sources, directive) {\n    cspSrcs[directive] = _.union(sources || [], cspSrcs[\"default-src\"] || []);\n  });\n};\n\nvar removeCspSrc = function (directive, src) {\n  cspSrcs[directive] = _.without(cspSrcs[directive] || [], src);\n};\n\n// Prepare for a change to cspSrcs. Ensure that we have a key in the dictionary\n// and clear any cached CSP.\nvar prepareForCspDirective = function (directive) {\n  cspSrcs = cspSrcs || {};\n  cachedCsp = null;\n  if (! _.has(cspSrcs, directive))\n    cspSrcs[directive] = _.clone(cspSrcs[\"default-src\"]);\n};\n\n// Add `src` to the list of allowed sources for `directive`, with the\n// following modifications if `src` is an origin:\n// - If `src` does not have a protocol specified, then add both\n//   http://<src> and https://<src>. This is to mask differing\n//   cross-browser behavior; some browsers interpret an origin without a\n//   protocol as http://<src> and some interpret it as both http://<src>\n//   and https://<src>\n// - Trim trailing slashes from `src`, since some browsers interpret\n//   \"foo.com/\" as \"foo.com\" and some don't.\nvar addSourceForDirective = function (directive, src) {\n  if (_.contains(_.values(keywords), src)) {\n    cspSrcs[directive].push(src);\n  } else {\n    src = src.toLowerCase();\n\n    // Trim trailing slashes.\n    src = src.replace(/\\/+$/, '');\n\n    var toAdd = [];\n    // If there is no protocol, add both http:// and https://.\n    if (! /^([a-z0-9.+-]+:)/.test(src)) {\n      toAdd.push(\"http://\" + src);\n      toAdd.push(\"https://\" + src);\n    } else {\n      toAdd.push(src);\n    }\n    _.each(toAdd, function (s) {\n      cspSrcs[directive].push(s);\n    });\n  }\n};\n\nvar setDefaultPolicy = function () {\n  // By default, unsafe inline scripts and styles are allowed, since we expect\n  // many apps will use them for analytics, etc. Unsafe eval is disallowed, and\n  // the only allowable content source is the same origin or data, except for\n  // connect which allows anything (since meteor.com apps make websocket\n  // connections to a lot of different origins).\n  BrowserPolicy.content.setPolicy(\"default-src 'self'; \" +\n                                  \"script-src 'self' 'unsafe-inline'; \" +\n                                  \"connect-src *; \" +\n                                  \"img-src data: 'self'; \" +\n                                  \"style-src 'self' 'unsafe-inline';\");\n  contentSniffingAllowed = false;\n};\n\nvar setWebAppInlineScripts = function (value) {\n  if (! BrowserPolicy._runningTest())\n    WebAppInternals.setInlineScriptsAllowed(value);\n};\n\n_.extend(BrowserPolicy.content, {\n  allowContentTypeSniffing: function () {\n    contentSniffingAllowed = true;\n  },\n  // Exported for tests and browser-policy-common.\n  _constructCsp: function () {\n    if (! cspSrcs || _.isEmpty(cspSrcs))\n      return null;\n\n    if (cachedCsp)\n      return cachedCsp;\n\n    var header = _.map(cspSrcs, function (srcs, directive) {\n      srcs = srcs || [];\n      if (_.isEmpty(srcs))\n        srcs = [keywords.none];\n      var directiveCsp = _.uniq(srcs).join(\" \");\n      return directive + \" \" + directiveCsp + \";\";\n    });\n\n    header = header.join(\" \");\n    cachedCsp = header;\n    return header;\n  },\n  _reset: function () {\n    cachedCsp = null;\n    setDefaultPolicy();\n  },\n\n  setPolicy: function (csp) {\n    cachedCsp = null;\n    parseCsp(csp);\n    setWebAppInlineScripts(\n      BrowserPolicy.content._keywordAllowed(\"script-src\", keywords.unsafeInline)\n    );\n  },\n\n  _keywordAllowed: function (directive, keyword) {\n    return (cspSrcs[directive] &&\n            _.indexOf(cspSrcs[directive], keyword) !== -1);\n  },\n\n  // Helpers for creating content security policies\n\n  allowInlineScripts: function () {\n    prepareForCspDirective(\"script-src\");\n    cspSrcs[\"script-src\"].push(keywords.unsafeInline);\n    setWebAppInlineScripts(true);\n  },\n  disallowInlineScripts: function () {\n    prepareForCspDirective(\"script-src\");\n    removeCspSrc(\"script-src\", keywords.unsafeInline);\n    setWebAppInlineScripts(false);\n  },\n  allowEval: function () {\n    prepareForCspDirective(\"script-src\");\n    cspSrcs[\"script-src\"].push(keywords.unsafeEval);\n  },\n  disallowEval: function () {\n    prepareForCspDirective(\"script-src\");\n    removeCspSrc(\"script-src\", keywords.unsafeEval);\n  },\n  allowInlineStyles: function () {\n    prepareForCspDirective(\"style-src\");\n    cspSrcs[\"style-src\"].push(keywords.unsafeInline);\n  },\n  disallowInlineStyles: function () {\n    prepareForCspDirective(\"style-src\");\n    removeCspSrc(\"style-src\", keywords.unsafeInline);\n  },\n\n  // Functions for setting defaults\n  allowSameOriginForAll: function () {\n    BrowserPolicy.content.allowOriginForAll(keywords.self);\n  },\n  allowDataUrlForAll: function () {\n    BrowserPolicy.content.allowOriginForAll(\"data:\");\n  },\n  allowOriginForAll: function (origin) {\n    prepareForCspDirective(\"default-src\");\n    _.each(_.keys(cspSrcs), function (directive) {\n      addSourceForDirective(directive, origin);\n    });\n  },\n  disallowAll: function () {\n    cachedCsp = null;\n    cspSrcs = {\n      \"default-src\": []\n    };\n    setWebAppInlineScripts(false);\n  },\n\n  _xContentTypeOptions: function () {\n    if (! contentSniffingAllowed) {\n      return \"nosniff\";\n    }\n  }\n});\n\n// allow<Resource>Origin, allow<Resource>Data, allow<Resource>self, and\n// disallow<Resource> methods for each type of resource.\n_.each([\"script\", \"object\", \"img\", \"media\",\n        \"font\", \"connect\", \"style\", \"frame\"],\n       function (resource) {\n         var directive = resource + \"-src\";\n         var methodResource;\n         if (resource !== \"img\") {\n           methodResource = resource.charAt(0).toUpperCase() +\n             resource.slice(1);\n         } else {\n           methodResource = \"Image\";\n         }\n         var allowMethodName = \"allow\" + methodResource + \"Origin\";\n         var disallowMethodName = \"disallow\" + methodResource;\n         var allowDataMethodName = \"allow\" + methodResource + \"DataUrl\";\n         var allowSelfMethodName = \"allow\" + methodResource + \"SameOrigin\";\n\n         var disallow = function () {\n           cachedCsp = null;\n           cspSrcs[directive] = [];\n         };\n\n         BrowserPolicy.content[allowMethodName] = function (src) {\n           prepareForCspDirective(directive);\n           addSourceForDirective(directive, src);\n         };\n         if (resource === \"script\") {\n           BrowserPolicy.content[disallowMethodName] = function () {\n             disallow();\n             setWebAppInlineScripts(false);\n           };\n         } else {\n           BrowserPolicy.content[disallowMethodName] = disallow;\n         }\n         BrowserPolicy.content[allowDataMethodName] = function () {\n           prepareForCspDirective(directive);\n           cspSrcs[directive].push(\"data:\");\n         };\n         BrowserPolicy.content[allowSelfMethodName] = function () {\n           prepareForCspDirective(directive);\n           cspSrcs[directive].push(keywords.self);\n         };\n       });\n\n\nsetDefaultPolicy();\n"]}}]
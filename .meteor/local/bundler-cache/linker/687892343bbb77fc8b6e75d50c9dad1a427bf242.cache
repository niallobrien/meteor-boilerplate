[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar DDP = Package['ddp-client'].DDP;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar EJSON = Package.ejson.EJSON;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar Random = Package.random.Random;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar moment = Package['momentjs:moment'].moment;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Utility, FormPreserve, res, Hooks, FormData, ArrayTracker, AutoForm, arrayTracker, globalDefaultTemplate, defaultTypeTemplates, deps, validateField, getFlatDocOfFieldValues, getInputValue, getInputData, updateTrackedFieldValue, updateAllTrackedFieldValues, getAllFieldsInForm, setDefaults;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/aldeed_autoform/packages/aldeed_autoform.js              //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {                                                       // 1\n                                                                     // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-common.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This is the only file that is run on the server, too                                                                // 1\n                                                                                                                       // 2\n// Extend the schema options allowed by SimpleSchema                                                                   // 3\nSimpleSchema.extendOptions({                                                                                           // 4\n  autoform: Match.Optional(Object)                                                                                     // 5\n});                                                                                                                    // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 16\n}).call(this);                                                       // 17\n                                                                     // 18\n                                                                     // 19\n                                                                     // 20\n                                                                     // 21\n                                                                     // 22\n                                                                     // 23\n(function () {                                                       // 24\n                                                                     // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/utility.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global Utility:true, MongoObject, AutoForm, moment, SimpleSchema */                                                 // 1\n                                                                                                                       // 2\nUtility = {                                                                                                            // 3\n  componentTypeList: ['afArrayField', 'afEachArrayItem', 'afFieldInput', 'afFormGroup', 'afObjectField', 'afQuickField', 'afQuickFields', 'autoForm', 'quickForm'],\n  /**                                                                                                                  // 5\n   * @method Utility.cleanNulls                                                                                        // 6\n   * @private                                                                                                          // 7\n   * @param {Object} doc - Source object                                                                               // 8\n   * @returns {Object}                                                                                                 // 9\n   *                                                                                                                   // 10\n   * Returns an object in which all properties with null, undefined, or empty                                          // 11\n   * string values have been removed, recursively.                                                                     // 12\n   */                                                                                                                  // 13\n  cleanNulls: function cleanNulls(doc, isArray, keepEmptyStrings) {                                                    // 14\n    var newDoc = isArray ? [] : {};                                                                                    // 15\n    _.each(doc, function(val, key) {                                                                                   // 16\n      if (!_.isArray(val) && isBasicObject(val)) {                                                                     // 17\n        val = cleanNulls(val, false, keepEmptyStrings); //recurse into plain objects                                   // 18\n        if (!_.isEmpty(val)) {                                                                                         // 19\n          newDoc[key] = val;                                                                                           // 20\n        }                                                                                                              // 21\n      } else if (_.isArray(val)) {                                                                                     // 22\n        val = cleanNulls(val, true, keepEmptyStrings); //recurse into non-typed arrays                                 // 23\n        if (!_.isEmpty(val)) {                                                                                         // 24\n          newDoc[key] = val;                                                                                           // 25\n        }                                                                                                              // 26\n      } else if (!Utility.isNullUndefinedOrEmptyString(val)) {                                                         // 27\n        newDoc[key] = val;                                                                                             // 28\n      } else if (keepEmptyStrings && typeof val === \"string\" && val.length === 0) {                                    // 29\n        newDoc[key] = val;                                                                                             // 30\n      }                                                                                                                // 31\n    });                                                                                                                // 32\n    return newDoc;                                                                                                     // 33\n  },                                                                                                                   // 34\n  /**                                                                                                                  // 35\n   * @method Utility.reportNulls                                                                                       // 36\n   * @private                                                                                                          // 37\n   * @param {Object} flatDoc - An object with no properties that are also objects.                                     // 38\n   * @returns {Object} An object in which the keys represent the keys in the                                           // 39\n   * original object that were null, undefined, or empty strings, and the value                                        // 40\n   * of each key is \"\".                                                                                                // 41\n   */                                                                                                                  // 42\n  reportNulls: function reportNulls(flatDoc, keepEmptyStrings) {                                                       // 43\n    var nulls = {};                                                                                                    // 44\n    // Loop through the flat doc                                                                                       // 45\n    _.each(flatDoc, function(val, key) {                                                                               // 46\n      // If value is undefined, null, or an empty string, report this as null so it will be unset                      // 47\n      if (val === null) {                                                                                              // 48\n        nulls[key] = \"\";                                                                                               // 49\n      } else if (val === void 0) {                                                                                     // 50\n        nulls[key] = \"\";                                                                                               // 51\n      } else if (!keepEmptyStrings && typeof val === \"string\" && val.length === 0) {                                   // 52\n        nulls[key] = \"\";                                                                                               // 53\n      }                                                                                                                // 54\n      // If value is an array in which all the values recursively are undefined, null, or an empty string, report this as null so it will be unset\n      else if (_.isArray(val) && Utility.cleanNulls(val, true, keepEmptyStrings).length === 0) {                       // 56\n        nulls[key] = \"\";                                                                                               // 57\n      }                                                                                                                // 58\n    });                                                                                                                // 59\n    return nulls;                                                                                                      // 60\n  },                                                                                                                   // 61\n  /**                                                                                                                  // 62\n   * @method Utility.docToModifier                                                                                     // 63\n   * @private                                                                                                          // 64\n   * @param {Object} doc - An object to be converted into a MongoDB modifier                                           // 65\n   * @param {Object} [options] - Options                                                                               // 66\n   * @param {Boolean} [options.keepEmptyStrings] - Pass `true` to keep empty strings in the $set. Otherwise $unset them.\n   * @param {Boolean} [options.keepArrays] - Pass `true` to $set entire arrays. Otherwise the modifier will $set individual array items.\n   * @returns {Object} A MongoDB modifier.                                                                             // 69\n   *                                                                                                                   // 70\n   * Converts an object into a modifier by flattening it, putting keys with                                            // 71\n   * null, undefined, and empty string values into `modifier.$unset`, and                                              // 72\n   * putting the rest of the keys into `modifier.$set`.                                                                // 73\n   */                                                                                                                  // 74\n  docToModifier: function docToModifier(doc, options) {                                                                // 75\n    var modifier = {}, mDoc, flatDoc, nulls;                                                                           // 76\n    options = options || {};                                                                                           // 77\n                                                                                                                       // 78\n    // Flatten doc                                                                                                     // 79\n    mDoc = new MongoObject(doc);                                                                                       // 80\n    flatDoc = mDoc.getFlatObject({keepArrays: !!options.keepArrays});                                                  // 81\n    // Get a list of null, undefined, and empty string values so we can unset them instead                             // 82\n    nulls = Utility.reportNulls(flatDoc, !!options.keepEmptyStrings);                                                  // 83\n    flatDoc = Utility.cleanNulls(flatDoc, false, !!options.keepEmptyStrings);                                          // 84\n                                                                                                                       // 85\n    if (!_.isEmpty(flatDoc)) {                                                                                         // 86\n      modifier.$set = flatDoc;                                                                                         // 87\n    }                                                                                                                  // 88\n    if (!_.isEmpty(nulls)) {                                                                                           // 89\n      modifier.$unset = nulls;                                                                                         // 90\n    }                                                                                                                  // 91\n    return modifier;                                                                                                   // 92\n  },                                                                                                                   // 93\n  /**                                                                                                                  // 94\n   * @method Utility.getSelectValues                                                                                   // 95\n   * @private                                                                                                          // 96\n   * @param {Element} select - DOM Element from which to get current values                                            // 97\n   * @returns {string[]}                                                                                               // 98\n   *                                                                                                                   // 99\n   * Gets a string array of all the selected values in a given `select` DOM element.                                   // 100\n   */                                                                                                                  // 101\n  getSelectValues: function getSelectValues(select) {                                                                  // 102\n    var result = [];                                                                                                   // 103\n    var options = select && select.options || [];                                                                      // 104\n    var opt;                                                                                                           // 105\n                                                                                                                       // 106\n    for (var i = 0, ln = options.length; i < ln; i++) {                                                                // 107\n      opt = options[i];                                                                                                // 108\n                                                                                                                       // 109\n      if (opt.selected) {                                                                                              // 110\n        result.push(opt.value || opt.text);                                                                            // 111\n      }                                                                                                                // 112\n    }                                                                                                                  // 113\n    return result;                                                                                                     // 114\n  },                                                                                                                   // 115\n  /*                                                                                                                   // 116\n   * Get select options                                                                                                // 117\n   */                                                                                                                  // 118\n  getSelectOptions: function getSelectOptions(defs, hash) {                                                            // 119\n    var schemaType = defs.type;                                                                                        // 120\n    var selectOptions = hash.options;                                                                                  // 121\n                                                                                                                       // 122\n    // Handle options=\"allowed\"                                                                                        // 123\n    if (selectOptions === \"allowed\") {                                                                                 // 124\n      selectOptions = _.map(defs.allowedValues, function(v) {                                                          // 125\n        var label = v;                                                                                                 // 126\n        if (hash.capitalize && v.length > 0 && schemaType === String) {                                                // 127\n          label = v.charAt(0).toUpperCase() + v.slice(1).toLowerCase();                                                // 128\n        }                                                                                                              // 129\n                                                                                                                       // 130\n        return {label: label, value: v};                                                                               // 131\n      });                                                                                                              // 132\n    }                                                                                                                  // 133\n                                                                                                                       // 134\n    // Hashtable                                                                                                       // 135\n    else if (_.isObject(selectOptions) && !_.isArray(selectOptions)) {                                                 // 136\n      selectOptions = _.map(selectOptions, function(v, k) {                                                            // 137\n        return {label: v, value: schemaType(k)};                                                                       // 138\n      });                                                                                                              // 139\n    }                                                                                                                  // 140\n                                                                                                                       // 141\n    return selectOptions;                                                                                              // 142\n  },                                                                                                                   // 143\n  /**                                                                                                                  // 144\n   * @method Utility.lookup                                                                                            // 145\n   * @private                                                                                                          // 146\n   * @param {Any} obj                                                                                                  // 147\n   * @returns {Any}                                                                                                    // 148\n   *                                                                                                                   // 149\n   * If `obj` is a string, returns the value of the property with that                                                 // 150\n   * name on the `window` object. Otherwise returns `obj`.                                                             // 151\n   */                                                                                                                  // 152\n  lookup: function lookup(obj) {                                                                                       // 153\n    var ref = window, arr;                                                                                             // 154\n    if (typeof obj === \"string\") {                                                                                     // 155\n      arr = obj.split(\".\");                                                                                            // 156\n      while(arr.length && (ref = ref[arr.shift()]));                                                                   // 157\n      if (!ref) {                                                                                                      // 158\n        throw new Error(obj + \" is not in the window scope\");                                                          // 159\n      }                                                                                                                // 160\n      return ref;                                                                                                      // 161\n    }                                                                                                                  // 162\n    return obj;                                                                                                        // 163\n  },                                                                                                                   // 164\n  /**                                                                                                                  // 165\n   * @method Utility.getDefs                                                                                           // 166\n   * @private                                                                                                          // 167\n   * @param {SimpleSchema} ss                                                                                          // 168\n   * @param {String} name                                                                                              // 169\n   * @return {Object} Schema definitions object                                                                        // 170\n   *                                                                                                                   // 171\n   * Returns the schema definitions object from a SimpleSchema instance. Equivalent to calling                         // 172\n   * `ss.schema(name)` but handles throwing errors if `name` is not a string or is not a valid                         // 173\n   * field name for this SimpleSchema instance.                                                                        // 174\n   */                                                                                                                  // 175\n  getDefs: function getDefs(ss, name) {                                                                                // 176\n    if (typeof name !== \"string\") {                                                                                    // 177\n      throw new Error(\"Invalid field name: (not a string)\");                                                           // 178\n    }                                                                                                                  // 179\n                                                                                                                       // 180\n    var defs = ss.schema(name);                                                                                        // 181\n    if (!defs) {                                                                                                       // 182\n      throw new Error(\"Invalid field name: \" + name);                                                                  // 183\n    }                                                                                                                  // 184\n    return defs;                                                                                                       // 185\n  },                                                                                                                   // 186\n  /**                                                                                                                  // 187\n   * @method Utility.objAffectsKey                                                                                     // 188\n   * @private                                                                                                          // 189\n   * @param  {Object} obj                                                                                              // 190\n   * @param  {String} key                                                                                              // 191\n   * @return {Boolean}                                                                                                 // 192\n   * @todo should make this a static method in MongoObject                                                             // 193\n   */                                                                                                                  // 194\n  objAffectsKey: function objAffectsKey(obj, key) {                                                                    // 195\n    var mDoc = new MongoObject(obj);                                                                                   // 196\n    return mDoc.affectsKey(key);                                                                                       // 197\n  },                                                                                                                   // 198\n  /**                                                                                                                  // 199\n   * @method Utility.expandObj                                                                                         // 200\n   * @private                                                                                                          // 201\n   * @param  {Object} doc                                                                                              // 202\n   * @return {Object}                                                                                                  // 203\n   *                                                                                                                   // 204\n   * Takes a flat object and returns an expanded version of it.                                                        // 205\n   */                                                                                                                  // 206\n  expandObj: function expandObj(doc) {                                                                                 // 207\n    var newDoc = {}, subkeys, subkey, subkeylen, nextPiece, current;                                                   // 208\n    _.each(doc, function(val, key) {                                                                                   // 209\n      subkeys = key.split(\".\");                                                                                        // 210\n      subkeylen = subkeys.length;                                                                                      // 211\n      current = newDoc;                                                                                                // 212\n      for (var i = 0; i < subkeylen; i++) {                                                                            // 213\n        subkey = subkeys[i];                                                                                           // 214\n        if (typeof current[subkey] !== \"undefined\" && !_.isObject(current[subkey])) {                                  // 215\n          break; //already set for some reason; leave it alone                                                         // 216\n        }                                                                                                              // 217\n        if (i === subkeylen - 1) {                                                                                     // 218\n          //last iteration; time to set the value                                                                      // 219\n          current[subkey] = val;                                                                                       // 220\n        } else {                                                                                                       // 221\n          //see if the next piece is a number                                                                          // 222\n          nextPiece = subkeys[i + 1];                                                                                  // 223\n          nextPiece = parseInt(nextPiece, 10);                                                                         // 224\n          if (isNaN(nextPiece) && !_.isObject(current[subkey])) {                                                      // 225\n            current[subkey] = {};                                                                                      // 226\n          } else if (!isNaN(nextPiece) && !_.isArray(current[subkey])) {                                               // 227\n            current[subkey] = [];                                                                                      // 228\n          }                                                                                                            // 229\n        }                                                                                                              // 230\n        current = current[subkey];                                                                                     // 231\n      }                                                                                                                // 232\n    });                                                                                                                // 233\n    return newDoc;                                                                                                     // 234\n  },                                                                                                                   // 235\n  /**                                                                                                                  // 236\n   * @method Utility.compactArrays                                                                                     // 237\n   * @private                                                                                                          // 238\n   * @param  {Object} obj                                                                                              // 239\n   * @return {undefined}                                                                                               // 240\n   *                                                                                                                   // 241\n   * Edits the object by reference, compacting any arrays at any level recursively.                                    // 242\n   */                                                                                                                  // 243\n  compactArrays: function compactArrays(obj) {                                                                         // 244\n    if (_.isObject(obj)) {                                                                                             // 245\n      _.each(obj, function (val, key) {                                                                                // 246\n        if (_.isArray(val)) {                                                                                          // 247\n          obj[key] = _.without(val, void 0, null);                                                                     // 248\n          _.each(obj[key], function (arrayItem) {                                                                      // 249\n            compactArrays(arrayItem);                                                                                  // 250\n          });                                                                                                          // 251\n        } else if (!(val instanceof Date) && _.isObject(val)) {                                                        // 252\n          //recurse into objects                                                                                       // 253\n          compactArrays(val);                                                                                          // 254\n        }                                                                                                              // 255\n      });                                                                                                              // 256\n    }                                                                                                                  // 257\n  },                                                                                                                   // 258\n  /**                                                                                                                  // 259\n   * @method Utility.bubbleEmpty                                                                                       // 260\n   * @private                                                                                                          // 261\n   * @param  {Object} obj                                                                                              // 262\n   * @return {undefined}                                                                                               // 263\n   *                                                                                                                   // 264\n   * Edits the object by reference.                                                                                    // 265\n   */                                                                                                                  // 266\n  bubbleEmpty: function bubbleEmpty(obj, keepEmptyStrings) {                                                           // 267\n    if (_.isObject(obj)) {                                                                                             // 268\n      _.each(obj, function (val, key) {                                                                                // 269\n        if (_.isArray(val)) {                                                                                          // 270\n          _.each(val, function (arrayItem) {                                                                           // 271\n            bubbleEmpty(arrayItem);                                                                                    // 272\n          });                                                                                                          // 273\n        } else if (isBasicObject(val)) {                                                                               // 274\n          var allEmpty = _.all(val, function (prop) {                                                                  // 275\n            return (prop === void 0 || prop === null || (!keepEmptyStrings && typeof prop === \"string\" && prop.length === 0));\n          });                                                                                                          // 277\n          if (_.isEmpty(val) || allEmpty) {                                                                            // 278\n            obj[key] = null;                                                                                           // 279\n          } else {                                                                                                     // 280\n            //recurse into objects                                                                                     // 281\n            bubbleEmpty(val);                                                                                          // 282\n          }                                                                                                            // 283\n        }                                                                                                              // 284\n      });                                                                                                              // 285\n    }                                                                                                                  // 286\n  },                                                                                                                   // 287\n  /**                                                                                                                  // 288\n   * @method Utility.isNullUndefinedOrEmptyString                                                                      // 289\n   * @private                                                                                                          // 290\n   * @param  {Any} val                                                                                                 // 291\n   * @return {Boolean}                                                                                                 // 292\n   *                                                                                                                   // 293\n   * Returns `true` if the value is null, undefined, or an empty string                                                // 294\n   */                                                                                                                  // 295\n  isNullUndefinedOrEmptyString: function isNullUndefinedOrEmptyString(val) {                                           // 296\n    return (val === void 0 || val === null || (typeof val === \"string\" && val.length === 0));                          // 297\n  },                                                                                                                   // 298\n  /**                                                                                                                  // 299\n   * @method Utility.isValidDateString                                                                                 // 300\n   * @private                                                                                                          // 301\n   * @param  {String}  dateString                                                                                      // 302\n   * @return {Boolean}                                                                                                 // 303\n   *                                                                                                                   // 304\n   * Returns `true` if dateString is a \"valid date string\"                                                             // 305\n   */                                                                                                                  // 306\n  isValidDateString: function isValidDateString(dateString) {                                                          // 307\n    var m = moment(dateString, 'YYYY-MM-DD', true);                                                                    // 308\n    return m && m.isValid();                                                                                           // 309\n  },                                                                                                                   // 310\n  /**                                                                                                                  // 311\n   * @method Utility.isValidTimeString                                                                                 // 312\n   * @private                                                                                                          // 313\n   * @param  {String}  timeString                                                                                      // 314\n   * @return {Boolean}                                                                                                 // 315\n   *                                                                                                                   // 316\n   * Returns `true` if timeString is a \"valid time string\"                                                             // 317\n   */                                                                                                                  // 318\n  isValidTimeString: function isValidTimeString(timeString) {                                                          // 319\n    if (typeof timeString !== \"string\") {                                                                              // 320\n      return false;                                                                                                    // 321\n    }                                                                                                                  // 322\n                                                                                                                       // 323\n    //this reg ex actually allows a few invalid hours/minutes/seconds, but                                             // 324\n    //we can catch that when parsing                                                                                   // 325\n    var regEx = /^[0-2][0-9]:[0-5][0-9](:[0-5][0-9](\\.[0-9]{1,3})?)?$/;                                                // 326\n    return regEx.test(timeString);                                                                                     // 327\n  },                                                                                                                   // 328\n  /**                                                                                                                  // 329\n   * @method  Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString                                                // 330\n   * @private                                                                                                          // 331\n   * @param  {String} dateString                                                                                       // 332\n   * @return {Boolean}                                                                                                 // 333\n   *                                                                                                                   // 334\n   * Returns true if dateString is a \"valid normalized forced-UTC global date and time string\"                         // 335\n   */                                                                                                                  // 336\n  isValidNormalizedForcedUtcGlobalDateAndTimeString: function isValidNormalizedForcedUtcGlobalDateAndTimeString(dateString) {\n    if (typeof dateString !== \"string\") {                                                                              // 338\n      return false;                                                                                                    // 339\n    }                                                                                                                  // 340\n                                                                                                                       // 341\n    var datePart = dateString.substring(0, 10);                                                                        // 342\n    var tPart = dateString.substring(10, 11);                                                                          // 343\n    var timePart = dateString.substring(11, dateString.length - 1);                                                    // 344\n    var zPart = dateString.substring(dateString.length - 1);                                                           // 345\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart) && zPart === \"Z\";\n  },                                                                                                                   // 347\n  /**                                                                                                                  // 348\n   * @method  Utility.isValidNormalizedLocalDateAndTimeString                                                          // 349\n   * @private                                                                                                          // 350\n   * @param  {String} dtString                                                                                         // 351\n   * @return {Boolean}                                                                                                 // 352\n   *                                                                                                                   // 353\n   * Returns true if dtString is a \"valid normalized local date and time string\"                                       // 354\n   */                                                                                                                  // 355\n  isValidNormalizedLocalDateAndTimeString: function isValidNormalizedLocalDateAndTimeString(dtString) {                // 356\n    if (typeof dtString !== \"string\") {                                                                                // 357\n      return false;                                                                                                    // 358\n    }                                                                                                                  // 359\n                                                                                                                       // 360\n    var datePart = dtString.substring(0, 10);                                                                          // 361\n    var tPart = dtString.substring(10, 11);                                                                            // 362\n    var timePart = dtString.substring(11, dtString.length);                                                            // 363\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart);                // 364\n  },                                                                                                                   // 365\n  /**                                                                                                                  // 366\n   * @method Utility.getComponentContext                                                                               // 367\n   * @private                                                                                                          // 368\n   * @param  {Object} context A context (`this`) object                                                                // 369\n   * @param {String} name The name of the helper or component we're calling from.                                      // 370\n   * @return {Object} Normalized context object                                                                        // 371\n   *                                                                                                                   // 372\n   * Returns an object with `atts` and `defs` properties, normalized from whatever object is passed in.                // 373\n   * This helps deal with the fact that we have to pass the ancestor autoform's context to different                   // 374\n   * helpers and components in different ways, but in all cases we want to get access to it and throw                  // 375\n   * an error if we can't find an autoform context.                                                                    // 376\n   */                                                                                                                  // 377\n  getComponentContext: function autoFormGetComponentContext(context, name) {                                           // 378\n    var atts, defs, formComponentAttributes, fieldAttributes, fieldAttributesForComponentType, ss;                     // 379\n                                                                                                                       // 380\n    atts = _.clone(context || {});                                                                                     // 381\n    ss = AutoForm.getFormSchema();                                                                                     // 382\n    defs = Utility.getDefs(ss, atts.name); //defs will not be undefined                                                // 383\n                                                                                                                       // 384\n    // Look up the tree if we're in a helper, checking to see if any ancestor components                               // 385\n    // had a <componentType>-attribute specified.                                                                      // 386\n    formComponentAttributes = AutoForm.findAttributesWithPrefix(name + \"-\");                                           // 387\n                                                                                                                       // 388\n    // Get any field-specific attributes defined in the schema.                                                        // 389\n    // They can be in autoform.attrName or autoform.componentType.attrName, with                                       // 390\n    // the latter overriding the former.                                                                               // 391\n    fieldAttributes = _.clone(defs.autoform) || {};                                                                    // 392\n    fieldAttributesForComponentType = fieldAttributes[name] || {};                                                     // 393\n    fieldAttributes = _.omit(fieldAttributes, Utility.componentTypeList);                                              // 394\n    fieldAttributes = _.extend({}, fieldAttributes, fieldAttributesForComponentType);                                  // 395\n                                                                                                                       // 396\n    // \"autoform\" option in the schema provides default atts                                                           // 397\n    atts = _.extend({}, formComponentAttributes, fieldAttributes, atts);                                               // 398\n                                                                                                                       // 399\n    // eval any attribute that is provided as a function                                                               // 400\n    var evaluatedAtts = {};                                                                                            // 401\n    _.each(atts, function (v, k) {                                                                                     // 402\n      if (typeof v === 'function') {                                                                                   // 403\n        evaluatedAtts[k] = v.call({                                                                                    // 404\n          name: atts.name                                                                                              // 405\n        });                                                                                                            // 406\n      } else {                                                                                                         // 407\n        evaluatedAtts[k] = v;                                                                                          // 408\n      }                                                                                                                // 409\n    });                                                                                                                // 410\n                                                                                                                       // 411\n    return {                                                                                                           // 412\n      atts: evaluatedAtts,                                                                                             // 413\n      defs: defs                                                                                                       // 414\n    };                                                                                                                 // 415\n  },                                                                                                                   // 416\n  /**                                                                                                                  // 417\n   * @method Utility.stringToArray                                                                                     // 418\n   * @private                                                                                                          // 419\n   * @param {String|Array} s A variable that might be a string or an array.                                            // 420\n   * @param {String} errorMessage Error message to use if it's not a string or an array.                               // 421\n   * @return {Array} The array, building it from a comma-delimited string if necessary.                                // 422\n   */                                                                                                                  // 423\n  stringToArray: function stringToArray(s, errorMessage) {                                                             // 424\n    if (typeof s === \"string\") {                                                                                       // 425\n      return s.replace(/ /g, '').split(',');                                                                           // 426\n    } else if (!_.isArray(s)) {                                                                                        // 427\n      throw new Error(errorMessage);                                                                                   // 428\n    } else {                                                                                                           // 429\n      return s;                                                                                                        // 430\n    }                                                                                                                  // 431\n  },                                                                                                                   // 432\n  /**                                                                                                                  // 433\n   * @method Utility.addClass                                                                                          // 434\n   * @private                                                                                                          // 435\n   * @param {Object} atts An object that might have a \"class\" property                                                 // 436\n   * @param {String} klass The class string to add                                                                     // 437\n   * @return {Object} The object with klass added to the \"class\" property, creating the property if necessary          // 438\n   */                                                                                                                  // 439\n  addClass: function addClass(atts, klass) {                                                                           // 440\n    if (typeof atts[\"class\"] === \"string\") {                                                                           // 441\n      atts[\"class\"] += \" \" + klass;                                                                                    // 442\n    } else {                                                                                                           // 443\n      atts[\"class\"] = klass;                                                                                           // 444\n    }                                                                                                                  // 445\n    return atts;                                                                                                       // 446\n  },                                                                                                                   // 447\n  /**                                                                                                                  // 448\n   * @method Utility.getFormTypeDef                                                                                    // 449\n   * @private                                                                                                          // 450\n   * @param {String} formType The form type                                                                            // 451\n   * @return {Object} The definition. Throws an error if type hasn't been defined.                                     // 452\n   */                                                                                                                  // 453\n  getFormTypeDef: function getFormTypeDef(formType) {                                                                  // 454\n    var ftd = AutoForm._formTypeDefinitions[formType];                                                                 // 455\n    if (!ftd) {                                                                                                        // 456\n      throw new Error('AutoForm: Form type \"' + formType + '\" has not been defined');                                  // 457\n    }                                                                                                                  // 458\n    return ftd;                                                                                                        // 459\n  }                                                                                                                    // 460\n};                                                                                                                     // 461\n                                                                                                                       // 462\n// getPrototypeOf polyfill                                                                                             // 463\nif (typeof Object.getPrototypeOf !== \"function\") {                                                                     // 464\n  if (typeof \"\".__proto__ === \"object\") {                                                                              // 465\n    Object.getPrototypeOf = function(object) {                                                                         // 466\n      return object.__proto__;                                                                                         // 467\n    };                                                                                                                 // 468\n  } else {                                                                                                             // 469\n    Object.getPrototypeOf = function(object) {                                                                         // 470\n      // May break if the constructor has been tampered with                                                           // 471\n      return object.constructor.prototype;                                                                             // 472\n    };                                                                                                                 // 473\n  }                                                                                                                    // 474\n}                                                                                                                      // 475\n                                                                                                                       // 476\n/* Tests whether \"obj\" is an Object as opposed to                                                                      // 477\n * something that inherits from Object                                                                                 // 478\n *                                                                                                                     // 479\n * @param {any} obj                                                                                                    // 480\n * @returns {Boolean}                                                                                                  // 481\n */                                                                                                                    // 482\nvar isBasicObject = function(obj) {                                                                                    // 483\n  return _.isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;                                           // 484\n};                                                                                                                     // 485\n                                                                                                                       // 486\n/*                                                                                                                     // 487\n * Extend SS for now; TODO put this in SS package                                                                      // 488\n */                                                                                                                    // 489\nif (typeof SimpleSchema.prototype.getAllowedValuesForKey !== 'function') {                                             // 490\n  SimpleSchema.prototype.getAllowedValuesForKey = function (key) {                                                     // 491\n    var defs = this.getDefinition(key, ['type', 'allowedValues']);                                                     // 492\n                                                                                                                       // 493\n    // For array fields, `allowedValues` is on the array item definition                                               // 494\n    if (defs.type === Array) {                                                                                         // 495\n      defs = this.getDefinition(key+\".$\", ['allowedValues']);                                                          // 496\n    }                                                                                                                  // 497\n                                                                                                                       // 498\n    return defs.allowedValues;                                                                                         // 499\n  };                                                                                                                   // 500\n}                                                                                                                      // 501\n                                                                                                                       // 502\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 535\n}).call(this);                                                       // 536\n                                                                     // 537\n                                                                     // 538\n                                                                     // 539\n                                                                     // 540\n                                                                     // 541\n                                                                     // 542\n(function () {                                                       // 543\n                                                                     // 544\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/form-preserve.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @constructor                                                                                                        // 2\n * @private                                                                                                            // 3\n * @param {String} migrationName                                                                                       // 4\n *                                                                                                                     // 5\n * Internal helper object to preserve form inputs across Hot Code Push                                                 // 6\n * and across \"pages\" navigation if the option is enabled.                                                             // 7\n */                                                                                                                    // 8\nFormPreserve = function formPreserveConstructor(migrationName) {                                                       // 9\n  var self = this;                                                                                                     // 10\n  if (! _.isString(migrationName))                                                                                     // 11\n    throw Error(\"You must define an unique migration name of type String\");                                            // 12\n  self.registeredForms = {};                                                                                           // 13\n  self.retrievedDocuments = {};                                                                                        // 14\n  if (Package.reload) {                                                                                                // 15\n    var Reload = Package.reload.Reload;                                                                                // 16\n    self.retrievedDocuments = Reload._migrationData(migrationName) || '{}';                                            // 17\n                                                                                                                       // 18\n    // Currently migration does not seem to support proper storage                                                     // 19\n    // of Date type. It comes back as a string, so we need to store                                                    // 20\n    // EJSON instead.                                                                                                  // 21\n    if (typeof self.retrievedDocuments === 'string') {                                                                 // 22\n      self.retrievedDocuments = EJSON.parse(self.retrievedDocuments);                                                  // 23\n    }                                                                                                                  // 24\n                                                                                                                       // 25\n    Reload._onMigrate(migrationName, function () {                                                                     // 26\n      var doc = self._retrieveRegisteredDocuments();                                                                   // 27\n      return [true, EJSON.stringify(doc)];                                                                             // 28\n    });                                                                                                                // 29\n  }                                                                                                                    // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\nFormPreserve.prototype.getDocument = function (formId) {                                                               // 33\n  var self = this, doc;                                                                                                // 34\n  if (! _.has(self.retrievedDocuments, formId)) {                                                                      // 35\n    return false;                                                                                                      // 36\n  }                                                                                                                    // 37\n                                                                                                                       // 38\n  return self.retrievedDocuments[formId];                                                                              // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\nFormPreserve.prototype.clearDocument = function (formId) {                                                             // 42\n  delete this.retrievedDocuments[formId];                                                                              // 43\n};                                                                                                                     // 44\n                                                                                                                       // 45\nFormPreserve.prototype.registerForm = function (formId, retrieveFunc) {                                                // 46\n  this.registeredForms[formId] = retrieveFunc;                                                                         // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nFormPreserve.prototype.formIsRegistered = function (formId) {                                                          // 50\n  return !!this.registeredForms[formId];                                                                               // 51\n};                                                                                                                     // 52\n                                                                                                                       // 53\nFormPreserve.prototype.unregisterForm = function (formId) {                                                            // 54\n  delete this.registeredForms[formId];                                                                                 // 55\n  delete this.retrievedDocuments[formId];                                                                              // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\nFormPreserve.prototype.unregisterAllForms = function () {                                                              // 59\n  var self = this;                                                                                                     // 60\n  self.registeredForms = {};                                                                                           // 61\n  self.retrievedDocuments = {};                                                                                        // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\nFormPreserve.prototype._retrieveRegisteredDocuments = function () {                                                    // 65\n  var self = this;                                                                                                     // 66\n  res = {};                                                                                                            // 67\n  _.each(self.registeredForms, function (retrieveFunc, formId) {                                                       // 68\n    res[formId] = retrieveFunc();                                                                                      // 69\n  });                                                                                                                  // 70\n  return res;                                                                                                          // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 625\n}).call(this);                                                       // 626\n                                                                     // 627\n                                                                     // 628\n                                                                     // 629\n                                                                     // 630\n                                                                     // 631\n                                                                     // 632\n(function () {                                                       // 633\n                                                                     // 634\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-hooks.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Manages all hooks, supporting append/replace, get                                                                   // 1\n                                                                                                                       // 2\nHooks = {                                                                                                              // 3\n  form: {}                                                                                                             // 4\n};                                                                                                                     // 5\n                                                                                                                       // 6\n// The names of all supported hooks, excluding \"before\" and \"after\".                                                   // 7\nvar hookNames = ['formToDoc', 'formToModifier', 'docToForm', 'onSubmit', 'onSuccess', 'onError',                       // 8\n    'beginSubmit', 'endSubmit'];                                                                                       // 9\n                                                                                                                       // 10\nHooks.getDefault = function() {                                                                                        // 11\n  var hooks = {                                                                                                        // 12\n    before: {},                                                                                                        // 13\n    after: {}                                                                                                          // 14\n  };                                                                                                                   // 15\n  _.each(hookNames, function(hookName) {                                                                               // 16\n    hooks[hookName] = [];                                                                                              // 17\n  });                                                                                                                  // 18\n  return hooks;                                                                                                        // 19\n};                                                                                                                     // 20\n                                                                                                                       // 21\nHooks.global = Hooks.getDefault();                                                                                     // 22\n                                                                                                                       // 23\nHooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {                                            // 24\n  // Add before hooks                                                                                                  // 25\n  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {                                  // 26\n    if (typeof func !== \"function\") {                                                                                  // 27\n      throw new Error(\"AutoForm before hook must be a function, not \" + typeof func);                                  // 28\n    }                                                                                                                  // 29\n    hooksList.before[type] = (!replace && hooksList.before[type]) ? hooksList.before[type] : [];                       // 30\n    hooksList.before[type].push(func);                                                                                 // 31\n  });                                                                                                                  // 32\n                                                                                                                       // 33\n  // Add after hooks                                                                                                   // 34\n  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {                                     // 35\n    if (typeof func !== \"function\") {                                                                                  // 36\n      throw new Error(\"AutoForm after hook must be a function, not \" + typeof func);                                   // 37\n    }                                                                                                                  // 38\n    hooksList.after[type] = (!replace && hooksList.after[type]) ? hooksList.after[type] : [];                          // 39\n    hooksList.after[type].push(func);                                                                                  // 40\n  });                                                                                                                  // 41\n                                                                                                                       // 42\n  // Add all other hooks                                                                                               // 43\n  _.each(hookNames, function autoFormHooksEach(name) {                                                                 // 44\n    if (hooks[name]) {                                                                                                 // 45\n      if (typeof hooks[name] !== \"function\") {                                                                         // 46\n        throw new Error(\"AutoForm \" + name + \" hook must be a function, not \" + typeof hooks[name]);                   // 47\n      }                                                                                                                // 48\n                                                                                                                       // 49\n      if(replace) {                                                                                                    // 50\n          hooksList[name] = [];                                                                                        // 51\n      }                                                                                                                // 52\n                                                                                                                       // 53\n      hooksList[name].push(hooks[name]);                                                                               // 54\n    }                                                                                                                  // 55\n  });                                                                                                                  // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\nHooks.getHooks = function getHooks(formId, type, subtype) {                                                            // 59\n  var f, g;                                                                                                            // 60\n  if (subtype) {                                                                                                       // 61\n    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];                     // 62\n    g = Hooks.global[type] && Hooks.global[type][subtype] || [];                                                       // 63\n  } else {                                                                                                             // 64\n    f = Hooks.form[formId] && Hooks.form[formId][type] || [];                                                          // 65\n    g = Hooks.global[type] || [];                                                                                      // 66\n  }                                                                                                                    // 67\n  return f.concat(g);                                                                                                  // 68\n};                                                                                                                     // 69\n                                                                                                                       // 70\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 712\n}).call(this);                                                       // 713\n                                                                     // 714\n                                                                     // 715\n                                                                     // 716\n                                                                     // 717\n                                                                     // 718\n                                                                     // 719\n(function () {                                                       // 720\n                                                                     // 721\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-formdata.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global FormData:true */                                                                                             // 1\n                                                                                                                       // 2\n/*                                                                                                                     // 3\n * Tracks form data with reactivity. This is similar to                                                                // 4\n * ReactiveDict, but we need to store typed objects and                                                                // 5\n * keep their type upon retrieval.                                                                                     // 6\n */                                                                                                                    // 7\n                                                                                                                       // 8\nFormData = function () {                                                                                               // 9\n  var self = this;                                                                                                     // 10\n  self.forms = {};                                                                                                     // 11\n};                                                                                                                     // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initializes tracking for a given form, if not already done.                                                         // 15\n * @param {String} formId The form's `id` attribute                                                                    // 16\n */                                                                                                                    // 17\nFormData.prototype.initForm = function (formId) {                                                                      // 18\n  var self = this;                                                                                                     // 19\n                                                                                                                       // 20\n  if (self.forms[formId]) {                                                                                            // 21\n    return;                                                                                                            // 22\n  }                                                                                                                    // 23\n                                                                                                                       // 24\n  self.forms[formId] = {                                                                                               // 25\n    sourceDoc: null,                                                                                                   // 26\n    deps: {                                                                                                            // 27\n      sourceDoc: new Tracker.Dependency()                                                                              // 28\n    }                                                                                                                  // 29\n  };                                                                                                                   // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Initializes tracking for a given form, if not already done.                                                         // 34\n * @param {String} formId The form's `id` attribute                                                                    // 35\n */                                                                                                                    // 36\n                                                                                                                       // 37\n/**                                                                                                                    // 38\n * Gets or sets a source doc for the given form. Reactive.                                                             // 39\n * @param   {String}                formId    The form's `id` attribute                                                // 40\n * @param   {MongoObject|null}      sourceDoc The mDoc for the form or `null` if no doc.                               // 41\n * @returns {MongoObject|undefined} Returns the form's MongoObject if getting.                                         // 42\n */                                                                                                                    // 43\nFormData.prototype.sourceDoc = function (formId, sourceDoc) {                                                          // 44\n  var self = this;                                                                                                     // 45\n  self.initForm(formId);                                                                                               // 46\n                                                                                                                       // 47\n  if (sourceDoc || sourceDoc === null) {                                                                               // 48\n    //setter                                                                                                           // 49\n    self.forms[formId].sourceDoc = sourceDoc;                                                                          // 50\n    self.forms[formId].deps.sourceDoc.changed();                                                                       // 51\n  } else {                                                                                                             // 52\n    //getter                                                                                                           // 53\n    self.forms[formId].deps.sourceDoc.depend();                                                                        // 54\n    return self.forms[formId].sourceDoc;                                                                               // 55\n  }                                                                                                                    // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 787\n}).call(this);                                                       // 788\n                                                                     // 789\n                                                                     // 790\n                                                                     // 791\n                                                                     // 792\n                                                                     // 793\n                                                                     // 794\n(function () {                                                       // 795\n                                                                     // 796\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-arrays.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Track arrays; this allows us to add/remove fields or groups of fields for an array                                  // 1\n// but still easily respect minCount and maxCount, and properly add/remove the same                                    // 2\n// items from the database once the form is submitted.                                                                 // 3\n                                                                                                                       // 4\nArrayTracker = function afArrayTracker() {                                                                             // 5\n  var self = this;                                                                                                     // 6\n  self.info = {};                                                                                                      // 7\n};                                                                                                                     // 8\n                                                                                                                       // 9\nArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {               // 10\n  var defs = AutoForm.Utility.getDefs(ss, field);                                                                      // 11\n                                                                                                                       // 12\n  // minCount is set by the schema, but can be set higher on the field attribute                                       // 13\n  overrideMinCount = overrideMinCount || 0;                                                                            // 14\n  var minCount = defs.minCount || 0;                                                                                   // 15\n  minCount = Math.max(overrideMinCount, minCount);                                                                     // 16\n                                                                                                                       // 17\n  // maxCount is set by the schema, but can be set lower on the field attribute                                        // 18\n  overrideMaxCount = overrideMaxCount || Infinity;                                                                     // 19\n  var maxCount = defs.maxCount || Infinity;                                                                            // 20\n  maxCount = Math.min(overrideMaxCount, maxCount);                                                                     // 21\n                                                                                                                       // 22\n  return {minCount: minCount, maxCount: maxCount};                                                                     // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\nArrayTracker.prototype.initForm = function atInitForm(formId) {                                                        // 26\n\tvar self = this;                                                                                                      // 27\n                                                                                                                       // 28\n\tif (self.info[formId])                                                                                                // 29\n\t\treturn;                                                                                                              // 30\n                                                                                                                       // 31\n\tself.info[formId] = {};                                                                                               // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nArrayTracker.prototype.getForm = function atInitForm(formId) {                                                         // 35\n\tvar self = this;                                                                                                      // 36\n\tself.initForm(formId);                                                                                                // 37\n\treturn self.info[formId];                                                                                             // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\nArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {                                           // 41\n\tvar self = this;                                                                                                      // 42\n\tself.initForm(formId);                                                                                                // 43\n                                                                                                                       // 44\n\tif (!self.info[formId][field]) {                                                                                      // 45\n\t\tself.resetField(formId, field);                                                                                      // 46\n\t}                                                                                                                     // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {\n\tvar self = this;                                                                                                      // 51\n\tself.ensureField(formId, field);                                                                                      // 52\n                                                                                                                       // 53\n\tif (self.info[formId][field].array != null)                                                                           // 54\n\t\treturn;                                                                                                              // 55\n                                                                                                                       // 56\n\t// If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.           // 57\n\t// If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.                 // 58\n\tvar range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);                                            // 59\n\tvar arrayCount = Math.max(range.minCount, (docCount == null) ? 1 : docCount);                                         // 60\n                                                                                                                       // 61\n\t// If this is an array of objects, collect names of object props                                                      // 62\n\tvar childKeys = [];                                                                                                   // 63\n\tif (ss.schema(field + '.$').type === Object) {                                                                        // 64\n    childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                                // 65\n\t}                                                                                                                     // 66\n                                                                                                                       // 67\n\tvar loopArray = [];                                                                                                   // 68\n\tfor (var i = 0; i < arrayCount; i++) {                                                                                // 69\n\t\tvar loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                        // 70\n\t\tloopArray.push(loopCtx);                                                                                             // 71\n\t};                                                                                                                    // 72\n                                                                                                                       // 73\n\tself.info[formId][field].array = loopArray;                                                                           // 74\n\tvar count = loopArray.length;                                                                                         // 75\n\tself.info[formId][field].count = count;                                                                               // 76\n\tself.info[formId][field].visibleCount = count;                                                                        // 77\n\tself.info[formId][field].deps.changed();                                                                              // 78\n};                                                                                                                     // 79\n                                                                                                                       // 80\nArrayTracker.prototype.resetField = function atResetField(formId, field) {                                             // 81\n\tvar self = this;                                                                                                      // 82\n\tself.initForm(formId);                                                                                                // 83\n                                                                                                                       // 84\n\tif (!self.info[formId][field]) {                                                                                      // 85\n\t\tself.info[formId][field] = {                                                                                         // 86\n\t\t\tdeps: new Tracker.Dependency()                                                                                      // 87\n\t\t};                                                                                                                   // 88\n\t}                                                                                                                     // 89\n                                                                                                                       // 90\n\tself.info[formId][field].array = null;                                                                                // 91\n\tself.info[formId][field].count = 0;                                                                                   // 92\n\tself.info[formId][field].visibleCount = 0;                                                                            // 93\n\tself.info[formId][field].deps.changed();                                                                              // 94\n};                                                                                                                     // 95\n                                                                                                                       // 96\nArrayTracker.prototype.resetForm = function atResetForm(formId) {                                                      // 97\n\tvar self = this;                                                                                                      // 98\n\t_.each(self.info[formId], function (info, field) {                                                                    // 99\n\t\tself.resetField(formId, field);                                                                                      // 100\n\t});                                                                                                                   // 101\n};                                                                                                                     // 102\n                                                                                                                       // 103\nArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {                                                  // 104\n\tvar self = this;                                                                                                      // 105\n\tself.info[formId] = {};                                                                                               // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\nArrayTracker.prototype.tracksField = function atTracksField(formId, field) {                                           // 109\n\tvar self = this;                                                                                                      // 110\n\tself.ensureField(formId, field);                                                                                      // 111\n\tself.info[formId][field].deps.depend();                                                                               // 112\n\treturn !!self.info[formId][field].array;                                                                              // 113\n};                                                                                                                     // 114\n                                                                                                                       // 115\nArrayTracker.prototype.getField = function atGetField(formId, field) {                                                 // 116\n\tvar self = this;                                                                                                      // 117\n\tself.ensureField(formId, field);                                                                                      // 118\n\tself.info[formId][field].deps.depend();                                                                               // 119\n\treturn self.info[formId][field].array;                                                                                // 120\n};                                                                                                                     // 121\n                                                                                                                       // 122\nArrayTracker.prototype.getCount = function atGetCount(formId, field) {                                                 // 123\n\tvar self = this;                                                                                                      // 124\n\tself.ensureField(formId, field);                                                                                      // 125\n\tself.info[formId][field].deps.depend();                                                                               // 126\n\treturn self.info[formId][field].count;                                                                                // 127\n};                                                                                                                     // 128\n                                                                                                                       // 129\nArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {                                   // 130\n\tvar self = this;                                                                                                      // 131\n\tself.ensureField(formId, field);                                                                                      // 132\n\tself.info[formId][field].deps.depend();                                                                               // 133\n\treturn self.info[formId][field].visibleCount;                                                                         // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\nArrayTracker.prototype.isFirstFieldlVisible = function atIsFirstFieldlVisible(formId, field, currentIndex) {           // 137\n\tvar self = this;                                                                                                      // 138\n\tself.ensureField(formId, field);                                                                                      // 139\n\tself.info[formId][field].deps.depend();                                                                               // 140\n\tvar firstVisibleField = _.find(self.info[formId][field].array, function(currentField) {                               // 141\n\t\treturn !currentField.removed;                                                                                        // 142\n\t});                                                                                                                   // 143\n\treturn (firstVisibleField && firstVisibleField.index === currentIndex);                                               // 144\n};                                                                                                                     // 145\n                                                                                                                       // 146\nArrayTracker.prototype.isLastFieldlVisible = function atIsLastFieldlVisible(formId, field, currentIndex) {             // 147\n\tvar self = this;                                                                                                      // 148\n\tself.ensureField(formId, field);                                                                                      // 149\n\tself.info[formId][field].deps.depend();                                                                               // 150\n\tvar lastVisibleField = _.last(_.filter(self.info[formId][field].array, function(currentField) {                       // 151\n\t\treturn !currentField.removed;                                                                                        // 152\n\t}));                                                                                                                  // 153\n\treturn (lastVisibleField && lastVisibleField.index === currentIndex);                                                 // 154\n};                                                                                                                     // 155\n                                                                                                                       // 156\nArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;                                                                                                     // 158\n  self.ensureField(formId, field);                                                                                     // 159\n                                                                                                                       // 160\n  if (!self.info[formId][field].array) {                                                                               // 161\n  \treturn;                                                                                                             // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n  var currentCount = self.info[formId][field].visibleCount                                                             // 165\n  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;                               // 166\n                                                                                                                       // 167\n  if (currentCount < maxCount) {                                                                                       // 168\n\t  var i = self.info[formId][field].array.length;                                                                      // 169\n                                                                                                                       // 170\n\t  // If this is an array of objects, collect names of object props                                                    // 171\n\t  var childKeys = [];                                                                                                 // 172\n\t  if (ss.schema(field + '.$').type === Object) {                                                                      // 173\n      childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                              // 174\n\t  }                                                                                                                   // 175\n                                                                                                                       // 176\n\t  var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                       // 177\n                                                                                                                       // 178\n\t  self.info[formId][field].array.push(loopCtx);                                                                       // 179\n\t  self.info[formId][field].count++;                                                                                   // 180\n\t  self.info[formId][field].visibleCount++;                                                                            // 181\n\t  self.info[formId][field].deps.changed();                                                                            // 182\n  }                                                                                                                    // 183\n};                                                                                                                     // 184\n                                                                                                                       // 185\nArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;                                                                                                     // 187\n  self.ensureField(formId, field);                                                                                     // 188\n                                                                                                                       // 189\n  if (!self.info[formId][field].array) {                                                                               // 190\n  \treturn;                                                                                                             // 191\n  }                                                                                                                    // 192\n                                                                                                                       // 193\n  var currentCount = self.info[formId][field].visibleCount;                                                            // 194\n  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;                               // 195\n                                                                                                                       // 196\n  if (currentCount > minCount) {                                                                                       // 197\n    self.info[formId][field].array[index].removed = true;                                                              // 198\n    self.info[formId][field].count--;                                                                                  // 199\n    self.info[formId][field].visibleCount--;                                                                           // 200\n    self.info[formId][field].deps.changed();                                                                           // 201\n  }                                                                                                                    // 202\n}                                                                                                                      // 203\n                                                                                                                       // 204\n/*                                                                                                                     // 205\n * PRIVATE                                                                                                             // 206\n */                                                                                                                    // 207\nvar createLoopCtx = function(formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {                    // 208\n  var loopCtx = {                                                                                                      // 209\n  \tformId:         formId,                                                                                             // 210\n  \tarrayFieldName: field,                                                                                              // 211\n  \tname:           field + '.' + index,                                                                                // 212\n  \tindex:          index,                                                                                              // 213\n  \tminCount:       overrideMinCount,                                                                                   // 214\n  \tmaxCount:       overrideMaxCount                                                                                    // 215\n  };                                                                                                                   // 216\n                                                                                                                       // 217\n  // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName                // 218\n  if (childKeys.length) {                                                                                              // 219\n    loopCtx.current = {};                                                                                              // 220\n\t_.each(childKeys, function (k) {                                                                                      // 221\n\t  loopCtx.current[k] = field + '.' + index + '.' + k;                                                                 // 222\n    });                                                                                                                // 223\n  }                                                                                                                    // 224\n                                                                                                                       // 225\n  return loopCtx;                                                                                                      // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 1032\n}).call(this);                                                       // 1033\n                                                                     // 1034\n                                                                     // 1035\n                                                                     // 1036\n                                                                     // 1037\n                                                                     // 1038\n                                                                     // 1039\n(function () {                                                       // 1040\n                                                                     // 1041\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm:true, FormPreserve */                                                                               // 1\n                                                                                                                       // 2\nAutoForm = AutoForm || {};                                                                                             // 3\n                                                                                                                       // 4\n// formPreserve is used to keep current form data across hot code                                                      // 5\n// reloads for any forms that are currently rendered                                                                   // 6\nAutoForm.formPreserve = new FormPreserve(\"autoforms\");                                                                 // 7\n                                                                                                                       // 8\nAutoForm.reactiveFormData = new FormData();                                                                            // 9\n                                                                                                                       // 10\nAutoForm._inputTypeDefinitions = {}; //for storing input type definitions added by AutoForm.addInputType               // 11\nAutoForm._formTypeDefinitions = {}; //for storing submit type definitions added by AutoForm.addFormType                // 12\n                                                                                                                       // 13\narrayTracker = new ArrayTracker();                                                                                     // 14\n                                                                                                                       // 15\n// Used by AutoForm._forceResetFormValues; temporary hack                                                              // 16\nAutoForm._destroyForm = {};                                                                                            // 17\n                                                                                                                       // 18\n// reactive templates                                                                                                  // 19\nglobalDefaultTemplate = \"bootstrap3\";                                                                                  // 20\ndefaultTypeTemplates = {};                                                                                             // 21\ndeps = {                                                                                                               // 22\n  defaultTemplate: new Tracker.Dependency(),                                                                           // 23\n  defaultTypeTemplates: {}                                                                                             // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 1075\n}).call(this);                                                       // 1076\n                                                                     // 1077\n                                                                     // 1078\n                                                                     // 1079\n                                                                     // 1080\n                                                                     // 1081\n                                                                     // 1082\n(function () {                                                       // 1083\n                                                                     // 1084\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-helpers.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global arrayTracker, SimpleSchema, AutoForm */                                                                      // 1\n                                                                                                                       // 2\nfunction parseOptions(options) {                                                                                       // 3\n  var hash = (options || {}).hash || {};                                                                               // 4\n  // Find the form's schema                                                                                            // 5\n  var ss = AutoForm.getFormSchema();                                                                                   // 6\n  // Call getDefs for side effect of throwing errors when name is not in schema                                        // 7\n  if (hash.name) {                                                                                                     // 8\n    AutoForm.Utility.getDefs(ss, hash.name);                                                                           // 9\n  }                                                                                                                    // 10\n  return _.extend({}, hash, {ss: ss});                                                                                 // 11\n}                                                                                                                      // 12\n                                                                                                                       // 13\n/*                                                                                                                     // 14\n * Global template helpers (exported to app)                                                                           // 15\n */                                                                                                                    // 16\n                                                                                                                       // 17\n/*                                                                                                                     // 18\n * afFieldMessage                                                                                                      // 19\n */                                                                                                                    // 20\nTemplate.registerHelper('afFieldMessage', function autoFormFieldMessage(options) {                                     // 21\n  options = parseOptions(options, 'afFieldMessage');                                                                   // 22\n  var formId = AutoForm.getFormId();                                                                                   // 23\n                                                                                                                       // 24\n  return options.ss.namedContext(formId).keyErrorMessage(options.name);                                                // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/*                                                                                                                     // 28\n * afFieldIsInvalid                                                                                                    // 29\n */                                                                                                                    // 30\nTemplate.registerHelper('afFieldIsInvalid', function autoFormFieldIsInvalid(options) {                                 // 31\n  options = parseOptions(options, 'afFieldIsInvalid');                                                                 // 32\n  var formId = AutoForm.getFormId();                                                                                   // 33\n                                                                                                                       // 34\n  return options.ss.namedContext(formId).keyIsInvalid(options.name);                                                   // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\n/*                                                                                                                     // 38\n * afArrayFieldHasMoreThanMinimum                                                                                      // 39\n */                                                                                                                    // 40\nTemplate.registerHelper('afArrayFieldHasMoreThanMinimum', function autoFormArrayFieldHasMoreThanMinimum(options) {     // 41\n  options = parseOptions(options, 'afArrayFieldHasMoreThanMinimum');                                                   // 42\n  var form = AutoForm.getCurrentDataPlusExtrasForForm();                                                               // 43\n                                                                                                                       // 44\n  // Registered form types can disable adding/removing array items                                                     // 45\n  if (form.formTypeDef.hideArrayItemButtons) {                                                                         // 46\n    return false;                                                                                                      // 47\n  }                                                                                                                    // 48\n                                                                                                                       // 49\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 50\n  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);                                              // 51\n  return (visibleCount > range.minCount);                                                                              // 52\n});                                                                                                                    // 53\n                                                                                                                       // 54\n/*                                                                                                                     // 55\n * afArrayFieldHasLessThanMaximum                                                                                      // 56\n */                                                                                                                    // 57\nTemplate.registerHelper('afArrayFieldHasLessThanMaximum', function autoFormArrayFieldHasLessThanMaximum(options) {     // 58\n  options = parseOptions(options, 'afArrayFieldHasLessThanMaximum');                                                   // 59\n  var form = AutoForm.getCurrentDataPlusExtrasForForm();                                                               // 60\n                                                                                                                       // 61\n  // Registered form types can disable adding/removing array items                                                     // 62\n  if (form.formTypeDef.hideArrayItemButtons) {                                                                         // 63\n    return false;                                                                                                      // 64\n  }                                                                                                                    // 65\n                                                                                                                       // 66\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 67\n  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);                                              // 68\n  return (visibleCount < range.maxCount);                                                                              // 69\n});                                                                                                                    // 70\n                                                                                                                       // 71\n/*                                                                                                                     // 72\n * afFieldValueIs                                                                                                      // 73\n */                                                                                                                    // 74\nTemplate.registerHelper('afFieldValueIs', function autoFormFieldValueIs(options) {                                     // 75\n  options = parseOptions(options, 'afFieldValueIs');                                                                   // 76\n                                                                                                                       // 77\n  var currentValue = AutoForm.getFieldValue(options.name, options.formId);                                             // 78\n  return currentValue === options.value;                                                                               // 79\n});                                                                                                                    // 80\n                                                                                                                       // 81\n/*                                                                                                                     // 82\n * afArrayFieldIsFirstVisible                                                                                          // 83\n */                                                                                                                    // 84\nTemplate.registerHelper('afArrayFieldIsFirstVisible', function autoFormArrayFieldIsFirstVisible() {                    // 85\n  var context = this;                                                                                                  // 86\n  return arrayTracker.isFirstFieldlVisible(context.formId, context.arrayFieldName, context.index);                     // 87\n});                                                                                                                    // 88\n                                                                                                                       // 89\n/*                                                                                                                     // 90\n * afArrayFieldIsLastVisible                                                                                           // 91\n */                                                                                                                    // 92\nTemplate.registerHelper('afArrayFieldIsLastVisible', function autoFormArrayFieldIsLastVisible() {                      // 93\n  var context = this;                                                                                                  // 94\n  return arrayTracker.isLastFieldlVisible(context.formId, context.arrayFieldName, context.index);                      // 95\n});                                                                                                                    // 96\n                                                                                                                       // 97\n/*                                                                                                                     // 98\n * afFieldValueContains                                                                                                // 99\n */                                                                                                                    // 100\nTemplate.registerHelper('afFieldValueContains', function autoFormFieldValueContains(options) {                         // 101\n  options = parseOptions(options, 'afFieldValueContains');                                                             // 102\n                                                                                                                       // 103\n  var currentValue = AutoForm.getFieldValue(options.name, options.formId);                                             // 104\n  return _.isArray(currentValue) && (_.contains(currentValue, options.value) || options.values && _.intersection(currentValue, options.values.split(\",\")));\n});                                                                                                                    // 106\n                                                                                                                       // 107\n/*                                                                                                                     // 108\n * afFieldLabelText                                                                                                    // 109\n */                                                                                                                    // 110\nTemplate.registerHelper('afFieldLabelText', function autoFormFieldLabelText(options) {                                 // 111\n  options = parseOptions(options, 'afFieldLabelText');                                                                 // 112\n  return AutoForm.getLabelForField(options.name);                                                                      // 113\n});                                                                                                                    // 114\n                                                                                                                       // 115\n/*                                                                                                                     // 116\n * afFieldNames                                                                                                        // 117\n */                                                                                                                    // 118\nTemplate.registerHelper(\"afFieldNames\", function autoFormFieldNames(options) {                                         // 119\n  options = parseOptions(options, 'afFieldNames');                                                                     // 120\n  var ss = options.ss, name = options.name, namePlusDot, genericName, genericNamePlusDot;                              // 121\n  var form = AutoForm.getCurrentDataForForm();                                                                         // 122\n                                                                                                                       // 123\n  if (name) {                                                                                                          // 124\n    namePlusDot = name + \".\";                                                                                          // 125\n    genericName = SimpleSchema._makeGeneric(name);                                                                     // 126\n    genericNamePlusDot = genericName + \".\";                                                                            // 127\n  }                                                                                                                    // 128\n                                                                                                                       // 129\n  // Get the list of fields we want included                                                                           // 130\n  var fieldList = options.fields, usedAncestorFieldList = false;                                                       // 131\n  if (fieldList) {                                                                                                     // 132\n    fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n  }                                                                                                                    // 134\n                                                                                                                       // 135\n  var ancestorFieldList = AutoForm.findAttribute(\"fields\");                                                            // 136\n  if (ancestorFieldList) {                                                                                             // 137\n    ancestorFieldList = AutoForm.Utility.stringToArray(ancestorFieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n                                                                                                                       // 139\n    // Use the ancestor field list as backup, unless there is                                                          // 140\n    // a name and that name is listed in the ancestor field list                                                       // 141\n    if (!fieldList) {                                                                                                  // 142\n      fieldList = ancestorFieldList;                                                                                   // 143\n      usedAncestorFieldList = true;                                                                                    // 144\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  if (fieldList) {                                                                                                     // 148\n                                                                                                                       // 149\n    // Take only those fields in the fieldList that are descendants of the `name` field                                // 150\n    if (name) {                                                                                                        // 151\n      // Replace generic name with real name. We assume that field names                                               // 152\n      // with $ apply to all array items. Field list will now have the                                                 // 153\n      // correct array field item number instead of $.                                                                 // 154\n      if (genericName !== name) {                                                                                      // 155\n        fieldList = _.map(fieldList, function (field) {                                                                // 156\n          if (field.indexOf(genericNamePlusDot) === 0) {                                                               // 157\n            return namePlusDot + field.slice(genericNamePlusDot.length);                                               // 158\n          }                                                                                                            // 159\n          return field;                                                                                                // 160\n        });                                                                                                            // 161\n      }                                                                                                                // 162\n                                                                                                                       // 163\n      fieldList = _.filter(fieldList, function filterFieldsByName(field) {                                             // 164\n        return field.indexOf(namePlusDot) === 0;                                                                       // 165\n      });                                                                                                              // 166\n    }                                                                                                                  // 167\n                                                                                                                       // 168\n    // If top level fields, be sure to remove any with $ in them                                                       // 169\n    else {                                                                                                             // 170\n      fieldList = _.filter(fieldList, function filterArrayFields(field) {                                              // 171\n        return (field.slice(-2) !== '.$' && field.indexOf('.$.') === -1);                                              // 172\n      });                                                                                                              // 173\n    }                                                                                                                  // 174\n                                                                                                                       // 175\n    // First we filter out any fields that are subobjects where the                                                    // 176\n    // parent object is also in the fieldList and is NOT the current                                                   // 177\n    // field name.                                                                                                     // 178\n    // This means that if you do `fields=\"address,address.city\"` we                                                    // 179\n    // will use an afObjectField for address and include only the                                                      // 180\n    // \"city\" field within that, but if you instead do `fields=\"address.city\"`                                         // 181\n    // we will use a single field for the city, with no afObjectField                                                  // 182\n    // template around it.                                                                                             // 183\n    fieldList = _.reject(fieldList, function (field) {                                                                 // 184\n      var lastDotPos = field.lastIndexOf(\".\");                                                                         // 185\n      if (lastDotPos === -1) {                                                                                         // 186\n        return false; //keep                                                                                           // 187\n      }                                                                                                                // 188\n                                                                                                                       // 189\n      var parentField = field.slice(0, lastDotPos);                                                                    // 190\n      if (parentField.slice(-2) === \".$\") {                                                                            // 191\n        parentField = parentField.slice(0, -2);                                                                        // 192\n      }                                                                                                                // 193\n      return _.contains(fieldList, parentField) && parentField !== name && parentField !== genericName;                // 194\n    });                                                                                                                // 195\n  }                                                                                                                    // 196\n                                                                                                                       // 197\n  if (!fieldList || (fieldList.length === 0 && usedAncestorFieldList)) {                                               // 198\n    // Get list of field names that are descendants of this field's name.                                              // 199\n    // If name/genericName is undefined, this will return top-level                                                    // 200\n    // schema keys.                                                                                                    // 201\n    fieldList = ss.objectKeys(genericName);                                                                            // 202\n                                                                                                                       // 203\n    if (name) {                                                                                                        // 204\n      // Tack child field name on to end of parent field name. This                                                    // 205\n      // ensures that we keep the desired array index for array items.                                                 // 206\n      fieldList = _.map(fieldList, function (field) {                                                                  // 207\n        return name + \".\" + field;                                                                                     // 208\n      });                                                                                                              // 209\n    }                                                                                                                  // 210\n  }                                                                                                                    // 211\n                                                                                                                       // 212\n  // If user wants to omit some fields, remove those from the array                                                    // 213\n  var omitFields = options.omitFields || AutoForm.findAttribute(\"omitFields\");                                         // 214\n  if (omitFields) {                                                                                                    // 215\n    omitFields = AutoForm.Utility.stringToArray(omitFields, 'AutoForm: omitFields attribute must be an array or a string containing a comma-delimited list of fields');\n    fieldList = _.difference(fieldList, omitFields);                                                                   // 217\n    // If omitFields contains generic field names (with $) we omit those too                                           // 218\n    fieldList = _.reject(fieldList, function (f) {                                                                     // 219\n      return _.contains(omitFields, SimpleSchema._makeGeneric(f));                                                     // 220\n    });                                                                                                                // 221\n  }                                                                                                                    // 222\n                                                                                                                       // 223\n  // Filter out fields we never want                                                                                   // 224\n  fieldList = _.filter(fieldList, function shouldIncludeField(field) {                                                 // 225\n    var fieldDefs = ss.schema(field);                                                                                  // 226\n                                                                                                                       // 227\n    // Don't include fields that are not in the schema                                                                 // 228\n    if (!fieldDefs) {                                                                                                  // 229\n      return false;                                                                                                    // 230\n    }                                                                                                                  // 231\n                                                                                                                       // 232\n    // Don't include fields with autoform.omit=true                                                                    // 233\n    if (fieldDefs.autoform && fieldDefs.autoform.omit === true) {                                                      // 234\n      return false;                                                                                                    // 235\n    }                                                                                                                  // 236\n                                                                                                                       // 237\n    // Don't include fields with denyInsert=true when it's an insert form                                              // 238\n    if (fieldDefs.denyInsert && form.type === \"insert\") {                                                              // 239\n      return false;                                                                                                    // 240\n    }                                                                                                                  // 241\n                                                                                                                       // 242\n    // Don't include fields with denyUpdate=true when it's an update form                                              // 243\n    if (fieldDefs.denyUpdate && form.type === \"update\") {                                                              // 244\n      return false;                                                                                                    // 245\n    }                                                                                                                  // 246\n                                                                                                                       // 247\n    return true;                                                                                                       // 248\n  });                                                                                                                  // 249\n                                                                                                                       // 250\n  // Ensure fields are not added more than once                                                                        // 251\n  fieldList = _.unique(fieldList);                                                                                     // 252\n                                                                                                                       // 253\n  // We return it as an array of objects because that                                                                  // 254\n  // works better with Blaze contexts                                                                                  // 255\n  fieldList = _.map(fieldList, function (name) {                                                                       // 256\n    return {name: name};                                                                                               // 257\n  });                                                                                                                  // 258\n                                                                                                                       // 259\n  return fieldList;                                                                                                    // 260\n});                                                                                                                    // 261\n                                                                                                                       // 262\n                                                                                                                       // 263\n/*                                                                                                                     // 264\n * afSelectOptionAtts                                                                                                  // 265\n */                                                                                                                    // 266\nTemplate.registerHelper('afSelectOptionAtts', function afSelectOptionAtts() {                                          // 267\n  var atts = _.pick(this, 'value');                                                                                    // 268\n  if (this.selected) {                                                                                                 // 269\n    atts.selected = \"\";                                                                                                // 270\n  }                                                                                                                    // 271\n  if (this.htmlAtts) {                                                                                                 // 272\n    _.extend(atts, this.htmlAtts);                                                                                     // 273\n  }                                                                                                                    // 274\n  return atts;                                                                                                         // 275\n});                                                                                                                    // 276\n                                                                                                                       // 277\n// Expects to be called with this.name available                                                                       // 278\nTemplate.registerHelper('afOptionsFromSchema', function afOptionsFromSchema() {                                        // 279\n  return AutoForm._getOptionsForField(this.name);                                                                      // 280\n});                                                                                                                    // 281\n                                                                                                                       // 282\n/*                                                                                                                     // 283\n * afTemplateName                                                                                                      // 284\n * Deprecated. Don't use this. Eventually remove it.                                                                   // 285\n */                                                                                                                    // 286\nTemplate.registerHelper('afTemplateName', function afTemplateNameHelper(templateType, templateName) {                  // 287\n  var self = this;                                                                                                     // 288\n  console.log('The afTemplateName template helper is deprecated. Use AutoForm.getTemplateName method in your own helper.');\n  return AutoForm.getTemplateName(templateType, templateName, self.atts && self.atts.name);                            // 290\n});                                                                                                                    // 291\n                                                                                                                       // 292\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 1384\n}).call(this);                                                       // 1385\n                                                                     // 1386\n                                                                     // 1387\n                                                                     // 1388\n                                                                     // 1389\n                                                                     // 1390\n                                                                     // 1391\n(function () {                                                       // 1392\n                                                                     // 1393\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-validation.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, validateField:true */                                                                              // 1\n                                                                                                                       // 2\nfunction _validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid) {                                                // 3\n  var docToValidate;                                                                                                   // 4\n                                                                                                                       // 5\n  // Due to throttling, this can be called after the autoForm template is destroyed.                                   // 6\n  // If that happens, we exit without error.                                                                           // 7\n  var template = AutoForm.templateInstanceForForm(formId);                                                             // 8\n                                                                                                                       // 9\n  // If form is not currently rendered, return true                                                                    // 10\n  if (!template ||                                                                                                     // 11\n      !template.view ||                                                                                                // 12\n      !template.view._domrange ||                                                                                      // 13\n      template.view.isDestroyed) {                                                                                     // 14\n    return true;                                                                                                       // 15\n  }                                                                                                                    // 16\n                                                                                                                       // 17\n  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 18\n  var ss = AutoForm.getFormSchema(formId, form);                                                                       // 19\n                                                                                                                       // 20\n  if (!ss) {                                                                                                           // 21\n    return true;                                                                                                       // 22\n  }                                                                                                                    // 23\n                                                                                                                       // 24\n  // Skip validation if onlyIfAlreadyInvalid is true and the form is                                                   // 25\n  // currently valid.                                                                                                  // 26\n  if (onlyIfAlreadyInvalid && ss.namedContext(formId).isValid()) {                                                     // 27\n    return true; //skip validation                                                                                     // 28\n  }                                                                                                                    // 29\n                                                                                                                       // 30\n  // Create a document based on all the values of all the inputs on the form                                           // 31\n  // Get the form type definition                                                                                      // 32\n  var ftd = Utility.getFormTypeDef(form.type);                                                                         // 33\n                                                                                                                       // 34\n  // Clean and validate doc                                                                                            // 35\n  docToValidate = AutoForm.getFormValues(formId, template, ss, !!ftd.usesModifier);                                    // 36\n                                                                                                                       // 37\n  // If form is not currently rendered, return true                                                                    // 38\n  if (!docToValidate) {                                                                                                // 39\n    return true;                                                                                                       // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  // Skip validation if skipEmpty is true and the field we're validating                                               // 43\n  // has no value.                                                                                                     // 44\n  if (skipEmpty && !AutoForm.Utility.objAffectsKey(docToValidate, key)) {                                              // 45\n    return true; //skip validation                                                                                     // 46\n  }                                                                                                                    // 47\n                                                                                                                       // 48\n  return AutoForm._validateFormDoc(docToValidate, !!ftd.usesModifier, formId, ss, form, key);                          // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\n// Throttle field validation to occur at most every 300ms,                                                             // 52\n// with leading and trailing calls.                                                                                    // 53\nvalidateField = _.throttle(_validateField, 300);                                                                       // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 1456\n}).call(this);                                                       // 1457\n                                                                     // 1458\n                                                                     // 1459\n                                                                     // 1460\n                                                                     // 1461\n                                                                     // 1462\n                                                                     // 1463\n(function () {                                                       // 1464\n                                                                     // 1465\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-inputs.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, getInputValue:true, getAllFieldsInForm:true, getInputData:true, updateTrackedFieldValue:true, updateAllTrackedFieldValues:true, getFlatDocOfFieldValues:true */\n                                                                                                                       // 2\ngetFlatDocOfFieldValues = function getFlatDocOfFieldValues(fields, ss) {                                               // 3\n  var doc = {};                                                                                                        // 4\n  fields.each(function () {                                                                                            // 5\n    var fieldName, val = AutoForm.getInputValue(this, ss);                                                             // 6\n    if (val !== void 0) {                                                                                              // 7\n      // Get the field/schema key name                                                                                 // 8\n      fieldName = $(this).attr(\"data-schema-key\");                                                                     // 9\n      doc[fieldName] = val;                                                                                            // 10\n    }                                                                                                                  // 11\n  });                                                                                                                  // 12\n  return doc;                                                                                                          // 13\n};                                                                                                                     // 14\n                                                                                                                       // 15\n/*                                                                                                                     // 16\n * package scope functions                                                                                             // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\n/*                                                                                                                     // 20\n * Gets the value that should be shown/selected in the input. Returns                                                  // 21\n * a string, a boolean, or an array of strings. The value used,                                                        // 22\n * in order of preference, is one of:                                                                                  // 23\n * * The `value` attribute provided                                                                                    // 24\n * * The value that is set in the `doc` provided on the containing autoForm                                            // 25\n * * The `defaultValue` from the schema                                                                                // 26\n */                                                                                                                    // 27\ngetInputValue = function getInputValue(atts, value, mDoc, schemaDefaultValue, fieldDefaultValue, typeDefs) {           // 28\n                                                                                                                       // 29\n  if (typeof value === \"undefined\") {                                                                                  // 30\n    // Get the value for this key in the current document                                                              // 31\n    if (mDoc) {                                                                                                        // 32\n      var valueInfo = mDoc.getInfoForKey(atts.name);                                                                   // 33\n      if (valueInfo) {                                                                                                 // 34\n        value = valueInfo.value;                                                                                       // 35\n      } else {                                                                                                         // 36\n        value = fieldDefaultValue;                                                                                     // 37\n      }                                                                                                                // 38\n    }                                                                                                                  // 39\n                                                                                                                       // 40\n    // Only if there is no current document, use the schema defaultValue                                               // 41\n    else {                                                                                                             // 42\n      // Use the field default value if provided                                                                       // 43\n      if (typeof fieldDefaultValue !== 'undefined') {                                                                  // 44\n        value = fieldDefaultValue;                                                                                     // 45\n      }                                                                                                                // 46\n      // Or use the defaultValue in the schema                                                                         // 47\n      else {                                                                                                           // 48\n        value = schemaDefaultValue;                                                                                    // 49\n      }                                                                                                                // 50\n    }                                                                                                                  // 51\n  }                                                                                                                    // 52\n                                                                                                                       // 53\n  // Change null or undefined to an empty string                                                                       // 54\n  value = (value === null || value === void 0) ? '' : value;                                                           // 55\n                                                                                                                       // 56\n  // If the component expects the value to be an array, and it's not, make it one                                      // 57\n  if (typeDefs.valueIsArray && !_.isArray(value)) {                                                                    // 58\n    if (typeof value === \"string\") {                                                                                   // 59\n      value = value.split(',');                                                                                        // 60\n    } else {                                                                                                           // 61\n      value = [value];                                                                                                 // 62\n    }                                                                                                                  // 63\n  }                                                                                                                    // 64\n                                                                                                                       // 65\n  // At this point we have a value or an array of values.                                                              // 66\n  // Run through the components valueIn function if we have one.                                                       // 67\n  // It should then be in whatever format the component expects.                                                       // 68\n  if (typeof typeDefs.valueIn === \"function\") {                                                                        // 69\n    value = typeDefs.valueIn(value, atts);                                                                             // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  return value;                                                                                                        // 73\n};                                                                                                                     // 74\n                                                                                                                       // 75\n/*                                                                                                                     // 76\n * Builds the data context that the input component will have.                                                         // 77\n */                                                                                                                    // 78\ngetInputData = function getInputData(defs, hash, value, label, formType) {                                             // 79\n                                                                                                                       // 80\n  /*                                                                                                                   // 81\n   * Get HTML attributes                                                                                               // 82\n   */                                                                                                                  // 83\n                                                                                                                       // 84\n  // We don't want to alter the original hash, so we clone it and                                                      // 85\n  // remove some stuff that should not be HTML attributes.                                                             // 86\n  var inputAtts = _.omit(hash,                                                                                         // 87\n          \"type\",                                                                                                      // 88\n          \"value\",                                                                                                     // 89\n          \"noselect\",                                                                                                  // 90\n          \"options\",                                                                                                   // 91\n          \"template\",                                                                                                  // 92\n          \"defaultValue\");                                                                                             // 93\n                                                                                                                       // 94\n  // Add required if required                                                                                          // 95\n  if (typeof inputAtts.required === \"undefined\" && !defs.optional) {                                                   // 96\n    inputAtts.required = \"\";                                                                                           // 97\n  }                                                                                                                    // 98\n                                                                                                                       // 99\n   // Add data-schema-key to every type of element                                                                     // 100\n  inputAtts['data-schema-key'] = inputAtts.name;                                                                       // 101\n                                                                                                                       // 102\n  // Set placeholder to label from schema if requested.                                                                // 103\n  // We check hash.placeholder instead of inputAtts.placeholder because                                                // 104\n  // we're setting inputAtts.placeholder, so it wouldn't be the same on                                                // 105\n  // subsequent reactive runs of this function.                                                                        // 106\n  if (hash.placeholder === \"schemaLabel\") {                                                                            // 107\n    inputAtts.placeholder = label;                                                                                     // 108\n  }                                                                                                                    // 109\n                                                                                                                       // 110\n  // To enable reactively toggling boolean attributes                                                                  // 111\n  // in a simple way, we add the attributes to the HTML                                                                // 112\n  // only if their value is `true`. That is, unlike in                                                                 // 113\n  // HTML, their mere presence does not matter.                                                                        // 114\n  _.each([\"disabled\", \"readonly\", \"checked\", \"required\", \"autofocus\"], function (booleanProp) {                        // 115\n    if (!_.has(hash, booleanProp)) {                                                                                   // 116\n      return;                                                                                                          // 117\n    }                                                                                                                  // 118\n                                                                                                                       // 119\n    // For historical reasons, we treat the string \"true\" and an empty string as `true`, too.                          // 120\n    // But an empty string value results in the cleanest rendered output for boolean props,                            // 121\n    // so we standardize as that.                                                                                      // 122\n    if (hash[booleanProp] === true || hash[booleanProp] === \"true\" || hash[booleanProp] === \"\") {                      // 123\n      inputAtts[booleanProp] = \"\";                                                                                     // 124\n    } else {                                                                                                           // 125\n      // If the value is anything else, we don't render it                                                             // 126\n      delete inputAtts[booleanProp];                                                                                   // 127\n    }                                                                                                                  // 128\n  });                                                                                                                  // 129\n                                                                                                                       // 130\n  /*                                                                                                                   // 131\n   * Set up the context. This is the object that becomes `this` in the                                                 // 132\n   * input type template.                                                                                              // 133\n   */                                                                                                                  // 134\n                                                                                                                       // 135\n  var inputTypeContext = {                                                                                             // 136\n    name: inputAtts.name,                                                                                              // 137\n    schemaType: defs.type,                                                                                             // 138\n    min: (typeof defs.min === \"function\") ? defs.min() : defs.min,                                                     // 139\n    max: (typeof defs.max === \"function\") ? defs.max() : defs.max,                                                     // 140\n    decimal: defs.decimal,                                                                                             // 141\n    value: value,                                                                                                      // 142\n    atts: inputAtts,                                                                                                   // 143\n    selectOptions: AutoForm.Utility.getSelectOptions(defs, hash)                                                       // 144\n  };                                                                                                                   // 145\n                                                                                                                       // 146\n  // Before returning the context, we allow the registered form type to                                                // 147\n  // adjust it if necessary.                                                                                           // 148\n  var ftd = Utility.getFormTypeDef(formType);                                                                          // 149\n  if (typeof ftd.adjustInputContext === 'function') {                                                                  // 150\n    inputTypeContext = ftd.adjustInputContext(inputTypeContext);                                                       // 151\n  }                                                                                                                    // 152\n                                                                                                                       // 153\n  return inputTypeContext;                                                                                             // 154\n};                                                                                                                     // 155\n                                                                                                                       // 156\nfunction markChanged(template, fieldName) {                                                                            // 157\n  // We always want to be sure to wait for DOM updates to                                                              // 158\n  // finish before we indicate that values have changed.                                                               // 159\n  // Using a value of 0 here did not work, but 100 seems to                                                            // 160\n  // work in testing. We'll need to keep an eye on this.                                                               // 161\n  // Not an ideal solution.                                                                                            // 162\n  setTimeout(function () {                                                                                             // 163\n    // Template or view may have disappeared while                                                                     // 164\n    // we waited to run this                                                                                           // 165\n    if (template &&                                                                                                    // 166\n        template.view &&                                                                                               // 167\n        template.view._domrange &&                                                                                     // 168\n        !template.view.isDestroyed) {                                                                                  // 169\n                                                                                                                       // 170\n      template.formValues[fieldName].changed();                                                                        // 171\n      template.formValues[fieldName].requestInProgress = false;                                                        // 172\n                                                                                                                       // 173\n    }                                                                                                                  // 174\n  }, 100);                                                                                                             // 175\n}                                                                                                                      // 176\n                                                                                                                       // 177\nupdateTrackedFieldValue = function updateTrackedFieldValue(template, fieldName) {                                      // 178\n  if (!template) {                                                                                                     // 179\n    return;                                                                                                            // 180\n  }                                                                                                                    // 181\n                                                                                                                       // 182\n  template.formValues = template.formValues || {};                                                                     // 183\n  if (!template.formValues[fieldName]) {                                                                               // 184\n    template.formValues[fieldName] = new Tracker.Dependency();                                                         // 185\n  }                                                                                                                    // 186\n  // In case we call updateTrackedFieldValue from multiple places at once,                                             // 187\n  // call .changed() only once                                                                                         // 188\n  if (template.formValues[fieldName].requestInProgress) {                                                              // 189\n    return;                                                                                                            // 190\n  }                                                                                                                    // 191\n  template.formValues[fieldName].requestInProgress = true;                                                             // 192\n                                                                                                                       // 193\n  markChanged(template, fieldName);                                                                                    // 194\n                                                                                                                       // 195\n  // To properly handle array fields, we'll mark the ancestors as changed, too                                         // 196\n  // XXX Might be a more elegant way to handle this                                                                    // 197\n  var dotPos = fieldName.lastIndexOf('.');                                                                             // 198\n  while (dotPos !== -1) {                                                                                              // 199\n    fieldName = fieldName.slice(0, dotPos);                                                                            // 200\n                                                                                                                       // 201\n    if (!template.formValues[fieldName]) {                                                                             // 202\n      template.formValues[fieldName] = new Tracker.Dependency();                                                       // 203\n    }                                                                                                                  // 204\n                                                                                                                       // 205\n    markChanged(template, fieldName);                                                                                  // 206\n                                                                                                                       // 207\n    dotPos = fieldName.lastIndexOf('.');                                                                               // 208\n  }                                                                                                                    // 209\n};                                                                                                                     // 210\n                                                                                                                       // 211\nupdateAllTrackedFieldValues = function updateAllTrackedFieldValues(template) {                                         // 212\n  if (template && template.formValues) {                                                                               // 213\n    _.each(template.formValues, function (o, fieldName) {                                                              // 214\n      updateTrackedFieldValue(template, fieldName);                                                                    // 215\n    });                                                                                                                // 216\n  }                                                                                                                    // 217\n};                                                                                                                     // 218\n                                                                                                                       // 219\ngetAllFieldsInForm = function getAllFieldsInForm(template) {                                                           // 220\n  // Get all elements with `data-schema-key` attribute, unless disabled                                                // 221\n  return template.$(\"[data-schema-key]\").not(\"[disabled]\");                                                            // 222\n  // Exclude fields in sub-forms, since they will belong to a different AutoForm and schema.                           // 223\n  // TODO need some selector/filter that actually works correctly for excluding subforms                               // 224\n  // return template.$('[data-schema-key]').not(\"[disabled]\").not(template.$('form form [data-schema-key]'));          // 225\n};                                                                                                                     // 226\n                                                                                                                       // 227\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 1700\n}).call(this);                                                       // 1701\n                                                                     // 1702\n                                                                     // 1703\n                                                                     // 1704\n                                                                     // 1705\n                                                                     // 1706\n                                                                     // 1707\n(function () {                                                       // 1708\n                                                                     // 1709\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-api.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm:true, SimpleSchema, Utility, Hooks, deps, globalDefaultTemplate:true, defaultTypeTemplates:true, validateField, arrayTracker, ReactiveVar, getAllFieldsInForm, setDefaults:true, getFlatDocOfFieldValues, MongoObject */\n                                                                                                                       // 2\n// This file defines the public, exported API                                                                          // 3\n                                                                                                                       // 4\nAutoForm = AutoForm || {}; //exported                                                                                  // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * @property AutoForm.Utility                                                                                          // 8\n * @public                                                                                                             // 9\n */                                                                                                                    // 10\nAutoForm.Utility = Utility;                                                                                            // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * @method AutoForm.addHooks                                                                                           // 14\n * @public                                                                                                             // 15\n * @param {String[]|String|null} formIds Form `id` or array of form IDs to which these hooks apply. Specify `null` to add hooks that will run for every form.\n * @param {Object} hooks Hooks to add, where supported names are \"before\", \"after\", \"formToDoc\", \"docToForm\", \"onSubmit\", \"onSuccess\", and \"onError\".\n * @returns {undefined}                                                                                                // 18\n *                                                                                                                     // 19\n * Defines hooks to be used by one or more forms. Extends hooks lists if called multiple times for the same            // 20\n * form.                                                                                                               // 21\n */                                                                                                                    // 22\nAutoForm.addHooks = function autoFormAddHooks(formIds, hooks, replace) {                                               // 23\n  if (typeof formIds === \"string\") {                                                                                   // 24\n    formIds = [formIds];                                                                                               // 25\n  }                                                                                                                    // 26\n                                                                                                                       // 27\n  // If formIds is null, add global hooks                                                                              // 28\n  if (!formIds) {                                                                                                      // 29\n    Hooks.addHooksToList(Hooks.global, hooks, replace);                                                                // 30\n  } else {                                                                                                             // 31\n    _.each(formIds, function (formId) {                                                                                // 32\n                                                                                                                       // 33\n      // Init the hooks object if not done yet                                                                         // 34\n      Hooks.form[formId] = Hooks.form[formId] || Hooks.getDefault();                                                   // 35\n                                                                                                                       // 36\n      Hooks.addHooksToList(Hooks.form[formId], hooks, replace);                                                        // 37\n    });                                                                                                                // 38\n  }                                                                                                                    // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * @method AutoForm.hooks                                                                                              // 43\n * @public                                                                                                             // 44\n * @param {Object} hooks                                                                                               // 45\n * @returns {undefined}                                                                                                // 46\n *                                                                                                                     // 47\n * Defines hooks by form id. Extends hooks lists if called multiple times for the same                                 // 48\n * form.                                                                                                               // 49\n */                                                                                                                    // 50\nAutoForm.hooks = function autoFormHooks(hooks, replace) {                                                              // 51\n  _.each(hooks, function(hooksObj, formId) {                                                                           // 52\n    AutoForm.addHooks(formId, hooksObj, replace);                                                                      // 53\n  });                                                                                                                  // 54\n};                                                                                                                     // 55\n                                                                                                                       // 56\n/**                                                                                                                    // 57\n * @property AutoForm._hooks                                                                                           // 58\n * @public                                                                                                             // 59\n *                                                                                                                     // 60\n * Hooks list to aid automated testing                                                                                 // 61\n */                                                                                                                    // 62\nAutoForm._hooks = Hooks.form;                                                                                          // 63\n                                                                                                                       // 64\n/**                                                                                                                    // 65\n * @property AutoForm._globalHooks                                                                                     // 66\n * @public                                                                                                             // 67\n *                                                                                                                     // 68\n * Global hooks list to aid automated testing                                                                          // 69\n */                                                                                                                    // 70\nAutoForm._globalHooks = Hooks.global;                                                                                  // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * @method AutoForm._forceResetFormValues                                                                              // 74\n * @public                                                                                                             // 75\n * @param {String} formId                                                                                              // 76\n * @returns {undefined}                                                                                                // 77\n *                                                                                                                     // 78\n * Forces an AutoForm's values to properly update.                                                                     // 79\n * See https://github.com/meteor/meteor/issues/2431                                                                    // 80\n */                                                                                                                    // 81\nAutoForm._forceResetFormValues = function autoFormForceResetFormValues(formId) {                                       // 82\n  AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);                             // 83\n                                                                                                                       // 84\n  AutoForm._destroyForm[formId].set(true);                                                                             // 85\n  setTimeout(function () {                                                                                             // 86\n    AutoForm._destroyForm[formId].set(false);                                                                          // 87\n  }, 0);                                                                                                               // 88\n};                                                                                                                     // 89\n                                                                                                                       // 90\n/**                                                                                                                    // 91\n * @method AutoForm.resetForm                                                                                          // 92\n * @public                                                                                                             // 93\n * @param {String} formId                                                                                              // 94\n * @param {TemplateInstance} [template] Looked up if not provided. Pass in for efficiency.                             // 95\n * @returns {undefined}                                                                                                // 96\n *                                                                                                                     // 97\n * Resets an autoform, including resetting validation errors. The same as clicking the reset button for an autoform.   // 98\n */                                                                                                                    // 99\nAutoForm.resetForm = function autoFormResetForm(formId, template) {                                                    // 100\n  template = template || AutoForm.templateInstanceForForm(formId);                                                     // 101\n                                                                                                                       // 102\n  if (template && template.view._domrange && !template.view.isDestroyed) {                                             // 103\n    template.$(\"form\")[0].reset();                                                                                     // 104\n  }                                                                                                                    // 105\n};                                                                                                                     // 106\n                                                                                                                       // 107\n/**                                                                                                                    // 108\n * @method AutoForm.setDefaultTemplate                                                                                 // 109\n * @public                                                                                                             // 110\n * @param {String} template                                                                                            // 111\n */                                                                                                                    // 112\nAutoForm.setDefaultTemplate = function autoFormSetDefaultTemplate(template) {                                          // 113\n  globalDefaultTemplate = template;                                                                                    // 114\n  deps.defaultTemplate.changed();                                                                                      // 115\n};                                                                                                                     // 116\n                                                                                                                       // 117\n/**                                                                                                                    // 118\n * @method AutoForm.getDefaultTemplate                                                                                 // 119\n * @public                                                                                                             // 120\n *                                                                                                                     // 121\n * Reactive.                                                                                                           // 122\n */                                                                                                                    // 123\nAutoForm.getDefaultTemplate = function autoFormGetDefaultTemplate() {                                                  // 124\n  deps.defaultTemplate.depend();                                                                                       // 125\n  return globalDefaultTemplate;                                                                                        // 126\n};                                                                                                                     // 127\n                                                                                                                       // 128\n/**                                                                                                                    // 129\n * @method AutoForm.setDefaultTemplateForType                                                                          // 130\n * @public                                                                                                             // 131\n * @param {String} type                                                                                                // 132\n * @param {String} template                                                                                            // 133\n */                                                                                                                    // 134\nAutoForm.setDefaultTemplateForType = function autoFormSetDefaultTemplateForType(type, template) {                      // 135\n  if (!deps.defaultTypeTemplates[type]) {                                                                              // 136\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 137\n  }                                                                                                                    // 138\n  if (template !== null && !Template[type + \"_\" + template]) {                                                         // 139\n    throw new Error(\"setDefaultTemplateForType can't set default template to \\\"\" + template + \"\\\" for type \\\"\" + type + \"\\\" because there is no defined template with the name \\\"\" + type + \"_\" + template + \"\\\"\");\n  }                                                                                                                    // 141\n  defaultTypeTemplates[type] = template;                                                                               // 142\n  deps.defaultTypeTemplates[type].changed();                                                                           // 143\n};                                                                                                                     // 144\n                                                                                                                       // 145\n/**                                                                                                                    // 146\n * @method AutoForm.getDefaultTemplateForType                                                                          // 147\n * @public                                                                                                             // 148\n * @param {String} type                                                                                                // 149\n * @return {String} Template name                                                                                      // 150\n *                                                                                                                     // 151\n * Reactive.                                                                                                           // 152\n */                                                                                                                    // 153\nAutoForm.getDefaultTemplateForType = function autoFormGetDefaultTemplateForType(type) {                                // 154\n  if (!deps.defaultTypeTemplates[type]) {                                                                              // 155\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 156\n  }                                                                                                                    // 157\n  deps.defaultTypeTemplates[type].depend();                                                                            // 158\n  return defaultTypeTemplates[type];                                                                                   // 159\n};                                                                                                                     // 160\n                                                                                                                       // 161\n/**                                                                                                                    // 162\n * @method AutoForm.getTemplateName                                                                                    // 163\n * @public                                                                                                             // 164\n * @param {String} templateType                                                                                        // 165\n * @param {String} templateName                                                                                        // 166\n * @param {String} [fieldName]                                                                                         // 167\n * @param {Boolean} [skipExistsCheck] Pass `true` to return a template name even if that template hasn't been defined. // 168\n * @return {String} Template name                                                                                      // 169\n *                                                                                                                     // 170\n * Returns the full template name. In the simplest scenario, this is templateType_templateName                         // 171\n * as passed in. However, if templateName is not provided, it is looked up in the following                            // 172\n * manner:                                                                                                             // 173\n *                                                                                                                     // 174\n * 1. autoform.<componentType>.template from the schema (field+type override for all forms)                            // 175\n * 2. autoform.template from the schema (field override for all forms)                                                 // 176\n * 3. template-<componentType> attribute on an ancestor component within the same form (form+type for all fields)      // 177\n * 4. template attribute on an ancestor component within the same form (form specificity for all types and fields)     // 178\n * 5. Default template for component type, as set by AutoForm.setDefaultTemplateForType                                // 179\n * 6. Default template, as set by AutoForm.setDefaultTemplate.                                                         // 180\n * 7. Built-in default template, currently bootstrap-3.                                                                // 181\n */                                                                                                                    // 182\nAutoForm.getTemplateName = function autoFormGetTemplateName(templateType, templateName, fieldName, skipExistsCheck) {  // 183\n  var schemaAutoFormDefs, templateFromAncestor, defaultTemplate;                                                       // 184\n                                                                                                                       // 185\n  function templateExists(t) {                                                                                         // 186\n    return !!(skipExistsCheck || Template[t]);                                                                         // 187\n  }                                                                                                                    // 188\n                                                                                                                       // 189\n  // Default case: use the `template` attribute provided                                                               // 190\n  if (templateName && templateExists(templateType + '_' + templateName)) {                                             // 191\n    return templateType + '_' + templateName;                                                                          // 192\n  }                                                                                                                    // 193\n                                                                                                                       // 194\n  // If the attributes provided a templateName but that template didn't exist, show a warning                          // 195\n  if (templateName && AutoForm._debug) {                                                                               // 196\n    console.warn(templateType + ': \"' + templateName + '\" is not a valid template name. Falling back to a different template.');\n  }                                                                                                                    // 198\n                                                                                                                       // 199\n  // Get `autoform` object from the schema, if present.                                                                // 200\n  // Skip for quickForm because it renders a form and not a field.                                                     // 201\n  if (templateType !== 'quickForm' && fieldName) {                                                                     // 202\n    schemaAutoFormDefs = AutoForm.getSchemaForField(fieldName).autoform;                                               // 203\n  }                                                                                                                    // 204\n                                                                                                                       // 205\n  // Fallback #1: autoform.<componentType>.template from the schema                                                    // 206\n  if (schemaAutoFormDefs && schemaAutoFormDefs[templateType] && schemaAutoFormDefs[templateType].template && templateExists(templateType + '_' + schemaAutoFormDefs[templateType].template)) {\n    return templateType + '_' + schemaAutoFormDefs[templateType].template;                                             // 208\n  }                                                                                                                    // 209\n                                                                                                                       // 210\n  // Fallback #2: autoform.template from the schema                                                                    // 211\n  if (schemaAutoFormDefs && schemaAutoFormDefs.template && templateExists(templateType + '_' + schemaAutoFormDefs.template)) {\n    return templateType + '_' + schemaAutoFormDefs.template;                                                           // 213\n  }                                                                                                                    // 214\n                                                                                                                       // 215\n  // Fallback #3: template-<componentType> attribute on an ancestor component within the same form                     // 216\n  templateFromAncestor = AutoForm.findAttribute(\"template-\" + templateType);                                           // 217\n  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {                             // 218\n    return templateType + '_' + templateFromAncestor;                                                                  // 219\n  }                                                                                                                    // 220\n                                                                                                                       // 221\n  // Fallback #4: template attribute on an ancestor component within the same form                                     // 222\n  templateFromAncestor = AutoForm.findAttribute(\"template\");                                                           // 223\n  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {                             // 224\n    return templateType + '_' + templateFromAncestor;                                                                  // 225\n  }                                                                                                                    // 226\n                                                                                                                       // 227\n  // Fallback #5: Default template for component type, as set by AutoForm.setDefaultTemplateForType                    // 228\n  defaultTemplate = AutoForm.getDefaultTemplateForType(templateType);                                                  // 229\n  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {                                       // 230\n    return templateType + '_' + defaultTemplate;                                                                       // 231\n  }                                                                                                                    // 232\n                                                                                                                       // 233\n  // Fallback #6: Default template, as set by AutoForm.setDefaultTemplate                                              // 234\n  defaultTemplate = AutoForm.getDefaultTemplate();                                                                     // 235\n  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {                                       // 236\n    return templateType + '_' + defaultTemplate;                                                                       // 237\n  }                                                                                                                    // 238\n                                                                                                                       // 239\n  // Found nothing. Return undefined                                                                                   // 240\n  return;                                                                                                              // 241\n};                                                                                                                     // 242\n                                                                                                                       // 243\n/**                                                                                                                    // 244\n * @method AutoForm.getFormValues                                                                                      // 245\n * @public                                                                                                             // 246\n * @param {String} formId The `id` attribute of the `autoForm` you want current values for.                            // 247\n * @param {Template} [template] The template instance, if already known, as a performance optimization.                // 248\n * @param {SimpleSchema} [ss] The SimpleSchema instance, if already known, as a performance optimization.              // 249\n * @param {Boolean} [getModifier] Set to `true` to return a modifier object or `false` to return a normal object. For backwards compatibility, and object containing both is returned if this is undefined.\n * @return {Object|null}                                                                                               // 251\n *                                                                                                                     // 252\n * Returns an object representing the current values of all schema-based fields in the form.                           // 253\n * The returned object is either a normal object or a MongoDB modifier, based on the `getModifier` argument. Return value may be `null` if the form is not currently rendered on screen.\n */                                                                                                                    // 255\nAutoForm.getFormValues = function autoFormGetFormValues(formId, template, ss, getModifier) {                           // 256\n  var insertDoc, updateDoc, transforms;                                                                                // 257\n                                                                                                                       // 258\n  template = template || AutoForm.templateInstanceForForm(formId);                                                     // 259\n  if (!template ||                                                                                                     // 260\n      !template.view ||                                                                                                // 261\n      !template.view._domrange ||                                                                                      // 262\n      template.view.isDestroyed) {                                                                                     // 263\n    return null;                                                                                                       // 264\n  }                                                                                                                    // 265\n                                                                                                                       // 266\n  // Get a reference to the SimpleSchema instance that should be used for                                              // 267\n  // determining what types we want back for each field.                                                               // 268\n  ss = ss || AutoForm.getFormSchema(formId);                                                                           // 269\n                                                                                                                       // 270\n  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 271\n                                                                                                                       // 272\n  // By default, we do not keep empty strings                                                                          // 273\n  var keepEmptyStrings = false;                                                                                        // 274\n  if (form.removeEmptyStrings === false) {                                                                             // 275\n    keepEmptyStrings = true;                                                                                           // 276\n  }                                                                                                                    // 277\n  // By default, we do filter                                                                                          // 278\n  var filter = true;                                                                                                   // 279\n  if (form.filter === false) {                                                                                         // 280\n    filter = false;                                                                                                    // 281\n  }                                                                                                                    // 282\n  // By default, we do autoConvert                                                                                     // 283\n  var autoConvert = true;                                                                                              // 284\n  if (form.autoConvert === false) {                                                                                    // 285\n    autoConvert = false;                                                                                               // 286\n  }                                                                                                                    // 287\n  // By default, we do trimStrings                                                                                     // 288\n  var trimStrings = true;                                                                                              // 289\n  if (form.trimStrings === false) {                                                                                    // 290\n    trimStrings = false;                                                                                               // 291\n  }                                                                                                                    // 292\n  // By default, we do keepArrays                                                                                      // 293\n  // We need keepArrays: false when we need update fields                                                              // 294\n  // like \"foo.2.bar\" to update the proper index. But in                                                               // 295\n  // most cases, we need to keep arrays together due to the mongo                                                      // 296\n  // bug that creates objects rather than arrays if the array                                                          // 297\n  // does not already exist in the db.                                                                                 // 298\n  var keepArrays = true;                                                                                               // 299\n  if (form.setArrayItems === true) {                                                                                   // 300\n    keepArrays = false;                                                                                                // 301\n  }                                                                                                                    // 302\n                                                                                                                       // 303\n  var hookCtx = {                                                                                                      // 304\n    template: template,                                                                                                // 305\n    formId: formId,                                                                                                    // 306\n    schema: ss                                                                                                         // 307\n  };                                                                                                                   // 308\n                                                                                                                       // 309\n  // Build a flat document from field values                                                                           // 310\n  var doc = getFlatDocOfFieldValues(getAllFieldsInForm(template), ss);                                                 // 311\n                                                                                                                       // 312\n  // Expand the flat document                                                                                          // 313\n  doc = AutoForm.Utility.expandObj(doc);                                                                               // 314\n                                                                                                                       // 315\n  // When all fields that comprise a sub-object are empty, we should unset                                             // 316\n  // the whole subobject and not complain about required fields in it. For example,                                    // 317\n  // if `profile.address` has several properties but they are all null or undefined,                                   // 318\n  // we will set `profile.address=null`. This ensures that we don't get incorrect validation                           // 319\n  // errors about required fields that are children of optional objects.                                               // 320\n  AutoForm.Utility.bubbleEmpty(doc, keepEmptyStrings);                                                                 // 321\n                                                                                                                       // 322\n  // Create and clean insert doc.                                                                                      // 323\n  if (getModifier !== true) {                                                                                          // 324\n    // Delete any properties that are null, undefined, or empty strings,                                               // 325\n    // unless the form has requested to keep empty string.                                                             // 326\n    // Do not add autoValues at this stage.                                                                            // 327\n    insertDoc = AutoForm.Utility.cleanNulls(doc, false, keepEmptyStrings);                                             // 328\n                                                                                                                       // 329\n    // As array items are removed, gaps can appear in the numbering,                                                   // 330\n    // which results in arrays that have undefined items. Here we                                                      // 331\n    // remove any array items that are undefined.                                                                      // 332\n    //                                                                                                                 // 333\n    // We do this to the insertDoc, but we don't want to do it earlier to the                                          // 334\n    // doc, because that would cause the update modifier to have $sets for                                             // 335\n    // the wrong array indexes.                                                                                        // 336\n    AutoForm.Utility.compactArrays(insertDoc);                                                                         // 337\n                                                                                                                       // 338\n    ss.clean(insertDoc, {                                                                                              // 339\n      isModifier: false,                                                                                               // 340\n      getAutoValues: false,                                                                                            // 341\n      filter: filter,                                                                                                  // 342\n      autoConvert: autoConvert,                                                                                        // 343\n      trimStrings: trimStrings                                                                                         // 344\n    });                                                                                                                // 345\n                                                                                                                       // 346\n    // Pass expanded doc through formToDoc hooks                                                                       // 347\n    transforms = Hooks.getHooks(formId, 'formToDoc');                                                                  // 348\n    _.each(transforms, function formValuesTransform(transform) {                                                       // 349\n      insertDoc = transform.call(hookCtx, insertDoc, ss);                                                              // 350\n    });                                                                                                                // 351\n  }                                                                                                                    // 352\n                                                                                                                       // 353\n  // Create and clean update modifier.                                                                                 // 354\n  if (getModifier !== false) {                                                                                         // 355\n    // Converts to modifier object with $set and $unset.                                                               // 356\n    // Do not add autoValues at this stage.                                                                            // 357\n    updateDoc = AutoForm.Utility.docToModifier(doc, {                                                                  // 358\n      keepEmptyStrings: keepEmptyStrings,                                                                              // 359\n      keepArrays: keepArrays                                                                                           // 360\n    });                                                                                                                // 361\n                                                                                                                       // 362\n    ss.clean(updateDoc, {                                                                                              // 363\n      isModifier: true,                                                                                                // 364\n      getAutoValues: false,                                                                                            // 365\n      filter: filter,                                                                                                  // 366\n      autoConvert: autoConvert,                                                                                        // 367\n      trimStrings: trimStrings                                                                                         // 368\n    });                                                                                                                // 369\n                                                                                                                       // 370\n    // Pass modifier through formToModifier hooks                                                                      // 371\n    transforms = Hooks.getHooks(formId, 'formToModifier');                                                             // 372\n    _.each(transforms, function formValuesTransform(transform) {                                                       // 373\n      updateDoc = transform.call(hookCtx, updateDoc);                                                                  // 374\n    });                                                                                                                // 375\n  }                                                                                                                    // 376\n                                                                                                                       // 377\n  if (getModifier === true) {                                                                                          // 378\n    return updateDoc;                                                                                                  // 379\n  } else if (getModifier === false) {                                                                                  // 380\n    return insertDoc;                                                                                                  // 381\n  } else {                                                                                                             // 382\n    // We return insertDoc and updateDoc when getModifier                                                              // 383\n    // is undefined for backwards compatibility                                                                        // 384\n    return {                                                                                                           // 385\n      insertDoc: insertDoc,                                                                                            // 386\n      updateDoc: updateDoc                                                                                             // 387\n    };                                                                                                                 // 388\n  }                                                                                                                    // 389\n};                                                                                                                     // 390\n                                                                                                                       // 391\n/**                                                                                                                    // 392\n * @method AutoForm.getFieldValue                                                                                      // 393\n * @public                                                                                                             // 394\n * @param {String} fieldName The name of the field for which you want the current value.                               // 395\n * @param {String} [formId] The `id` attribute of the `autoForm` you want current values for. Default is the closest form from the current context.\n * @return {Any|undefined}                                                                                             // 397\n *                                                                                                                     // 398\n * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 399\n * This is a reactive method that will rerun whenever the current value of the requested field changes. Return value will be undefined if the field is not currently rendered.\n */                                                                                                                    // 401\nAutoForm.getFieldValue = function autoFormGetFieldValue(fieldName, formId) {                                           // 402\n  // find AutoForm template                                                                                            // 403\n  var template = Tracker.nonreactive(function () {                                                                     // 404\n    return AutoForm.templateInstanceForForm(formId);                                                                   // 405\n  });                                                                                                                  // 406\n                                                                                                                       // 407\n  if (!template) {                                                                                                     // 408\n    if (formId) {                                                                                                      // 409\n      AutoForm.rerunWhenFormRenderedOrDestroyed(formId);                                                               // 410\n    }                                                                                                                  // 411\n    return;                                                                                                            // 412\n  }                                                                                                                    // 413\n                                                                                                                       // 414\n  // reactive dependency                                                                                               // 415\n  template.formValues = template.formValues || {};                                                                     // 416\n  if (!template.formValues[fieldName]) {                                                                               // 417\n    template.formValues[fieldName] = new Tracker.Dependency();                                                         // 418\n  }                                                                                                                    // 419\n  template.formValues[fieldName].depend();                                                                             // 420\n                                                                                                                       // 421\n  if (!template.view ||                                                                                                // 422\n      !template.view._domrange ||                                                                                      // 423\n      template.view.isDestroyed) {                                                                                     // 424\n    return;                                                                                                            // 425\n  }                                                                                                                    // 426\n                                                                                                                       // 427\n  var doc = AutoForm.getFormValues(formId, template, null, false);                                                     // 428\n  if (!doc) {                                                                                                          // 429\n    return;                                                                                                            // 430\n  }                                                                                                                    // 431\n                                                                                                                       // 432\n  var mDoc = new MongoObject(doc);                                                                                     // 433\n  var value = mDoc.getValueForKey(fieldName);                                                                          // 434\n                                                                                                                       // 435\n  return value;                                                                                                        // 436\n};                                                                                                                     // 437\n                                                                                                                       // 438\n/**                                                                                                                    // 439\n * @method AutoForm.getInputTypeTemplateNameForElement                                                                 // 440\n * @public                                                                                                             // 441\n * @param {DOMElement} element The input DOM element, generated by an autoform input control                           // 442\n * @return {String}                                                                                                    // 443\n *                                                                                                                     // 444\n * Returns the name of the template used to render the element.                                                        // 445\n */                                                                                                                    // 446\nAutoForm.getInputTypeTemplateNameForElement = function autoFormGetInputTypeTemplateNameForElement(element) {           // 447\n  // get the enclosing view                                                                                            // 448\n  var view = Blaze.getView(element);                                                                                   // 449\n  // if the enclosing view is not a template, perhaps because                                                          // 450\n  // the template contains a block helper like if, with, each,                                                         // 451\n  // then look up the view chain until we arrive at a template                                                         // 452\n  while (view && view.name.slice(0, 9) !== \"Template.\") {                                                              // 453\n    view = view.originalParentView || view.parentView;                                                                 // 454\n  }                                                                                                                    // 455\n                                                                                                                       // 456\n  if (!view) return;                                                                                                   // 457\n                                                                                                                       // 458\n  // View names have \"Template.\" at the beginning so we slice that off.                                                // 459\n  return view.name.slice(9);                                                                                           // 460\n};                                                                                                                     // 461\n                                                                                                                       // 462\n/**                                                                                                                    // 463\n * @method AutoForm.getInputValue                                                                                      // 464\n * @public                                                                                                             // 465\n * @param {DOMElement} element The input DOM element, generated by an autoform input control, which must have a `data-schema-key` attribute set to the correct schema key name.\n * @param {SimpleSchema} [ss] Provide the SimpleSchema instance if you already have it.                                // 467\n * @return {Any}                                                                                                       // 468\n *                                                                                                                     // 469\n * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 470\n * Unlike `AutoForm.getFieldValue`, this function is not reactive.                                                     // 471\n */                                                                                                                    // 472\nAutoForm.getInputValue = function autoFormGetInputValue(element, ss) {                                                 // 473\n  var field, fieldName, fieldType, arrayItemFieldType, val, typeDef, inputTypeTemplate, dataContext, autoConvert;      // 474\n                                                                                                                       // 475\n  Tracker.nonreactive(function() {                                                                                     // 476\n    //don't rerun when data context of element changes, can cause infinite loops                                       // 477\n                                                                                                                       // 478\n    dataContext = Blaze.getData(element);                                                                              // 479\n    if (dataContext && dataContext.atts) {                                                                             // 480\n      autoConvert = dataContext.atts.autoConvert;                                                                      // 481\n    }                                                                                                                  // 482\n  });                                                                                                                  // 483\n                                                                                                                       // 484\n  // Get jQuery field reference                                                                                        // 485\n  field = $(element);                                                                                                  // 486\n                                                                                                                       // 487\n  // Get the field/schema key name                                                                                     // 488\n  fieldName = field.attr(\"data-schema-key\");                                                                           // 489\n                                                                                                                       // 490\n  // If we have a schema, we can autoconvert to the correct data type                                                  // 491\n  if (ss) {                                                                                                            // 492\n    fieldType = ss.schema(fieldName).type;                                                                             // 493\n  }                                                                                                                    // 494\n                                                                                                                       // 495\n  // Get the name of the input type template used to render the input element                                          // 496\n  inputTypeTemplate = AutoForm.getInputTypeTemplateNameForElement(element);                                            // 497\n                                                                                                                       // 498\n  // Slice off the potential theme template, after the last underscore.                                                // 499\n  var lastUnderscore = inputTypeTemplate.lastIndexOf('_');                                                             // 500\n  if (lastUnderscore !== -1) {                                                                                         // 501\n    inputTypeTemplate = inputTypeTemplate.slice(0, lastUnderscore);                                                    // 502\n  }                                                                                                                    // 503\n                                                                                                                       // 504\n  // Figure out what registered input type was used to render this element                                             // 505\n  typeDef = _.where(AutoForm._inputTypeDefinitions, {template: inputTypeTemplate})[0];                                 // 506\n                                                                                                                       // 507\n  // If field has a \"data-null-value\" attribute, value should always be null                                           // 508\n  if (field.attr(\"data-null-value\") !== void 0) {                                                                      // 509\n    val = null;                                                                                                        // 510\n  }                                                                                                                    // 511\n  // Otherwise get the field's value using the input type's `valueOut` function if provided                            // 512\n  else if (typeDef && typeDef.valueOut) {                                                                              // 513\n    val = typeDef.valueOut.call(field);                                                                                // 514\n  }                                                                                                                    // 515\n  // Otherwise get the field's value in a default way                                                                  // 516\n  else {                                                                                                               // 517\n    val = field.val();                                                                                                 // 518\n  }                                                                                                                    // 519\n                                                                                                                       // 520\n  // run through input's type converter if provided                                                                    // 521\n  if (val !== void 0 && autoConvert !== false && typeDef && typeDef.valueConverters && fieldType) {                    // 522\n    var converterFunc;                                                                                                 // 523\n    if (fieldType === String) {                                                                                        // 524\n      converterFunc = typeDef.valueConverters.string;                                                                  // 525\n    } else if (fieldType === Number) {                                                                                 // 526\n      converterFunc = typeDef.valueConverters.number;                                                                  // 527\n    } else if (fieldType === Boolean) {                                                                                // 528\n      converterFunc = typeDef.valueConverters.boolean;                                                                 // 529\n    } else if (fieldType === Date) {                                                                                   // 530\n      converterFunc = typeDef.valueConverters.date;                                                                    // 531\n    } else if (fieldType === Array) {                                                                                  // 532\n      arrayItemFieldType = ss.schema(fieldName + \".$\").type;                                                           // 533\n      if (arrayItemFieldType === String) {                                                                             // 534\n        converterFunc = typeDef.valueConverters.stringArray;                                                           // 535\n      } else if (arrayItemFieldType === Number) {                                                                      // 536\n        converterFunc = typeDef.valueConverters.numberArray;                                                           // 537\n      } else if (arrayItemFieldType === Boolean) {                                                                     // 538\n        converterFunc = typeDef.valueConverters.booleanArray;                                                          // 539\n      } else if (arrayItemFieldType === Date) {                                                                        // 540\n        converterFunc = typeDef.valueConverters.dateArray;                                                             // 541\n      }                                                                                                                // 542\n    }                                                                                                                  // 543\n                                                                                                                       // 544\n    if (typeof converterFunc === \"function\") {                                                                         // 545\n      val = converterFunc.call(field, val);                                                                            // 546\n    }                                                                                                                  // 547\n  }                                                                                                                    // 548\n                                                                                                                       // 549\n  return val;                                                                                                          // 550\n};                                                                                                                     // 551\n                                                                                                                       // 552\n/**                                                                                                                    // 553\n * @method AutoForm.addInputType                                                                                       // 554\n * @public                                                                                                             // 555\n * @param {String} name The type string that this definition is for.                                                   // 556\n * @param {Object} definition Defines how the input type should be rendered.                                           // 557\n * @param {String} definition.componentName The component name. A template with the name <componentName>_bootstrap3, and potentially others, must be defined.\n * @return {undefined}                                                                                                 // 559\n *                                                                                                                     // 560\n * Use this method to add custom input components.                                                                     // 561\n */                                                                                                                    // 562\nAutoForm.addInputType = function afAddInputType(name, definition) {                                                    // 563\n  var obj = {};                                                                                                        // 564\n  obj[name] = definition;                                                                                              // 565\n  _.extend(AutoForm._inputTypeDefinitions, obj);                                                                       // 566\n};                                                                                                                     // 567\n                                                                                                                       // 568\n/**                                                                                                                    // 569\n * @method AutoForm.addFormType                                                                                        // 570\n * @public                                                                                                             // 571\n * @param {String} name The type string that this definition is for.                                                   // 572\n * @param {Object} definition Defines how the submit type should work                                                  // 573\n * @param {Function} [definition.adjustInputContext] A function that accepts a single argument, which is the context with which an input template in the form will be called, potentially changes the context object, and then returns it. For example, the \"readonly\" and \"disabled\" form types use this function to add the \"readonly\" or \"disabled\" attribute, respectively, to every input within the form.\n * @param {Function} [definition.adjustSchema] A function that accepts a single argument, which is the form schema, and potentially uses that to return a different schema to use instead. For example, the \"update-pushArray\" form type uses this function to build and return a schema that is limited by the `scope` attribute on the form. When this function is called, `this` contains useful information about the form.\n * @param {Boolean} [definition.hideArrayItemButtons] Set to `true` if this form type should not show buttons for adding and removing items in an array field. The \"disabled\" and \"readonly\" form types do this.\n * @param {Function} definition.onSubmit A function that does whatever should happen upon submission of this form type. When this function is called, `this` contains useful information about the form. At a minimum, you probably want to call `this.event.preventDefault()` to prevent the browser from submitting the form. Your submission logic may want to rely on additional custom form attributes, which will be available in `this.formAttributes`. If you do any additional validation and it fails, you should call `this.failedValidation()`. When your logic is done, you should call `this.result(error, result)`. If you want to end the submission process without providing a result, call `this.endSubmission()`. If you don't call `this.result()` or `this.endSubmission()`, `endSubmit` hooks won't be called, so for example the submit button might remain disabled. `onError` hooks will be called only if you pass an error to `this.result()`. `onSuccess` hooks will be called only if you do not pass an error to `this.result()`.\n * @param {Function} [definition.shouldPrevalidate] A function that returns `true` if validation against the form schema should happen before the `onSubmit` function is called, or `false` if not. When this function is called, `this` contains useful information about the form. If this function is not provided for a form type, the default is `true`.\n * @param {Function} definition.validateForm A function that validates the form and returns `true` if valid or `false` if not. This can happen during submission but also at other times. When this function is called, `this` contains useful information about the form and the validation options.\n * @return {undefined}                                                                                                 // 580\n *                                                                                                                     // 581\n * Use this method to add custom form types.                                                                           // 582\n */                                                                                                                    // 583\nAutoForm.addFormType = function afAddFormType(name, definition) {                                                      // 584\n  var obj = {};                                                                                                        // 585\n  obj[name] = definition;                                                                                              // 586\n  _.extend(AutoForm._formTypeDefinitions, obj);                                                                        // 587\n};                                                                                                                     // 588\n                                                                                                                       // 589\n/**                                                                                                                    // 590\n * @method AutoForm.validateField                                                                                      // 591\n * @public                                                                                                             // 592\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 593\n * @param {String} fieldName The name of the field within the `autoForm` you want to validate.                         // 594\n * @param {Boolean} [skipEmpty=false] Set to `true` to skip validation if the field has no value. Useful for preventing `required` errors in form fields that the user has not yet filled out.\n * @return {Boolean} Is it valid?                                                                                      // 596\n *                                                                                                                     // 597\n * In addition to returning a boolean that indicates whether the field is currently valid,                             // 598\n * this method causes the reactive validation messages to appear.                                                      // 599\n */                                                                                                                    // 600\nAutoForm.validateField = function autoFormValidateField(formId, fieldName, skipEmpty) {                                // 601\n  var template = AutoForm.templateInstanceForForm(formId);                                                             // 602\n  if (!template ||                                                                                                     // 603\n      !template.view ||                                                                                                // 604\n      !template.view._domrange ||                                                                                      // 605\n      template.view.isDestroyed) {                                                                                     // 606\n    return true;                                                                                                       // 607\n  }                                                                                                                    // 608\n                                                                                                                       // 609\n  return validateField(fieldName, formId, skipEmpty, false);                                                           // 610\n};                                                                                                                     // 611\n                                                                                                                       // 612\n/**                                                                                                                    // 613\n * @method AutoForm.validateForm                                                                                       // 614\n * @public                                                                                                             // 615\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 616\n * @return {Boolean} Is it valid?                                                                                      // 617\n *                                                                                                                     // 618\n * In addition to returning a boolean that indicates whether the form is currently valid,                              // 619\n * this method causes the reactive validation messages to appear.                                                      // 620\n */                                                                                                                    // 621\nAutoForm.validateForm = function autoFormValidateForm(formId) {                                                        // 622\n  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 623\n  var formDoc, formType = form.type;                                                                                   // 624\n                                                                                                                       // 625\n  var ftd = Utility.getFormTypeDef(formType);                                                                          // 626\n                                                                                                                       // 627\n  // Gather all form values                                                                                            // 628\n  if (ftd.needsModifierAndDoc) {                                                                                       // 629\n    formDoc = AutoForm.getFormValues(formId, null, null);                                                              // 630\n  } else if (ftd.usesModifier) {                                                                                       // 631\n    formDoc = AutoForm.getFormValues(formId, null, null, true);                                                        // 632\n  } else {                                                                                                             // 633\n    formDoc = AutoForm.getFormValues(formId, null, null, false);                                                       // 634\n  }                                                                                                                    // 635\n                                                                                                                       // 636\n  // If form is not currently rendered, return true                                                                    // 637\n  if (!formDoc) {                                                                                                      // 638\n    return true;                                                                                                       // 639\n  }                                                                                                                    // 640\n                                                                                                                       // 641\n  return (form.validation === 'none') || ftd.validateForm.call({                                                       // 642\n    form: form,                                                                                                        // 643\n    formDoc: formDoc,                                                                                                  // 644\n    useCollectionSchema: false                                                                                         // 645\n  });                                                                                                                  // 646\n};                                                                                                                     // 647\n                                                                                                                       // 648\n/**                                                                                                                    // 649\n * @method AutoForm.getValidationContext                                                                               // 650\n * @public                                                                                                             // 651\n * @param {String} formId The `id` attribute of the `autoForm` for which you want the validation context               // 652\n * @return {SimpleSchemaValidationContext} The SimpleSchema validation context object.                                 // 653\n *                                                                                                                     // 654\n * Use this method to get the validation context, which can be used to check                                           // 655\n * the current invalid fields, manually invalidate fields, etc.                                                        // 656\n */                                                                                                                    // 657\nAutoForm.getValidationContext = function autoFormGetValidationContext(formId) {                                        // 658\n  var ss = AutoForm.getFormSchema(formId);                                                                             // 659\n  return ss && ss.namedContext(formId);                                                                                // 660\n};                                                                                                                     // 661\n                                                                                                                       // 662\n/**                                                                                                                    // 663\n * @method AutoForm.findAttribute                                                                                      // 664\n * @public                                                                                                             // 665\n * @param {String} attrName Attribute name                                                                             // 666\n * @return {Any|undefined} Searches for the given attribute, looking up the parent context tree until the closest autoform is reached.\n *                                                                                                                     // 668\n * Call this method from a UI helper. Might return undefined.                                                          // 669\n */                                                                                                                    // 670\nAutoForm.findAttribute = function autoFormFindAttribute(attrName) {                                                    // 671\n  var val, view, viewData;                                                                                             // 672\n                                                                                                                       // 673\n  function checkView() {                                                                                               // 674\n    // Is the attribute we're looking for on here?                                                                     // 675\n    // If so, stop searching                                                                                           // 676\n    viewData = Blaze.getData(view);                                                                                    // 677\n    if (viewData && viewData.atts && viewData.atts[attrName] !== void 0) {                                             // 678\n      val = viewData.atts[attrName];                                                                                   // 679\n    } else if (viewData && viewData[attrName] !== void 0) {                                                            // 680\n      // When searching for \"template\", make sure we didn't just                                                       // 681\n      // find the one that's on Template.dynamic                                                                       // 682\n      if (attrName !== 'template' || !('data' in viewData)) {                                                          // 683\n        val = viewData[attrName];                                                                                      // 684\n      }                                                                                                                // 685\n    }                                                                                                                  // 686\n  }                                                                                                                    // 687\n                                                                                                                       // 688\n  // Loop                                                                                                              // 689\n  view = Blaze.currentView;                                                                                            // 690\n  while (val === undefined && view && view.name !== 'Template.autoForm') {                                             // 691\n    checkView();                                                                                                       // 692\n    view = view.originalParentView || view.parentView;                                                                 // 693\n  }                                                                                                                    // 694\n                                                                                                                       // 695\n  // If we've reached the form, check there, too                                                                       // 696\n  if (val === undefined && view && view.name === 'Template.autoForm') {                                                // 697\n    checkView();                                                                                                       // 698\n  }                                                                                                                    // 699\n                                                                                                                       // 700\n  return val;                                                                                                          // 701\n};                                                                                                                     // 702\n                                                                                                                       // 703\n/**                                                                                                                    // 704\n * @method AutoForm.findAttributesWithPrefix                                                                           // 705\n * @public                                                                                                             // 706\n * @param {String} prefix Attribute prefix                                                                             // 707\n * @return {Object} An object containing all of the found attributes and their values, with the prefix removed from the keys.\n *                                                                                                                     // 709\n * Call this method from a UI helper. Searches for attributes that start with the given prefix, looking up the parent context tree until the closest autoform is reached.\n */                                                                                                                    // 711\nAutoForm.findAttributesWithPrefix = function autoFormFindAttributesWithPrefix(prefix) {                                // 712\n  var result = {}, view, viewData, searchObj;                                                                          // 713\n                                                                                                                       // 714\n  function checkView() {                                                                                               // 715\n    // Is the attribute we're looking for on here?                                                                     // 716\n    // If so, add to result object.                                                                                    // 717\n    viewData = Blaze.getData(view);                                                                                    // 718\n    if (viewData && viewData.atts) {                                                                                   // 719\n      searchObj = viewData.atts;                                                                                       // 720\n    } else {                                                                                                           // 721\n      searchObj = viewData;                                                                                            // 722\n    }                                                                                                                  // 723\n    // We need an isArray check, too because _.isObject([{}]) comes back true                                          // 724\n    if (_.isObject(searchObj) && !_.isArray(searchObj)) {                                                              // 725\n      _.each(searchObj, function (v, k) {                                                                              // 726\n        if (k.indexOf(prefix) === 0) {                                                                                 // 727\n          result[k.slice(prefix.length)] = v;                                                                          // 728\n        }                                                                                                              // 729\n      });                                                                                                              // 730\n    }                                                                                                                  // 731\n  }                                                                                                                    // 732\n                                                                                                                       // 733\n  // Loop                                                                                                              // 734\n  view = Blaze.currentView;                                                                                            // 735\n  while (view && view.name !== 'Template.autoForm') {                                                                  // 736\n    checkView();                                                                                                       // 737\n    view = view.originalParentView || view.parentView;                                                                 // 738\n  }                                                                                                                    // 739\n                                                                                                                       // 740\n  // If we've reached the form, check there, too                                                                       // 741\n  if (view && view.name === 'Template.autoForm') {                                                                     // 742\n    checkView();                                                                                                       // 743\n  }                                                                                                                    // 744\n                                                                                                                       // 745\n  return result;                                                                                                       // 746\n};                                                                                                                     // 747\n                                                                                                                       // 748\n/**                                                                                                                    // 749\n * @method AutoForm.debug                                                                                              // 750\n * @public                                                                                                             // 751\n *                                                                                                                     // 752\n * Call this method in client code while developing to turn on extra logging.                                          // 753\n * You need to call it just one time, usually in top level client code.                                                // 754\n */                                                                                                                    // 755\nAutoForm.debug = function autoFormDebug() {                                                                            // 756\n  SimpleSchema.debug = true;                                                                                           // 757\n  AutoForm._debug = true;                                                                                              // 758\n  AutoForm.addHooks(null, {                                                                                            // 759\n    onError: function (operation, error) {                                                                             // 760\n      console.log(\"Error in \" + this.formId, operation, error);                                                        // 761\n    }                                                                                                                  // 762\n  });                                                                                                                  // 763\n};                                                                                                                     // 764\n                                                                                                                       // 765\n/**                                                                                                                    // 766\n * @property AutoForm.arrayTracker                                                                                     // 767\n * @public                                                                                                             // 768\n */                                                                                                                    // 769\nAutoForm.arrayTracker = arrayTracker;                                                                                  // 770\n                                                                                                                       // 771\n/**                                                                                                                    // 772\n * @method AutoForm.getInputType                                                                                       // 773\n * @param {Object} atts The attributes provided to afFieldInput.                                                       // 774\n * @public                                                                                                             // 775\n * @return {String} The input type. Most are the same as the `type` attributes for HTML input elements, but some are special strings that autoform interprets.\n *                                                                                                                     // 777\n * Call this method from a UI helper to get the type string for the input control.                                     // 778\n */                                                                                                                    // 779\nAutoForm.getInputType = function getInputType(atts) {                                                                  // 780\n  var expectsArray = false, defs, schemaType, type;                                                                    // 781\n                                                                                                                       // 782\n  atts = AutoForm.Utility.getComponentContext(atts, 'afFieldInput').atts;                                              // 783\n                                                                                                                       // 784\n  // If a `type` attribute is specified, we just use that                                                              // 785\n  if (atts.type) {                                                                                                     // 786\n    return atts.type;                                                                                                  // 787\n  }                                                                                                                    // 788\n                                                                                                                       // 789\n  // Get schema definition, using the item definition for array fields                                                 // 790\n  defs = AutoForm.getSchemaForField(atts.name);                                                                        // 791\n  if (!defs) {                                                                                                         // 792\n    return 'text';                                                                                                     // 793\n  }                                                                                                                    // 794\n                                                                                                                       // 795\n  schemaType = defs.type;                                                                                              // 796\n  if (schemaType === Array) {                                                                                          // 797\n    expectsArray = true;                                                                                               // 798\n    schemaType = AutoForm.getSchemaForField(atts.name + \".$\").type;                                                    // 799\n    if (!defs) {                                                                                                       // 800\n      return 'text';                                                                                                   // 801\n    }                                                                                                                  // 802\n  }                                                                                                                    // 803\n                                                                                                                       // 804\n  // Based on the `type` attribute, the `type` from the schema, and/or                                                 // 805\n  // other characteristics such as regEx and whether an array is expected,                                             // 806\n  // choose which type string to return.                                                                               // 807\n                                                                                                                       // 808\n  // If options were provided, noselect is `true`, and the schema                                                      // 809\n  // expects the value of the field to be an array, use \"select-checkbox\".                                             // 810\n  if (atts.options && atts.noselect === true && expectsArray) {                                                        // 811\n    type = 'select-checkbox';                                                                                          // 812\n  }                                                                                                                    // 813\n                                                                                                                       // 814\n  // If options were provided, noselect is `true`, and the schema                                                      // 815\n  // does not expect the value of the field to be an array, use \"select-radio\".                                        // 816\n  else if (atts.options && atts.noselect === true && !expectsArray) {                                                  // 817\n    type = 'select-radio';                                                                                             // 818\n  }                                                                                                                    // 819\n                                                                                                                       // 820\n  // If options were provided, noselect is not `true`, and the schema                                                  // 821\n  // expects the value of the field to be an array, use \"select-multiple\".                                             // 822\n  else if (atts.options && atts.noselect !== true && expectsArray) {                                                   // 823\n    type = 'select-multiple';                                                                                          // 824\n  }                                                                                                                    // 825\n                                                                                                                       // 826\n  // If options were provided, noselect is not `true`, and the schema                                                  // 827\n  // does not expect the value of the field to be an array, use \"select\".                                              // 828\n  else if (atts.options && atts.noselect !== true && !expectsArray) {                                                  // 829\n    type = 'select';                                                                                                   // 830\n  }                                                                                                                    // 831\n                                                                                                                       // 832\n  // If the schema expects the value of the field to be a string and                                                   // 833\n  // the `rows` attribute is provided, use \"textarea\"                                                                  // 834\n  else if (schemaType === String && atts.rows === +atts.rows) {                                                        // 835\n    type = 'textarea';                                                                                                 // 836\n  }                                                                                                                    // 837\n                                                                                                                       // 838\n  // If the schema expects the value of the field to be a number,                                                      // 839\n  // use \"number\"                                                                                                      // 840\n  else if (schemaType === Number) {                                                                                    // 841\n    type = 'number';                                                                                                   // 842\n  }                                                                                                                    // 843\n                                                                                                                       // 844\n  // If the schema expects the value of the field to be a Date instance,                                               // 845\n  // use \"date\"                                                                                                        // 846\n  else if (schemaType === Date) {                                                                                      // 847\n    type = 'date';                                                                                                     // 848\n  }                                                                                                                    // 849\n                                                                                                                       // 850\n  // If the schema expects the value of the field to be a boolean,                                                     // 851\n  // use \"boolean-checkbox\"                                                                                            // 852\n  else if (schemaType === Boolean) {                                                                                   // 853\n    type = 'boolean-checkbox';                                                                                         // 854\n  }                                                                                                                    // 855\n                                                                                                                       // 856\n  // Default is \"text\"                                                                                                 // 857\n  else {                                                                                                               // 858\n    type = 'text';                                                                                                     // 859\n  }                                                                                                                    // 860\n                                                                                                                       // 861\n  return type;                                                                                                         // 862\n};                                                                                                                     // 863\n                                                                                                                       // 864\n/**                                                                                                                    // 865\n * @method AutoForm.getSchemaForField                                                                                  // 866\n * @public                                                                                                             // 867\n * @param {String} name The field name attribute / schema key.                                                         // 868\n * @return {Object|undefined}                                                                                          // 869\n *                                                                                                                     // 870\n * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.\n */                                                                                                                    // 872\nAutoForm.getSchemaForField = function autoFormGetSchemaForField(name) {                                                // 873\n  var ss = AutoForm.getFormSchema();                                                                                   // 874\n  return AutoForm.Utility.getDefs(ss, name);                                                                           // 875\n};                                                                                                                     // 876\n                                                                                                                       // 877\n/**                                                                                                                    // 878\n * @method AutoForm._getOptionsForField                                                                                // 879\n * @public                                                                                                             // 880\n * @param {String} name The field name attribute / schema key.                                                         // 881\n * @return {Array(Object)|String|undefined}                                                                            // 882\n *                                                                                                                     // 883\n * Call this method from a UI helper to get the select options for the field. Might return the string \"allowed\".       // 884\n */                                                                                                                    // 885\nAutoForm._getOptionsForField = function autoFormGetOptionsForField(name) {                                             // 886\n  var ss, def, saf, allowedValues;                                                                                     // 887\n                                                                                                                       // 888\n  ss = AutoForm.getFormSchema();                                                                                       // 889\n  if (!ss) {                                                                                                           // 890\n    return;                                                                                                            // 891\n  }                                                                                                                    // 892\n                                                                                                                       // 893\n  def = ss.getDefinition(name);                                                                                        // 894\n  if (!def) {                                                                                                          // 895\n    return;                                                                                                            // 896\n  }                                                                                                                    // 897\n                                                                                                                       // 898\n  // If options in schema, use those                                                                                   // 899\n  saf = def.autoform;                                                                                                  // 900\n  if (saf) {                                                                                                           // 901\n    if (saf.afFieldInput && saf.afFieldInput.options) {                                                                // 902\n      return saf.afFieldInput.options;                                                                                 // 903\n    } else if (saf.afQuickField && saf.afQuickField.options) {                                                         // 904\n      return saf.afQuickField.options;                                                                                 // 905\n    } else if (saf.options) {                                                                                          // 906\n      return saf.options;                                                                                              // 907\n    }                                                                                                                  // 908\n  }                                                                                                                    // 909\n                                                                                                                       // 910\n  // If schema has allowedValues, use those                                                                            // 911\n  allowedValues = ss.getAllowedValuesForKey(name);                                                                     // 912\n  if (allowedValues) {                                                                                                 // 913\n    return 'allowed';                                                                                                  // 914\n  }                                                                                                                    // 915\n};                                                                                                                     // 916\n                                                                                                                       // 917\n/**                                                                                                                    // 918\n * @method AutoForm.getLabelForField                                                                                   // 919\n * @public                                                                                                             // 920\n * @param {String} name The field name attribute / schema key.                                                         // 921\n * @return {Object}                                                                                                    // 922\n *                                                                                                                     // 923\n * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.\n */                                                                                                                    // 925\nAutoForm.getLabelForField = function autoFormGetSchemaForField(name) {                                                 // 926\n  var ss = AutoForm.getFormSchema(), label = ss.label(name);                                                           // 927\n  // for array items we don't want to inflect the label because                                                        // 928\n  // we will end up with a number;                                                                                     // 929\n  // TODO this check should probably be in the SimpleSchema code                                                       // 930\n  if (SimpleSchema._makeGeneric(name).slice(-1) === \"$\" && !isNaN(parseInt(label, 10))) {                              // 931\n    label = null;                                                                                                      // 932\n  }                                                                                                                    // 933\n  return label;                                                                                                        // 934\n};                                                                                                                     // 935\n                                                                                                                       // 936\n/**                                                                                                                    // 937\n * @method AutoForm.templateInstanceForForm                                                                            // 938\n * @public                                                                                                             // 939\n * @param {String} [formId] The form's `id` attribute                                                                  // 940\n * @returns {TemplateInstance|undefined} The template instance.                                                        // 941\n *                                                                                                                     // 942\n * Gets the template instance for the form with formId or the closest form to the current context.                     // 943\n */                                                                                                                    // 944\nAutoForm.templateInstanceForForm = function (formId) {                                                                 // 945\n  var view = AutoForm.viewForForm(formId);                                                                             // 946\n                                                                                                                       // 947\n  if (!view) return;                                                                                                   // 948\n                                                                                                                       // 949\n  return view.templateInstance();                                                                                      // 950\n};                                                                                                                     // 951\n                                                                                                                       // 952\n/**                                                                                                                    // 953\n * @method AutoForm.viewForForm                                                                                        // 954\n * @public                                                                                                             // 955\n * @param {String} [formId] The form's `id` attribute. Do not pass this if calling from within a form context.         // 956\n * @returns {Blaze.View|undefined} The `Blaze.View` instance for the autoForm.                                         // 957\n *                                                                                                                     // 958\n * Gets the `Blaze.View` instance for the form with formId or the closest form to the current context.                 // 959\n */                                                                                                                    // 960\nAutoForm.viewForForm = function (formId) {                                                                             // 961\n  var formElement, view;                                                                                               // 962\n                                                                                                                       // 963\n  if (formId) {                                                                                                        // 964\n    formElement = document.getElementById(formId);                                                                     // 965\n    if (!formElement) {                                                                                                // 966\n      return;                                                                                                          // 967\n    }                                                                                                                  // 968\n  }                                                                                                                    // 969\n                                                                                                                       // 970\n  // If formElement is undefined, Blaze.getView returns the current view.                                              // 971\n  try {                                                                                                                // 972\n    view = Blaze.getView(formElement);                                                                                 // 973\n  } catch (err) {}                                                                                                     // 974\n                                                                                                                       // 975\n  while (view && view.name !== 'Template.autoForm') {                                                                  // 976\n    view = view.originalParentView || view.parentView;                                                                 // 977\n  }                                                                                                                    // 978\n                                                                                                                       // 979\n  if (!view || view.name !== 'Template.autoForm') {                                                                    // 980\n    return;                                                                                                            // 981\n  }                                                                                                                    // 982\n                                                                                                                       // 983\n  return view;                                                                                                         // 984\n};                                                                                                                     // 985\n                                                                                                                       // 986\n/**                                                                                                                    // 987\n * @method AutoForm.getArrayCountFromDocForField                                                                       // 988\n * @public                                                                                                             // 989\n * @param {String} formId The form's `id` attribute                                                                    // 990\n * @param {String} field  The field name (schema key)                                                                  // 991\n * @returns {Number|undefined} Array count in the attached document.                                                   // 992\n *                                                                                                                     // 993\n * Looks in the document attached to the form to see if the                                                            // 994\n * requested field exists and is an array. If so, returns the                                                          // 995\n * length (count) of the array. Otherwise returns undefined.                                                           // 996\n */                                                                                                                    // 997\nAutoForm.getArrayCountFromDocForField = function (formId, field) {                                                     // 998\n  var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);                                                              // 999\n  var docCount;                                                                                                        // 1000\n  if (mDoc) {                                                                                                          // 1001\n    var keyInfo = mDoc.getInfoForKey(field);                                                                           // 1002\n    if (keyInfo && _.isArray(keyInfo.value)) {                                                                         // 1003\n      docCount = keyInfo.value.length;                                                                                 // 1004\n    }                                                                                                                  // 1005\n  }                                                                                                                    // 1006\n  return docCount;                                                                                                     // 1007\n};                                                                                                                     // 1008\n                                                                                                                       // 1009\n/**                                                                                                                    // 1010\n * @method AutoForm.parseData                                                                                          // 1011\n * @public                                                                                                             // 1012\n * @param {Object} data Current data context for the form, or an empty object. Usually this is used from a quickForm, since the autoForm won't be rendered yet. Otherwise you should use AutoForm.getCurrentDataForForm if you can.\n * @returns {Object} Current data context for the form, or an empty object.                                            // 1014\n *                                                                                                                     // 1015\n * Parses and alters the current data context for a form. It will have default values added and a `_resolvedSchema` property that has the schema the form should use.\n */                                                                                                                    // 1017\nAutoForm.parseData = function (data) {                                                                                 // 1018\n  return setDefaults(data);                                                                                            // 1019\n};                                                                                                                     // 1020\n                                                                                                                       // 1021\n/**                                                                                                                    // 1022\n * @method AutoForm.getCurrentDataForForm                                                                              // 1023\n * @public                                                                                                             // 1024\n * @param {String} formId The form's `id` attribute                                                                    // 1025\n * @returns {Object} Current data context for the form, or an empty object.                                            // 1026\n *                                                                                                                     // 1027\n * Returns the current data context for a form.                                                                        // 1028\n * You can call this without a formId from within a helper and                                                         // 1029\n * the data for the nearest containing form will be returned.                                                          // 1030\n */                                                                                                                    // 1031\nAutoForm.getCurrentDataForForm = function (formId) {                                                                   // 1032\n  var view = AutoForm.viewForForm(formId);                                                                             // 1033\n                                                                                                                       // 1034\n  if (!view) return;                                                                                                   // 1035\n                                                                                                                       // 1036\n  var data = Blaze.getData(view);                                                                                      // 1037\n                                                                                                                       // 1038\n  if (!data) return;                                                                                                   // 1039\n                                                                                                                       // 1040\n  return setDefaults(data);                                                                                            // 1041\n};                                                                                                                     // 1042\n                                                                                                                       // 1043\n/**                                                                                                                    // 1044\n * @method AutoForm.getCurrentDataPlusExtrasForForm                                                                    // 1045\n * @public                                                                                                             // 1046\n * @param   {String} [formId] The form's `id` attribute                                                                // 1047\n * @returns {Object} Current data context for the form, or an empty object.                                            // 1048\n *                                                                                                                     // 1049\n * Returns the current data context for a form plus some extra properties.                                             // 1050\n * You can call this without a formId from within a helper and                                                         // 1051\n * the data for the nearest containing form will be returned.                                                          // 1052\n */                                                                                                                    // 1053\nAutoForm.getCurrentDataPlusExtrasForForm = function (formId) {                                                         // 1054\n  var data = AutoForm.getCurrentDataForForm(formId);                                                                   // 1055\n                                                                                                                       // 1056\n  data = _.clone(data);                                                                                                // 1057\n                                                                                                                       // 1058\n  // add form type definition                                                                                          // 1059\n  var formType = data.type || 'normal';                                                                                // 1060\n  data.formTypeDef = Utility.getFormTypeDef(formType);                                                                 // 1061\n                                                                                                                       // 1062\n  return data;                                                                                                         // 1063\n};                                                                                                                     // 1064\n                                                                                                                       // 1065\n/**                                                                                                                    // 1066\n * @method AutoForm.getFormCollection                                                                                  // 1067\n * @public                                                                                                             // 1068\n * @param {String} formId The form's `id` attribute                                                                    // 1069\n * @returns {Mongo.Collection|undefined} The Collection instance                                                       // 1070\n *                                                                                                                     // 1071\n * Gets the collection for a form from the `collection` attribute                                                      // 1072\n */                                                                                                                    // 1073\nAutoForm.getFormCollection = function (formId) {                                                                       // 1074\n  var data = AutoForm.getCurrentDataForForm(formId);                                                                   // 1075\n  return AutoForm.Utility.lookup(data.collection);                                                                     // 1076\n};                                                                                                                     // 1077\n                                                                                                                       // 1078\n/**                                                                                                                    // 1079\n * @method AutoForm.getFormSchema                                                                                      // 1080\n * @public                                                                                                             // 1081\n * @param {String} formId The form's `id` attribute                                                                    // 1082\n * @param {Object} [form] Pass the form data context as an optimization or if the form is not yet rendered.            // 1083\n * @returns {SimpleSchema|undefined} The SimpleSchema instance                                                         // 1084\n *                                                                                                                     // 1085\n * Gets the schema for a form, from the `schema` attribute if                                                          // 1086\n * provided, or from the schema attached to the `Mongo.Collection`                                                     // 1087\n * specified in the `collection` attribute. The form must be                                                           // 1088\n * currently rendered.                                                                                                 // 1089\n */                                                                                                                    // 1090\nAutoForm.getFormSchema = function (formId, form) {                                                                     // 1091\n  form = form ? setDefaults(form) : AutoForm.getCurrentDataForForm(formId);                                            // 1092\n  return form._resolvedSchema;                                                                                         // 1093\n};                                                                                                                     // 1094\n                                                                                                                       // 1095\n/**                                                                                                                    // 1096\n * @method AutoForm.getFormId                                                                                          // 1097\n * @public                                                                                                             // 1098\n * @returns {String} The containing form's `id` attribute value                                                        // 1099\n *                                                                                                                     // 1100\n * Call in a helper to get the containing form's `id` attribute. Reactive.                                             // 1101\n */                                                                                                                    // 1102\nAutoForm.getFormId = function () {                                                                                     // 1103\n  return AutoForm.getCurrentDataForForm().id;                                                                          // 1104\n};                                                                                                                     // 1105\n                                                                                                                       // 1106\n/**                                                                                                                    // 1107\n * @method AutoForm.selectFirstInvalidField                                                                            // 1108\n * @public                                                                                                             // 1109\n * @param {String} formId The `id` attribute of the form                                                               // 1110\n * @param {SimpleSchema} ss The SimpleSchema instance that was used to create the form's validation context.           // 1111\n * @returns {undefined}                                                                                                // 1112\n *                                                                                                                     // 1113\n * Selects the focus the first field (in DOM order) with an error.                                                     // 1114\n */                                                                                                                    // 1115\nAutoForm.selectFirstInvalidField = function selectFirstInvalidField(formId, ss) {                                      // 1116\n  var ctx = ss.namedContext(formId), template, fields;                                                                 // 1117\n  if (!ctx.isValid()) {                                                                                                // 1118\n    template = AutoForm.templateInstanceForForm(formId);                                                               // 1119\n    fields = getAllFieldsInForm(template);                                                                             // 1120\n    fields.each(function () {                                                                                          // 1121\n      var f = $(this);                                                                                                 // 1122\n      if (ctx.keyIsInvalid(f.attr('data-schema-key'))) {                                                               // 1123\n        f.focus();                                                                                                     // 1124\n        return false;                                                                                                  // 1125\n      }                                                                                                                // 1126\n    });                                                                                                                // 1127\n  }                                                                                                                    // 1128\n};                                                                                                                     // 1129\n                                                                                                                       // 1130\n/**                                                                                                                    // 1131\n * @method AutoForm._validateFormDoc                                                                                   // 1132\n * @public                                                                                                             // 1133\n *                                                                                                                     // 1134\n * If creating a form type, you will often want to call this from the `validateForm` function. It provides the generic form validation logic that does not typically change between form types.\n *                                                                                                                     // 1136\n * @param {Object} doc The document with the gathered form values to validate.                                         // 1137\n * @param {Boolean} isModifier Is `doc` actually a mongo modifier object?                                              // 1138\n * @param {String} formId The form `id` attribute                                                                      // 1139\n * @param {SimpleSchema} ss The SimpleSchema instance against which to validate.                                       // 1140\n * @param {Object} form The form context object                                                                        // 1141\n * @param {String} [key] Optionally, a specific schema key to validate.                                                // 1142\n * @returns {Boolean} Is the form valid?                                                                               // 1143\n */                                                                                                                    // 1144\nAutoForm._validateFormDoc = function validateFormDoc(doc, isModifier, formId, ss, form, key) {                         // 1145\n  var isValid;                                                                                                         // 1146\n  var ec = {                                                                                                           // 1147\n    userId: (Meteor.userId && Meteor.userId()) || null,                                                                // 1148\n    isInsert: !isModifier,                                                                                             // 1149\n    isUpdate: !!isModifier,                                                                                            // 1150\n    isUpsert: false,                                                                                                   // 1151\n    isFromTrustedCode: false,                                                                                          // 1152\n    docId: (form.doc && form.doc._id) || null                                                                          // 1153\n  };                                                                                                                   // 1154\n                                                                                                                       // 1155\n  // Get a version of the doc that has auto values to validate here. We                                                // 1156\n  // don't want to actually send any auto values to the server because                                                 // 1157\n  // we ultimately want them generated on the server                                                                   // 1158\n  var docForValidation = _.clone(doc);                                                                                 // 1159\n  ss.clean(docForValidation, {                                                                                         // 1160\n    isModifier: isModifier,                                                                                            // 1161\n    filter: false,                                                                                                     // 1162\n    autoConvert: false,                                                                                                // 1163\n    trimStrings: false,                                                                                                // 1164\n    extendAutoValueContext: ec                                                                                         // 1165\n  });                                                                                                                  // 1166\n                                                                                                                       // 1167\n  // Get form's validation context                                                                                     // 1168\n  var vc = ss.namedContext(formId);                                                                                    // 1169\n                                                                                                                       // 1170\n  // Validate                                                                                                          // 1171\n  // If `key` is provided, we validate that key/field only                                                             // 1172\n  if (key) {                                                                                                           // 1173\n    isValid = vc.validateOne(docForValidation, key, {                                                                  // 1174\n      modifier: isModifier,                                                                                            // 1175\n      extendedCustomContext: ec                                                                                        // 1176\n    });                                                                                                                // 1177\n                                                                                                                       // 1178\n    // Add sticky error for this key if there is one                                                                   // 1179\n    var stickyError = AutoForm.templateInstanceForForm(formId)._stickyErrors[key];                                     // 1180\n    if (stickyError) {                                                                                                 // 1181\n      isValid = false;                                                                                                 // 1182\n      vc.addInvalidKeys([                                                                                              // 1183\n        {name: key, type: stickyError.type, value: stickyError.value}                                                  // 1184\n      ]);                                                                                                              // 1185\n    }                                                                                                                  // 1186\n  } else {                                                                                                             // 1187\n    isValid = vc.validate(docForValidation, {                                                                          // 1188\n      modifier: isModifier,                                                                                            // 1189\n      extendedCustomContext: ec                                                                                        // 1190\n    });                                                                                                                // 1191\n                                                                                                                       // 1192\n    // Add sticky errors for all keys if any                                                                           // 1193\n    var stickyErrors = AutoForm.templateInstanceForForm(formId)._stickyErrors;                                         // 1194\n    if (!_.isEmpty(stickyErrors)) {                                                                                    // 1195\n      isValid = false;                                                                                                 // 1196\n      stickyErrors = _.map(stickyErrors, function (obj, k) {                                                           // 1197\n        return {name: k, type: obj.type, value: obj.value};                                                            // 1198\n      });                                                                                                              // 1199\n      vc.addInvalidKeys(stickyErrors);                                                                                 // 1200\n    }                                                                                                                  // 1201\n                                                                                                                       // 1202\n    if (!isValid) {                                                                                                    // 1203\n      AutoForm.selectFirstInvalidField(formId, ss);                                                                    // 1204\n    }                                                                                                                  // 1205\n  }                                                                                                                    // 1206\n                                                                                                                       // 1207\n  return isValid;                                                                                                      // 1208\n};                                                                                                                     // 1209\n                                                                                                                       // 1210\n/**                                                                                                                    // 1211\n * Sets defaults for the form data context                                                                             // 1212\n * @private                                                                                                            // 1213\n * @returns {String} The data context with property defaults added.                                                    // 1214\n */                                                                                                                    // 1215\nsetDefaults = function setDefaults(data) {                                                                             // 1216\n  if (!data) {                                                                                                         // 1217\n    data = {};                                                                                                         // 1218\n  }                                                                                                                    // 1219\n                                                                                                                       // 1220\n  // default form type is \"normal\"                                                                                     // 1221\n  if (typeof data.type !== 'string') {                                                                                 // 1222\n    data.type = 'normal';                                                                                              // 1223\n  }                                                                                                                    // 1224\n                                                                                                                       // 1225\n  // default form validation is \"submitThenKeyup\"                                                                      // 1226\n  if (typeof data.validation !== 'string') {                                                                           // 1227\n    data.validation = 'submitThenKeyup';                                                                               // 1228\n  }                                                                                                                    // 1229\n                                                                                                                       // 1230\n  // Resolve form schema                                                                                               // 1231\n  if (!data._resolvedSchema) {                                                                                         // 1232\n    var formType = data.type;                                                                                          // 1233\n    var schema = data.schema;                                                                                          // 1234\n    if (schema) {                                                                                                      // 1235\n      schema = AutoForm.Utility.lookup(schema);                                                                        // 1236\n    } else {                                                                                                           // 1237\n      var collection = AutoForm.Utility.lookup(data.collection);                                                       // 1238\n      if (collection && typeof collection.simpleSchema === 'function') {                                               // 1239\n        schema = collection.simpleSchema();                                                                            // 1240\n      }                                                                                                                // 1241\n    }                                                                                                                  // 1242\n                                                                                                                       // 1243\n    // Form type definition can optionally alter the schema                                                            // 1244\n    var ftd = Utility.getFormTypeDef(formType);                                                                        // 1245\n                                                                                                                       // 1246\n    if (typeof ftd.adjustSchema === 'function') {                                                                      // 1247\n      schema = ftd.adjustSchema.call({form: data}, schema);                                                            // 1248\n    }                                                                                                                  // 1249\n                                                                                                                       // 1250\n    // If we have a schema, cache it                                                                                   // 1251\n    if (schema) {                                                                                                      // 1252\n      data._resolvedSchema = schema;                                                                                   // 1253\n    }                                                                                                                  // 1254\n  }                                                                                                                    // 1255\n                                                                                                                       // 1256\n  return data;                                                                                                         // 1257\n};                                                                                                                     // 1258\n                                                                                                                       // 1259\nvar waitingForForms = {};                                                                                              // 1260\nAutoForm.rerunWhenFormRenderedOrDestroyed = function (formId) {                                                        // 1261\n  if (!_.has(waitingForForms, formId)) {                                                                               // 1262\n    waitingForForms[formId] = new Tracker.Dependency();                                                                // 1263\n  }                                                                                                                    // 1264\n  waitingForForms[formId].depend();                                                                                    // 1265\n};                                                                                                                     // 1266\n                                                                                                                       // 1267\nAutoForm.triggerFormRenderedDestroyedReruns = function (formId) {                                                      // 1268\n  if (!_.has(waitingForForms, formId)) {                                                                               // 1269\n    waitingForForms[formId] = new Tracker.Dependency();                                                                // 1270\n  }                                                                                                                    // 1271\n  waitingForForms[formId].changed();                                                                                   // 1272\n};                                                                                                                     // 1273\n                                                                                                                       // 1274\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2991\n}).call(this);                                                       // 2992\n                                                                     // 2993\n                                                                     // 2994\n                                                                     // 2995\n                                                                     // 2996\n                                                                     // 2997\n                                                                     // 2998\n(function () {                                                       // 2999\n                                                                     // 3000\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/insert.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('insert', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    // Make sure we have a collection                                                                                  // 10\n    var collection = this.collection;                                                                                  // 11\n    if (!collection) {                                                                                                 // 12\n      throw new Error(\"AutoForm: You must specify a collection when form type is insert.\");                            // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // See if the collection has a schema attached                                                                     // 16\n    var collectionHasSchema = (typeof collection.simpleSchema === \"function\" &&                                        // 17\n                               collection.simpleSchema() != null);                                                     // 18\n                                                                                                                       // 19\n    // Run \"before.insert\" hooks                                                                                       // 20\n    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 21\n      // Perform insert                                                                                                // 22\n      if (collectionHasSchema) {                                                                                       // 23\n        // If the collection2 pkg is used and a schema is attached, we pass a validationContext                        // 24\n        collection.insert(doc, c.validationOptions, c.result);                                                         // 25\n      } else {                                                                                                         // 26\n        // If the collection2 pkg is not used or no schema is attached, we don't pass options                          // 27\n        // because core Meteor's `insert` function does not accept                                                     // 28\n        // an options argument.                                                                                        // 29\n        collection.insert(doc, c.result);                                                                              // 30\n      }                                                                                                                // 31\n    });                                                                                                                // 32\n  },                                                                                                                   // 33\n  validateForm: function () {                                                                                          // 34\n    // Get SimpleSchema                                                                                                // 35\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 36\n    // Validate                                                                                                        // 37\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 38\n  },                                                                                                                   // 39\n  shouldPrevalidate: function () {                                                                                     // 40\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 41\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 42\n  }                                                                                                                    // 43\n});                                                                                                                    // 44\n                                                                                                                       // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3053\n}).call(this);                                                       // 3054\n                                                                     // 3055\n                                                                     // 3056\n                                                                     // 3057\n                                                                     // 3058\n                                                                     // 3059\n                                                                     // 3060\n(function () {                                                       // 3061\n                                                                     // 3062\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/update.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('update', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    // Make sure we have a collection                                                                                  // 10\n    var collection = this.collection;                                                                                  // 11\n    if (!collection) {                                                                                                 // 12\n      throw new Error(\"AutoForm: You must specify a collection when form type is update.\");                            // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // Run \"before.update\" hooks                                                                                       // 16\n    this.runBeforeHooks(this.updateDoc, function (modifier) {                                                          // 17\n      if (_.isEmpty(modifier)) { // make sure this check stays after the before hooks                                  // 18\n        // Nothing to update. Just treat it as a successful update.                                                    // 19\n        c.result(null, 0);                                                                                             // 20\n      } else {                                                                                                         // 21\n        // Perform update                                                                                              // 22\n        collection.update({_id: c.docId}, modifier, c.validationOptions, c.result);                                    // 23\n      }                                                                                                                // 24\n    });                                                                                                                // 25\n  },                                                                                                                   // 26\n  usesModifier: true,                                                                                                  // 27\n  validateForm: function () {                                                                                          // 28\n    // Get SimpleSchema                                                                                                // 29\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 30\n    // We validate the modifier. We don't want to throw errors about missing required fields, etc.                     // 31\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);                                 // 32\n  },                                                                                                                   // 33\n  shouldPrevalidate: function () {                                                                                     // 34\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 35\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 36\n  }                                                                                                                    // 37\n});                                                                                                                    // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3109\n}).call(this);                                                       // 3110\n                                                                     // 3111\n                                                                     // 3112\n                                                                     // 3113\n                                                                     // 3114\n                                                                     // 3115\n                                                                     // 3116\n(function () {                                                       // 3117\n                                                                     // 3118\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/update-pushArray.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, SimpleSchema */                                                                                    // 1\n                                                                                                                       // 2\nAutoForm.addFormType('update-pushArray', {                                                                             // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    // Make sure we have a collection                                                                                  // 10\n    var collection = this.collection;                                                                                  // 11\n    if (!collection) {                                                                                                 // 12\n      throw new Error(\"AutoForm: You must specify a collection when form type is update-pushArray.\");                  // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // Make sure we have a scope                                                                                       // 16\n    var scope = c.formAttributes.scope;                                                                                // 17\n    if (!scope) {                                                                                                      // 18\n      throw new Error(\"AutoForm: You must specify a scope when form type is update-pushArray.\");                       // 19\n    }                                                                                                                  // 20\n                                                                                                                       // 21\n    // Run \"before.update\" hooks                                                                                       // 22\n    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 23\n      if (_.isEmpty(doc)) { // make sure this check stays after the before hooks                                       // 24\n        // Nothing to update. Just treat it as a successful update.                                                    // 25\n        c.result(null, 0);                                                                                             // 26\n      } else {                                                                                                         // 27\n        var modifer = {$push: {}};                                                                                     // 28\n        modifer.$push[scope] = doc;                                                                                    // 29\n        // Perform update                                                                                              // 30\n        collection.update({_id: c.docId}, modifer, c.validationOptions, c.result);                                     // 31\n      }                                                                                                                // 32\n    });                                                                                                                // 33\n  },                                                                                                                   // 34\n  validateForm: function () {                                                                                          // 35\n    // Get SimpleSchema                                                                                                // 36\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 37\n    // We validate as if it's an insert form                                                                           // 38\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 39\n  },                                                                                                                   // 40\n  adjustSchema: function (ss) {                                                                                        // 41\n    var scope = this.form.scope, newSchemaDef = {};                                                                    // 42\n    var searchString = SimpleSchema._makeGeneric(scope) + '.$.';                                                       // 43\n                                                                                                                       // 44\n    // create new SS instance with only the fields that begin with `scope`                                             // 45\n    _.each(ss.schema(), function (val, key) {                                                                          // 46\n      if (key.indexOf(searchString) === 0) {                                                                           // 47\n        newSchemaDef[key.slice(searchString.length)] = val;                                                            // 48\n      }                                                                                                                // 49\n    });                                                                                                                // 50\n                                                                                                                       // 51\n    return new SimpleSchema(newSchemaDef);                                                                             // 52\n  },                                                                                                                   // 53\n  shouldPrevalidate: function () {                                                                                     // 54\n    // Prevalidate because the form is generated with a schema                                                         // 55\n    // that has keys different from the collection schema                                                              // 56\n    return true;                                                                                                       // 57\n  }                                                                                                                    // 58\n});                                                                                                                    // 59\n                                                                                                                       // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3186\n}).call(this);                                                       // 3187\n                                                                     // 3188\n                                                                     // 3189\n                                                                     // 3190\n                                                                     // 3191\n                                                                     // 3192\n                                                                     // 3193\n(function () {                                                       // 3194\n                                                                     // 3195\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/method.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('method', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    if (!this.formAttributes.meteormethod) {                                                                           // 10\n      throw new Error('When form type is \"method\", you must also provide a \"meteormethod\" attribute');                 // 11\n    }                                                                                                                  // 12\n                                                                                                                       // 13\n    // Run \"before.method\" hooks                                                                                       // 14\n    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 15\n      // Validate. If both schema and collection were provided, then we validate                                       // 16\n      // against the collection schema here. Otherwise we validate against whichever                                   // 17\n      // one was passed.                                                                                               // 18\n      var valid = (c.formAttributes.validation === 'none') ||                                                          // 19\n          c.formTypeDefinition.validateForm.call({                                                                     // 20\n            form: c.formAttributes,                                                                                    // 21\n            formDoc: doc,                                                                                              // 22\n            useCollectionSchema: c.ssIsOverride                                                                        // 23\n          });                                                                                                          // 24\n                                                                                                                       // 25\n      if (valid === false) {                                                                                           // 26\n        c.failedValidation();                                                                                          // 27\n      } else {                                                                                                         // 28\n        // Call the method. If a ddp connection was provided, use                                                      // 29\n        // that instead of the default Meteor connection                                                               // 30\n        var ddp = c.formAttributes.ddp;                                                                                // 31\n        if (ddp && ddp.call && typeof ddp.call === 'function') {                                                       // 32\n          ddp.call(c.formAttributes.meteormethod, doc, c.result);                                                      // 33\n        } else {                                                                                                       // 34\n          Meteor.call(c.formAttributes.meteormethod, doc, c.result);                                                   // 35\n        }                                                                                                              // 36\n      }                                                                                                                // 37\n    });                                                                                                                // 38\n  },                                                                                                                   // 39\n  validateForm: function () {                                                                                          // 40\n    // Get SimpleSchema                                                                                                // 41\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 42\n                                                                                                                       // 43\n    var collection = AutoForm.getFormCollection(this.form.id);                                                         // 44\n    // If there is a `schema` attribute but you want to force validation against the                                   // 45\n    // collection's schema instead, pass useCollectionSchema=true                                                      // 46\n    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;                                    // 47\n                                                                                                                       // 48\n    // Validate                                                                                                        // 49\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 50\n  },                                                                                                                   // 51\n  shouldPrevalidate: function () {                                                                                     // 52\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 53\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 54\n  }                                                                                                                    // 55\n});                                                                                                                    // 56\n                                                                                                                       // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3260\n}).call(this);                                                       // 3261\n                                                                     // 3262\n                                                                     // 3263\n                                                                     // 3264\n                                                                     // 3265\n                                                                     // 3266\n                                                                     // 3267\n(function () {                                                       // 3268\n                                                                     // 3269\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/method-update.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('method-update', {                                                                                // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    if (!this.formAttributes.meteormethod) {                                                                           // 10\n      throw new Error('When form type is \"method-update\", you must also provide a \"meteormethod\" attribute');          // 11\n    }                                                                                                                  // 12\n                                                                                                                       // 13\n    // Run \"before.method\" hooks                                                                                       // 14\n    this.runBeforeHooks(this.updateDoc, function (updateDoc) {                                                         // 15\n      // Validate. If both schema and collection were provided, then we validate                                       // 16\n      // against the collection schema here. Otherwise we validate against whichever                                   // 17\n      // one was passed.                                                                                               // 18\n      var valid = (c.formAttributes.validation === 'none') ||                                                          // 19\n          c.formTypeDefinition.validateForm.call({                                                                     // 20\n            form: c.formAttributes,                                                                                    // 21\n            formDoc: updateDoc,                                                                                        // 22\n            useCollectionSchema: c.ssIsOverride                                                                        // 23\n          });                                                                                                          // 24\n                                                                                                                       // 25\n      if (valid === false) {                                                                                           // 26\n        c.failedValidation();                                                                                          // 27\n      } else {                                                                                                         // 28\n        // Call the method. If a ddp connection was provided, use                                                      // 29\n        // that instead of the default Meteor connection                                                               // 30\n        var ddp = c.formAttributes.ddp;                                                                                // 31\n        if (ddp && ddp.call && typeof ddp.call === 'function') {                                                       // 32\n          ddp.call(c.formAttributes.meteormethod, updateDoc, c.docId, c.result);                                       // 33\n        } else {                                                                                                       // 34\n          Meteor.call(c.formAttributes.meteormethod, updateDoc, c.docId, c.result);                                    // 35\n        }                                                                                                              // 36\n      }                                                                                                                // 37\n    });                                                                                                                // 38\n  },                                                                                                                   // 39\n  usesModifier: true,                                                                                                  // 40\n  validateForm: function () {                                                                                          // 41\n    // Get SimpleSchema                                                                                                // 42\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 43\n                                                                                                                       // 44\n    var collection = AutoForm.getFormCollection(this.form.id);                                                         // 45\n    // If there is a `schema` attribute but you want to force validation against the                                   // 46\n    // collection's schema instead, pass useCollectionSchema=true                                                      // 47\n    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;                                    // 48\n                                                                                                                       // 49\n    // We validate the modifier. We don't want to throw errors about missing required fields, etc.                     // 50\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);                                 // 51\n  },                                                                                                                   // 52\n  shouldPrevalidate: function () {                                                                                     // 53\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 54\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 55\n  }                                                                                                                    // 56\n});                                                                                                                    // 57\n                                                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3335\n}).call(this);                                                       // 3336\n                                                                     // 3337\n                                                                     // 3338\n                                                                     // 3339\n                                                                     // 3340\n                                                                     // 3341\n                                                                     // 3342\n(function () {                                                       // 3343\n                                                                     // 3344\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/normal.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, Hooks */                                                                                           // 1\n                                                                                                                       // 2\nAutoForm.addFormType('normal', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Get onSubmit hooks                                                                                              // 7\n    // These are called differently from the before hooks because                                                      // 8\n    // they run async, but they can run in parallel and we need the                                                    // 9\n    // result of all of them immediately because they can return                                                       // 10\n    // false to stop normal form submission.                                                                           // 11\n    var hooks = Hooks.getHooks(this.formId, 'onSubmit');                                                               // 12\n                                                                                                                       // 13\n    var hookCount = hooks.length, doneCount = 0, submitError, submitResult;                                            // 14\n                                                                                                                       // 15\n    if (hookCount === 0) {                                                                                             // 16\n      // we haven't called preventDefault, so normal browser                                                           // 17\n      // submission will now happen                                                                                    // 18\n      this.endSubmission();                                                                                            // 19\n      return;                                                                                                          // 20\n    }                                                                                                                  // 21\n                                                                                                                       // 22\n    // Set up onSubmit hook context                                                                                    // 23\n    var ctx = _.extend({                                                                                               // 24\n      done: function (error, result) {                                                                                 // 25\n        doneCount++;                                                                                                   // 26\n        if (!submitError && error) {                                                                                   // 27\n          submitError = error;                                                                                         // 28\n        }                                                                                                              // 29\n        if (!submitResult && result) {                                                                                 // 30\n          submitResult = result;                                                                                       // 31\n        }                                                                                                              // 32\n        if (doneCount === hookCount) {                                                                                 // 33\n          // run onError, onSuccess, endSubmit                                                                         // 34\n          c.result(submitError, submitResult);                                                                         // 35\n        }                                                                                                              // 36\n      }                                                                                                                // 37\n    }, this.hookContext);                                                                                              // 38\n                                                                                                                       // 39\n    // Call all hooks at once.                                                                                         // 40\n    // Pass both types of doc plus the doc attached to the form.                                                       // 41\n    // If any return false, we stop normal submission, but we don't                                                    // 42\n    // run onError, onSuccess, endSubmit hooks until they all call this.done().                                        // 43\n    var shouldStop = false;                                                                                            // 44\n    _.each(hooks, function eachOnSubmit(hook) {                                                                        // 45\n      var result = hook.call(ctx, c.insertDoc, c.updateDoc, c.currentDoc);                                             // 46\n      if (shouldStop === false && result === false) {                                                                  // 47\n        shouldStop = true;                                                                                             // 48\n      }                                                                                                                // 49\n    });                                                                                                                // 50\n    if (shouldStop) {                                                                                                  // 51\n      this.event.preventDefault();                                                                                     // 52\n      this.event.stopPropagation();                                                                                    // 53\n      this.endSubmission();                                                                                            // 54\n    }                                                                                                                  // 55\n  },                                                                                                                   // 56\n  needsModifierAndDoc: true,                                                                                           // 57\n  validateForm: function () {                                                                                          // 58\n    // Get SimpleSchema                                                                                                // 59\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 60\n    // Validate                                                                                                        // 61\n    return AutoForm._validateFormDoc(this.formDoc.insertDoc, false, this.form.id, ss, this.form);                      // 62\n  }                                                                                                                    // 63\n});                                                                                                                    // 64\n                                                                                                                       // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3417\n}).call(this);                                                       // 3418\n                                                                     // 3419\n                                                                     // 3420\n                                                                     // 3421\n                                                                     // 3422\n                                                                     // 3423\n                                                                     // 3424\n(function () {                                                       // 3425\n                                                                     // 3426\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/readonly.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('readonly', {                                                                                     // 3\n  onSubmit: function () {                                                                                              // 4\n    // Prevent browser form submission                                                                                 // 5\n    this.event.preventDefault();                                                                                       // 6\n    // Nothing else                                                                                                    // 7\n  },                                                                                                                   // 8\n  validateForm: function () {                                                                                          // 9\n    // Always valid                                                                                                    // 10\n    return true;                                                                                                       // 11\n  },                                                                                                                   // 12\n  adjustInputContext: function (ctx) {                                                                                 // 13\n    ctx.atts.readonly = \"\";                                                                                            // 14\n    return ctx;                                                                                                        // 15\n  },                                                                                                                   // 16\n  hideArrayItemButtons: true                                                                                           // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3453\n}).call(this);                                                       // 3454\n                                                                     // 3455\n                                                                     // 3456\n                                                                     // 3457\n                                                                     // 3458\n                                                                     // 3459\n                                                                     // 3460\n(function () {                                                       // 3461\n                                                                     // 3462\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/disabled.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('disabled', {                                                                                     // 3\n  onSubmit: function () {                                                                                              // 4\n    // Prevent browser form submission                                                                                 // 5\n    this.event.preventDefault();                                                                                       // 6\n    // Nothing else                                                                                                    // 7\n  },                                                                                                                   // 8\n  validateForm: function () {                                                                                          // 9\n    // Always valid                                                                                                    // 10\n    return true;                                                                                                       // 11\n  },                                                                                                                   // 12\n  adjustInputContext: function (ctx) {                                                                                 // 13\n    ctx.atts.disabled = \"\";                                                                                            // 14\n    return ctx;                                                                                                        // 15\n  },                                                                                                                   // 16\n  hideArrayItemButtons: true                                                                                           // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3489\n}).call(this);                                                       // 3490\n                                                                     // 3491\n                                                                     // 3492\n                                                                     // 3493\n                                                                     // 3494\n                                                                     // 3495\n                                                                     // 3496\n(function () {                                                       // 3497\n                                                                     // 3498\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/value-converters.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * The conversion functions in this file can be used by input types to convert their outgoing values into the data type expected by the schema\n */                                                                                                                    // 3\n                                                                                                                       // 4\nAutoForm.valueConverters = {                                                                                           // 5\n  booleanToString: function booleanToString(val) {                                                                     // 6\n    if (val === true) {                                                                                                // 7\n      return \"TRUE\";                                                                                                   // 8\n    } else if (val === false) {                                                                                        // 9\n      return \"FALSE\";                                                                                                  // 10\n    }                                                                                                                  // 11\n    return val;                                                                                                        // 12\n  },                                                                                                                   // 13\n  booleanToStringArray: function booleanToStringArray(val) {                                                           // 14\n    if (val === true) {                                                                                                // 15\n      return [\"TRUE\"];                                                                                                 // 16\n    } else if (val === false) {                                                                                        // 17\n      return [\"FALSE\"];                                                                                                // 18\n    }                                                                                                                  // 19\n    return val;                                                                                                        // 20\n  },                                                                                                                   // 21\n  booleanToNumber: function booleanToNumber(val) {                                                                     // 22\n    if (val === true) {                                                                                                // 23\n      return 1;                                                                                                        // 24\n    } else if (val === false) {                                                                                        // 25\n      return 0;                                                                                                        // 26\n    }                                                                                                                  // 27\n    return val;                                                                                                        // 28\n  },                                                                                                                   // 29\n  booleanToNumberArray: function booleanToNumberArray(val) {                                                           // 30\n    if (val === true) {                                                                                                // 31\n      return [1];                                                                                                      // 32\n    } else if (val === false) {                                                                                        // 33\n      return [0];                                                                                                      // 34\n    }                                                                                                                  // 35\n    return val;                                                                                                        // 36\n  },                                                                                                                   // 37\n  /**                                                                                                                  // 38\n   * @method  AutoForm.valueConverters.dateToDateString                                                                // 39\n   * @private                                                                                                          // 40\n   * @param  {Date} date                                                                                               // 41\n   * @return {String}                                                                                                  // 42\n   *                                                                                                                   // 43\n   * Returns a \"valid date string\" representing the local date.                                                        // 44\n   */                                                                                                                  // 45\n  dateToDateString: function dateToDateString(val) {                                                                   // 46\n    return (val instanceof Date) ? moment(val).format(\"YYYY-MM-DD\") : val;                                             // 47\n  },                                                                                                                   // 48\n  /**                                                                                                                  // 49\n   * @method  AutoForm.valueConverters.dateToDateStringUTC                                                             // 50\n   * @private                                                                                                          // 51\n   * @param  {Date} date                                                                                               // 52\n   * @return {String}                                                                                                  // 53\n   *                                                                                                                   // 54\n   * Returns a \"valid date string\" representing the date converted to the UTC time zone.                               // 55\n   */                                                                                                                  // 56\n  dateToDateStringUTC: function dateToDateStringUTC(val) {                                                             // 57\n    return (val instanceof Date) ? moment.utc(val).format(\"YYYY-MM-DD\") : val;                                         // 58\n  },                                                                                                                   // 59\n  dateToDateStringUTCArray: function dateToDateStringUTCArray(val) {                                                   // 60\n    if (val instanceof Date) {                                                                                         // 61\n      return [AutoForm.valueConverters.dateToDateStringUTC(val)];                                                      // 62\n    }                                                                                                                  // 63\n    return val;                                                                                                        // 64\n  },                                                                                                                   // 65\n  /**                                                                                                                  // 66\n   * @method  AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString                                // 67\n   * @private                                                                                                          // 68\n   * @param  {Date} date                                                                                               // 69\n   * @return {String}                                                                                                  // 70\n   *                                                                                                                   // 71\n   * Returns a \"valid normalized forced-UTC global date and time string\" representing the time                         // 72\n   * converted to the UTC time zone and expressed as the shortest possible string for the given                        // 73\n   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).            // 74\n   *                                                                                                                   // 75\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string\n   */                                                                                                                  // 78\n  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(val) {   // 79\n    return (val instanceof Date) ? moment(val).utc().format(\"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\") : val;                     // 80\n  },                                                                                                                   // 81\n  dateToNormalizedForcedUtcGlobalDateAndTimeStringArray: function dateToNormalizedForcedUtcGlobalDateAndTimeStringArray(val) {\n    if (val instanceof Date) {                                                                                         // 83\n      return [AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];                         // 84\n    }                                                                                                                  // 85\n    return val;                                                                                                        // 86\n  },                                                                                                                   // 87\n  /**                                                                                                                  // 88\n   * @method AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString                                           // 89\n   * @private                                                                                                          // 90\n   * @param {Date} date The Date object                                                                                // 91\n   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., \"America/Los_Angeles\"     // 92\n   * @return {String}                                                                                                  // 93\n   *                                                                                                                   // 94\n   * Returns a \"valid normalized local date and time string\".                                                          // 95\n   */                                                                                                                  // 96\n  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {          // 97\n    var m = moment(date);                                                                                              // 98\n    // by default, we assume local timezone; add moment-timezone to app and pass timezoneId                            // 99\n    // to use a different timezone                                                                                     // 100\n    if (typeof timezoneId === \"string\") {                                                                              // 101\n      if (typeof m.tz !== \"function\") {                                                                                // 102\n        throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n      }                                                                                                                // 104\n      m.tz(timezoneId);                                                                                                // 105\n    }                                                                                                                  // 106\n    return m.format(\"YYYY-MM-DD[T]HH:mm:ss.SSS\");                                                                      // 107\n  },                                                                                                                   // 108\n  dateToNumber: function dateToNumber(val) {                                                                           // 109\n    return (val instanceof Date) ? val.getTime() : val;                                                                // 110\n  },                                                                                                                   // 111\n  dateToNumberArray: function dateToNumberArray(val) {                                                                 // 112\n    if (val instanceof Date) {                                                                                         // 113\n      return [val.getTime()];                                                                                          // 114\n    }                                                                                                                  // 115\n    return val;                                                                                                        // 116\n  },                                                                                                                   // 117\n  dateToDateArray: function dateToDateArray(val) {                                                                     // 118\n    if (val instanceof Date) {                                                                                         // 119\n      return [val];                                                                                                    // 120\n    }                                                                                                                  // 121\n    return val;                                                                                                        // 122\n  },                                                                                                                   // 123\n  stringToStringArray: function stringToStringArray(val) {                                                             // 124\n    if (typeof val === \"string\") {                                                                                     // 125\n      val = val.split(\",\");                                                                                            // 126\n      return _.map(val, function (item) {                                                                              // 127\n        return $.trim(item);                                                                                           // 128\n      });                                                                                                              // 129\n    }                                                                                                                  // 130\n    return val;                                                                                                        // 131\n  },                                                                                                                   // 132\n  /**                                                                                                                  // 133\n   * @method AutoForm.valueConverters.stringToNumber                                                                   // 134\n   * @public                                                                                                           // 135\n   * @param {String} val A string or null or undefined.                                                                // 136\n   * @return {Number|String} The string converted to a Number or the original value.                                   // 137\n   *                                                                                                                   // 138\n   * For strings, returns Number(val) unless the result is NaN. Otherwise returns val.                                 // 139\n   */                                                                                                                  // 140\n  stringToNumber: function stringToNumber(val) {                                                                       // 141\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 142\n      var numVal = Number(val);                                                                                        // 143\n      if (!isNaN(numVal)) {                                                                                            // 144\n        return numVal;                                                                                                 // 145\n      }                                                                                                                // 146\n    }                                                                                                                  // 147\n    return val;                                                                                                        // 148\n  },                                                                                                                   // 149\n  stringToNumberArray: function stringToNumberArray(val) {                                                             // 150\n    if (typeof val === \"string\") {                                                                                     // 151\n      val = val.split(\",\");                                                                                            // 152\n      return _.map(val, function (item) {                                                                              // 153\n        item = $.trim(item);                                                                                           // 154\n        return AutoForm.valueConverters.stringToNumber(item);                                                          // 155\n      });                                                                                                              // 156\n    }                                                                                                                  // 157\n    return val;                                                                                                        // 158\n  },                                                                                                                   // 159\n  /**                                                                                                                  // 160\n   * @method AutoForm.valueConverters.stringToBoolean                                                                  // 161\n   * @private                                                                                                          // 162\n   * @param {String} val A string or null or undefined.                                                                // 163\n   * @return {Boolean|String} The string converted to a Boolean.                                                       // 164\n   *                                                                                                                   // 165\n   * If the string is \"true\" or \"1\", returns `true`. If the string is \"false\" or \"0\", returns `false`. Otherwise returns the original string.\n   */                                                                                                                  // 167\n  stringToBoolean: function stringToBoolean(val) {                                                                     // 168\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 169\n      var lval = val.toLowerCase();                                                                                    // 170\n      if (lval === \"true\" || lval === \"1\") {                                                                           // 171\n        return true;                                                                                                   // 172\n      } else if (lval === \"false\" || lval === \"0\") {                                                                   // 173\n        return false;                                                                                                  // 174\n      }                                                                                                                // 175\n    }                                                                                                                  // 176\n    return val;                                                                                                        // 177\n  },                                                                                                                   // 178\n  stringToBooleanArray: function stringToBooleanArray(val) {                                                           // 179\n    if (typeof val === \"string\") {                                                                                     // 180\n      val = val.split(\",\");                                                                                            // 181\n      return _.map(val, function (item) {                                                                              // 182\n        item = $.trim(item);                                                                                           // 183\n        return AutoForm.valueConverters.stringToBoolean(item);                                                         // 184\n      });                                                                                                              // 185\n    }                                                                                                                  // 186\n    return val;                                                                                                        // 187\n  },                                                                                                                   // 188\n  /**                                                                                                                  // 189\n   * @method AutoForm.valueConverters.stringToDate                                                                     // 190\n   * @private                                                                                                          // 191\n   * @param {String} val A string or null or undefined.                                                                // 192\n   * @return {Date|String} The string converted to a Date instance.                                                    // 193\n   *                                                                                                                   // 194\n   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.\n   */                                                                                                                  // 196\n  stringToDate: function stringToDate(val) {                                                                           // 197\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 198\n      return new Date(val);                                                                                            // 199\n    }                                                                                                                  // 200\n    return val;                                                                                                        // 201\n  },                                                                                                                   // 202\n  stringToDateArray: function stringToDateArray(val) {                                                                 // 203\n    if (typeof val === \"string\") {                                                                                     // 204\n      val = val.split(\",\");                                                                                            // 205\n      return _.map(val, function (item) {                                                                              // 206\n        item = $.trim(item);                                                                                           // 207\n        return AutoForm.valueConverters.stringToDate(item);                                                            // 208\n      });                                                                                                              // 209\n    }                                                                                                                  // 210\n    return val;                                                                                                        // 211\n  },                                                                                                                   // 212\n  numberToString: function numberToString(val) {                                                                       // 213\n    if (typeof val === \"number\") {                                                                                     // 214\n      return val.toString();                                                                                           // 215\n    }                                                                                                                  // 216\n    return val;                                                                                                        // 217\n  },                                                                                                                   // 218\n  numberToStringArray: function numberToStringArray(val) {                                                             // 219\n    if (typeof val === \"number\") {                                                                                     // 220\n      return [val.toString()];                                                                                         // 221\n    }                                                                                                                  // 222\n    return val;                                                                                                        // 223\n  },                                                                                                                   // 224\n  numberToNumberArray: function numberToNumberArray(val) {                                                             // 225\n    if (typeof val === \"number\") {                                                                                     // 226\n      return [val];                                                                                                    // 227\n    }                                                                                                                  // 228\n    return val;                                                                                                        // 229\n  },                                                                                                                   // 230\n  numberToBoolean: function numberToBoolean(val) {                                                                     // 231\n    if (val === 0) {                                                                                                   // 232\n      return false;                                                                                                    // 233\n    } else if (val === 1) {                                                                                            // 234\n      return true;                                                                                                     // 235\n    }                                                                                                                  // 236\n    return val;                                                                                                        // 237\n  },                                                                                                                   // 238\n  numberToBooleanArray: function numberToBooleanArray(val) {                                                           // 239\n    if (val === 0) {                                                                                                   // 240\n      return [false];                                                                                                  // 241\n    } else if (val === 1) {                                                                                            // 242\n      return [true];                                                                                                   // 243\n    }                                                                                                                  // 244\n    return val;                                                                                                        // 245\n  }                                                                                                                    // 246\n};                                                                                                                     // 247\n                                                                                                                       // 248\n// BACKWARDS COMPATIBILITY - some of these were formerly on the Utility object                                         // 249\nUtility.dateToDateString = AutoForm.valueConverters.dateToDateString;                                                  // 250\nUtility.dateToDateStringUTC = AutoForm.valueConverters.dateToDateStringUTC;                                            // 251\nUtility.dateToNormalizedForcedUtcGlobalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString;\nUtility.dateToNormalizedLocalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString;      // 253\nUtility.stringToBool = AutoForm.valueConverters.stringToBoolean;                                                       // 254\nUtility.stringToNumber = AutoForm.valueConverters.stringToNumber;                                                      // 255\nUtility.stringToDate = AutoForm.valueConverters.stringToDate;                                                          // 256\n                                                                                                                       // 257\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3763\n}).call(this);                                                       // 3764\n                                                                     // 3765\n                                                                     // 3766\n                                                                     // 3767\n                                                                     // 3768\n                                                                     // 3769\n                                                                     // 3770\n(function () {                                                       // 3771\n                                                                     // 3772\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-checkbox/template.boolean-checkbox.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckbox\");                                                                                    // 2\nTemplate[\"afCheckbox\"] = new Template(\"Template.afCheckbox\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5\n    type: \"checkbox\",                                                                                                  // 6\n    value: \"true\"                                                                                                      // 7\n  }, function() {                                                                                                      // 8\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 9\n  })), \" \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                         // 10\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 11\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 12\n    }));                                                                                                               // 13\n  })));                                                                                                                // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3796\n}).call(this);                                                       // 3797\n                                                                     // 3798\n                                                                     // 3799\n                                                                     // 3800\n                                                                     // 3801\n                                                                     // 3802\n                                                                     // 3803\n(function () {                                                       // 3804\n                                                                     // 3805\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-checkbox/boolean-checkbox.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-checkbox\", {                                                                            // 1\n  template: \"afCheckbox\",                                                                                              // 2\n  valueOut: function () {                                                                                              // 3\n    return !!this.is(\":checked\");                                                                                      // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": AutoForm.valueConverters.booleanToString,                                                                // 7\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,                                                      // 8\n    \"number\": AutoForm.valueConverters.booleanToNumber,                                                                // 9\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray                                                       // 10\n  },                                                                                                                   // 11\n  contextAdjust: function (context) {                                                                                  // 12\n    if (context.value === true) {                                                                                      // 13\n      context.atts.checked = \"\";                                                                                       // 14\n    }                                                                                                                  // 15\n    //don't add required attribute to checkboxes because some browsers assume that to mean that it must be checked, which is not what we mean by \"required\"\n    delete context.atts.required;                                                                                      // 17\n    return context;                                                                                                    // 18\n  }                                                                                                                    // 19\n});                                                                                                                    // 20\n                                                                                                                       // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3834\n}).call(this);                                                       // 3835\n                                                                     // 3836\n                                                                     // 3837\n                                                                     // 3838\n                                                                     // 3839\n                                                                     // 3840\n                                                                     // 3841\n(function () {                                                       // 3842\n                                                                     // 3843\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-radios/template.boolean-radios.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanRadioGroup\");                                                                           // 2\nTemplate[\"afBooleanRadioGroup\"] = new Template(\"Template.afBooleanRadioGroup\", (function() {                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 6\n  }), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                // 7\n    type: \"radio\",                                                                                                     // 8\n    value: \"false\",                                                                                                    // 9\n    name: function() {                                                                                                 // 10\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 11\n    }                                                                                                                  // 12\n  }, function() {                                                                                                      // 13\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));                                                           // 14\n  })), \" \", Spacebars.With(function() {                                                                                // 15\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));                                      // 16\n  }, function() {                                                                                                      // 17\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 18\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 19\n    });                                                                                                                // 20\n  }, function() {                                                                                                      // 21\n    return \"False\";                                                                                                    // 22\n  })), \"\\n    \"), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                    // 23\n    type: \"radio\",                                                                                                     // 24\n    value: \"true\",                                                                                                     // 25\n    name: function() {                                                                                                 // 26\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 27\n    }                                                                                                                  // 28\n  }, function() {                                                                                                      // 29\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));                                                            // 30\n  })), \" \", Spacebars.With(function() {                                                                                // 31\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));                                       // 32\n  }, function() {                                                                                                      // 33\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 34\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 35\n    });                                                                                                                // 36\n  }, function() {                                                                                                      // 37\n    return \"True\";                                                                                                     // 38\n  })), \"\\n    \"), \"\\n    \", Spacebars.With(function() {                                                                // 39\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));                                       // 40\n  }, function() {                                                                                                      // 41\n    return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                         // 42\n      type: \"radio\",                                                                                                   // 43\n      value: \"\",                                                                                                       // 44\n      name: function() {                                                                                               // 45\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"..\"), \"name\"));                                           // 46\n      }                                                                                                                // 47\n    }, function() {                                                                                                    // 48\n      return Spacebars.attrMustache(view.lookup(\"nullAtts\"));                                                          // 49\n    })), \" \", Blaze.View(\"lookup:.\", function() {                                                                      // 50\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 51\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 52\n  }), \"\\n  \");                                                                                                         // 53\n}));                                                                                                                   // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3906\n}).call(this);                                                       // 3907\n                                                                     // 3908\n                                                                     // 3909\n                                                                     // 3910\n                                                                     // 3911\n                                                                     // 3912\n                                                                     // 3913\n(function () {                                                       // 3914\n                                                                     // 3915\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-radios/boolean-radios.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-radios\", {                                                                              // 1\n  template: \"afBooleanRadioGroup\",                                                                                     // 2\n  valueOut: function () {                                                                                              // 3\n    if (this.find('input[value=false]').is(\":checked\")) {                                                              // 4\n      return false;                                                                                                    // 5\n    } else if (this.find('input[value=true]').is(\":checked\")) {                                                        // 6\n      return true;                                                                                                     // 7\n    }                                                                                                                  // 8\n  },                                                                                                                   // 9\n  valueConverters: {                                                                                                   // 10\n    \"string\": AutoForm.valueConverters.booleanToString,                                                                // 11\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,                                                      // 12\n    \"number\": AutoForm.valueConverters.booleanToNumber,                                                                // 13\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray                                                       // 14\n  }                                                                                                                    // 15\n});                                                                                                                    // 16\n                                                                                                                       // 17\nTemplate.afBooleanRadioGroup.helpers({                                                                                 // 18\n  falseAtts: function falseAtts() {                                                                                    // 19\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 20\n    if (this.value === false) {                                                                                        // 21\n      atts.checked = \"\";                                                                                               // 22\n    }                                                                                                                  // 23\n    return atts;                                                                                                       // 24\n  },                                                                                                                   // 25\n  trueAtts: function trueAtts() {                                                                                      // 26\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 27\n    if (this.value === true) {                                                                                         // 28\n      atts.checked = \"\";                                                                                               // 29\n    }                                                                                                                  // 30\n    return atts;                                                                                                       // 31\n  },                                                                                                                   // 32\n  nullAtts: function nullAtts() {                                                                                      // 33\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 34\n    if (this.value !== true && this.value !== false) {                                                                 // 35\n      atts.checked = \"\";                                                                                               // 36\n    }                                                                                                                  // 37\n    return atts;                                                                                                       // 38\n  },                                                                                                                   // 39\n  dsk: function () {                                                                                                   // 40\n    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 41\n  }                                                                                                                    // 42\n});                                                                                                                    // 43\n                                                                                                                       // 44\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3967\n}).call(this);                                                       // 3968\n                                                                     // 3969\n                                                                     // 3970\n                                                                     // 3971\n                                                                     // 3972\n                                                                     // 3973\n                                                                     // 3974\n(function () {                                                       // 3975\n                                                                     // 3976\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-select/template.boolean-select.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanSelect\");                                                                               // 2\nTemplate[\"afBooleanSelect\"] = new Template(\"Template.afBooleanSelect\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                             // 10\n      return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                                // 11\n    }), Blaze.View(\"lookup:..label\", function() {                                                                      // 12\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 13\n    })), \"\\n    \" ];                                                                                                   // 14\n  }), \"\\n  \");                                                                                                         // 15\n}));                                                                                                                   // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4001\n}).call(this);                                                       // 4002\n                                                                     // 4003\n                                                                     // 4004\n                                                                     // 4005\n                                                                     // 4006\n                                                                     // 4007\n                                                                     // 4008\n(function () {                                                       // 4009\n                                                                     // 4010\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-select/boolean-select.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-select\", {                                                                              // 1\n  template: \"afBooleanSelect\",                                                                                         // 2\n  valueOut: function () {                                                                                              // 3\n    var val = this.val();                                                                                              // 4\n    if (val === \"true\") {                                                                                              // 5\n      return true;                                                                                                     // 6\n    } else if (val === \"false\") {                                                                                      // 7\n      return false;                                                                                                    // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  valueConverters: {                                                                                                   // 11\n    \"string\": AutoForm.valueConverters.booleanToString,                                                                // 12\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,                                                      // 13\n    \"number\": AutoForm.valueConverters.booleanToNumber,                                                                // 14\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray                                                       // 15\n  },                                                                                                                   // 16\n  contextAdjust: function (context) {                                                                                  // 17\n    var atts = _.omit(context.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'firstOption');                            // 18\n                                                                                                                       // 19\n    // build items list                                                                                                // 20\n    context.items = [                                                                                                  // 21\n      {                                                                                                                // 22\n        name: context.name,                                                                                            // 23\n        value: \"\",                                                                                                     // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: \"\",                                                                                                       // 28\n        selected: (context.value !== false && context.value !== true),                                                 // 29\n        label: context.atts.nullLabel || context.atts.firstOption || \"(Select One)\",                                   // 30\n        atts: atts                                                                                                     // 31\n      },                                                                                                               // 32\n      {                                                                                                                // 33\n        name: context.name,                                                                                            // 34\n        value: \"false\",                                                                                                // 35\n        // _id must be included because it is a special property that                                                  // 36\n        // #each uses to track unique list items when adding and removing them                                         // 37\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 38\n        _id: \"false\",                                                                                                  // 39\n        selected: (context.value === false),                                                                           // 40\n        label: context.atts.falseLabel || \"False\",                                                                     // 41\n        atts: atts                                                                                                     // 42\n      },                                                                                                               // 43\n      {                                                                                                                // 44\n        name: context.name,                                                                                            // 45\n        value: \"true\",                                                                                                 // 46\n        // _id must be included because it is a special property that                                                  // 47\n        // #each uses to track unique list items when adding and removing them                                         // 48\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 49\n        _id: \"true\",                                                                                                   // 50\n        selected: (context.value === true),                                                                            // 51\n        label: context.atts.trueLabel || \"True\",                                                                       // 52\n        atts: atts                                                                                                     // 53\n      }                                                                                                                // 54\n    ];                                                                                                                 // 55\n                                                                                                                       // 56\n    return context;                                                                                                    // 57\n  }                                                                                                                    // 58\n});                                                                                                                    // 59\n                                                                                                                       // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4078\n}).call(this);                                                       // 4079\n                                                                     // 4080\n                                                                     // 4081\n                                                                     // 4082\n                                                                     // 4083\n                                                                     // 4084\n                                                                     // 4085\n(function () {                                                       // 4086\n                                                                     // 4087\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/button/template.button.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputButton\");                                                                                 // 2\nTemplate[\"afInputButton\"] = new Template(\"Template.afInputButton\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"button\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4109\n}).call(this);                                                       // 4110\n                                                                     // 4111\n                                                                     // 4112\n                                                                     // 4113\n                                                                     // 4114\n                                                                     // 4115\n                                                                     // 4116\n(function () {                                                       // 4117\n                                                                     // 4118\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/button/button.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"button\", {                                                                                      // 1\n  template: \"afInputButton\"                                                                                            // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4129\n}).call(this);                                                       // 4130\n                                                                     // 4131\n                                                                     // 4132\n                                                                     // 4133\n                                                                     // 4134\n                                                                     // 4135\n                                                                     // 4136\n(function () {                                                       // 4137\n                                                                     // 4138\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/color/template.color.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputColor\");                                                                                  // 2\nTemplate[\"afInputColor\"] = new Template(\"Template.afInputColor\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"color\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4160\n}).call(this);                                                       // 4161\n                                                                     // 4162\n                                                                     // 4163\n                                                                     // 4164\n                                                                     // 4165\n                                                                     // 4166\n                                                                     // 4167\n(function () {                                                       // 4168\n                                                                     // 4169\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/color/color.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"color\", {                                                                                       // 1\n  template: \"afInputColor\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4180\n}).call(this);                                                       // 4181\n                                                                     // 4182\n                                                                     // 4183\n                                                                     // 4184\n                                                                     // 4185\n                                                                     // 4186\n                                                                     // 4187\n(function () {                                                       // 4188\n                                                                     // 4189\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/contenteditable/template.contenteditable.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afContenteditable\");                                                                             // 2\nTemplate[\"afContenteditable\"] = new Template(\"Template.afContenteditable\", (function() {                               // 3\n  var view = this;                                                                                                     // 4\n  return [ Blaze.View(\"lookup:getValue\", function() {                                                                  // 5\n    return Spacebars.mustache(view.lookup(\"getValue\"), Spacebars.dot(view.lookup(\".\"), \"value\"));                      // 6\n  }), \"\\n  \", HTML.DIV(HTML.Attrs({                                                                                    // 7\n    contenteditable: \"true\"                                                                                            // 8\n  }, function() {                                                                                                      // 9\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 10\n  })) ];                                                                                                               // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4210\n}).call(this);                                                       // 4211\n                                                                     // 4212\n                                                                     // 4213\n                                                                     // 4214\n                                                                     // 4215\n                                                                     // 4216\n                                                                     // 4217\n(function () {                                                       // 4218\n                                                                     // 4219\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/contenteditable/contenteditable.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"contenteditable\", {                                                                             // 1\n  template: \"afContenteditable\",                                                                                       // 2\n  valueOut: function () {                                                                                              // 3\n    return this.html();                                                                                                // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts['data-maxlength'] === \"undefined\" && typeof context.max === \"number\") {                    // 7\n      context.atts['data-maxlength'] = context.max;                                                                    // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\nTemplate.afContenteditable.events({                                                                                    // 14\n  'blur div[contenteditable=true]': function (event, template) {                                                       // 15\n    template.$(event.target).change();                                                                                 // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\nTemplate.afContenteditable.helpers({                                                                                   // 20\n  getValue: function (value) {                                                                                         // 21\n    if(Template.instance().view.isRendered){                                                                           // 22\n      Template.instance().$('[contenteditable]').html(value);                                                          // 23\n    }                                                                                                                  // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4254\n}).call(this);                                                       // 4255\n                                                                     // 4256\n                                                                     // 4257\n                                                                     // 4258\n                                                                     // 4259\n                                                                     // 4260\n                                                                     // 4261\n(function () {                                                       // 4262\n                                                                     // 4263\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/date/template.date.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDate\");                                                                                   // 2\nTemplate[\"afInputDate\"] = new Template(\"Template.afInputDate\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"date\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4285\n}).call(this);                                                       // 4286\n                                                                     // 4287\n                                                                     // 4288\n                                                                     // 4289\n                                                                     // 4290\n                                                                     // 4291\n                                                                     // 4292\n(function () {                                                       // 4293\n                                                                     // 4294\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/date/date.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"date\", {                                                                                        // 1\n  template: \"afInputDate\",                                                                                             // 2\n  valueIn: function (val) {                                                                                            // 3\n    //convert Date to string value                                                                                     // 4\n    return AutoForm.valueConverters.dateToDateStringUTC(val);                                                          // 5\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    if (AutoForm.Utility.isValidDateString(val)) {                                                                     // 9\n      //Date constructor will interpret val as UTC and create                                                          // 10\n      //date at mignight in the morning of val date in UTC time zone                                                   // 11\n      return new Date(val);                                                                                            // 12\n    } else {                                                                                                           // 13\n      return null;                                                                                                     // 14\n    }                                                                                                                  // 15\n  },                                                                                                                   // 16\n  valueConverters: {                                                                                                   // 17\n    \"string\": AutoForm.valueConverters.dateToDateStringUTC,                                                            // 18\n    \"stringArray\": AutoForm.valueConverters.dateToDateStringUTCArray,                                                  // 19\n    \"number\": AutoForm.valueConverters.dateToNumber,                                                                   // 20\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,                                                         // 21\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray                                                              // 22\n  },                                                                                                                   // 23\n  contextAdjust: function (context) {                                                                                  // 24\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 25\n      context.atts.max = AutoForm.valueConverters.dateToDateStringUTC(context.max);                                    // 26\n    }                                                                                                                  // 27\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 28\n      context.atts.min = AutoForm.valueConverters.dateToDateStringUTC(context.min);                                    // 29\n    }                                                                                                                  // 30\n    return context;                                                                                                    // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\n                                                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4336\n}).call(this);                                                       // 4337\n                                                                     // 4338\n                                                                     // 4339\n                                                                     // 4340\n                                                                     // 4341\n                                                                     // 4342\n                                                                     // 4343\n(function () {                                                       // 4344\n                                                                     // 4345\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime/template.datetime.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTime\");                                                                               // 2\nTemplate[\"afInputDateTime\"] = new Template(\"Template.afInputDateTime\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4367\n}).call(this);                                                       // 4368\n                                                                     // 4369\n                                                                     // 4370\n                                                                     // 4371\n                                                                     // 4372\n                                                                     // 4373\n                                                                     // 4374\n(function () {                                                       // 4375\n                                                                     // 4376\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime/datetime.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"datetime\", {                                                                                    // 1\n  template: \"afInputDateTime\",                                                                                         // 2\n  valueIn: function (val) {                                                                                            // 3\n    //convert Date to string value                                                                                     // 4\n    return AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val);                             // 5\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;                                                    // 9\n    if (AutoForm.Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString(val)) {                                     // 10\n      //Date constructor will interpret val as UTC due to ending \"Z\"                                                   // 11\n      return new Date(val);                                                                                            // 12\n    } else {                                                                                                           // 13\n      return null;                                                                                                     // 14\n    }                                                                                                                  // 15\n  },                                                                                                                   // 16\n  valueConverters: {                                                                                                   // 17\n    \"string\": AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString,                               // 18\n    \"stringArray\": AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeStringArray,                     // 19\n    \"number\": AutoForm.valueConverters.dateToNumber,                                                                   // 20\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,                                                         // 21\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray                                                              // 22\n  },                                                                                                                   // 23\n  contextAdjust: function (context) {                                                                                  // 24\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 25\n      context.atts.max = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.max);       // 26\n    }                                                                                                                  // 27\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 28\n      context.atts.min = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.min);       // 29\n    }                                                                                                                  // 30\n    return context;                                                                                                    // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\n                                                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4418\n}).call(this);                                                       // 4419\n                                                                     // 4420\n                                                                     // 4421\n                                                                     // 4422\n                                                                     // 4423\n                                                                     // 4424\n                                                                     // 4425\n(function () {                                                       // 4426\n                                                                     // 4427\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime-local/template.datetime-local.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTimeLocal\");                                                                          // 2\nTemplate[\"afInputDateTimeLocal\"] = new Template(\"Template.afInputDateTimeLocal\", (function() {                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime-local\",                                                                                            // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4449\n}).call(this);                                                       // 4450\n                                                                     // 4451\n                                                                     // 4452\n                                                                     // 4453\n                                                                     // 4454\n                                                                     // 4455\n                                                                     // 4456\n(function () {                                                       // 4457\n                                                                     // 4458\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime-local/datetime-local.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"datetime-local\", {                                                                              // 1\n  template: \"afInputDateTimeLocal\",                                                                                    // 2\n  valueIn: function (val, atts) {                                                                                      // 3\n    //convert Date to string value                                                                                     // 4\n    return (val instanceof Date) ? AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, atts.timezoneId) : val;\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;                                                    // 9\n    if (AutoForm.Utility.isValidNormalizedLocalDateAndTimeString(val)) {                                               // 10\n      var timezoneId = this.attr(\"data-timezone-id\");                                                                  // 11\n      // default is local, but if there's a timezoneId, we use that                                                    // 12\n      if (typeof timezoneId === \"string\") {                                                                            // 13\n        if (typeof moment.tz !== \"function\") {                                                                         // 14\n          throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n        }                                                                                                              // 16\n        return moment.tz(val, timezoneId).toDate();                                                                    // 17\n      } else {                                                                                                         // 18\n        return moment(val).toDate();                                                                                   // 19\n      }                                                                                                                // 20\n    } else {                                                                                                           // 21\n      return this.val();                                                                                               // 22\n    }                                                                                                                  // 23\n  },                                                                                                                   // 24\n  valueConverters: {                                                                                                   // 25\n    \"string\": function dateToNormalizedLocalDateAndTimeString(val) {                                                   // 26\n      return (val instanceof Date) ? AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\")) : val;\n    },                                                                                                                 // 28\n    \"stringArray\": function dateToNormalizedLocalDateAndTimeStringArray(val) {                                         // 29\n      if (val instanceof Date) {                                                                                       // 30\n        return [AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\"))];  // 31\n      }                                                                                                                // 32\n      return val;                                                                                                      // 33\n    },                                                                                                                 // 34\n    \"number\": AutoForm.valueConverters.dateToNumber,                                                                   // 35\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,                                                         // 36\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray                                                              // 37\n  },                                                                                                                   // 38\n  contextAdjust: function (context) {                                                                                  // 39\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 40\n      context.atts.max = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(context.max, context.atts.timezoneId);\n    }                                                                                                                  // 42\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 43\n      context.atts.min = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(context.min, context.atts.timezoneId);\n    }                                                                                                                  // 45\n    if (context.atts.timezoneId) {                                                                                     // 46\n      context.atts[\"data-timezone-id\"] = context.atts.timezoneId;                                                      // 47\n    }                                                                                                                  // 48\n    delete context.atts.timezoneId;                                                                                    // 49\n    return context;                                                                                                    // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 52\n                                                                                                                       // 53\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4519\n}).call(this);                                                       // 4520\n                                                                     // 4521\n                                                                     // 4522\n                                                                     // 4523\n                                                                     // 4524\n                                                                     // 4525\n                                                                     // 4526\n(function () {                                                       // 4527\n                                                                     // 4528\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/email/template.email.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputEmail\");                                                                                  // 2\nTemplate[\"afInputEmail\"] = new Template(\"Template.afInputEmail\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"email\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4550\n}).call(this);                                                       // 4551\n                                                                     // 4552\n                                                                     // 4553\n                                                                     // 4554\n                                                                     // 4555\n                                                                     // 4556\n                                                                     // 4557\n(function () {                                                       // 4558\n                                                                     // 4559\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/email/email.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"email\", {                                                                                       // 1\n  template: \"afInputEmail\",                                                                                            // 2\n  contextAdjust: function (context) {                                                                                  // 3\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 4\n      context.atts.maxlength = context.max;                                                                            // 5\n    }                                                                                                                  // 6\n    return context;                                                                                                    // 7\n  }                                                                                                                    // 8\n});                                                                                                                    // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4576\n}).call(this);                                                       // 4577\n                                                                     // 4578\n                                                                     // 4579\n                                                                     // 4580\n                                                                     // 4581\n                                                                     // 4582\n                                                                     // 4583\n(function () {                                                       // 4584\n                                                                     // 4585\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/file/template.file.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputFile\");                                                                                   // 2\nTemplate[\"afInputFile\"] = new Template(\"Template.afInputFile\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"file\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4607\n}).call(this);                                                       // 4608\n                                                                     // 4609\n                                                                     // 4610\n                                                                     // 4611\n                                                                     // 4612\n                                                                     // 4613\n                                                                     // 4614\n(function () {                                                       // 4615\n                                                                     // 4616\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/file/file.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"file\", {                                                                                        // 1\n  template: \"afInputFile\"                                                                                              // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4627\n}).call(this);                                                       // 4628\n                                                                     // 4629\n                                                                     // 4630\n                                                                     // 4631\n                                                                     // 4632\n                                                                     // 4633\n                                                                     // 4634\n(function () {                                                       // 4635\n                                                                     // 4636\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/hidden/template.hidden.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputHidden\");                                                                                 // 2\nTemplate[\"afInputHidden\"] = new Template(\"Template.afInputHidden\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"hidden\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4658\n}).call(this);                                                       // 4659\n                                                                     // 4660\n                                                                     // 4661\n                                                                     // 4662\n                                                                     // 4663\n                                                                     // 4664\n                                                                     // 4665\n(function () {                                                       // 4666\n                                                                     // 4667\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/hidden/hidden.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"hidden\", {                                                                                      // 1\n  template: \"afInputHidden\",                                                                                           // 2\n  isHidden: true,                                                                                                      // 3\n  valueOut: function () {                                                                                              // 4\n    return this.val();                                                                                                 // 5\n  },                                                                                                                   // 6\n  valueConverters: {                                                                                                   // 7\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,                                                       // 8\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 9\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 10\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 11\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,                                                     // 12\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 13\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray                                                            // 14\n  }                                                                                                                    // 15\n});                                                                                                                    // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4692\n}).call(this);                                                       // 4693\n                                                                     // 4694\n                                                                     // 4695\n                                                                     // 4696\n                                                                     // 4697\n                                                                     // 4698\n                                                                     // 4699\n(function () {                                                       // 4700\n                                                                     // 4701\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/image/template.image.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputImage\");                                                                                  // 2\nTemplate[\"afInputImage\"] = new Template(\"Template.afInputImage\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"image\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4723\n}).call(this);                                                       // 4724\n                                                                     // 4725\n                                                                     // 4726\n                                                                     // 4727\n                                                                     // 4728\n                                                                     // 4729\n                                                                     // 4730\n(function () {                                                       // 4731\n                                                                     // 4732\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/image/image.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"image\", {                                                                                       // 1\n  template: \"afInputImage\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4743\n}).call(this);                                                       // 4744\n                                                                     // 4745\n                                                                     // 4746\n                                                                     // 4747\n                                                                     // 4748\n                                                                     // 4749\n                                                                     // 4750\n(function () {                                                       // 4751\n                                                                     // 4752\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/month/template.month.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputMonth\");                                                                                  // 2\nTemplate[\"afInputMonth\"] = new Template(\"Template.afInputMonth\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"month\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4774\n}).call(this);                                                       // 4775\n                                                                     // 4776\n                                                                     // 4777\n                                                                     // 4778\n                                                                     // 4779\n                                                                     // 4780\n                                                                     // 4781\n(function () {                                                       // 4782\n                                                                     // 4783\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/month/month.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"month\", {                                                                                       // 1\n  template: \"afInputMonth\",                                                                                            // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  }                                                                                                                    // 5\n});                                                                                                                    // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4798\n}).call(this);                                                       // 4799\n                                                                     // 4800\n                                                                     // 4801\n                                                                     // 4802\n                                                                     // 4803\n                                                                     // 4804\n                                                                     // 4805\n(function () {                                                       // 4806\n                                                                     // 4807\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/number/template.number.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputNumber\");                                                                                 // 2\nTemplate[\"afInputNumber\"] = new Template(\"Template.afInputNumber\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"number\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4829\n}).call(this);                                                       // 4830\n                                                                     // 4831\n                                                                     // 4832\n                                                                     // 4833\n                                                                     // 4834\n                                                                     // 4835\n                                                                     // 4836\n(function () {                                                       // 4837\n                                                                     // 4838\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/number/number.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"number\", {                                                                                      // 1\n  template: \"afInputNumber\",                                                                                           // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.valueConverters.stringToNumber(this.val());                                                        // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": AutoForm.valueConverters.numberToString,                                                                 // 7\n    \"stringArray\": AutoForm.valueConverters.numberToStringArray,                                                       // 8\n    \"numberArray\": AutoForm.valueConverters.numberToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.numberToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.numberToBooleanArray                                                      // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    if (typeof context.atts.max === \"undefined\" && typeof context.max === \"number\") {                                  // 14\n      context.atts.max = context.max;                                                                                  // 15\n    }                                                                                                                  // 16\n    if (typeof context.atts.min === \"undefined\" && typeof context.min === \"number\") {                                  // 17\n      context.atts.min = context.min;                                                                                  // 18\n    }                                                                                                                  // 19\n    if (typeof context.atts.step === \"undefined\" && context.decimal) {                                                 // 20\n      context.atts.step = '0.01';                                                                                      // 21\n    }                                                                                                                  // 22\n    return context;                                                                                                    // 23\n  }                                                                                                                    // 24\n});                                                                                                                    // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4872\n}).call(this);                                                       // 4873\n                                                                     // 4874\n                                                                     // 4875\n                                                                     // 4876\n                                                                     // 4877\n                                                                     // 4878\n                                                                     // 4879\n(function () {                                                       // 4880\n                                                                     // 4881\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/password/template.password.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputPassword\");                                                                               // 2\nTemplate[\"afInputPassword\"] = new Template(\"Template.afInputPassword\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"password\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4903\n}).call(this);                                                       // 4904\n                                                                     // 4905\n                                                                     // 4906\n                                                                     // 4907\n                                                                     // 4908\n                                                                     // 4909\n                                                                     // 4910\n(function () {                                                       // 4911\n                                                                     // 4912\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/password/password.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"password\", {                                                                                    // 1\n  template: \"afInputPassword\",                                                                                         // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4933\n}).call(this);                                                       // 4934\n                                                                     // 4935\n                                                                     // 4936\n                                                                     // 4937\n                                                                     // 4938\n                                                                     // 4939\n                                                                     // 4940\n(function () {                                                       // 4941\n                                                                     // 4942\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/radio/template.radio.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadio\");                                                                                       // 2\nTemplate[\"afRadio\"] = new Template(\"Template.afRadio\", (function() {                                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5\n    type: \"checkbox\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 11\n  })), \" \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                         // 12\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 13\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 14\n    }));                                                                                                               // 15\n  })));                                                                                                                // 16\n}));                                                                                                                   // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4968\n}).call(this);                                                       // 4969\n                                                                     // 4970\n                                                                     // 4971\n                                                                     // 4972\n                                                                     // 4973\n                                                                     // 4974\n                                                                     // 4975\n(function () {                                                       // 4976\n                                                                     // 4977\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/radio/radio.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"radio\", {                                                                                       // 1\n  template: \"afRadio\",                                                                                                 // 2\n  valueOut: function () {                                                                                              // 3\n    if (this.is(\":checked\")) {                                                                                         // 4\n      return this.val();                                                                                               // 5\n    }                                                                                                                  // 6\n  },                                                                                                                   // 7\n  valueConverters: {                                                                                                   // 8\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n                                                                                                                       // 12\nTemplate[\"afRadio\"].helpers({                                                                                          // 13\n  atts: function selectedAttsAdjust() {                                                                                // 14\n    var atts = _.clone(this.atts);                                                                                     // 15\n    if (this.selected) {                                                                                               // 16\n      atts.checked = \"\";                                                                                               // 17\n    }                                                                                                                  // 18\n    return atts;                                                                                                       // 19\n  }                                                                                                                    // 20\n});                                                                                                                    // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5007\n}).call(this);                                                       // 5008\n                                                                     // 5009\n                                                                     // 5010\n                                                                     // 5011\n                                                                     // 5012\n                                                                     // 5013\n                                                                     // 5014\n(function () {                                                       // 5015\n                                                                     // 5016\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/range/template.range.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputRange\");                                                                                  // 2\nTemplate[\"afInputRange\"] = new Template(\"Template.afInputRange\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"range\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5038\n}).call(this);                                                       // 5039\n                                                                     // 5040\n                                                                     // 5041\n                                                                     // 5042\n                                                                     // 5043\n                                                                     // 5044\n                                                                     // 5045\n(function () {                                                       // 5046\n                                                                     // 5047\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/range/range.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"range\", {                                                                                       // 1\n  template: \"afInputRange\",                                                                                            // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.valueConverters.stringToNumber(this.val());                                                        // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": AutoForm.valueConverters.numberToString,                                                                 // 7\n    \"stringArray\": AutoForm.valueConverters.numberToStringArray,                                                       // 8\n    \"numberArray\": AutoForm.valueConverters.numberToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.numberToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.numberToBooleanArray                                                      // 11\n  }                                                                                                                    // 12\n});                                                                                                                    // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5069\n}).call(this);                                                       // 5070\n                                                                     // 5071\n                                                                     // 5072\n                                                                     // 5073\n                                                                     // 5074\n                                                                     // 5075\n                                                                     // 5076\n(function () {                                                       // 5077\n                                                                     // 5078\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/reset/template.reset.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputReset\");                                                                                  // 2\nTemplate[\"afInputReset\"] = new Template(\"Template.afInputReset\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"reset\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5100\n}).call(this);                                                       // 5101\n                                                                     // 5102\n                                                                     // 5103\n                                                                     // 5104\n                                                                     // 5105\n                                                                     // 5106\n                                                                     // 5107\n(function () {                                                       // 5108\n                                                                     // 5109\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/reset/reset.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"reset\", {                                                                                       // 1\n  template: \"afInputReset\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5120\n}).call(this);                                                       // 5121\n                                                                     // 5122\n                                                                     // 5123\n                                                                     // 5124\n                                                                     // 5125\n                                                                     // 5126\n                                                                     // 5127\n(function () {                                                       // 5128\n                                                                     // 5129\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/search/template.search.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSearch\");                                                                                 // 2\nTemplate[\"afInputSearch\"] = new Template(\"Template.afInputSearch\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"search\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5151\n}).call(this);                                                       // 5152\n                                                                     // 5153\n                                                                     // 5154\n                                                                     // 5155\n                                                                     // 5156\n                                                                     // 5157\n                                                                     // 5158\n(function () {                                                       // 5159\n                                                                     // 5160\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/search/search.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"search\", {                                                                                      // 1\n  template: \"afInputSearch\",                                                                                           // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5181\n}).call(this);                                                       // 5182\n                                                                     // 5183\n                                                                     // 5184\n                                                                     // 5185\n                                                                     // 5186\n                                                                     // 5187\n                                                                     // 5188\n(function () {                                                       // 5189\n                                                                     // 5190\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select/template.select.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelect\");                                                                                      // 2\nTemplate[\"afSelect\"] = new Template(\"Template.afSelect\", (function() {                                                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 10\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 13\n        label: function() {                                                                                            // 14\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 15\n        }                                                                                                              // 16\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 17\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 20\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 21\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 22\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 23\n        })), \"\\n        \" ];                                                                                           // 24\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 25\n    }, function() {                                                                                                    // 26\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 27\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 28\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 29\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 30\n      })), \"\\n      \" ];                                                                                               // 31\n    }), \"\\n    \" ];                                                                                                    // 32\n  }), \"\\n  \");                                                                                                         // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5233\n}).call(this);                                                       // 5234\n                                                                     // 5235\n                                                                     // 5236\n                                                                     // 5237\n                                                                     // 5238\n                                                                     // 5239\n                                                                     // 5240\n(function () {                                                       // 5241\n                                                                     // 5242\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select/select.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select\", {                                                                                      // 1\n  template: \"afSelect\",                                                                                                // 2\n  valueOut: function () {                                                                                              // 3\n    return this.val();                                                                                                 // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,                                                       // 7\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 8\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,                                                     // 11\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 12\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray                                                            // 13\n  },                                                                                                                   // 14\n  contextAdjust: function (context) {                                                                                  // 15\n    //can fix issues with some browsers selecting the firstOption instead of the selected option                       // 16\n    context.atts.autocomplete = \"off\";                                                                                 // 17\n                                                                                                                       // 18\n    var itemAtts = _.omit(context.atts, 'firstOption');                                                                // 19\n    var firstOption = context.atts.firstOption;                                                                        // 20\n                                                                                                                       // 21\n    // build items list                                                                                                // 22\n    context.items = [];                                                                                                // 23\n                                                                                                                       // 24\n    // If a firstOption was provided, add that to the items list first                                                 // 25\n    if (firstOption !== false) {                                                                                       // 26\n      context.items.push({                                                                                             // 27\n        name: context.name,                                                                                            // 28\n        label: (typeof firstOption === \"string\" ? firstOption : \"(Select One)\"),                                       // 29\n        value: \"\",                                                                                                     // 30\n        // _id must be included because it is a special property that                                                  // 31\n        // #each uses to track unique list items when adding and removing them                                         // 32\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 33\n        //                                                                                                             // 34\n        // Setting this to an empty string caused problems if option with value                                        // 35\n        // 1 was in the options list because Spacebars evaluates \"\" to 1 and                                           // 36\n        // considers that a duplicate.                                                                                 // 37\n        // See https://github.com/aldeed/meteor-autoform/issues/656                                                    // 38\n        _id: \"AUTOFORM_EMPTY_FIRST_OPTION\",                                                                            // 39\n        selected: false,                                                                                               // 40\n        atts: itemAtts                                                                                                 // 41\n      });                                                                                                              // 42\n    }                                                                                                                  // 43\n                                                                                                                       // 44\n    // Add all defined options                                                                                         // 45\n    _.each(context.selectOptions, function(opt) {                                                                      // 46\n      if (opt.optgroup) {                                                                                              // 47\n        var subItems = _.map(opt.options, function(subOpt) {                                                           // 48\n          return {                                                                                                     // 49\n            name: context.name,                                                                                        // 50\n            label: subOpt.label,                                                                                       // 51\n            value: subOpt.value,                                                                                       // 52\n            htmlAtts: _.omit(subOpt, 'label', 'value'),                                                                // 53\n            // _id must be included because it is a special property that                                              // 54\n            // #each uses to track unique list items when adding and removing them                                     // 55\n            // See https://github.com/meteor/meteor/issues/2174                                                        // 56\n            //                                                                                                         // 57\n            // The toString() is necessary because otherwise Spacebars evaluates                                       // 58\n            // any string to 1 if the other values are numbers, and then considers                                     // 59\n            // that a duplicate.                                                                                       // 60\n            // See https://github.com/aldeed/meteor-autoform/issues/656                                                // 61\n            _id: subOpt.value.toString(),                                                                              // 62\n            selected: (subOpt.value === context.value),                                                                // 63\n            atts: itemAtts                                                                                             // 64\n          };                                                                                                           // 65\n        });                                                                                                            // 66\n        context.items.push({                                                                                           // 67\n          optgroup: opt.optgroup,                                                                                      // 68\n          items: subItems                                                                                              // 69\n        });                                                                                                            // 70\n      } else {                                                                                                         // 71\n        context.items.push({                                                                                           // 72\n          name: context.name,                                                                                          // 73\n          label: opt.label,                                                                                            // 74\n          value: opt.value,                                                                                            // 75\n          htmlAtts: _.omit(opt, 'label', 'value'),                                                                     // 76\n          // _id must be included because it is a special property that                                                // 77\n          // #each uses to track unique list items when adding and removing them                                       // 78\n          // See https://github.com/meteor/meteor/issues/2174                                                          // 79\n          //                                                                                                           // 80\n          // The toString() is necessary because otherwise Spacebars evaluates                                         // 81\n          // any string to 1 if the other values are numbers, and then considers                                       // 82\n          // that a duplicate.                                                                                         // 83\n          // See https://github.com/aldeed/meteor-autoform/issues/656                                                  // 84\n          _id: opt.value.toString(),                                                                                   // 85\n          selected: (opt.value === context.value),                                                                     // 86\n          atts: itemAtts                                                                                               // 87\n        });                                                                                                            // 88\n      }                                                                                                                // 89\n    });                                                                                                                // 90\n                                                                                                                       // 91\n    return context;                                                                                                    // 92\n  }                                                                                                                    // 93\n});                                                                                                                    // 94\n                                                                                                                       // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5345\n}).call(this);                                                       // 5346\n                                                                     // 5347\n                                                                     // 5348\n                                                                     // 5349\n                                                                     // 5350\n                                                                     // 5351\n                                                                     // 5352\n(function () {                                                       // 5353\n                                                                     // 5354\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox/template.select-checkbox.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroup\");                                                                               // 2\nTemplate[\"afCheckboxGroup\"] = new Template(\"Template.afCheckboxGroup\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                   // 12\n      type: \"checkbox\",                                                                                                // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    }))), \"\\n    \" ];                                                                                                  // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5386\n}).call(this);                                                       // 5387\n                                                                     // 5388\n                                                                     // 5389\n                                                                     // 5390\n                                                                     // 5391\n                                                                     // 5392\n                                                                     // 5393\n(function () {                                                       // 5394\n                                                                     // 5395\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox/select-checkbox.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-checkbox\", {                                                                             // 1\n  template: \"afCheckboxGroup\",                                                                                         // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    var val = [];                                                                                                      // 5\n    this.find('input[type=checkbox]').each(function () {                                                               // 6\n      if ($(this).is(\":checked\")) {                                                                                    // 7\n        val.push($(this).val());                                                                                       // 8\n      }                                                                                                                // 9\n    });                                                                                                                // 10\n    return val;                                                                                                        // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    var itemAtts = _.omit(context.atts);                                                                               // 14\n                                                                                                                       // 15\n    // build items list                                                                                                // 16\n    context.items = [];                                                                                                // 17\n                                                                                                                       // 18\n    // Add all defined options                                                                                         // 19\n    _.each(context.selectOptions, function(opt) {                                                                      // 20\n      context.items.push({                                                                                             // 21\n        name: context.name,                                                                                            // 22\n        label: opt.label,                                                                                              // 23\n        value: opt.value,                                                                                              // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: opt.value,                                                                                                // 28\n        selected: (_.contains(context.value, opt.value)),                                                              // 29\n        atts: itemAtts                                                                                                 // 30\n      });                                                                                                              // 31\n    });                                                                                                                // 32\n                                                                                                                       // 33\n    return context;                                                                                                    // 34\n  }                                                                                                                    // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\nTemplate.afCheckboxGroup.helpers({                                                                                     // 38\n  atts: function selectedAttsAdjust() {                                                                                // 39\n    var atts = _.clone(this.atts);                                                                                     // 40\n    if (this.selected) {                                                                                               // 41\n      atts.checked = \"\";                                                                                               // 42\n    }                                                                                                                  // 43\n    // remove data-schema-key attribute because we put it                                                              // 44\n    // on the entire group                                                                                             // 45\n    delete atts[\"data-schema-key\"];                                                                                    // 46\n    return atts;                                                                                                       // 47\n  },                                                                                                                   // 48\n  dsk: function dsk() {                                                                                                // 49\n    return {                                                                                                           // 50\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 51\n    }                                                                                                                  // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5458\n}).call(this);                                                       // 5459\n                                                                     // 5460\n                                                                     // 5461\n                                                                     // 5462\n                                                                     // 5463\n                                                                     // 5464\n                                                                     // 5465\n(function () {                                                       // 5466\n                                                                     // 5467\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroupInline\");                                                                         // 2\nTemplate[\"afCheckboxGroupInline\"] = new Template(\"Template.afCheckboxGroupInline\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                            // 12\n      type: \"checkbox\",                                                                                                // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    })), \"\\n    \" ];                                                                                                   // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5499\n}).call(this);                                                       // 5500\n                                                                     // 5501\n                                                                     // 5502\n                                                                     // 5503\n                                                                     // 5504\n                                                                     // 5505\n                                                                     // 5506\n(function () {                                                       // 5507\n                                                                     // 5508\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox-inline/select-checkbox-inline.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-checkbox-inline\", {                                                                      // 1\n  template: \"afCheckboxGroupInline\",                                                                                   // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    var val = [];                                                                                                      // 5\n    this.find('input[type=checkbox]').each(function () {                                                               // 6\n      if ($(this).is(\":checked\")) {                                                                                    // 7\n        val.push($(this).val());                                                                                       // 8\n      }                                                                                                                // 9\n    });                                                                                                                // 10\n    return val;                                                                                                        // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    var itemAtts = _.omit(context.atts);                                                                               // 14\n                                                                                                                       // 15\n    // build items list                                                                                                // 16\n    context.items = [];                                                                                                // 17\n                                                                                                                       // 18\n    // Add all defined options                                                                                         // 19\n    _.each(context.selectOptions, function(opt) {                                                                      // 20\n      context.items.push({                                                                                             // 21\n        name: context.name,                                                                                            // 22\n        label: opt.label,                                                                                              // 23\n        value: opt.value,                                                                                              // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: opt.value,                                                                                                // 28\n        selected: (_.contains(context.value, opt.value)),                                                              // 29\n        atts: itemAtts                                                                                                 // 30\n      });                                                                                                              // 31\n    });                                                                                                                // 32\n                                                                                                                       // 33\n    return context;                                                                                                    // 34\n  }                                                                                                                    // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\nTemplate.afCheckboxGroupInline.helpers({                                                                               // 38\n  atts: function selectedAttsAdjust() {                                                                                // 39\n    var atts = _.clone(this.atts);                                                                                     // 40\n    if (this.selected) {                                                                                               // 41\n      atts.checked = \"\";                                                                                               // 42\n    }                                                                                                                  // 43\n    // remove data-schema-key attribute because we put it                                                              // 44\n    // on the entire group                                                                                             // 45\n    delete atts[\"data-schema-key\"];                                                                                    // 46\n    return atts;                                                                                                       // 47\n  },                                                                                                                   // 48\n  dsk: function dsk() {                                                                                                // 49\n    return {                                                                                                           // 50\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 51\n    };                                                                                                                 // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5571\n}).call(this);                                                       // 5572\n                                                                     // 5573\n                                                                     // 5574\n                                                                     // 5575\n                                                                     // 5576\n                                                                     // 5577\n                                                                     // 5578\n(function () {                                                       // 5579\n                                                                     // 5580\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-multiple/template.select-multiple.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelectMultiple\");                                                                              // 2\nTemplate[\"afSelectMultiple\"] = new Template(\"Template.afSelectMultiple\", (function() {                                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs({                                                                                      // 5\n    multiple: \"\"                                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 12\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 15\n        label: function() {                                                                                            // 16\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 17\n        }                                                                                                              // 18\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 19\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 20\n      }, function() {                                                                                                  // 21\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 22\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 23\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 24\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 25\n        })), \"\\n        \" ];                                                                                           // 26\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 27\n    }, function() {                                                                                                    // 28\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 29\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 30\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 31\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 32\n      })), \"\\n      \" ];                                                                                               // 33\n    }), \"\\n    \" ];                                                                                                    // 34\n  }), \"\\n  \");                                                                                                         // 35\n}));                                                                                                                   // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5625\n}).call(this);                                                       // 5626\n                                                                     // 5627\n                                                                     // 5628\n                                                                     // 5629\n                                                                     // 5630\n                                                                     // 5631\n                                                                     // 5632\n(function () {                                                       // 5633\n                                                                     // 5634\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-multiple/select-multiple.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-multiple\", {                                                                             // 1\n  template: \"afSelectMultiple\",                                                                                        // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    return AutoForm.Utility.getSelectValues(this[0]);                                                                  // 5\n  },                                                                                                                   // 6\n  contextAdjust: function (context) {                                                                                  // 7\n    // build items list                                                                                                // 8\n    context.items = _.map(context.selectOptions, function(opt) {                                                       // 9\n      if (opt.optgroup) {                                                                                              // 10\n        var subItems = _.map(opt.options, function(subOpt) {                                                           // 11\n          return {                                                                                                     // 12\n            name: context.name,                                                                                        // 13\n            label: subOpt.label,                                                                                       // 14\n            value: subOpt.value,                                                                                       // 15\n            htmlAtts: _.omit(subOpt, 'label', 'value'),                                                                // 16\n            // _id must be included because it is a special property that                                              // 17\n            // #each uses to track unique list items when adding and removing them                                     // 18\n            // See https://github.com/meteor/meteor/issues/2174                                                        // 19\n            _id: subOpt.value,                                                                                         // 20\n            selected: _.contains(context.value, subOpt.value),                                                         // 21\n            atts: context.atts                                                                                         // 22\n          };                                                                                                           // 23\n        });                                                                                                            // 24\n        return {                                                                                                       // 25\n          optgroup: opt.optgroup,                                                                                      // 26\n          items: subItems                                                                                              // 27\n        };                                                                                                             // 28\n      } else {                                                                                                         // 29\n        return {                                                                                                       // 30\n          name: context.name,                                                                                          // 31\n          label: opt.label,                                                                                            // 32\n          value: opt.value,                                                                                            // 33\n          htmlAtts: _.omit(opt, 'label', 'value'),                                                                     // 34\n          // _id must be included because it is a special property that                                                // 35\n          // #each uses to track unique list items when adding and removing them                                       // 36\n          // See https://github.com/meteor/meteor/issues/2174                                                          // 37\n          _id: opt.value,                                                                                              // 38\n          selected: _.contains(context.value, opt.value),                                                              // 39\n          atts: context.atts                                                                                           // 40\n        };                                                                                                             // 41\n      }                                                                                                                // 42\n    });                                                                                                                // 43\n                                                                                                                       // 44\n    return context;                                                                                                    // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5690\n}).call(this);                                                       // 5691\n                                                                     // 5692\n                                                                     // 5693\n                                                                     // 5694\n                                                                     // 5695\n                                                                     // 5696\n                                                                     // 5697\n(function () {                                                       // 5698\n                                                                     // 5699\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio/template.select-radio.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroup\");                                                                                  // 2\nTemplate[\"afRadioGroup\"] = new Template(\"Template.afRadioGroup\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n  \", Blaze.Each(function() {                                                                                  // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                     // 12\n      type: \"radio\",                                                                                                   // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    }))), \"\\n  \" ];                                                                                                    // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5731\n}).call(this);                                                       // 5732\n                                                                     // 5733\n                                                                     // 5734\n                                                                     // 5735\n                                                                     // 5736\n                                                                     // 5737\n                                                                     // 5738\n(function () {                                                       // 5739\n                                                                     // 5740\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio/select-radio.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-radio\", {                                                                                // 1\n  template: \"afRadioGroup\",                                                                                            // 2\n  valueOut: function () {                                                                                              // 3\n    return this.find('input[type=radio]:checked').val();                                                               // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    var itemAtts = _.omit(context.atts);                                                                               // 7\n                                                                                                                       // 8\n    // build items list                                                                                                // 9\n    context.items = [];                                                                                                // 10\n                                                                                                                       // 11\n    // Add all defined options                                                                                         // 12\n    _.each(context.selectOptions, function(opt) {                                                                      // 13\n      context.items.push({                                                                                             // 14\n        name: context.name,                                                                                            // 15\n        label: opt.label,                                                                                              // 16\n        value: opt.value,                                                                                              // 17\n        // _id must be included because it is a special property that                                                  // 18\n        // #each uses to track unique list items when adding and removing them                                         // 19\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 20\n        _id: opt.value,                                                                                                // 21\n        selected: (opt.value === context.value),                                                                       // 22\n        atts: itemAtts                                                                                                 // 23\n      });                                                                                                              // 24\n    });                                                                                                                // 25\n                                                                                                                       // 26\n    return context;                                                                                                    // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\nTemplate.afRadioGroup.helpers({                                                                                        // 31\n  atts: function selectedAttsAdjust() {                                                                                // 32\n    var atts = _.clone(this.atts);                                                                                     // 33\n    if (this.selected) {                                                                                               // 34\n      atts.checked = \"\";                                                                                               // 35\n    }                                                                                                                  // 36\n    // remove data-schema-key attribute because we put it                                                              // 37\n    // on the entire group                                                                                             // 38\n    delete atts[\"data-schema-key\"];                                                                                    // 39\n    return atts;                                                                                                       // 40\n  },                                                                                                                   // 41\n  dsk: function dsk() {                                                                                                // 42\n    return {                                                                                                           // 43\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 44\n    };                                                                                                                 // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5796\n}).call(this);                                                       // 5797\n                                                                     // 5798\n                                                                     // 5799\n                                                                     // 5800\n                                                                     // 5801\n                                                                     // 5802\n                                                                     // 5803\n(function () {                                                       // 5804\n                                                                     // 5805\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio-inline/template.select-radio-inline.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroupInline\");                                                                            // 2\nTemplate[\"afRadioGroupInline\"] = new Template(\"Template.afRadioGroupInline\", (function() {                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n  \", Blaze.Each(function() {                                                                                  // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                              // 12\n      type: \"radio\",                                                                                                   // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    })), \"\\n  \" ];                                                                                                     // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5837\n}).call(this);                                                       // 5838\n                                                                     // 5839\n                                                                     // 5840\n                                                                     // 5841\n                                                                     // 5842\n                                                                     // 5843\n                                                                     // 5844\n(function () {                                                       // 5845\n                                                                     // 5846\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio-inline/select-radio-inline.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-radio-inline\", {                                                                         // 1\n  template: \"afRadioGroupInline\",                                                                                      // 2\n  valueOut: function () {                                                                                              // 3\n    return this.find('input[type=radio]:checked').val();                                                               // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    var itemAtts = _.omit(context.atts);                                                                               // 7\n                                                                                                                       // 8\n    // build items list                                                                                                // 9\n    context.items = [];                                                                                                // 10\n                                                                                                                       // 11\n    // Add all defined options                                                                                         // 12\n    _.each(context.selectOptions, function(opt) {                                                                      // 13\n      context.items.push({                                                                                             // 14\n        name: context.name,                                                                                            // 15\n        label: opt.label,                                                                                              // 16\n        value: opt.value,                                                                                              // 17\n        // _id must be included because it is a special property that                                                  // 18\n        // #each uses to track unique list items when adding and removing them                                         // 19\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 20\n        _id: opt.value,                                                                                                // 21\n        selected: (opt.value === context.value),                                                                       // 22\n        atts: itemAtts                                                                                                 // 23\n      });                                                                                                              // 24\n    });                                                                                                                // 25\n                                                                                                                       // 26\n    return context;                                                                                                    // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\nTemplate.afRadioGroupInline.helpers({                                                                                  // 31\n  atts: function selectedAttsAdjust() {                                                                                // 32\n    var atts = _.clone(this.atts);                                                                                     // 33\n    if (this.selected) {                                                                                               // 34\n      atts.checked = \"\";                                                                                               // 35\n    }                                                                                                                  // 36\n    // remove data-schema-key attribute because we put it                                                              // 37\n    // on the entire group                                                                                             // 38\n    delete atts[\"data-schema-key\"];                                                                                    // 39\n    return atts;                                                                                                       // 40\n  },                                                                                                                   // 41\n  dsk: function dsk() {                                                                                                // 42\n    return {                                                                                                           // 43\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 44\n    };                                                                                                                 // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5902\n}).call(this);                                                       // 5903\n                                                                     // 5904\n                                                                     // 5905\n                                                                     // 5906\n                                                                     // 5907\n                                                                     // 5908\n                                                                     // 5909\n(function () {                                                       // 5910\n                                                                     // 5911\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/submit/template.submit.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSubmit\");                                                                                 // 2\nTemplate[\"afInputSubmit\"] = new Template(\"Template.afInputSubmit\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"submit\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5933\n}).call(this);                                                       // 5934\n                                                                     // 5935\n                                                                     // 5936\n                                                                     // 5937\n                                                                     // 5938\n                                                                     // 5939\n                                                                     // 5940\n(function () {                                                       // 5941\n                                                                     // 5942\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/submit/submit.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"submit\", {                                                                                      // 1\n  template: \"afInputSubmit\"                                                                                            // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5953\n}).call(this);                                                       // 5954\n                                                                     // 5955\n                                                                     // 5956\n                                                                     // 5957\n                                                                     // 5958\n                                                                     // 5959\n                                                                     // 5960\n(function () {                                                       // 5961\n                                                                     // 5962\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/tel/template.tel.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTel\");                                                                                    // 2\nTemplate[\"afInputTel\"] = new Template(\"Template.afInputTel\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"tel\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5984\n}).call(this);                                                       // 5985\n                                                                     // 5986\n                                                                     // 5987\n                                                                     // 5988\n                                                                     // 5989\n                                                                     // 5990\n                                                                     // 5991\n(function () {                                                       // 5992\n                                                                     // 5993\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/tel/tel.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"tel\", {                                                                                         // 1\n  template: \"afInputTel\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6014\n}).call(this);                                                       // 6015\n                                                                     // 6016\n                                                                     // 6017\n                                                                     // 6018\n                                                                     // 6019\n                                                                     // 6020\n                                                                     // 6021\n(function () {                                                       // 6022\n                                                                     // 6023\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/text/template.text.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputText\");                                                                                   // 2\nTemplate[\"afInputText\"] = new Template(\"Template.afInputText\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"text\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6045\n}).call(this);                                                       // 6046\n                                                                     // 6047\n                                                                     // 6048\n                                                                     // 6049\n                                                                     // 6050\n                                                                     // 6051\n                                                                     // 6052\n(function () {                                                       // 6053\n                                                                     // 6054\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/text/text.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"text\", {                                                                                        // 1\n  template: \"afInputText\",                                                                                             // 2\n  valueOut: function () {                                                                                              // 3\n    return this.val();                                                                                                 // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,                                                       // 7\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 8\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,                                                     // 11\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 12\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray                                                            // 13\n  },                                                                                                                   // 14\n  contextAdjust: function (context) {                                                                                  // 15\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 16\n      context.atts.maxlength = context.max;                                                                            // 17\n    }                                                                                                                  // 18\n    return context;                                                                                                    // 19\n  }                                                                                                                    // 20\n});                                                                                                                    // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6084\n}).call(this);                                                       // 6085\n                                                                     // 6086\n                                                                     // 6087\n                                                                     // 6088\n                                                                     // 6089\n                                                                     // 6090\n                                                                     // 6091\n(function () {                                                       // 6092\n                                                                     // 6093\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/textarea/template.textarea.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afTextarea\");                                                                                    // 2\nTemplate[\"afTextarea\"] = new Template(\"Template.afTextarea\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }, {                                                                                                                 // 7\n    value: function() {                                                                                                // 8\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 9\n    }                                                                                                                  // 10\n  }));                                                                                                                 // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6114\n}).call(this);                                                       // 6115\n                                                                     // 6116\n                                                                     // 6117\n                                                                     // 6118\n                                                                     // 6119\n                                                                     // 6120\n                                                                     // 6121\n(function () {                                                       // 6122\n                                                                     // 6123\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/textarea/textarea.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"textarea\", {                                                                                    // 1\n  template: \"afTextarea\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return linesToArray(val);                                                                                      // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    },                                                                                                                 // 9\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 10\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 11\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 12\n    \"booleanArray\": function (val) {                                                                                   // 13\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 14\n        var arr = linesToArray(val);                                                                                   // 15\n        return _.map(arr, function (item) {                                                                            // 16\n          return AutoForm.valueConverters.stringToBoolean(item);                                                       // 17\n        });                                                                                                            // 18\n      }                                                                                                                // 19\n      return val;                                                                                                      // 20\n    },                                                                                                                 // 21\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 22\n    \"dateArray\": function (val) {                                                                                      // 23\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 24\n        var arr = linesToArray(val);                                                                                   // 25\n        return _.map(arr, function (item) {                                                                            // 26\n          return AutoForm.valueConverters.stringToDate(item);                                                          // 27\n        });                                                                                                            // 28\n      }                                                                                                                // 29\n      return val;                                                                                                      // 30\n    }                                                                                                                  // 31\n  },                                                                                                                   // 32\n  contextAdjust: function (context) {                                                                                  // 33\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 34\n      context.atts.maxlength = context.max;                                                                            // 35\n    }                                                                                                                  // 36\n    return context;                                                                                                    // 37\n  }                                                                                                                    // 38\n});                                                                                                                    // 39\n                                                                                                                       // 40\nfunction linesToArray(text) {                                                                                          // 41\n  text = text.split('\\n');                                                                                             // 42\n  var lines = [];                                                                                                      // 43\n  _.each(text, function (line) {                                                                                       // 44\n    line = $.trim(line);                                                                                               // 45\n    if (line.length) {                                                                                                 // 46\n      lines.push(line);                                                                                                // 47\n    }                                                                                                                  // 48\n  });                                                                                                                  // 49\n  return lines;                                                                                                        // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6183\n}).call(this);                                                       // 6184\n                                                                     // 6185\n                                                                     // 6186\n                                                                     // 6187\n                                                                     // 6188\n                                                                     // 6189\n                                                                     // 6190\n(function () {                                                       // 6191\n                                                                     // 6192\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/time/template.time.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTime\");                                                                                   // 2\nTemplate[\"afInputTime\"] = new Template(\"Template.afInputTime\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"time\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6214\n}).call(this);                                                       // 6215\n                                                                     // 6216\n                                                                     // 6217\n                                                                     // 6218\n                                                                     // 6219\n                                                                     // 6220\n                                                                     // 6221\n(function () {                                                       // 6222\n                                                                     // 6223\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/time/time.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"time\", {                                                                                        // 1\n  template: \"afInputTime\",                                                                                             // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  }                                                                                                                    // 5\n});                                                                                                                    // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6238\n}).call(this);                                                       // 6239\n                                                                     // 6240\n                                                                     // 6241\n                                                                     // 6242\n                                                                     // 6243\n                                                                     // 6244\n                                                                     // 6245\n(function () {                                                       // 6246\n                                                                     // 6247\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/url/template.url.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputUrl\");                                                                                    // 2\nTemplate[\"afInputUrl\"] = new Template(\"Template.afInputUrl\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"url\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6269\n}).call(this);                                                       // 6270\n                                                                     // 6271\n                                                                     // 6272\n                                                                     // 6273\n                                                                     // 6274\n                                                                     // 6275\n                                                                     // 6276\n(function () {                                                       // 6277\n                                                                     // 6278\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/url/url.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"url\", {                                                                                         // 1\n  template: \"afInputUrl\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6299\n}).call(this);                                                       // 6300\n                                                                     // 6301\n                                                                     // 6302\n                                                                     // 6303\n                                                                     // 6304\n                                                                     // 6305\n                                                                     // 6306\n(function () {                                                       // 6307\n                                                                     // 6308\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/week/template.week.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputWeek\");                                                                                   // 2\nTemplate[\"afInputWeek\"] = new Template(\"Template.afInputWeek\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"week\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6330\n}).call(this);                                                       // 6331\n                                                                     // 6332\n                                                                     // 6333\n                                                                     // 6334\n                                                                     // 6335\n                                                                     // 6336\n                                                                     // 6337\n(function () {                                                       // 6338\n                                                                     // 6339\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/week/week.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"week\", {                                                                                        // 1\n  template: \"afInputWeek\",                                                                                             // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  }                                                                                                                    // 5\n});                                                                                                                    // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6354\n}).call(this);                                                       // 6355\n                                                                     // 6356\n                                                                     // 6357\n                                                                     // 6358\n                                                                     // 6359\n                                                                     // 6360\n                                                                     // 6361\n(function () {                                                       // 6362\n                                                                     // 6363\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/autoForm/template.autoForm.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"autoForm\");                                                                                      // 2\nTemplate[\"autoForm\"] = new Template(\"Template.autoForm\", (function() {                                                 // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.Unless(function() {                                                                                     // 5\n    return Spacebars.dataMustache(view.lookup(\"afDestroyUpdateForm\"), Spacebars.dot(view.lookup(\".\"), \"id\"));          // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n  \\n  \\n  \", HTML.FORM(HTML.Attrs(function() {                                                         // 8\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 9\n    }), \"\\n    \", Blaze._InOuterTemplateScope(view, function() {                                                       // 10\n      return Blaze._TemplateWith(function() {                                                                          // 11\n        return Spacebars.call(view.lookup(\"..\"));                                                                      // 12\n      }, function() {                                                                                                  // 13\n        return Spacebars.include(function() {                                                                          // 14\n          return Spacebars.call(view.templateContentBlock);                                                            // 15\n        });                                                                                                            // 16\n      });                                                                                                              // 17\n    }), \"\\n  \"), \"\\n  \" ];                                                                                             // 18\n  });                                                                                                                  // 19\n}));                                                                                                                   // 20\n                                                                                                                       // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6392\n}).call(this);                                                       // 6393\n                                                                     // 6394\n                                                                     // 6395\n                                                                     // 6396\n                                                                     // 6397\n                                                                     // 6398\n                                                                     // 6399\n(function () {                                                       // 6400\n                                                                     // 6401\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/autoForm/autoForm.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, ReactiveVar, arrayTracker, Hooks, MongoObject, Utility, setDefaults */                             // 1\n                                                                                                                       // 2\nTemplate.autoForm.helpers({                                                                                            // 3\n  atts: function autoFormTplAtts() {                                                                                   // 4\n    // After removing all of the props we know about, everything else should                                           // 5\n    // become a form attribute unless it's an array or object.                                                         // 6\n    var val, htmlAttributes = {}, context = this;                                                                      // 7\n    var removeProps = [                                                                                                // 8\n      \"schema\",                                                                                                        // 9\n      \"collection\",                                                                                                    // 10\n      \"validation\",                                                                                                    // 11\n      \"doc\",                                                                                                           // 12\n      \"resetOnSuccess\",                                                                                                // 13\n      \"type\",                                                                                                          // 14\n      \"template\",                                                                                                      // 15\n      \"autosave\",                                                                                                      // 16\n      \"autosaveOnKeyup\",                                                                                               // 17\n      \"meteormethod\",                                                                                                  // 18\n      \"filter\",                                                                                                        // 19\n      \"autoConvert\",                                                                                                   // 20\n      \"removeEmptyStrings\",                                                                                            // 21\n      \"trimStrings\"                                                                                                    // 22\n    ];                                                                                                                 // 23\n                                                                                                                       // 24\n    // Filter out any attributes that have a component prefix                                                          // 25\n    function hasComponentPrefix(prop) {                                                                                // 26\n      return _.any(Utility.componentTypeList, function (componentType) {                                               // 27\n        return prop.indexOf(componentType + '-') === 0;                                                                // 28\n      });                                                                                                              // 29\n    }                                                                                                                  // 30\n                                                                                                                       // 31\n    // Filter out arrays and objects, which are obviously not meant to be                                              // 32\n    // HTML attributes.                                                                                                // 33\n    for (var prop in context) {                                                                                        // 34\n      if (context.hasOwnProperty(prop) &&                                                                              // 35\n          !_.contains(removeProps, prop) &&                                                                            // 36\n          !hasComponentPrefix(prop)) {                                                                                 // 37\n        val = context[prop];                                                                                           // 38\n        if (!_.isArray(val) && !_.isObject(val)) {                                                                     // 39\n          htmlAttributes[prop] = val;                                                                                  // 40\n        }                                                                                                              // 41\n      }                                                                                                                // 42\n    }                                                                                                                  // 43\n                                                                                                                       // 44\n    // By default, we add the `novalidate=\"novalidate\"` attribute to our form,                                         // 45\n    // unless the user passes `validation=\"browser\"`.                                                                  // 46\n    if (this.validation !== \"browser\" && !htmlAttributes.novalidate) {                                                 // 47\n      htmlAttributes.novalidate = \"novalidate\";                                                                        // 48\n    }                                                                                                                  // 49\n                                                                                                                       // 50\n    return htmlAttributes;                                                                                             // 51\n  },                                                                                                                   // 52\n  afDestroyUpdateForm: function (formId) {                                                                             // 53\n    AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);                           // 54\n    return AutoForm._destroyForm[formId].get();                                                                        // 55\n  }                                                                                                                    // 56\n});                                                                                                                    // 57\n                                                                                                                       // 58\nTemplate.autoForm.created = function autoFormCreated() {                                                               // 59\n  var template = this;                                                                                                 // 60\n                                                                                                                       // 61\n  // We'll add tracker dependencies for reactive field values                                                          // 62\n  // to this object as necessary                                                                                       // 63\n  template.formValues = template.formValues || {};                                                                     // 64\n                                                                                                                       // 65\n  // We'll store \"sticky\" errors here. These are errors added                                                          // 66\n  // manually based on server validation, which we don't want to                                                       // 67\n  // be wiped out by further client validation.                                                                        // 68\n  template._stickyErrors = {};                                                                                         // 69\n                                                                                                                       // 70\n  template.autorun(function (c) {                                                                                      // 71\n    var data = Template.currentData(); // rerun when current data changes                                              // 72\n    var formId = data.id;                                                                                              // 73\n                                                                                                                       // 74\n    if (!formId) {                                                                                                     // 75\n      throw new Error('Every autoForm and quickForm must have an \"id\" attribute set to a unique string.');             // 76\n    }                                                                                                                  // 77\n                                                                                                                       // 78\n    // When we change the form, loading a different doc, reloading the current doc, etc.,                              // 79\n    // we also want to reset the array counts for the form                                                             // 80\n    arrayTracker.resetForm(formId);                                                                                    // 81\n                                                                                                                       // 82\n    data = setDefaults(data);                                                                                          // 83\n                                                                                                                       // 84\n    // Clone the doc so that docToForm and other modifications do not change                                           // 85\n    // the original referenced object.                                                                                 // 86\n    var doc = data.doc ? EJSON.clone(data.doc) : null;                                                                 // 87\n                                                                                                                       // 88\n    // Update cached form values for hot code reload persistence                                                       // 89\n    if (data.preserveForm === false) {                                                                                 // 90\n      AutoForm.formPreserve.unregisterForm(formId);                                                                    // 91\n    } else {                                                                                                           // 92\n      // Even if we have already registered, we reregister to ensure that the                                          // 93\n      // closure values of template, formId, and ss remain correct after each                                          // 94\n      // reaction                                                                                                      // 95\n      AutoForm.formPreserve.registerForm(formId, function autoFormRegFormCallback() {                                  // 96\n        return AutoForm.getFormValues(formId, template, data._resolvedSchema, false);                                  // 97\n      });                                                                                                              // 98\n    }                                                                                                                  // 99\n                                                                                                                       // 100\n    // Retain doc values after a \"hot code push\", if possible                                                          // 101\n    if (c.firstRun) {                                                                                                  // 102\n      var retrievedDoc = AutoForm.formPreserve.getDocument(formId);                                                    // 103\n      if (retrievedDoc !== false) {                                                                                    // 104\n        // Ensure we keep the _id property which may not be present in retrievedDoc.                                   // 105\n        doc = _.extend(doc || {}, retrievedDoc || {});                                                                 // 106\n      }                                                                                                                // 107\n    }                                                                                                                  // 108\n                                                                                                                       // 109\n    var mDoc;                                                                                                          // 110\n    if (doc && !_.isEmpty(doc)) {                                                                                      // 111\n      var hookCtx = {formId: formId};                                                                                  // 112\n      // Pass doc through docToForm hooks                                                                              // 113\n      _.each(Hooks.getHooks(formId, 'docToForm'), function autoFormEachDocToForm(hook) {                               // 114\n        doc = hook.call(hookCtx, doc, data._resolvedSchema);                                                           // 115\n        if (!doc) {                                                                                                    // 116\n          throw new Error('Oops! Did you forget to return the modified document from your docToForm hook for the ' + formId + ' form?');\n        }                                                                                                              // 118\n      });                                                                                                              // 119\n                                                                                                                       // 120\n      // Create a \"flat doc\" that can be used to easily get values for corresponding                                   // 121\n      // form fields.                                                                                                  // 122\n      mDoc = new MongoObject(doc);                                                                                     // 123\n      AutoForm.reactiveFormData.sourceDoc(formId, mDoc);                                                               // 124\n    } else {                                                                                                           // 125\n      AutoForm.reactiveFormData.sourceDoc(formId, null);                                                               // 126\n    }                                                                                                                  // 127\n  });                                                                                                                  // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\nTemplate.autoForm.rendered = function autoFormRendered() {                                                             // 131\n  var lastId;                                                                                                          // 132\n  this.autorun(function () {                                                                                           // 133\n    var data = Template.currentData(); // rerun when current data changes                                              // 134\n                                                                                                                       // 135\n    if (data.id === lastId) return;                                                                                    // 136\n    lastId = data.id;                                                                                                  // 137\n                                                                                                                       // 138\n    AutoForm.triggerFormRenderedDestroyedReruns(data.id);                                                              // 139\n  });                                                                                                                  // 140\n};                                                                                                                     // 141\n                                                                                                                       // 142\nTemplate.autoForm.destroyed = function autoFormDestroyed() {                                                           // 143\n  var self = this;                                                                                                     // 144\n  var formId = self.data.id;                                                                                           // 145\n                                                                                                                       // 146\n  // TODO if formId was changing reactively during life of instance,                                                   // 147\n  // some data won't be removed by the calls below.                                                                    // 148\n                                                                                                                       // 149\n  // Remove from array fields list                                                                                     // 150\n  arrayTracker.untrackForm(formId);                                                                                    // 151\n                                                                                                                       // 152\n  // Unregister form preservation                                                                                      // 153\n  AutoForm.formPreserve.unregisterForm(formId);                                                                        // 154\n                                                                                                                       // 155\n  // Trigger value reruns                                                                                              // 156\n  AutoForm.triggerFormRenderedDestroyedReruns(formId);                                                                 // 157\n};                                                                                                                     // 158\n                                                                                                                       // 159\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6568\n}).call(this);                                                       // 6569\n                                                                     // 6570\n                                                                     // 6571\n                                                                     // 6572\n                                                                     // 6573\n                                                                     // 6574\n                                                                     // 6575\n(function () {                                                       // 6576\n                                                                     // 6577\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/quickForm/template.quickForm.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm\");                                                                                     // 2\nTemplate[\"quickForm\"] = new Template(\"Template.quickForm\", (function() {                                               // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6601\n}).call(this);                                                       // 6602\n                                                                     // 6603\n                                                                     // 6604\n                                                                     // 6605\n                                                                     // 6606\n                                                                     // 6607\n                                                                     // 6608\n(function () {                                                       // 6609\n                                                                     // 6610\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/quickForm/quickForm.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.quickForm.helpers({                                                                                           // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('quickForm', this.template);                                                       // 5\n  },                                                                                                                   // 6\n  innerContext: function quickFormContext() {                                                                          // 7\n    var atts = this;                                                                                                   // 8\n    var adjustedData = AutoForm.parseData(_.clone(this));                                                              // 9\n    var simpleSchema = adjustedData._resolvedSchema;                                                                   // 10\n    var sortedSchema = {};                                                                                             // 11\n    var fieldGroups = [];                                                                                              // 12\n    var grouplessFieldContext;                                                                                         // 13\n                                                                                                                       // 14\n    // --------------- A. Schema --------------- //                                                                    // 15\n                                                                                                                       // 16\n    var fieldList = atts.fields;                                                                                       // 17\n    if (fieldList) {                                                                                                   // 18\n      fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n                                                                                                                       // 20\n      // get the schema object, but sorted into the same order as the field list                                       // 21\n      fieldList.forEach(function (fieldName) {                                                                         // 22\n        sortedSchema[fieldName] = simpleSchema.schema(fieldName);                                                      // 23\n      });                                                                                                              // 24\n    } else {                                                                                                           // 25\n      sortedSchema = simpleSchema.schema();                                                                            // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    // --------------- B. Field With No Groups --------------- //                                                      // 29\n                                                                                                                       // 30\n    var grouplessFields = getFieldsWithNoGroup(sortedSchema);                                                          // 31\n    if (grouplessFields.length > 0) {                                                                                  // 32\n      grouplessFieldContext = {                                                                                        // 33\n        atts: _.extend({}, atts, {fields: grouplessFields}),                                                           // 34\n        fields: grouplessFields                                                                                        // 35\n      };                                                                                                               // 36\n    }                                                                                                                  // 37\n                                                                                                                       // 38\n    // --------------- C. Field With Groups --------------- //                                                         // 39\n                                                                                                                       // 40\n    // get sorted list of field groups                                                                                 // 41\n    var fieldGroupNames = getSortedFieldGroupNames(sortedSchema);                                                      // 42\n                                                                                                                       // 43\n    // Loop through the list and make a field group context for each                                                   // 44\n    _.each(fieldGroupNames, function (fieldGroupName) {                                                                // 45\n      var fieldsForGroup = getFieldsForGroup(fieldGroupName, sortedSchema);                                            // 46\n                                                                                                                       // 47\n      if (fieldsForGroup.length > 0) {                                                                                 // 48\n        fieldGroups.push({                                                                                             // 49\n          name: fieldGroupName,                                                                                        // 50\n          atts: _.extend({}, atts, {fields: fieldsForGroup}),                                                          // 51\n          fields: fieldsForGroup                                                                                       // 52\n        });                                                                                                            // 53\n      }                                                                                                                // 54\n    });                                                                                                                // 55\n                                                                                                                       // 56\n    // --------------- D. Context --------------- //                                                                   // 57\n                                                                                                                       // 58\n    // Pass along quickForm context to autoForm context, minus a few                                                   // 59\n    // properties that are specific to quickForms.                                                                     // 60\n    var qfAutoFormContext = _.omit(atts,                                                                               // 61\n                                   'buttonContent',                                                                    // 62\n                                   'buttonClasses',                                                                    // 63\n                                   'fields',                                                                           // 64\n                                   'omitFields',                                                                       // 65\n                                   'id-prefix');                                                                       // 66\n                                                                                                                       // 67\n    // Determine whether we want to render a submit button                                                             // 68\n    var qfShouldRenderButton = (atts.buttonContent !== false && atts.type !== 'readonly' && atts.type !== 'disabled'); // 69\n                                                                                                                       // 70\n    var context = {                                                                                                    // 71\n      qfAutoFormContext: qfAutoFormContext,                                                                            // 72\n      atts: atts,                                                                                                      // 73\n      qfShouldRenderButton: qfShouldRenderButton,                                                                      // 74\n      fieldGroups: fieldGroups,                                                                                        // 75\n      grouplessFields: grouplessFieldContext                                                                           // 76\n    };                                                                                                                 // 77\n    return context;                                                                                                    // 78\n  }                                                                                                                    // 79\n});                                                                                                                    // 80\n                                                                                                                       // 81\n/* Private Functions */                                                                                                // 82\n                                                                                                                       // 83\n/**                                                                                                                    // 84\n * Takes a schema object and returns a sorted array of field group names for it                                        // 85\n *                                                                                                                     // 86\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 87\n * @returns {String[]} Array of field group names                                                                      // 88\n */                                                                                                                    // 89\nfunction getSortedFieldGroupNames(schemaObj) {                                                                         // 90\n  var names = _.map(schemaObj, function (field) {                                                                      // 91\n    return field.autoform && field.autoform.group;                                                                     // 92\n  });                                                                                                                  // 93\n                                                                                                                       // 94\n  // Remove undefined                                                                                                  // 95\n  names = _.compact(names);                                                                                            // 96\n                                                                                                                       // 97\n  // Remove duplicate names                                                                                            // 98\n  names = _.unique(names);                                                                                             // 99\n                                                                                                                       // 100\n  return names.sort();                                                                                                 // 101\n}                                                                                                                      // 102\n                                                                                                                       // 103\n/**                                                                                                                    // 104\n * Returns the schema field names that belong in the group.                                                            // 105\n *                                                                                                                     // 106\n * @param   {String}   groupName The group name                                                                        // 107\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 108\n * @returns {String[]} Array of field names (schema keys)                                                              // 109\n */                                                                                                                    // 110\nfunction getFieldsForGroup(groupName, schemaObj) {                                                                     // 111\n  var fields = _.map(schemaObj, function (field, fieldName) {                                                          // 112\n    return (fieldName.slice(-2) !== '.$') &&                                                                           // 113\n      field.autoform &&                                                                                                // 114\n      field.autoform.group === groupName &&                                                                            // 115\n      fieldName;                                                                                                       // 116\n  });                                                                                                                  // 117\n                                                                                                                       // 118\n  // Remove undefined                                                                                                  // 119\n  fields = _.compact(fields);                                                                                          // 120\n                                                                                                                       // 121\n  return fields;                                                                                                       // 122\n}                                                                                                                      // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * Returns the schema field names that don't belong to a group                                                         // 126\n *                                                                                                                     // 127\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 128\n * @returns {String[]} Array of field names (schema keys)                                                              // 129\n */                                                                                                                    // 130\nfunction getFieldsWithNoGroup(schemaObj) {                                                                             // 131\n  var fields = _.map(schemaObj, function (field, fieldName) {                                                          // 132\n    return (fieldName.slice(-2) !== '.$') &&                                                                           // 133\n      (!field.autoform || !field.autoform.group) &&                                                                    // 134\n      fieldName;                                                                                                       // 135\n  });                                                                                                                  // 136\n                                                                                                                       // 137\n  // Remove undefined                                                                                                  // 138\n  fields = _.compact(fields);                                                                                          // 139\n                                                                                                                       // 140\n  return fields;                                                                                                       // 141\n}                                                                                                                      // 142\n                                                                                                                       // 143\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6761\n}).call(this);                                                       // 6762\n                                                                     // 6763\n                                                                     // 6764\n                                                                     // 6765\n                                                                     // 6766\n                                                                     // 6767\n                                                                     // 6768\n(function () {                                                       // 6769\n                                                                     // 6770\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afArrayField/template.afArrayField.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField\");                                                                                  // 2\nTemplate[\"afArrayField\"] = new Template(\"Template.afArrayField\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6794\n}).call(this);                                                       // 6795\n                                                                     // 6796\n                                                                     // 6797\n                                                                     // 6798\n                                                                     // 6799\n                                                                     // 6800\n                                                                     // 6801\n(function () {                                                       // 6802\n                                                                     // 6803\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afArrayField/afArrayField.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, arrayTracker */                                                                                    // 1\n                                                                                                                       // 2\nTemplate.afArrayField.helpers({                                                                                        // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('afArrayField', this.template, this.name);                                         // 5\n  },                                                                                                                   // 6\n  innerContext: function afArrayFieldContext() {                                                                       // 7\n    var c = AutoForm.Utility.getComponentContext(this, \"afArrayField\");                                                // 8\n    var name = c.atts.name;                                                                                            // 9\n    var fieldMinCount = c.atts.minCount || 0;                                                                          // 10\n    var fieldMaxCount = c.atts.maxCount || Infinity;                                                                   // 11\n    var ss = AutoForm.getFormSchema();                                                                                 // 12\n    var formId = AutoForm.getFormId();                                                                                 // 13\n                                                                                                                       // 14\n    // Init the array tracking for this field                                                                          // 15\n    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);                                                // 16\n    if (docCount === undefined) {                                                                                      // 17\n      docCount = c.atts.initialCount;                                                                                  // 18\n    }                                                                                                                  // 19\n    arrayTracker.initField(formId, name, ss, docCount, fieldMinCount, fieldMaxCount);                                  // 20\n                                                                                                                       // 21\n    return {                                                                                                           // 22\n      atts: c.atts                                                                                                     // 23\n    };                                                                                                                 // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6838\n}).call(this);                                                       // 6839\n                                                                     // 6840\n                                                                     // 6841\n                                                                     // 6842\n                                                                     // 6843\n                                                                     // 6844\n                                                                     // 6845\n(function () {                                                       // 6846\n                                                                     // 6847\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afEachArrayItem/template.afEachArrayItem.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afEachArrayItem\");                                                                               // 2\nTemplate[\"afEachArrayItem\"] = new Template(\"Template.afEachArrayItem\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return [ \"\\n  \", Spacebars.With(function() {                                                                         // 5\n    return Spacebars.call(view.lookup(\"innerContext\"));                                                                // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n    \", Blaze.Each(function() {                                                                         // 8\n      return Spacebars.call(view.lookup(\".\"));                                                                         // 9\n    }, function() {                                                                                                    // 10\n      return [ \"\\n    \", Blaze.If(function() {                                                                         // 11\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"removed\"));                                             // 12\n      }, function() {                                                                                                  // 13\n        return [ \"\\n    \", HTML.INPUT({                                                                                // 14\n          type: \"hidden\",                                                                                              // 15\n          name: function() {                                                                                           // 16\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                        // 17\n          },                                                                                                           // 18\n          \"data-schema-key\": function() {                                                                              // 19\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                        // 20\n          },                                                                                                           // 21\n          \"data-null-value\": \"true\",                                                                                   // 22\n          value: \"\"                                                                                                    // 23\n        }), \"\\n    \" ];                                                                                                // 24\n      }, function() {                                                                                                  // 25\n        return [ \"\\n    \", Blaze._InOuterTemplateScope(view, function() {                                              // 26\n          return Blaze._TemplateWith(function() {                                                                      // 27\n            return Spacebars.call(view.lookup(\".\"));                                                                   // 28\n          }, function() {                                                                                              // 29\n            return Spacebars.include(function() {                                                                      // 30\n              return Spacebars.call(view.templateContentBlock);                                                        // 31\n            });                                                                                                        // 32\n          });                                                                                                          // 33\n        }), \"\\n    \" ];                                                                                                // 34\n      }), \"\\n    \" ];                                                                                                  // 35\n    }), \"\\n  \" ];                                                                                                      // 36\n  }) ];                                                                                                                // 37\n}));                                                                                                                   // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6894\n}).call(this);                                                       // 6895\n                                                                     // 6896\n                                                                     // 6897\n                                                                     // 6898\n                                                                     // 6899\n                                                                     // 6900\n                                                                     // 6901\n(function () {                                                       // 6902\n                                                                     // 6903\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afEachArrayItem/afEachArrayItem.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, arrayTracker */                                                                                    // 1\n                                                                                                                       // 2\nTemplate.afEachArrayItem.helpers({                                                                                     // 3\n  innerContext: function afEachArrayItemContext() {                                                                    // 4\n    var c = AutoForm.Utility.getComponentContext(this, \"afEachArrayItem\");                                             // 5\n    var formId = AutoForm.getFormId();                                                                                 // 6\n    var ss = AutoForm.getFormSchema();                                                                                 // 7\n    var name = c.atts.name;                                                                                            // 8\n                                                                                                                       // 9\n    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);                                                // 10\n    if (docCount === undefined) {                                                                                      // 11\n      docCount = c.atts.initialCount;                                                                                  // 12\n    }                                                                                                                  // 13\n    arrayTracker.initField(formId, name, ss, docCount, c.atts.minCount, c.atts.maxCount);                              // 14\n                                                                                                                       // 15\n    return arrayTracker.getField(formId, name);                                                                        // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6930\n}).call(this);                                                       // 6931\n                                                                     // 6932\n                                                                     // 6933\n                                                                     // 6934\n                                                                     // 6935\n                                                                     // 6936\n                                                                     // 6937\n(function () {                                                       // 6938\n                                                                     // 6939\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFieldInput/template.afFieldInput.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFieldInput\");                                                                                  // 2\nTemplate[\"afFieldInput\"] = new Template(\"Template.afFieldInput\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6963\n}).call(this);                                                       // 6964\n                                                                     // 6965\n                                                                     // 6966\n                                                                     // 6967\n                                                                     // 6968\n                                                                     // 6969\n                                                                     // 6970\n(function () {                                                       // 6971\n                                                                     // 6972\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFieldInput/afFieldInput.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, getInputValue, getInputData, updateTrackedFieldValue */                                            // 1\n                                                                                                                       // 2\nTemplate.afFieldInput.helpers({                                                                                        // 3\n  // similar to AutoForm.getTemplateName, but we have fewer layers of fallback, and we fall back                       // 4\n  // lastly to a template without an _ piece at the end                                                                // 5\n  getTemplateName: function getTemplateName() {                                                                        // 6\n    var self = this;                                                                                                   // 7\n                                                                                                                       // 8\n    // Determine what `type` attribute should be if not set                                                            // 9\n    var inputType = AutoForm.getInputType(this);                                                                       // 10\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                      // 11\n    if (!componentDef) {                                                                                               // 12\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');               // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    var inputTemplateName = componentDef.template;                                                                     // 16\n    var styleTemplateName = this.template;                                                                             // 17\n                                                                                                                       // 18\n    // We skip the check for existence here so that we can get the `_plain` string                                     // 19\n    // even though they don't exist.                                                                                   // 20\n    var templateName = AutoForm.getTemplateName(inputTemplateName, styleTemplateName, self.name, true);                // 21\n                                                                                                                       // 22\n    // Special case: the built-in \"plain\" template uses the basic input templates for                                  // 23\n    // everything, so if we found _plain, we use inputTemplateName instead                                             // 24\n    if (templateName.indexOf('_plain') !== -1) {                                                                       // 25\n      templateName = null;                                                                                             // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    // If no override templateName found, use the exact name from the input type definition                            // 29\n    if (!templateName || !Template[templateName]) {                                                                    // 30\n      templateName = inputTemplateName;                                                                                // 31\n    }                                                                                                                  // 32\n                                                                                                                       // 33\n    return templateName;                                                                                               // 34\n  },                                                                                                                   // 35\n  innerContext: function afFieldInputContext() {                                                                       // 36\n    var c = AutoForm.Utility.getComponentContext(this, \"afFieldInput\");                                                // 37\n    var form = AutoForm.getCurrentDataForForm();                                                                       // 38\n    var formId = form.id;                                                                                              // 39\n    var ss = AutoForm.getFormSchema();                                                                                 // 40\n    var defs = c.defs;                                                                                                 // 41\n                                                                                                                       // 42\n    // Get schema default value.                                                                                       // 43\n    // We must do this before adjusting defs for arrays.                                                               // 44\n    var schemaDefaultValue = defs.defaultValue;                                                                        // 45\n                                                                                                                       // 46\n    // Adjust for array fields if necessary                                                                            // 47\n    if (defs.type === Array) {                                                                                         // 48\n      defs = ss.schema(c.atts.name + \".$\");                                                                            // 49\n    }                                                                                                                  // 50\n                                                                                                                       // 51\n    // Determine what `type` attribute should be if not set                                                            // 52\n    var inputType = AutoForm.getInputType(this);                                                                       // 53\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                      // 54\n    if (!componentDef) {                                                                                               // 55\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');               // 56\n    }                                                                                                                  // 57\n                                                                                                                       // 58\n    // Get reactive mDoc                                                                                               // 59\n    var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);                                                            // 60\n                                                                                                                       // 61\n    // Get input value                                                                                                 // 62\n    var value = getInputValue(c.atts, c.atts.value, mDoc, schemaDefaultValue, c.atts.defaultValue, componentDef);      // 63\n                                                                                                                       // 64\n    // Mark field value as changed for reactive updates                                                                // 65\n    // We need to defer this until the element will be                                                                 // 66\n    // added to the DOM. Otherwise, AutoForm.getFieldValue                                                             // 67\n    // will not pick up the new value when there are #if etc.                                                          // 68\n    // blocks involved.                                                                                                // 69\n    // See https://github.com/aldeed/meteor-autoform/issues/461                                                        // 70\n    var template = AutoForm.templateInstanceForForm();                                                                 // 71\n    if (template.view.isRendered) {                                                                                    // 72\n      // No need to do this on first run because we'll rerun the value functions                                       // 73\n      // once the form is rendered anyway                                                                              // 74\n      updateTrackedFieldValue(template, c.atts.name);                                                                  // 75\n    }                                                                                                                  // 76\n                                                                                                                       // 77\n    // Build input data context                                                                                        // 78\n    var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), form.type);                                   // 79\n                                                                                                                       // 80\n    // Adjust and return context                                                                                       // 81\n    return (typeof componentDef.contextAdjust === \"function\") ? componentDef.contextAdjust(iData) : iData;             // 82\n  }                                                                                                                    // 83\n});                                                                                                                    // 84\n                                                                                                                       // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7065\n}).call(this);                                                       // 7066\n                                                                     // 7067\n                                                                     // 7068\n                                                                     // 7069\n                                                                     // 7070\n                                                                     // 7071\n                                                                     // 7072\n(function () {                                                       // 7073\n                                                                     // 7074\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFormGroup/template.afFormGroup.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup\");                                                                                   // 2\nTemplate[\"afFormGroup\"] = new Template(\"Template.afFormGroup\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7098\n}).call(this);                                                       // 7099\n                                                                     // 7100\n                                                                     // 7101\n                                                                     // 7102\n                                                                     // 7103\n                                                                     // 7104\n                                                                     // 7105\n(function () {                                                       // 7106\n                                                                     // 7107\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFormGroup/afFormGroup.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afFormGroup.helpers({                                                                                         // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('afFormGroup', this.template, this.name);                                          // 5\n  },                                                                                                                   // 6\n  innerContext: function afFormGroupContext() {                                                                        // 7\n    var c = AutoForm.Utility.getComponentContext(this, 'afFormGroup');                                                 // 8\n    var afFormGroupAtts = formGroupAtts(c.atts);                                                                       // 9\n    var afFieldLabelAtts = formGroupLabelAtts(c.atts);                                                                 // 10\n    var afFieldInputAtts = formGroupInputAtts(c.atts);                                                                 // 11\n                                                                                                                       // 12\n    // Construct an `id` attribute for the input, optionally                                                           // 13\n    // adding a user-provided prefix. Since id attribute is                                                            // 14\n    // supposed to be unique in the DOM and templates can be                                                           // 15\n    // included multiple times, it's best not to provide an `id`                                                       // 16\n    // and generate a random one here for accessibility reasons.                                                       // 17\n    var id = c.atts.id || Random.id();                                                                                 // 18\n    var idPrefix = c.atts['id-prefix'];                                                                                // 19\n    if (idPrefix && idPrefix.length > 0) {                                                                             // 20\n      id = idPrefix + '-' + id;                                                                                        // 21\n    }                                                                                                                  // 22\n                                                                                                                       // 23\n    // Set the input's `id` attribute and the label's `for` attribute to                                               // 24\n    // the same ID.                                                                                                    // 25\n    // NOTE: `afFieldLabelAtts.for` causes exception in IE8                                                            // 26\n    afFieldLabelAtts['for'] = afFieldInputAtts.id = id;                                                                // 27\n                                                                                                                       // 28\n    // Get the field's schema definition                                                                               // 29\n    var fieldSchema = AutoForm.getSchemaForField(c.atts.name);                                                         // 30\n                                                                                                                       // 31\n    return {                                                                                                           // 32\n      skipLabel: (c.atts.label === false),                                                                             // 33\n      afFormGroupClass: c.atts['formgroup-class'],                                                                     // 34\n      afFormGroupAtts: afFormGroupAtts,                                                                                // 35\n      afFieldLabelAtts: afFieldLabelAtts,                                                                              // 36\n      afFieldInputAtts: afFieldInputAtts,                                                                              // 37\n      name: c.atts.name,                                                                                               // 38\n      required: fieldSchema ? !fieldSchema.optional : false,                                                           // 39\n      labelText: (typeof c.atts.label === 'string') ? c.atts.label : null                                              // 40\n    };                                                                                                                 // 41\n  }                                                                                                                    // 42\n});                                                                                                                    // 43\n                                                                                                                       // 44\n/*                                                                                                                     // 45\n * Private                                                                                                             // 46\n */                                                                                                                    // 47\n                                                                                                                       // 48\nfunction formGroupAtts(atts) {                                                                                         // 49\n  // Separate formgroup options from input options; formgroup items begin with 'formgroup-'                            // 50\n  var labelAtts = {};                                                                                                  // 51\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 52\n    if (key.indexOf('formgroup-') === 0 && key != 'formgroup-class') {                                                 // 53\n      labelAtts[key.substring(10)] = val;                                                                              // 54\n    }                                                                                                                  // 55\n  });                                                                                                                  // 56\n  return labelAtts;                                                                                                    // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nfunction formGroupLabelAtts(atts) {                                                                                    // 60\n  // Separate label options from input options; label items begin with 'label-'                                        // 61\n  var labelAtts = {};                                                                                                  // 62\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 63\n    if (key.indexOf('label-') === 0) {                                                                                 // 64\n      labelAtts[key.substring(6)] = val;                                                                               // 65\n    }                                                                                                                  // 66\n  });                                                                                                                  // 67\n  return labelAtts;                                                                                                    // 68\n}                                                                                                                      // 69\n                                                                                                                       // 70\nfunction formGroupInputAtts(atts) {                                                                                    // 71\n  // Separate input options from label and formgroup options                                                           // 72\n  // We also don't want the 'label' option                                                                             // 73\n  var inputAtts = {};                                                                                                  // 74\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 75\n    if (['id-prefix', 'id', 'label'].indexOf(key) === -1 && key.indexOf('label-') !== 0 && key.indexOf('formgroup-') !== 0) {\n      inputAtts[key] = val;                                                                                            // 77\n    }                                                                                                                  // 78\n  });                                                                                                                  // 79\n  return inputAtts;                                                                                                    // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7197\n}).call(this);                                                       // 7198\n                                                                     // 7199\n                                                                     // 7200\n                                                                     // 7201\n                                                                     // 7202\n                                                                     // 7203\n                                                                     // 7204\n(function () {                                                       // 7205\n                                                                     // 7206\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afObjectField/template.afObjectField.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField\");                                                                                 // 2\nTemplate[\"afObjectField\"] = new Template(\"Template.afObjectField\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7230\n}).call(this);                                                       // 7231\n                                                                     // 7232\n                                                                     // 7233\n                                                                     // 7234\n                                                                     // 7235\n                                                                     // 7236\n                                                                     // 7237\n(function () {                                                       // 7238\n                                                                     // 7239\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afObjectField/afObjectField.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afObjectField.helpers({                                                                                       // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('afObjectField', this.template, this.name);                                        // 5\n  },                                                                                                                   // 6\n  innerContext: function() {                                                                                           // 7\n    var c = AutoForm.Utility.getComponentContext(this, 'afObjectField');                                               // 8\n    return _.extend({}, this, c.atts);                                                                                 // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n                                                                                                                       // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7259\n}).call(this);                                                       // 7260\n                                                                     // 7261\n                                                                     // 7262\n                                                                     // 7263\n                                                                     // 7264\n                                                                     // 7265\n                                                                     // 7266\n(function () {                                                       // 7267\n                                                                     // 7268\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickField/template.afQuickField.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afQuickField\");                                                                                  // 2\nTemplate[\"afQuickField\"] = new Template(\"Template.afQuickField\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.If(function() {                                                                                         // 5\n    return Spacebars.call(view.lookup(\"isGroup\"));                                                                     // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"afObjectField\")), \"\\n  \" ];                              // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Blaze.If(function() {                                                                           // 10\n      return Spacebars.call(view.lookup(\"isFieldArray\"));                                                              // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"afArrayField\")), \"\\n    \" ];                         // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n      \", Blaze.If(function() {                                                                       // 15\n        return Spacebars.call(view.lookup(\"isHiddenInput\"));                                                           // 16\n      }, function() {                                                                                                  // 17\n        return [ \"\\n        \\n        \", Blaze._TemplateWith(function() {                                              // 18\n          return Spacebars.call(view.lookup(\"groupAtts\"));                                                             // 19\n        }, function() {                                                                                                // 20\n          return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                               // 21\n        }), \"\\n      \" ];                                                                                              // 22\n      }, function() {                                                                                                  // 23\n        return [ \"\\n        \", Blaze._TemplateWith(function() {                                                        // 24\n          return Spacebars.call(view.lookup(\"groupAtts\"));                                                             // 25\n        }, function() {                                                                                                // 26\n          return Spacebars.include(view.lookupTemplate(\"afFormGroup\"));                                                // 27\n        }), \"\\n      \" ];                                                                                              // 28\n      }), \"\\n    \" ];                                                                                                  // 29\n    }), \"\\n  \" ];                                                                                                      // 30\n  });                                                                                                                  // 31\n}));                                                                                                                   // 32\n                                                                                                                       // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7309\n}).call(this);                                                       // 7310\n                                                                     // 7311\n                                                                     // 7312\n                                                                     // 7313\n                                                                     // 7314\n                                                                     // 7315\n                                                                     // 7316\n(function () {                                                       // 7317\n                                                                     // 7318\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickField/afQuickField.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afQuickField.helpers({                                                                                        // 3\n  isGroup: function afQuickFieldIsGroup() {                                                                            // 4\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");                                                // 5\n    // Render a group of fields if we expect an Object and we don't have options                                       // 6\n    // and we have not overridden the type                                                                             // 7\n    return (c.defs.type === Object && !c.atts.options && !c.atts.type);                                                // 8\n  },                                                                                                                   // 9\n  isFieldArray: function afQuickFieldIsFieldArray() {                                                                  // 10\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");                                                // 11\n    // Render an array of fields if we expect an Array and we don't have options                                       // 12\n    // and we have not overridden the type                                                                             // 13\n    return (c.defs.type === Array && !c.atts.options && !c.atts.type);                                                 // 14\n  },                                                                                                                   // 15\n  groupAtts: function afQuickFieldGroupAtts() {                                                                        // 16\n    // afQuickField passes `fields` and `omitFields` on to `afObjectField`                                             // 17\n    // and `afArrayField`, but not to `afFormGroup`                                                                    // 18\n    return _.omit(this, 'fields', 'omitFields');                                                                       // 19\n  },                                                                                                                   // 20\n  isHiddenInput: function afQuickFieldIsHiddenInput() {                                                                // 21\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");                                                // 22\n    var inputType = c.atts.type;                                                                                       // 23\n    if (inputType) {                                                                                                   // 24\n      var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                    // 25\n      if (!componentDef) {                                                                                             // 26\n        throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');             // 27\n      }                                                                                                                // 28\n      return componentDef.isHidden;                                                                                    // 29\n    }                                                                                                                  // 30\n                                                                                                                       // 31\n    return false;                                                                                                      // 32\n  }                                                                                                                    // 33\n});                                                                                                                    // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7361\n}).call(this);                                                       // 7362\n                                                                     // 7363\n                                                                     // 7364\n                                                                     // 7365\n                                                                     // 7366\n                                                                     // 7367\n                                                                     // 7368\n(function () {                                                       // 7369\n                                                                     // 7370\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickFields/template.afQuickFields.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afQuickFields\");                                                                                 // 2\nTemplate[\"afQuickFields\"] = new Template(\"Template.afQuickFields\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.Each(function() {                                                                                       // 5\n    return Spacebars.dataMustache(view.lookup(\"afFieldNames\"), Spacebars.kw({                                          // 6\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Blaze._TemplateWith(function() {                                                                // 10\n      return Spacebars.call(view.lookup(\"quickFieldAtts\"));                                                            // 11\n    }, function() {                                                                                                    // 12\n      return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                   // 13\n    }), \"\\n  \" ];                                                                                                      // 14\n  });                                                                                                                  // 15\n}));                                                                                                                   // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7395\n}).call(this);                                                       // 7396\n                                                                     // 7397\n                                                                     // 7398\n                                                                     // 7399\n                                                                     // 7400\n                                                                     // 7401\n                                                                     // 7402\n(function () {                                                       // 7403\n                                                                     // 7404\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickFields/afQuickFields.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afQuickFields.helpers({                                                                                       // 3\n  quickFieldAtts: function afQuickFieldsQuickFieldAtts() {                                                             // 4\n    var afQuickFieldsComponentAtts, defaultOptions, atts = {};                                                         // 5\n                                                                                                                       // 6\n    // Get the attributes that were on the afQuickFields component                                                     // 7\n    afQuickFieldsComponentAtts = Template.parentData(1);                                                               // 8\n    // It's possible to call {{> afQuickFields}} with no attributes, in which case we                                  // 9\n    // don't want the \"attributes\" because they're really just the parent context.                                     // 10\n    if (!afQuickFieldsComponentAtts || afQuickFieldsComponentAtts.atts) {                                              // 11\n      afQuickFieldsComponentAtts = {};                                                                                 // 12\n    }                                                                                                                  // 13\n                                                                                                                       // 14\n    // Add default options from schema/allowed                                                                         // 15\n    defaultOptions = AutoForm._getOptionsForField(this.name);                                                          // 16\n    if (defaultOptions) {                                                                                              // 17\n      atts.options = defaultOptions;                                                                                   // 18\n    }                                                                                                                  // 19\n                                                                                                                       // 20\n    return _.extend(atts, afQuickFieldsComponentAtts, this);                                                           // 21\n  }                                                                                                                    // 22\n});                                                                                                                    // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7436\n}).call(this);                                                       // 7437\n                                                                     // 7438\n                                                                     // 7439\n                                                                     // 7440\n                                                                     // 7441\n                                                                     // 7442\n                                                                     // 7443\n(function () {                                                       // 7444\n                                                                     // 7445\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-events.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, Hooks, validateField, updateTrackedFieldValue, arrayTracker, updateAllTrackedFieldValues, SimpleSchema */\n                                                                                                                       // 2\n// all form events handled here                                                                                        // 3\nvar lastAutoSaveElement = null;                                                                                        // 4\nvar lastKeyVal = null;                                                                                                 // 5\n                                                                                                                       // 6\nfunction beginSubmit(formId, template, hookContext) {                                                                  // 7\n  if (!template || !template.view._domrange || template.view.isDestroyed) {                                            // 8\n    return;                                                                                                            // 9\n  }                                                                                                                    // 10\n                                                                                                                       // 11\n  // Get user-defined hooks                                                                                            // 12\n  var hooks = Hooks.getHooks(formId, 'beginSubmit');                                                                   // 13\n  if (hooks.length) {                                                                                                  // 14\n    _.each(hooks, function beginSubmitHooks(hook) {                                                                    // 15\n      hook.call(hookContext);                                                                                          // 16\n    });                                                                                                                // 17\n  } else {                                                                                                             // 18\n    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 19\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");                    // 20\n    if (submitButton) {                                                                                                // 21\n      submitButton.disabled = true;                                                                                    // 22\n    }                                                                                                                  // 23\n  }                                                                                                                    // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\nfunction endSubmit(formId, template, hookContext) {                                                                    // 27\n  if (!template || !template.view._domrange || template.view.isDestroyed) {                                            // 28\n    return;                                                                                                            // 29\n  }                                                                                                                    // 30\n                                                                                                                       // 31\n  // Try to avoid incorrect reporting of which input caused autosave                                                   // 32\n  lastAutoSaveElement = null;                                                                                          // 33\n  // Get user-defined hooks                                                                                            // 34\n  var hooks = Hooks.getHooks(formId, 'endSubmit');                                                                     // 35\n  if (hooks.length) {                                                                                                  // 36\n    _.each(hooks, function endSubmitHooks(hook) {                                                                      // 37\n      hook.call(hookContext);                                                                                          // 38\n    });                                                                                                                // 39\n  } else {                                                                                                             // 40\n    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 41\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");                    // 42\n    if (submitButton) {                                                                                                // 43\n      submitButton.disabled = false;                                                                                   // 44\n    }                                                                                                                  // 45\n  }                                                                                                                    // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\nfunction adjustKeyForArrays(key) {                                                                                     // 49\n  var gKey = SimpleSchema._makeGeneric(key);                                                                           // 50\n  if (gKey.slice(-2) === '.$' || gKey.indexOf('.$.') !== -1) {                                                         // 51\n    key = gKey.slice(0, gKey.indexOf('.$'));                                                                           // 52\n  }                                                                                                                    // 53\n  return key;                                                                                                          // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\n/**                                                                                                                    // 57\n * Returns `true` if the specified validation type should                                                              // 58\n * be revalidated only when the form is already invalid.                                                               // 59\n * @param {String} validationType The validation type string.                                                          // 60\n */                                                                                                                    // 61\nfunction onlyIfAlreadyInvalid(validationType) {                                                                        // 62\n  return validationType === 'submitThenKeyup' ||                                                                       // 63\n    validationType === 'submitThenBlur';                                                                               // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * Given an element, returns the schema key for it, using the                                                          // 68\n * `data-schema-key` attribute on the element or on the closest                                                        // 69\n * element that has one.                                                                                               // 70\n *                                                                                                                     // 71\n * @param   {Element}          element The DOM element                                                                 // 72\n * @returns {String|undefined} The schema key                                                                          // 73\n */                                                                                                                    // 74\nfunction getKeyForElement(element) {                                                                                   // 75\n  var key = element.getAttribute(\"data-schema-key\");                                                                   // 76\n  if (!key) {                                                                                                          // 77\n    key = $(element).closest('[data-schema-key]').attr(\"data-schema-key\");                                             // 78\n  }                                                                                                                    // 79\n  return key;                                                                                                          // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\n//throttle autosave, at most autosave every 500ms                                                                      // 83\nvar throttleAutosave = _.throttle(function(event) {                                                                    // 84\n  lastAutoSaveElement = event.target;                                                                                  // 85\n  $(event.currentTarget).submit();                                                                                     // 86\n}, 500, {leading: false});                                                                                             // 87\n                                                                                                                       // 88\nTemplate.autoForm.events({                                                                                             // 89\n  'submit form': function autoFormSubmitHandler(event, template) {                                                     // 90\n    var formDoc;                                                                                                       // 91\n    // Gather necessary form info                                                                                      // 92\n    var formId = this.id;                                                                                              // 93\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 94\n    var formType = form.type;                                                                                          // 95\n    // ss will be the schema for the `schema` attribute if present,                                                    // 96\n    // else the schema for the collection                                                                              // 97\n    var ss = AutoForm.getFormSchema(formId);                                                                           // 98\n    var collection = AutoForm.getFormCollection(formId);                                                               // 99\n    var ssIsOverride = !!(collection && form.schema);                                                                  // 100\n                                                                                                                       // 101\n    var currentDoc = form.doc;                                                                                         // 102\n    var docId = currentDoc ? currentDoc._id : null;                                                                    // 103\n    var isValid;                                                                                                       // 104\n                                                                                                                       // 105\n    var validationOptions = {                                                                                          // 106\n      validationContext: formId,                                                                                       // 107\n      filter: form.filter,                                                                                             // 108\n      autoConvert: form.autoConvert,                                                                                   // 109\n      removeEmptyStrings: form.removeEmptyStrings,                                                                     // 110\n      trimStrings: form.trimStrings                                                                                    // 111\n    };                                                                                                                 // 112\n                                                                                                                       // 113\n    // Get the form type definition                                                                                    // 114\n    var ftd;                                                                                                           // 115\n    try {                                                                                                              // 116\n      ftd = Utility.getFormTypeDef(formType);                                                                          // 117\n    } catch (err) {                                                                                                    // 118\n      event.preventDefault();                                                                                          // 119\n      throw err;                                                                                                       // 120\n    }                                                                                                                  // 121\n                                                                                                                       // 122\n    // Gather hooks                                                                                                    // 123\n    var onSuccessHooks = Hooks.getHooks(formId, 'onSuccess');                                                          // 124\n    var onErrorHooks = Hooks.getHooks(formId, 'onError');                                                              // 125\n    var beforeHooks = Hooks.getHooks(formId, 'before', formType);                                                      // 126\n    var afterHooks = Hooks.getHooks(formId, 'after', formType);                                                        // 127\n                                                                                                                       // 128\n    // Prep context with which hooks are called                                                                        // 129\n    var hookContext = {                                                                                                // 130\n      addStickyValidationError: function (key, type, value) {                                                          // 131\n        AutoForm.templateInstanceForForm(formId)._stickyErrors[key] = {type: type, value: value};                      // 132\n      },                                                                                                               // 133\n      autoSaveChangedElement: lastAutoSaveElement,                                                                     // 134\n      collection: collection,                                                                                          // 135\n      currentDoc: currentDoc,                                                                                          // 136\n      docId: docId,                                                                                                    // 137\n      event: event,                                                                                                    // 138\n      formAttributes: form,                                                                                            // 139\n      formId: formId,                                                                                                  // 140\n      formTypeDefinition: ftd,                                                                                         // 141\n      removeStickyValidationError: function (key) {                                                                    // 142\n        delete AutoForm.templateInstanceForForm(formId)._stickyErrors[key];                                            // 143\n        // revalidate that field                                                                                       // 144\n        validateField(key, formId, false, false);                                                                      // 145\n      },                                                                                                               // 146\n      resetForm: function () {                                                                                         // 147\n        AutoForm.resetForm(formId, template);                                                                          // 148\n      },                                                                                                               // 149\n      ss: ss,                                                                                                          // 150\n      ssIsOverride: ssIsOverride,                                                                                      // 151\n      template: template,                                                                                              // 152\n      validationContext: AutoForm.getValidationContext(formId)                                                         // 153\n    };                                                                                                                 // 154\n                                                                                                                       // 155\n    // Gather all form values                                                                                          // 156\n    if (ftd.needsModifierAndDoc) {                                                                                     // 157\n      formDoc = AutoForm.getFormValues(formId, template, ss);                                                          // 158\n      hookContext.updateDoc = formDoc.updateDoc;                                                                       // 159\n      hookContext.insertDoc = formDoc.insertDoc;                                                                       // 160\n    } else if (ftd.usesModifier) {                                                                                     // 161\n      formDoc = AutoForm.getFormValues(formId, template, ss, true);                                                    // 162\n      hookContext.updateDoc = formDoc;                                                                                 // 163\n    } else {                                                                                                           // 164\n      formDoc = AutoForm.getFormValues(formId, template, ss, false);                                                   // 165\n      hookContext.insertDoc = formDoc;                                                                                 // 166\n    }                                                                                                                  // 167\n                                                                                                                       // 168\n    // It is pretty unlikely since we are submitting it, but if                                                        // 169\n    // for some reason this form is not currently rendered, we exit.                                                   // 170\n    if (!formDoc) {                                                                                                    // 171\n      event.preventDefault();                                                                                          // 172\n      return;                                                                                                          // 173\n    }                                                                                                                  // 174\n                                                                                                                       // 175\n    function endSubmission() {                                                                                         // 176\n      // Run endSubmit hooks (re-enabled submit button or form, etc.)                                                  // 177\n      endSubmit(formId, template, hookContext);                                                                        // 178\n    }                                                                                                                  // 179\n                                                                                                                       // 180\n    function failedValidation() {                                                                                      // 181\n      // add invalidKeys array as a property                                                                           // 182\n      // of the Error object before we call                                                                            // 183\n      // onError hooks                                                                                                 // 184\n      var ec = ss.namedContext(formId);                                                                                // 185\n      var ik = ec.invalidKeys(), error;                                                                                // 186\n      if (ik) {                                                                                                        // 187\n        if (ik.length) {                                                                                               // 188\n          // We add `message` prop to the invalidKeys.                                                                 // 189\n          // Maybe SS pkg should just add that property back in?                                                       // 190\n          ik = _.map(ik, function (o) {                                                                                // 191\n            return _.extend({message: ec.keyErrorMessage(o.name)}, o);                                                 // 192\n          });                                                                                                          // 193\n          error = new Error(ik[0].message);                                                                            // 194\n        } else {                                                                                                       // 195\n          error = new Error('form failed validation');                                                                 // 196\n        }                                                                                                              // 197\n        error.invalidKeys = ik;                                                                                        // 198\n      } else {                                                                                                         // 199\n        error = new Error('form failed validation');                                                                   // 200\n      }                                                                                                                // 201\n      _.each(onErrorHooks, function onErrorEach(hook) {                                                                // 202\n        hook.call(hookContext, 'pre-submit validation', error);                                                        // 203\n      });                                                                                                              // 204\n      event.preventDefault();                                                                                          // 205\n      event.stopPropagation();                                                                                         // 206\n      endSubmission();                                                                                                 // 207\n    }                                                                                                                  // 208\n                                                                                                                       // 209\n    // Prep function that calls before hooks.                                                                          // 210\n    function runBeforeHooks(doc, next) {                                                                               // 211\n      // We call the hooks recursively, in order added,                                                                // 212\n      // passing the result of the first hook to the                                                                   // 213\n      // second hook, etc.                                                                                             // 214\n      function runHook(i, doc) {                                                                                       // 215\n        var hook = beforeHooks[i];                                                                                     // 216\n                                                                                                                       // 217\n        if (!hook) {                                                                                                   // 218\n          // We've run all hooks; continue submission                                                                  // 219\n          next(doc);                                                                                                   // 220\n          return;                                                                                                      // 221\n        }                                                                                                              // 222\n                                                                                                                       // 223\n        // Define a `result` function                                                                                  // 224\n        var cb = function (d) {                                                                                        // 225\n          // If the hook returns false, we cancel                                                                      // 226\n          if (d === false) {                                                                                           // 227\n            endSubmission();                                                                                           // 228\n          } else if (!_.isObject(d)) {                                                                                 // 229\n            throw new Error(\"A 'before' hook must return an object\");                                                  // 230\n          } else {                                                                                                     // 231\n            runHook(i+1, d);                                                                                           // 232\n          }                                                                                                            // 233\n        };                                                                                                             // 234\n                                                                                                                       // 235\n        // Add the `result` function to the before hook context                                                        // 236\n        var ctx = _.extend({                                                                                           // 237\n          result: _.once(cb)                                                                                           // 238\n        }, hookContext);                                                                                               // 239\n                                                                                                                       // 240\n        var result = hook.call(ctx, doc);                                                                              // 241\n                                                                                                                       // 242\n        // If the hook returns undefined, we wait for it                                                               // 243\n        // to call this.result()                                                                                       // 244\n        if (result !== void 0) {                                                                                       // 245\n          ctx.result(result);                                                                                          // 246\n        }                                                                                                              // 247\n      }                                                                                                                // 248\n                                                                                                                       // 249\n      runHook(0, doc);                                                                                                 // 250\n    }                                                                                                                  // 251\n                                                                                                                       // 252\n    // Prep function that calls after, onError, and onSuccess hooks.                                                   // 253\n    // Also resets the form on success.                                                                                // 254\n    function resultCallback(error, result) {                                                                           // 255\n      if (error) {                                                                                                     // 256\n        if (onErrorHooks && onErrorHooks.length) {                                                                     // 257\n          _.each(onErrorHooks, function onErrorEach(hook) {                                                            // 258\n            hook.call(hookContext, formType, error);                                                                   // 259\n          });                                                                                                          // 260\n        } else if ((!afterHooks || !afterHooks.length) && ss.namedContext(formId).isValid()) {                         // 261\n          // if there are no onError or \"after\" hooks or validation errors, log the error                              // 262\n          // because it must be some other error from the server                                                       // 263\n          console.log(error);                                                                                          // 264\n        }                                                                                                              // 265\n      } else {                                                                                                         // 266\n        // By default, we reset form after successful submit, but                                                      // 267\n        // you can opt out. We should never reset after submit                                                         // 268\n        // when autosaving.                                                                                            // 269\n        if (form.resetOnSuccess !== false && form.autosave !== true) {                                                 // 270\n          AutoForm.resetForm(formId, template);                                                                        // 271\n        }                                                                                                              // 272\n        // Set docId in the context for insert forms, too                                                              // 273\n        if (formType === \"insert\") {                                                                                   // 274\n          hookContext.docId = result;                                                                                  // 275\n        }                                                                                                              // 276\n        _.each(onSuccessHooks, function onSuccessEach(hook) {                                                          // 277\n          hook.call(hookContext, formType, result);                                                                    // 278\n        });                                                                                                            // 279\n      }                                                                                                                // 280\n      _.each(afterHooks, function afterHooksEach(hook) {                                                               // 281\n        hook.call(hookContext, error, result);                                                                         // 282\n      });                                                                                                              // 283\n      endSubmission();                                                                                                 // 284\n    }                                                                                                                  // 285\n                                                                                                                       // 286\n    // Run beginSubmit hooks (disable submit button or form, etc.)                                                     // 287\n    // NOTE: This needs to stay after getFormValues in case a                                                          // 288\n    // beginSubmit hook disables inputs. We don't get values for                                                       // 289\n    // disabled inputs, but if they are just disabling during submission,                                              // 290\n    // then we actually do want the values.                                                                            // 291\n    //                                                                                                                 // 292\n    // Also keep this before prevalidation so that sticky errors can be                                                // 293\n    // removed in this hook.                                                                                           // 294\n    beginSubmit(formId, template, hookContext);                                                                        // 295\n                                                                                                                       // 296\n    // Ask form type definition whether we should prevalidate. By default we do.                                       // 297\n    var shouldPrevalidate = ftd.shouldPrevalidate ? ftd.shouldPrevalidate.call(hookContext) : true;                    // 298\n                                                                                                                       // 299\n    if (shouldPrevalidate) {                                                                                           // 300\n      // This validation pass happens before any \"before\" hooks run. We                                                // 301\n      // validate against the form schema. Then before hooks can add any missing                                       // 302\n      // properties before we validate against the full collection schema.                                             // 303\n      try {                                                                                                            // 304\n        isValid = (form.validation === 'none') ||                                                                      // 305\n          ftd.validateForm.call({                                                                                      // 306\n            form: form,                                                                                                // 307\n            formDoc: formDoc,                                                                                          // 308\n            useCollectionSchema: false                                                                                 // 309\n          });                                                                                                          // 310\n      } catch (e) {                                                                                                    // 311\n        // Catch exceptions in validation functions which will bubble up here, cause a form with                       // 312\n        // onSubmit() to submit prematurely and prevent the error from being reported                                  // 313\n        // (due to a page refresh).                                                                                    // 314\n        console.error('Validation error', e);                                                                          // 315\n        isValid = false;                                                                                               // 316\n      }                                                                                                                // 317\n      // If we failed pre-submit validation, we stop submission.                                                       // 318\n      if (isValid === false) {                                                                                         // 319\n        failedValidation();                                                                                            // 320\n        return;                                                                                                        // 321\n      }                                                                                                                // 322\n    }                                                                                                                  // 323\n                                                                                                                       // 324\n    // Call onSubmit from the form type definition                                                                     // 325\n    ftd.onSubmit.call(_.extend({                                                                                       // 326\n      runBeforeHooks: runBeforeHooks,                                                                                  // 327\n      result: resultCallback,                                                                                          // 328\n      endSubmission: endSubmission,                                                                                    // 329\n      failedValidation: failedValidation,                                                                              // 330\n      validationOptions: validationOptions,                                                                            // 331\n      hookContext: hookContext                                                                                         // 332\n    }, hookContext));                                                                                                  // 333\n  },                                                                                                                   // 334\n  'keyup [data-schema-key]': function autoFormKeyUpHandler(event) {                                                    // 335\n    // validateField is throttled, so we need to get the nearest form's                                                // 336\n    // ID here, while we're still in the correct context                                                               // 337\n    var formId = AutoForm.getFormId();                                                                                 // 338\n                                                                                                                       // 339\n    // Get current form data context                                                                                   // 340\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 341\n                                                                                                                       // 342\n    var validationType = form.validation;                                                                              // 343\n    var skipEmpty = !(event.keyCode === 8 || event.keyCode === 46); //if deleting or backspacing, don't skip empty     // 344\n                                                                                                                       // 345\n    if ((validationType === 'keyup' || validationType === 'submitThenKeyup')) {                                        // 346\n      var key = getKeyForElement(event.currentTarget);                                                                 // 347\n      if (!key) {return;}                                                                                              // 348\n                                                                                                                       // 349\n      validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));                                     // 350\n                                                                                                                       // 351\n      // If it's an array field, we also want to validate the entire topmost array                                     // 352\n      // in case there are minCount/maxCount errors, etc.                                                              // 353\n      var arrayKey = adjustKeyForArrays(key);                                                                          // 354\n      if (arrayKey !== key) {                                                                                          // 355\n        validateField(arrayKey, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));                              // 356\n      }                                                                                                                // 357\n                                                                                                                       // 358\n      // If the form should be auto-saved whenever updated, we do that on field                                        // 359\n      // changes instead of validating the field                                                                       // 360\n      if (form.autosaveOnKeyup === true) {                                                                             // 361\n        throttleAutosave(event);                                                                                       // 362\n      }                                                                                                                // 363\n    }                                                                                                                  // 364\n  },                                                                                                                   // 365\n  'blur [data-schema-key]': function autoFormBlurHandler(event) {                                                      // 366\n    // validateField is throttled, so we need to get the nearest form's                                                // 367\n    // ID here, while we're still in the correct context                                                               // 368\n    var formId = AutoForm.getFormId();                                                                                 // 369\n                                                                                                                       // 370\n    // Get current form data context                                                                                   // 371\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 372\n    var validationType = form.validation;                                                                              // 373\n                                                                                                                       // 374\n    if (validationType === 'keyup' ||                                                                                  // 375\n        validationType === 'blur' ||                                                                                   // 376\n        validationType === 'submitThenKeyup' ||                                                                        // 377\n        validationType === 'submitThenBlur') {                                                                         // 378\n      var key = getKeyForElement(event.currentTarget);                                                                 // 379\n      if (!key) {return;}                                                                                              // 380\n                                                                                                                       // 381\n      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));                                         // 382\n                                                                                                                       // 383\n      // If it's an array field, we also want to validate the entire topmost array                                     // 384\n      // in case there are minCount/maxCount errors, etc.                                                              // 385\n      var arrayKey = adjustKeyForArrays(key);                                                                          // 386\n      if (arrayKey !== key) {                                                                                          // 387\n        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));                                  // 388\n      }                                                                                                                // 389\n    }                                                                                                                  // 390\n  },                                                                                                                   // 391\n  'change form': function autoFormChangeHandler(event, template) {                                                     // 392\n    var key = getKeyForElement(event.target);                                                                          // 393\n    if (!key) {return;}                                                                                                // 394\n                                                                                                                       // 395\n    // Some plugins, like jquery.inputmask, can cause infinite                                                         // 396\n    // loops by continually saying the field changed when it did not,                                                  // 397\n    // especially in an autosave situation. This is an attempt to                                                      // 398\n    // prevent that from happening.                                                                                    // 399\n    var keyVal = event.target.value;                                                                                   // 400\n    if (event.target.type === 'checkbox') {                                                                            // 401\n      // Special handling for checkboxes, which always have the same value                                             // 402\n      keyVal = keyVal + '_' + $(event.target).prop('checked');                                                         // 403\n    }                                                                                                                  // 404\n                                                                                                                       // 405\n    keyVal = key + '___' + keyVal;                                                                                     // 406\n                                                                                                                       // 407\n    if (keyVal === lastKeyVal) {                                                                                       // 408\n      return;                                                                                                          // 409\n    }                                                                                                                  // 410\n    lastKeyVal = keyVal;                                                                                               // 411\n                                                                                                                       // 412\n    var formId = this.id;                                                                                              // 413\n                                                                                                                       // 414\n    // Mark field value as changed for reactive updates                                                                // 415\n    updateTrackedFieldValue(template, key);                                                                            // 416\n                                                                                                                       // 417\n    // Get current form data context                                                                                   // 418\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 419\n                                                                                                                       // 420\n    // If the form should be auto-saved whenever updated, we do that on field                                          // 421\n    // changes instead of validating the field                                                                         // 422\n    if (form.autosave === true || form.autosaveOnKeyup === true) {                                                     // 423\n      lastAutoSaveElement = event.target;                                                                              // 424\n      $(event.currentTarget).submit();                                                                                 // 425\n      return;                                                                                                          // 426\n    }                                                                                                                  // 427\n                                                                                                                       // 428\n    var validationType = form.validation;                                                                              // 429\n                                                                                                                       // 430\n    if (validationType === 'keyup' ||                                                                                  // 431\n        validationType === 'blur' ||                                                                                   // 432\n        validationType === 'submitThenKeyup' ||                                                                        // 433\n        validationType === 'submitThenBlur') {                                                                         // 434\n                                                                                                                       // 435\n      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));                                         // 436\n                                                                                                                       // 437\n      // If it's an array field, we also want to validate the entire topmost array                                     // 438\n      // in case there are minCount/maxCount errors, etc.                                                              // 439\n      var arrayKey = adjustKeyForArrays(key);                                                                          // 440\n      if (arrayKey !== key) {                                                                                          // 441\n        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));                                  // 442\n      }                                                                                                                // 443\n    }                                                                                                                  // 444\n  },                                                                                                                   // 445\n  'reset form': function autoFormResetHandler(event, template) {                                                       // 446\n    var formId = this.id;                                                                                              // 447\n                                                                                                                       // 448\n    AutoForm.formPreserve.clearDocument(formId);                                                                       // 449\n                                                                                                                       // 450\n    // Reset array counts                                                                                              // 451\n    arrayTracker.resetForm(formId);                                                                                    // 452\n                                                                                                                       // 453\n    var vc = AutoForm.getValidationContext(formId);                                                                    // 454\n    if (vc) {                                                                                                          // 455\n      vc.resetValidation();                                                                                            // 456\n      // If simpleSchema is undefined, we haven't yet rendered the form, and therefore                                 // 457\n      // there is no need to reset validation for it. No error need be thrown.                                         // 458\n    }                                                                                                                  // 459\n                                                                                                                       // 460\n    if (this.doc) {                                                                                                    // 461\n      event.preventDefault();                                                                                          // 462\n      AutoForm._forceResetFormValues(formId);                                                                          // 463\n    }                                                                                                                  // 464\n                                                                                                                       // 465\n    // Mark all fields as changed                                                                                      // 466\n    updateAllTrackedFieldValues(template);                                                                             // 467\n    // Focus the autofocus element                                                                                     // 468\n    template.$(\"[autofocus]\").focus();                                                                                 // 469\n                                                                                                                       // 470\n  },                                                                                                                   // 471\n  'keydown .autoform-array-item input': function (event) {                                                             // 472\n    // When enter is pressed in an array item field, default behavior                                                  // 473\n    // seems to be to \"click\" the remove item button. This doesn't make                                                // 474\n    // sense so we stop it.                                                                                            // 475\n    if (event.keyCode === 13) {                                                                                        // 476\n      event.preventDefault();                                                                                          // 477\n    }                                                                                                                  // 478\n  },                                                                                                                   // 479\n  'click .autoform-remove-item': function autoFormClickRemoveItem(event, template) {                                   // 480\n    var self = this; // This type of button must be used within an afEachArrayItem block, so we know the context       // 481\n                                                                                                                       // 482\n    event.preventDefault();                                                                                            // 483\n                                                                                                                       // 484\n    var name = self.arrayFieldName;                                                                                    // 485\n    var minCount = self.minCount; // optional, overrides schema                                                        // 486\n    var maxCount = self.maxCount; // optional, overrides schema                                                        // 487\n    var index = self.index;                                                                                            // 488\n    var data = template.data;                                                                                          // 489\n    var formId = data && data.id;                                                                                      // 490\n    var ss = AutoForm.getFormSchema(formId);                                                                           // 491\n                                                                                                                       // 492\n    // remove the item we clicked                                                                                      // 493\n    arrayTracker.removeFromFieldAtIndex(formId, name, index, ss, minCount, maxCount);                                  // 494\n  },                                                                                                                   // 495\n  'click .autoform-add-item': function autoFormClickAddItem(event, template) {                                         // 496\n    event.preventDefault();                                                                                            // 497\n                                                                                                                       // 498\n    // We pull from data attributes because the button could be manually                                               // 499\n    // added anywhere, so we don't know the data context.                                                              // 500\n    var btn = $(event.currentTarget);                                                                                  // 501\n    var name = btn.attr(\"data-autoform-field\");                                                                        // 502\n    var minCount = btn.attr(\"data-autoform-minCount\"); // optional, overrides schema                                   // 503\n    var maxCount = btn.attr(\"data-autoform-maxCount\"); // optional, overrides schema                                   // 504\n                                                                                                                       // 505\n    var data = template.data;                                                                                          // 506\n    var formId = data && data.id;                                                                                      // 507\n    var ss = AutoForm.getFormSchema(formId);                                                                           // 508\n                                                                                                                       // 509\n    arrayTracker.addOneToField(formId, name, ss, minCount, maxCount);                                                  // 510\n  }                                                                                                                    // 511\n});                                                                                                                    // 512\n                                                                                                                       // 513\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7966\n}).call(this);                                                       // 7967\n                                                                     // 7968\n                                                                     // 7969\n                                                                     // 7970\n                                                                     // 7971\n                                                                     // 7972\n                                                                     // 7973\n(function () {                                                       // 7974\n                                                                     // 7975\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/bootstrap3.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\n/*                                                                                                                     // 3\n * Template helpers for \"bootstrap3\" templates                                                                         // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\nTemplate.registerHelper('attsPlusFormControlClass', function attsPlusFormControlClass() {                              // 7\n  var atts = _.clone(this.atts);                                                                                       // 8\n  // Add bootstrap class                                                                                               // 9\n  atts = AutoForm.Utility.addClass(atts, \"form-control\");                                                              // 10\n  return atts;                                                                                                         // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\nTemplate.registerHelper('attsPlusBtnClass', function attsPlusBtnClass() {                                              // 14\n  var atts = _.clone(this.atts);                                                                                       // 15\n  // Add bootstrap class                                                                                               // 16\n  atts = AutoForm.Utility.addClass(atts, \"btn\");                                                                       // 17\n  return atts;                                                                                                         // 18\n});                                                                                                                    // 19\n                                                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8003\n}).call(this);                                                       // 8004\n                                                                     // 8005\n                                                                     // 8006\n                                                                     // 8007\n                                                                     // 8008\n                                                                     // 8009\n                                                                     // 8010\n(function () {                                                       // 8011\n                                                                     // 8012\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/quickForm/template.quickForm.js                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3\");                                                                          // 2\nTemplate[\"quickForm_bootstrap3\"] = new Template(\"Template.quickForm_bootstrap3\", (function() {                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n\\n    \", Spacebars.With(function() {                                                                 // 9\n        return Spacebars.call(view.lookup(\"grouplessFields\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", Blaze._TemplateWith(function() {                                                          // 12\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 13\n        }, function() {                                                                                                // 14\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 15\n        }), \"\\n    \" ];                                                                                                // 16\n      }), \"\\n\\n    \", Blaze.Each(function() {                                                                          // 17\n        return Spacebars.call(view.lookup(\"fieldGroups\"));                                                             // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.FIELDSET({                                                                           // 20\n          \"class\": \"af-fieldGroup\"                                                                                     // 21\n        }, \"\\n        \", Spacebars.With(function() {                                                                   // 22\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));                                                       // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n          \", HTML.LEGEND({                                                                       // 25\n            \"class\": \"af-fieldGroup-heading\"                                                                           // 26\n          }, Blaze.View(\"lookup:.\", function() {                                                                       // 27\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 28\n          })), \"\\n        \" ];                                                                                         // 29\n        }), \"\\n        \", Blaze._TemplateWith(function() {                                                             // 30\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 31\n        }, function() {                                                                                                // 32\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 33\n        }), \"\\n      \"), \"\\n    \" ];                                                                                   // 34\n      }), \"\\n\\n    \", Blaze.If(function() {                                                                            // 35\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 36\n      }, function() {                                                                                                  // 37\n        return [ \"\\n      \", HTML.DIV({                                                                                // 38\n          \"class\": \"form-group\"                                                                                        // 39\n        }, \"\\n        \", HTML.BUTTON(HTML.Attrs({                                                                      // 40\n          type: \"submit\"                                                                                               // 41\n        }, function() {                                                                                                // 42\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 43\n        }), \"\\n          \", Spacebars.With(function() {                                                                // 44\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 45\n        }, function() {                                                                                                // 46\n          return [ \"\\n          \", Blaze.View(\"lookup:.\", function() {                                                 // 47\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 48\n          }), \"\\n          \" ];                                                                                        // 49\n        }, function() {                                                                                                // 50\n          return \"\\n          Submit\\n          \";                                                                     // 51\n        }), \"\\n        \"), \"\\n      \"), \"\\n    \" ];                                                                    // 52\n      }), \"\\n\\n  \" ];                                                                                                  // 53\n    });                                                                                                                // 54\n  });                                                                                                                  // 55\n}));                                                                                                                   // 56\n                                                                                                                       // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8077\n}).call(this);                                                       // 8078\n                                                                     // 8079\n                                                                     // 8080\n                                                                     // 8081\n                                                                     // 8082\n                                                                     // 8083\n                                                                     // 8084\n(function () {                                                       // 8085\n                                                                     // 8086\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/quickForm/quickForm.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.quickForm_bootstrap3.helpers({                                                                                // 1\n  fieldGroupLabel: function () {                                                                                       // 2\n    var name = this.name;                                                                                              // 3\n                                                                                                                       // 4\n    // if field group name is of the form XY_abcde where \"XY\" is a number, remove prefix                               // 5\n    if (!isNaN(parseInt(name.substr(0,2), 10)) && name.charAt(2) === \"_\") {                                            // 6\n      name = name.substr(3);                                                                                           // 7\n    }                                                                                                                  // 8\n                                                                                                                       // 9\n    // if SimpleSchema.defaultLabel is defined, use it                                                                 // 10\n    if (typeof SimpleSchema.defaultLabel === \"function\") {                                                             // 11\n      return SimpleSchema.defaultLabel(name);                                                                          // 12\n    } else {                                                                                                           // 13\n      // else, just capitalise name                                                                                    // 14\n      return name.charAt(0).toUpperCase() + name.slice(1);                                                             // 15\n    }                                                                                                                  // 16\n  },                                                                                                                   // 17\n  quickFieldsAtts: function () {                                                                                       // 18\n    // These are the quickForm attributes that we want to forward to                                                   // 19\n    // the afQuickFields component.                                                                                    // 20\n    return _.pick(this.atts, 'fields', 'id-prefix', 'input-col-class', 'label-class');                                 // 21\n  },                                                                                                                   // 22\n  submitButtonAtts: function bsQuickFormSubmitButtonAtts() {                                                           // 23\n    var qfAtts = this.atts;                                                                                            // 24\n    var atts = {};                                                                                                     // 25\n    if (typeof qfAtts.buttonClasses === 'string') {                                                                    // 26\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 27\n    } else {                                                                                                           // 28\n      atts['class'] = 'btn btn-primary';                                                                               // 29\n    }                                                                                                                  // 30\n    return atts;                                                                                                       // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\n                                                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8128\n}).call(this);                                                       // 8129\n                                                                     // 8130\n                                                                     // 8131\n                                                                     // 8132\n                                                                     // 8133\n                                                                     // 8134\n                                                                     // 8135\n(function () {                                                       // 8136\n                                                                     // 8137\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/afArrayField/template.afArrayField.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField_bootstrap3\");                                                                       // 2\nTemplate[\"afArrayField_bootstrap3\"] = new Template(\"Template.afArrayField_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": \"panel panel-default\"                                                                                     // 6\n  }, \"\\n    \", HTML.DIV({                                                                                              // 7\n    \"class\": \"panel-heading\"                                                                                           // 8\n  }, Blaze.View(\"lookup:afFieldLabelText\", function() {                                                                // 9\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 10\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 11\n    }));                                                                                                               // 12\n  })), \"\\n    \", Blaze.If(function() {                                                                                 // 13\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 14\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 15\n    }));                                                                                                               // 16\n  }, function() {                                                                                                      // 17\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 18\n      \"class\": \"panel-body has-error\"                                                                                  // 19\n    }, \"\\n      \", HTML.SPAN({                                                                                         // 20\n      \"class\": \"help-block\"                                                                                            // 21\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                // 22\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 23\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 24\n      })));                                                                                                            // 25\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 26\n  }), \"\\n    \", HTML.UL({                                                                                              // 27\n    \"class\": \"list-group\"                                                                                              // 28\n  }, \"\\n      \", Blaze._TemplateWith(function() {                                                                      // 29\n    return {                                                                                                           // 30\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 31\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 32\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 33\n    };                                                                                                                 // 34\n  }, function() {                                                                                                      // 35\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 36\n      return [ \"\\n      \", HTML.LI({                                                                                   // 37\n        \"class\": \"list-group-item autoform-array-item\"                                                                 // 38\n      }, \"\\n        \", HTML.DIV(\"\\n          \", HTML.DIV({                                                             // 39\n        \"class\": \"autoform-remove-item-wrap\"                                                                           // 40\n      }, \"\\n            \", Blaze.If(function() {                                                                       // 41\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 42\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 43\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 44\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 45\n        }));                                                                                                           // 46\n      }, function() {                                                                                                  // 47\n        return [ \"\\n            \", HTML.BUTTON({                                                                       // 48\n          type: \"button\",                                                                                              // 49\n          \"class\": \"btn btn-primary autoform-remove-item\"                                                              // 50\n        }, HTML.SPAN({                                                                                                 // 51\n          \"class\": \"glyphicon glyphicon-minus\"                                                                         // 52\n        })), \"\\n            \" ];                                                                                       // 53\n      }), \"\\n          \"), \"\\n          \", HTML.DIV({                                                                  // 54\n        \"class\": \"autoform-array-item-body\"                                                                            // 55\n      }, \"\\n            \", Blaze._TemplateWith(function() {                                                            // 56\n        return {                                                                                                       // 57\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 58\n          label: Spacebars.call(false),                                                                                // 59\n          options: Spacebars.call(view.lookup(\"afOptionsFromSchema\"))                                                  // 60\n        };                                                                                                             // 61\n      }, function() {                                                                                                  // 62\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 63\n      }), \"\\n          \"), \"\\n        \"), \"\\n      \"), \"\\n      \" ];                                                   // 64\n    });                                                                                                                // 65\n  }), \"\\n      \", Blaze.If(function() {                                                                                // 66\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 67\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 68\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 69\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 70\n    }));                                                                                                               // 71\n  }, function() {                                                                                                      // 72\n    return [ \"\\n      \", HTML.LI({                                                                                     // 73\n      \"class\": \"list-group-item\"                                                                                       // 74\n    }, \"\\n        \", HTML.BUTTON({                                                                                     // 75\n      type: \"button\",                                                                                                  // 76\n      \"class\": \"btn btn-primary autoform-add-item\",                                                                    // 77\n      \"data-autoform-field\": function() {                                                                              // 78\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 79\n      },                                                                                                               // 80\n      \"data-autoform-mincount\": function() {                                                                           // 81\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 82\n      },                                                                                                               // 83\n      \"data-autoform-maxcount\": function() {                                                                           // 84\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 85\n      }                                                                                                                // 86\n    }, HTML.SPAN({                                                                                                     // 87\n      \"class\": \"glyphicon glyphicon-plus\"                                                                              // 88\n    })), \"\\n      \"), \"\\n      \" ];                                                                                    // 89\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 90\n}));                                                                                                                   // 91\n                                                                                                                       // 92\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8237\n}).call(this);                                                       // 8238\n                                                                     // 8239\n                                                                     // 8240\n                                                                     // 8241\n                                                                     // 8242\n                                                                     // 8243\n                                                                     // 8244\n(function () {                                                       // 8245\n                                                                     // 8246\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/afFormGroup/template.afFormGroup.js                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup_bootstrap3\");                                                                        // 2\nTemplate[\"afFormGroup_bootstrap3\"] = new Template(\"Template.afFormGroup_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 13\n    },                                                                                                                 // 14\n    \"data-required\": function() {                                                                                      // 15\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 16\n    }                                                                                                                  // 17\n  }, function() {                                                                                                      // 18\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 19\n  }), \"\\n    \", Blaze.Unless(function() {                                                                              // 20\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 21\n  }, function() {                                                                                                      // 22\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 23\n      return Spacebars.attrMustache(view.lookup(\"bsFieldLabelAtts\"));                                                  // 24\n    }), Blaze.If(function() {                                                                                          // 25\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 26\n    }, function() {                                                                                                    // 27\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 28\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 29\n      });                                                                                                              // 30\n    }, function() {                                                                                                    // 31\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 32\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 33\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 34\n        }));                                                                                                           // 35\n      });                                                                                                              // 36\n    })), \"\\n    \" ];                                                                                                   // 37\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 38\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));                                        // 39\n  }, function() {                                                                                                      // 40\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 41\n  }), \"\\n    \", HTML.SPAN({                                                                                            // 42\n    \"class\": \"help-block\"                                                                                              // 43\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                  // 44\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 45\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 46\n    })));                                                                                                              // 47\n  })), \"\\n  \");                                                                                                        // 48\n}));                                                                                                                   // 49\n                                                                                                                       // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8304\n}).call(this);                                                       // 8305\n                                                                     // 8306\n                                                                     // 8307\n                                                                     // 8308\n                                                                     // 8309\n                                                                     // 8310\n                                                                     // 8311\n(function () {                                                       // 8312\n                                                                     // 8313\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/afFormGroup/afFormGroup.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afFormGroup_bootstrap3.helpers({                                                                              // 1\n  skipLabel: function bsFormGroupSkipLabel() {                                                                         // 2\n    var self = this;                                                                                                   // 3\n                                                                                                                       // 4\n    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 5\n    return (self.skipLabel || type === \"boolean-checkbox\");                                                            // 6\n  },                                                                                                                   // 7\n  bsFieldLabelAtts: function bsFieldLabelAtts() {                                                                      // 8\n    var atts = _.clone(this.afFieldLabelAtts);                                                                         // 9\n    // Add bootstrap class                                                                                             // 10\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");                                                           // 11\n    return atts;                                                                                                       // 12\n  }                                                                                                                    // 13\n});                                                                                                                    // 14\n                                                                                                                       // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8336\n}).call(this);                                                       // 8337\n                                                                     // 8338\n                                                                     // 8339\n                                                                     // 8340\n                                                                     // 8341\n                                                                     // 8342\n                                                                     // 8343\n(function () {                                                       // 8344\n                                                                     // 8345\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/afObjectField/template.afObjectField.js                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField_bootstrap3\");                                                                      // 2\nTemplate[\"afObjectField_bootstrap3\"] = new Template(\"Template.afObjectField_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"panel \", Spacebars.mustache(view.lookup(\"panelClass\")) ];                                              // 7\n    }                                                                                                                  // 8\n  }, \"\\n    \", Spacebars.With(function() {                                                                             // 9\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 10\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 11\n    }));                                                                                                               // 12\n  }, function() {                                                                                                      // 13\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 14\n      \"class\": function() {                                                                                            // 15\n        return [ \"panel-heading \", Spacebars.mustache(view.lookup(\"headingClass\")) ];                                  // 16\n      }                                                                                                                // 17\n    }, \"\\n      \", HTML.H3({                                                                                           // 18\n      \"class\": \"panel-title\"                                                                                           // 19\n    }, Blaze.View(\"lookup:.\", function() {                                                                             // 20\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 21\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 22\n  }), \"\\n    \", HTML.DIV({                                                                                             // 23\n    \"class\": function() {                                                                                              // 24\n      return [ \"panel-body \", Spacebars.mustache(view.lookup(\"bodyClass\")) ];                                          // 25\n    }                                                                                                                  // 26\n  }, \"\\n      \", Blaze.If(function() {                                                                                 // 27\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 28\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 29\n    }));                                                                                                               // 30\n  }, function() {                                                                                                      // 31\n    return [ \"\\n      \", HTML.SPAN({                                                                                   // 32\n      \"class\": \"help-block\"                                                                                            // 33\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                // 34\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 35\n        name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                  // 36\n      })));                                                                                                            // 37\n    })), \"\\n      \" ];                                                                                                 // 38\n  }), \"\\n      \", Blaze._TemplateWith(function() {                                                                     // 39\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                             // 40\n  }, function() {                                                                                                      // 41\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 42\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 43\n}));                                                                                                                   // 44\n                                                                                                                       // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8398\n}).call(this);                                                       // 8399\n                                                                     // 8400\n                                                                     // 8401\n                                                                     // 8402\n                                                                     // 8403\n                                                                     // 8404\n                                                                     // 8405\n(function () {                                                       // 8406\n                                                                     // 8407\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/afObjectField/afObjectField.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afObjectField_bootstrap3.helpers({                                                                            // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    return _.pick(this, 'name', 'id-prefix');                                                                          // 3\n  },                                                                                                                   // 4\n  panelClass: function() {                                                                                             // 5\n    return this.panelClass || 'panel-default';                                                                         // 6\n  }                                                                                                                    // 7\n});                                                                                                                    // 8\n                                                                                                                       // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8424\n}).call(this);                                                       // 8425\n                                                                     // 8426\n                                                                     // 8427\n                                                                     // 8428\n                                                                     // 8429\n                                                                     // 8430\n                                                                     // 8431\n(function () {                                                       // 8432\n                                                                     // 8433\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-checkbox/template.boolean-checkbox.js              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckbox_bootstrap3\");                                                                         // 2\nTemplate[\"afCheckbox_bootstrap3\"] = new Template(\"Template.afCheckbox_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": \"checkbox\"                                                                                                // 6\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                          // 7\n    type: \"checkbox\",                                                                                                  // 8\n    value: \"true\"                                                                                                      // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 11\n  })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                  // 12\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 13\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 14\n    }));                                                                                                               // 15\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 16\n}));                                                                                                                   // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8459\n}).call(this);                                                       // 8460\n                                                                     // 8461\n                                                                     // 8462\n                                                                     // 8463\n                                                                     // 8464\n                                                                     // 8465\n                                                                     // 8466\n(function () {                                                       // 8467\n                                                                     // 8468\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-radios/template.boolean-radios.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanRadioGroup_bootstrap3\");                                                                // 2\nTemplate[\"afBooleanRadioGroup_bootstrap3\"] = new Template(\"Template.afBooleanRadioGroup_bootstrap3\", (function() {     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 6\n  }), \"\\n    \", HTML.DIV({                                                                                             // 7\n    \"class\": \"radio\"                                                                                                   // 8\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 9\n    type: \"radio\",                                                                                                     // 10\n    value: \"false\",                                                                                                    // 11\n    name: function() {                                                                                                 // 12\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 13\n    }                                                                                                                  // 14\n  }, function() {                                                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));                                                           // 16\n  })), \" \", Spacebars.With(function() {                                                                                // 17\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));                                      // 18\n  }, function() {                                                                                                      // 19\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 20\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 21\n    });                                                                                                                // 22\n  }, function() {                                                                                                      // 23\n    return \"False\";                                                                                                    // 24\n  })), \"\\n    \"), \"\\n    \", HTML.DIV({                                                                                 // 25\n    \"class\": \"radio\"                                                                                                   // 26\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 27\n    type: \"radio\",                                                                                                     // 28\n    value: \"true\",                                                                                                     // 29\n    name: function() {                                                                                                 // 30\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 31\n    }                                                                                                                  // 32\n  }, function() {                                                                                                      // 33\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));                                                            // 34\n  })), \" \", Spacebars.With(function() {                                                                                // 35\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));                                       // 36\n  }, function() {                                                                                                      // 37\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 38\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 39\n    });                                                                                                                // 40\n  }, function() {                                                                                                      // 41\n    return \"True\";                                                                                                     // 42\n  })), \"\\n    \"), \"\\n    \", Spacebars.With(function() {                                                                // 43\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));                                       // 44\n  }, function() {                                                                                                      // 45\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 46\n      \"class\": \"radio\"                                                                                                 // 47\n    }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                  // 48\n      type: \"radio\",                                                                                                   // 49\n      value: \"\",                                                                                                       // 50\n      name: function() {                                                                                               // 51\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"..\"), \"name\"));                                           // 52\n      }                                                                                                                // 53\n    }, function() {                                                                                                    // 54\n      return Spacebars.attrMustache(view.lookup(\"nullAtts\"));                                                          // 55\n    })), \" \", Blaze.View(\"lookup:.\", function() {                                                                      // 56\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 57\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 58\n  }), \"\\n  \");                                                                                                         // 59\n}));                                                                                                                   // 60\n                                                                                                                       // 61\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8537\n}).call(this);                                                       // 8538\n                                                                     // 8539\n                                                                     // 8540\n                                                                     // 8541\n                                                                     // 8542\n                                                                     // 8543\n                                                                     // 8544\n(function () {                                                       // 8545\n                                                                     // 8546\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-radios/boolean-radios.js                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afBooleanRadioGroup_bootstrap3.helpers({                                                                      // 1\n  falseAtts: function falseAtts() {                                                                                    // 2\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 3\n    if (this.value === false) {                                                                                        // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    return atts;                                                                                                       // 7\n  },                                                                                                                   // 8\n  trueAtts: function trueAtts() {                                                                                      // 9\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 10\n    if (this.value === true) {                                                                                         // 11\n      atts.checked = \"\";                                                                                               // 12\n    }                                                                                                                  // 13\n    return atts;                                                                                                       // 14\n  },                                                                                                                   // 15\n  nullAtts: function nullAtts() {                                                                                      // 16\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 17\n    if (this.value !== true && this.value !== false) {                                                                 // 18\n      atts.checked = \"\";                                                                                               // 19\n    }                                                                                                                  // 20\n    return atts;                                                                                                       // 21\n  },                                                                                                                   // 22\n  dsk: function () {                                                                                                   // 23\n    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8581\n}).call(this);                                                       // 8582\n                                                                     // 8583\n                                                                     // 8584\n                                                                     // 8585\n                                                                     // 8586\n                                                                     // 8587\n                                                                     // 8588\n(function () {                                                       // 8589\n                                                                     // 8590\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-select/template.boolean-select.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanSelect_bootstrap3\");                                                                    // 2\nTemplate[\"afBooleanSelect_bootstrap3\"] = new Template(\"Template.afBooleanSelect_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                             // 10\n      return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                                // 11\n    }), Blaze.View(\"lookup:..label\", function() {                                                                      // 12\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 13\n    })), \"\\n    \" ];                                                                                                   // 14\n  }), \"\\n  \");                                                                                                         // 15\n}));                                                                                                                   // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8615\n}).call(this);                                                       // 8616\n                                                                     // 8617\n                                                                     // 8618\n                                                                     // 8619\n                                                                     // 8620\n                                                                     // 8621\n                                                                     // 8622\n(function () {                                                       // 8623\n                                                                     // 8624\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/button/template.button.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputButton_bootstrap3\");                                                                      // 2\nTemplate[\"afInputButton_bootstrap3\"] = new Template(\"Template.afInputButton_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"button\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));                                                    // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8646\n}).call(this);                                                       // 8647\n                                                                     // 8648\n                                                                     // 8649\n                                                                     // 8650\n                                                                     // 8651\n                                                                     // 8652\n                                                                     // 8653\n(function () {                                                       // 8654\n                                                                     // 8655\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/color/template.color.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputColor_bootstrap3\");                                                                       // 2\nTemplate[\"afInputColor_bootstrap3\"] = new Template(\"Template.afInputColor_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"color\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8677\n}).call(this);                                                       // 8678\n                                                                     // 8679\n                                                                     // 8680\n                                                                     // 8681\n                                                                     // 8682\n                                                                     // 8683\n                                                                     // 8684\n(function () {                                                       // 8685\n                                                                     // 8686\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/date/template.date.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDate_bootstrap3\");                                                                        // 2\nTemplate[\"afInputDate_bootstrap3\"] = new Template(\"Template.afInputDate_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"date\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8708\n}).call(this);                                                       // 8709\n                                                                     // 8710\n                                                                     // 8711\n                                                                     // 8712\n                                                                     // 8713\n                                                                     // 8714\n                                                                     // 8715\n(function () {                                                       // 8716\n                                                                     // 8717\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/datetime/template.datetime.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTime_bootstrap3\");                                                                    // 2\nTemplate[\"afInputDateTime_bootstrap3\"] = new Template(\"Template.afInputDateTime_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8739\n}).call(this);                                                       // 8740\n                                                                     // 8741\n                                                                     // 8742\n                                                                     // 8743\n                                                                     // 8744\n                                                                     // 8745\n                                                                     // 8746\n(function () {                                                       // 8747\n                                                                     // 8748\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/datetime-local/template.datetime-local.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTimeLocal_bootstrap3\");                                                               // 2\nTemplate[\"afInputDateTimeLocal_bootstrap3\"] = new Template(\"Template.afInputDateTimeLocal_bootstrap3\", (function() {   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime-local\",                                                                                            // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8770\n}).call(this);                                                       // 8771\n                                                                     // 8772\n                                                                     // 8773\n                                                                     // 8774\n                                                                     // 8775\n                                                                     // 8776\n                                                                     // 8777\n(function () {                                                       // 8778\n                                                                     // 8779\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/email/template.email.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputEmail_bootstrap3\");                                                                       // 2\nTemplate[\"afInputEmail_bootstrap3\"] = new Template(\"Template.afInputEmail_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"email\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8801\n}).call(this);                                                       // 8802\n                                                                     // 8803\n                                                                     // 8804\n                                                                     // 8805\n                                                                     // 8806\n                                                                     // 8807\n                                                                     // 8808\n(function () {                                                       // 8809\n                                                                     // 8810\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/month/template.month.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputMonth_bootstrap3\");                                                                       // 2\nTemplate[\"afInputMonth_bootstrap3\"] = new Template(\"Template.afInputMonth_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"month\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8832\n}).call(this);                                                       // 8833\n                                                                     // 8834\n                                                                     // 8835\n                                                                     // 8836\n                                                                     // 8837\n                                                                     // 8838\n                                                                     // 8839\n(function () {                                                       // 8840\n                                                                     // 8841\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/number/template.number.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputNumber_bootstrap3\");                                                                      // 2\nTemplate[\"afInputNumber_bootstrap3\"] = new Template(\"Template.afInputNumber_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"number\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8863\n}).call(this);                                                       // 8864\n                                                                     // 8865\n                                                                     // 8866\n                                                                     // 8867\n                                                                     // 8868\n                                                                     // 8869\n                                                                     // 8870\n(function () {                                                       // 8871\n                                                                     // 8872\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/password/template.password.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputPassword_bootstrap3\");                                                                    // 2\nTemplate[\"afInputPassword_bootstrap3\"] = new Template(\"Template.afInputPassword_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"password\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8894\n}).call(this);                                                       // 8895\n                                                                     // 8896\n                                                                     // 8897\n                                                                     // 8898\n                                                                     // 8899\n                                                                     // 8900\n                                                                     // 8901\n(function () {                                                       // 8902\n                                                                     // 8903\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/radio/template.radio.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadio_bootstrap3\");                                                                            // 2\nTemplate[\"afRadio_bootstrap3\"] = new Template(\"Template.afRadio_bootstrap3\", (function() {                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": \"radio\"                                                                                                   // 6\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                          // 7\n    type: \"radio\",                                                                                                     // 8\n    value: function() {                                                                                                // 9\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 10\n    }                                                                                                                  // 11\n  }, function() {                                                                                                      // 12\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 13\n  })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                  // 14\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 15\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 16\n    }));                                                                                                               // 17\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 18\n}));                                                                                                                   // 19\n                                                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8931\n}).call(this);                                                       // 8932\n                                                                     // 8933\n                                                                     // 8934\n                                                                     // 8935\n                                                                     // 8936\n                                                                     // 8937\n                                                                     // 8938\n(function () {                                                       // 8939\n                                                                     // 8940\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/radio/radio.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afRadio_bootstrap3.helpers({                                                                                  // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    return atts;                                                                                                       // 7\n  }                                                                                                                    // 8\n});                                                                                                                    // 9\n                                                                                                                       // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8958\n}).call(this);                                                       // 8959\n                                                                     // 8960\n                                                                     // 8961\n                                                                     // 8962\n                                                                     // 8963\n                                                                     // 8964\n                                                                     // 8965\n(function () {                                                       // 8966\n                                                                     // 8967\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/range/template.range.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputRange_bootstrap3\");                                                                       // 2\nTemplate[\"afInputRange_bootstrap3\"] = new Template(\"Template.afInputRange_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"range\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8989\n}).call(this);                                                       // 8990\n                                                                     // 8991\n                                                                     // 8992\n                                                                     // 8993\n                                                                     // 8994\n                                                                     // 8995\n                                                                     // 8996\n(function () {                                                       // 8997\n                                                                     // 8998\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/reset/template.reset.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputReset_bootstrap3\");                                                                       // 2\nTemplate[\"afInputReset_bootstrap3\"] = new Template(\"Template.afInputReset_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"reset\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));                                                    // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9020\n}).call(this);                                                       // 9021\n                                                                     // 9022\n                                                                     // 9023\n                                                                     // 9024\n                                                                     // 9025\n                                                                     // 9026\n                                                                     // 9027\n(function () {                                                       // 9028\n                                                                     // 9029\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/search/template.search.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSearch_bootstrap3\");                                                                      // 2\nTemplate[\"afInputSearch_bootstrap3\"] = new Template(\"Template.afInputSearch_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"search\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9051\n}).call(this);                                                       // 9052\n                                                                     // 9053\n                                                                     // 9054\n                                                                     // 9055\n                                                                     // 9056\n                                                                     // 9057\n                                                                     // 9058\n(function () {                                                       // 9059\n                                                                     // 9060\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select/template.select.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelect_bootstrap3\");                                                                           // 2\nTemplate[\"afSelect_bootstrap3\"] = new Template(\"Template.afSelect_bootstrap3\", (function() {                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Blaze.If(function() {                                                                           // 10\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n    \", HTML.OPTGROUP({                                                                               // 13\n        label: function() {                                                                                            // 14\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 15\n        }                                                                                                              // 16\n      }, \"\\n      \", Blaze.Each(function() {                                                                           // 17\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.OPTION(HTML.Attrs(function() {                                                       // 20\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 21\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 22\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 23\n        })), \"\\n      \" ];                                                                                             // 24\n      }), \"\\n    \"), \"\\n    \" ];                                                                                       // 25\n    }, function() {                                                                                                    // 26\n      return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                           // 27\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 28\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 29\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 30\n      })), \"\\n    \" ];                                                                                                 // 31\n    }), \"\\n    \" ];                                                                                                    // 32\n  }), \"\\n  \");                                                                                                         // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9103\n}).call(this);                                                       // 9104\n                                                                     // 9105\n                                                                     // 9106\n                                                                     // 9107\n                                                                     // 9108\n                                                                     // 9109\n                                                                     // 9110\n(function () {                                                       // 9111\n                                                                     // 9112\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox/template.select-checkbox.js                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroup_bootstrap3\");                                                                    // 2\nTemplate[\"afCheckboxGroup_bootstrap3\"] = new Template(\"Template.afCheckboxGroup_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 12\n      \"class\": \"checkbox\"                                                                                              // 13\n    }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT(HTML.Attrs({                                                    // 14\n      type: \"checkbox\",                                                                                                // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n        \", Blaze.View(\"lookup:..label\", function() {                                                       // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                            // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9146\n}).call(this);                                                       // 9147\n                                                                     // 9148\n                                                                     // 9149\n                                                                     // 9150\n                                                                     // 9151\n                                                                     // 9152\n                                                                     // 9153\n(function () {                                                       // 9154\n                                                                     // 9155\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox/select-checkbox.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afCheckboxGroup_bootstrap3.helpers({                                                                          // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9181\n}).call(this);                                                       // 9182\n                                                                     // 9183\n                                                                     // 9184\n                                                                     // 9185\n                                                                     // 9186\n                                                                     // 9187\n                                                                     // 9188\n(function () {                                                       // 9189\n                                                                     // 9190\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroupInline_bootstrap3\");                                                              // 2\nTemplate[\"afCheckboxGroupInline_bootstrap3\"] = new Template(\"Template.afCheckboxGroupInline_bootstrap3\", (function() { // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.LABEL({                                                                                    // 12\n      \"class\": \"checkbox-inline fix-indent\"                                                                            // 13\n    }, \"\\n      \", HTML.INPUT(HTML.Attrs({                                                                             // 14\n      type: \"checkbox\",                                                                                                // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n      \", Blaze.View(\"lookup:..label\", function() {                                                         // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n    \"), \"\\n    \" ];                                                                                         // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9224\n}).call(this);                                                       // 9225\n                                                                     // 9226\n                                                                     // 9227\n                                                                     // 9228\n                                                                     // 9229\n                                                                     // 9230\n                                                                     // 9231\n(function () {                                                       // 9232\n                                                                     // 9233\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/select-checkbox-inline.js           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afCheckboxGroupInline_bootstrap3.helpers({                                                                    // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9259\n}).call(this);                                                       // 9260\n                                                                     // 9261\n                                                                     // 9262\n                                                                     // 9263\n                                                                     // 9264\n                                                                     // 9265\n                                                                     // 9266\n(function () {                                                       // 9267\n                                                                     // 9268\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-multiple/template.select-multiple.js                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelectMultiple_bootstrap3\");                                                                   // 2\nTemplate[\"afSelectMultiple_bootstrap3\"] = new Template(\"Template.afSelectMultiple_bootstrap3\", (function() {           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs({                                                                                      // 5\n    multiple: \"\"                                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", Blaze.If(function() {                                                                           // 12\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n    \", HTML.OPTGROUP({                                                                               // 15\n        label: function() {                                                                                            // 16\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 17\n        }                                                                                                              // 18\n      }, \"\\n      \", Blaze.Each(function() {                                                                           // 19\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 20\n      }, function() {                                                                                                  // 21\n        return [ \"\\n      \", HTML.OPTION(HTML.Attrs(function() {                                                       // 22\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 23\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 24\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 25\n        })), \"\\n      \" ];                                                                                             // 26\n      }), \"\\n    \"), \"\\n    \" ];                                                                                       // 27\n    }, function() {                                                                                                    // 28\n      return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                           // 29\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 30\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 31\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 32\n      })), \"\\n    \" ];                                                                                                 // 33\n    }), \"\\n    \" ];                                                                                                    // 34\n  }), \"\\n  \");                                                                                                         // 35\n}));                                                                                                                   // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9313\n}).call(this);                                                       // 9314\n                                                                     // 9315\n                                                                     // 9316\n                                                                     // 9317\n                                                                     // 9318\n                                                                     // 9319\n                                                                     // 9320\n(function () {                                                       // 9321\n                                                                     // 9322\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio/template.select-radio.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroup_bootstrap3\");                                                                       // 2\nTemplate[\"afRadioGroup_bootstrap3\"] = new Template(\"Template.afRadioGroup_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 12\n      \"class\": \"radio\"                                                                                                 // 13\n    }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT(HTML.Attrs({                                                    // 14\n      type: \"radio\",                                                                                                   // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n        \", Blaze.View(\"lookup:..label\", function() {                                                       // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                            // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9356\n}).call(this);                                                       // 9357\n                                                                     // 9358\n                                                                     // 9359\n                                                                     // 9360\n                                                                     // 9361\n                                                                     // 9362\n                                                                     // 9363\n(function () {                                                       // 9364\n                                                                     // 9365\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio/select-radio.js                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afRadioGroup_bootstrap3.helpers({                                                                             // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9391\n}).call(this);                                                       // 9392\n                                                                     // 9393\n                                                                     // 9394\n                                                                     // 9395\n                                                                     // 9396\n                                                                     // 9397\n                                                                     // 9398\n(function () {                                                       // 9399\n                                                                     // 9400\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio-inline/template.select-radio-inline.js        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroupInline_bootstrap3\");                                                                 // 2\nTemplate[\"afRadioGroupInline_bootstrap3\"] = new Template(\"Template.afRadioGroupInline_bootstrap3\", (function() {       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.LABEL({                                                                                    // 12\n      \"class\": \"radio-inline fix-indent\"                                                                               // 13\n    }, \"\\n      \", HTML.INPUT(HTML.Attrs({                                                                             // 14\n      type: \"radio\",                                                                                                   // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n      \", Blaze.View(\"lookup:..label\", function() {                                                         // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n    \"), \"\\n    \" ];                                                                                         // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9434\n}).call(this);                                                       // 9435\n                                                                     // 9436\n                                                                     // 9437\n                                                                     // 9438\n                                                                     // 9439\n                                                                     // 9440\n                                                                     // 9441\n(function () {                                                       // 9442\n                                                                     // 9443\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio-inline/select-radio-inline.js                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afRadioGroupInline_bootstrap3.helpers({                                                                       // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9469\n}).call(this);                                                       // 9470\n                                                                     // 9471\n                                                                     // 9472\n                                                                     // 9473\n                                                                     // 9474\n                                                                     // 9475\n                                                                     // 9476\n(function () {                                                       // 9477\n                                                                     // 9478\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/submit/template.submit.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSubmit_bootstrap3\");                                                                      // 2\nTemplate[\"afInputSubmit_bootstrap3\"] = new Template(\"Template.afInputSubmit_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"submit\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));                                                    // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9500\n}).call(this);                                                       // 9501\n                                                                     // 9502\n                                                                     // 9503\n                                                                     // 9504\n                                                                     // 9505\n                                                                     // 9506\n                                                                     // 9507\n(function () {                                                       // 9508\n                                                                     // 9509\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/tel/template.tel.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTel_bootstrap3\");                                                                         // 2\nTemplate[\"afInputTel_bootstrap3\"] = new Template(\"Template.afInputTel_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"tel\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9531\n}).call(this);                                                       // 9532\n                                                                     // 9533\n                                                                     // 9534\n                                                                     // 9535\n                                                                     // 9536\n                                                                     // 9537\n                                                                     // 9538\n(function () {                                                       // 9539\n                                                                     // 9540\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/text/template.text.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputText_bootstrap3\");                                                                        // 2\nTemplate[\"afInputText_bootstrap3\"] = new Template(\"Template.afInputText_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"text\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9562\n}).call(this);                                                       // 9563\n                                                                     // 9564\n                                                                     // 9565\n                                                                     // 9566\n                                                                     // 9567\n                                                                     // 9568\n                                                                     // 9569\n(function () {                                                       // 9570\n                                                                     // 9571\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/textarea/template.textarea.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afTextarea_bootstrap3\");                                                                         // 2\nTemplate[\"afTextarea_bootstrap3\"] = new Template(\"Template.afTextarea_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 6\n  }, {                                                                                                                 // 7\n    value: function() {                                                                                                // 8\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 9\n    }                                                                                                                  // 10\n  }));                                                                                                                 // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9592\n}).call(this);                                                       // 9593\n                                                                     // 9594\n                                                                     // 9595\n                                                                     // 9596\n                                                                     // 9597\n                                                                     // 9598\n                                                                     // 9599\n(function () {                                                       // 9600\n                                                                     // 9601\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/time/template.time.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTime_bootstrap3\");                                                                        // 2\nTemplate[\"afInputTime_bootstrap3\"] = new Template(\"Template.afInputTime_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"time\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9623\n}).call(this);                                                       // 9624\n                                                                     // 9625\n                                                                     // 9626\n                                                                     // 9627\n                                                                     // 9628\n                                                                     // 9629\n                                                                     // 9630\n(function () {                                                       // 9631\n                                                                     // 9632\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/url/template.url.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputUrl_bootstrap3\");                                                                         // 2\nTemplate[\"afInputUrl_bootstrap3\"] = new Template(\"Template.afInputUrl_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"url\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9654\n}).call(this);                                                       // 9655\n                                                                     // 9656\n                                                                     // 9657\n                                                                     // 9658\n                                                                     // 9659\n                                                                     // 9660\n                                                                     // 9661\n(function () {                                                       // 9662\n                                                                     // 9663\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/week/template.week.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputWeek_bootstrap3\");                                                                        // 2\nTemplate[\"afInputWeek_bootstrap3\"] = new Template(\"Template.afInputWeek_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"week\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9685\n}).call(this);                                                       // 9686\n                                                                     // 9687\n                                                                     // 9688\n                                                                     // 9689\n                                                                     // 9690\n                                                                     // 9691\n                                                                     // 9692\n(function () {                                                       // 9693\n                                                                     // 9694\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/quickForm/template.quickForm.js                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3-horizontal\");                                                               // 2\nTemplate[\"quickForm_bootstrap3-horizontal\"] = new Template(\"Template.quickForm_bootstrap3-horizontal\", (function() {   // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n\\n    \", Spacebars.With(function() {                                                                 // 9\n        return Spacebars.call(view.lookup(\"grouplessFields\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", Blaze._TemplateWith(function() {                                                          // 12\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 13\n        }, function() {                                                                                                // 14\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 15\n        }), \"\\n    \" ];                                                                                                // 16\n      }), \"\\n\\n    \", Blaze.Each(function() {                                                                          // 17\n        return Spacebars.call(view.lookup(\"fieldGroups\"));                                                             // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.FIELDSET({                                                                           // 20\n          \"class\": \"af-fieldGroup\"                                                                                     // 21\n        }, \"\\n        \", Spacebars.With(function() {                                                                   // 22\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));                                                       // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n          \", HTML.LEGEND({                                                                       // 25\n            \"class\": \"af-fieldGroup-heading\"                                                                           // 26\n          }, Blaze.View(\"lookup:.\", function() {                                                                       // 27\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 28\n          })), \"\\n        \" ];                                                                                         // 29\n        }), \"\\n        \", Blaze._TemplateWith(function() {                                                             // 30\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 31\n        }, function() {                                                                                                // 32\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 33\n        }), \"\\n      \"), \"\\n    \" ];                                                                                   // 34\n      }), \"\\n\\n    \", Blaze.If(function() {                                                                            // 35\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 36\n      }, function() {                                                                                                  // 37\n        return [ \"\\n    \", HTML.DIV({                                                                                  // 38\n          \"class\": \"form-group\"                                                                                        // 39\n        }, \"\\n      \", HTML.DIV({                                                                                      // 40\n          \"class\": function() {                                                                                        // 41\n            return Spacebars.mustache(view.lookup(\"labelClass\"));                                                      // 42\n          }                                                                                                            // 43\n        }), \"\\n      \", HTML.DIV({                                                                                     // 44\n          \"class\": function() {                                                                                        // 45\n            return Spacebars.mustache(view.lookup(\"inputClass\"));                                                      // 46\n          }                                                                                                            // 47\n        }, \"\\n        \", HTML.BUTTON(HTML.Attrs({                                                                      // 48\n          type: \"submit\"                                                                                               // 49\n        }, function() {                                                                                                // 50\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 51\n        }), \"\\n          \", Spacebars.With(function() {                                                                // 52\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 53\n        }, function() {                                                                                                // 54\n          return [ \"\\n          \", Blaze.View(\"lookup:.\", function() {                                                 // 55\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 56\n          }), \"\\n          \" ];                                                                                        // 57\n        }, function() {                                                                                                // 58\n          return \"\\n          Submit\\n          \";                                                                     // 59\n        }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                         // 60\n      }), \"\\n\\n  \" ];                                                                                                  // 61\n    });                                                                                                                // 62\n  });                                                                                                                  // 63\n}));                                                                                                                   // 64\n                                                                                                                       // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9767\n}).call(this);                                                       // 9768\n                                                                     // 9769\n                                                                     // 9770\n                                                                     // 9771\n                                                                     // 9772\n                                                                     // 9773\n                                                                     // 9774\n(function () {                                                       // 9775\n                                                                     // 9776\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/quickForm/quickForm.js                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate['quickForm_bootstrap3-horizontal'].helpers({                                                                  // 1\n  inputClass: function () {                                                                                            // 2\n    return this.atts[\"input-col-class\"];                                                                               // 3\n  },                                                                                                                   // 4\n  labelClass: function () {                                                                                            // 5\n    return this.atts[\"label-class\"];                                                                                   // 6\n  },                                                                                                                   // 7\n  fieldGroupLabel: function () {                                                                                       // 8\n    var name = this.name;                                                                                              // 9\n                                                                                                                       // 10\n    // if field group name is of the form XY_abcde where \"XY\" is a number, remove prefix                               // 11\n    if (!isNaN(parseInt(name.substr(0,2), 10)) && name.charAt(2) === \"_\") {                                            // 12\n      name = name.substr(3);                                                                                           // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // if SimpleSchema.defaultLabel is defined, use it                                                                 // 16\n    if (typeof SimpleSchema.defaultLabel === \"function\") {                                                             // 17\n      return SimpleSchema.defaultLabel(name);                                                                          // 18\n    } else {                                                                                                           // 19\n      // else, just capitalise name                                                                                    // 20\n      return name.charAt(0).toUpperCase() + name.slice(1);                                                             // 21\n    }                                                                                                                  // 22\n  },                                                                                                                   // 23\n  quickFieldsAtts: function () {                                                                                       // 24\n    // These are the quickForm attributes that we want to forward to                                                   // 25\n    // the afQuickFields component.                                                                                    // 26\n    return _.pick(this.atts, 'fields', 'id-prefix', 'input-col-class', 'label-class');                                 // 27\n  },                                                                                                                   // 28\n  submitButtonAtts: function () {                                                                                      // 29\n    var qfAtts = this.atts;                                                                                            // 30\n    var atts = {};                                                                                                     // 31\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 32\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 33\n    } else {                                                                                                           // 34\n      atts['class'] = 'btn btn-primary';                                                                               // 35\n    }                                                                                                                  // 36\n    return atts;                                                                                                       // 37\n  },                                                                                                                   // 38\n  qfAutoFormContext: function () {                                                                                     // 39\n    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 40\n    ctx = AutoForm.Utility.addClass(ctx, 'form-horizontal');                                                           // 41\n                                                                                                                       // 42\n    // input-col-class and label-class attributes are unique to this template so they will                             // 43\n    // not have been removed by AutoForm core. We remove them from the autoForm context                                // 44\n    // because they are attributes supported only by quickFields, quickField,                                          // 45\n    // afObjectField, afArrayField, and afFormGroup.                                                                   // 46\n    delete ctx['input-col-class'];                                                                                     // 47\n    delete ctx['label-class'];                                                                                         // 48\n                                                                                                                       // 49\n    return ctx;                                                                                                        // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 52\n                                                                                                                       // 53\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9837\n}).call(this);                                                       // 9838\n                                                                     // 9839\n                                                                     // 9840\n                                                                     // 9841\n                                                                     // 9842\n                                                                     // 9843\n                                                                     // 9844\n(function () {                                                       // 9845\n                                                                     // 9846\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afArrayField/template.afArrayField.js           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField_bootstrap3-horizontal\");                                                            // 2\nTemplate[\"afArrayField_bootstrap3-horizontal\"] = new Template(\"Template.afArrayField_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group\", Blaze.If(function() {                                                                     // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \" has-error\";                                                                                           // 12\n      }) ];                                                                                                            // 13\n    }                                                                                                                  // 14\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                    // 16\n  }), Blaze.View(\"lookup:afFieldLabelText\", function() {                                                               // 17\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 18\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 19\n    }));                                                                                                               // 20\n  })), \"\\n    \", HTML.DIV({                                                                                            // 21\n    \"class\": function() {                                                                                              // 22\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 23\n    }                                                                                                                  // 24\n  }, \"\\n      \", HTML.DIV({                                                                                            // 25\n    \"class\": \"panel panel-default autoform-padding-fix\"                                                                // 26\n  }, \"\\n        \", Blaze.If(function() {                                                                               // 27\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 28\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 29\n    }));                                                                                                               // 30\n  }, function() {                                                                                                      // 31\n    return [ \"\\n        \", HTML.DIV({                                                                                  // 32\n      \"class\": \"panel-body has-error\"                                                                                  // 33\n    }, \"\\n          \", HTML.SPAN({                                                                                     // 34\n      \"class\": \"help-block\"                                                                                            // 35\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                // 36\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 37\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 38\n      })));                                                                                                            // 39\n    })), \"\\n        \"), \"\\n        \" ];                                                                                // 40\n  }), \"\\n        \", HTML.UL({                                                                                          // 41\n    \"class\": \"list-group\"                                                                                              // 42\n  }, \"\\n          \", Blaze._TemplateWith(function() {                                                                  // 43\n    return {                                                                                                           // 44\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 45\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 46\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 47\n    };                                                                                                                 // 48\n  }, function() {                                                                                                      // 49\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 50\n      return [ \"\\n          \", HTML.LI({                                                                               // 51\n        \"class\": \"list-group-item autoform-array-item\"                                                                 // 52\n      }, \"\\n            \", HTML.DIV(\"\\n              \", HTML.DIV({                                                     // 53\n        \"class\": \"autoform-remove-item-wrap\"                                                                           // 54\n      }, \"\\n                \", Blaze.If(function() {                                                                   // 55\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 56\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 57\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 58\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 59\n        }));                                                                                                           // 60\n      }, function() {                                                                                                  // 61\n        return [ \"\\n                \", HTML.BUTTON({                                                                   // 62\n          type: \"button\",                                                                                              // 63\n          \"class\": \"btn btn-primary autoform-remove-item\"                                                              // 64\n        }, HTML.SPAN({                                                                                                 // 65\n          \"class\": \"glyphicon glyphicon-minus\"                                                                         // 66\n        })), \"\\n                \" ];                                                                                   // 67\n      }), \"\\n              \"), \"\\n              \", HTML.DIV({                                                          // 68\n        \"class\": \"autoform-array-item-body\"                                                                            // 69\n      }, \"\\n                \", Blaze._TemplateWith(function() {                                                        // 70\n        return {                                                                                                       // 71\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 72\n          label: Spacebars.call(false),                                                                                // 73\n          options: Spacebars.call(view.lookup(\"afOptionsFromSchema\"))                                                  // 74\n        };                                                                                                             // 75\n      }, function() {                                                                                                  // 76\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 77\n      }), \"\\n              \"), \"\\n            \"), \"\\n          \"), \"\\n          \" ];                                   // 78\n    });                                                                                                                // 79\n  }), \"\\n          \", Blaze.If(function() {                                                                            // 80\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 81\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 82\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 83\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 84\n    }));                                                                                                               // 85\n  }, function() {                                                                                                      // 86\n    return [ \"\\n          \", HTML.LI({                                                                                 // 87\n      \"class\": \"list-group-item\"                                                                                       // 88\n    }, \"\\n            \", HTML.BUTTON({                                                                                 // 89\n      type: \"button\",                                                                                                  // 90\n      \"class\": \"btn btn-primary autoform-add-item\",                                                                    // 91\n      \"data-autoform-field\": function() {                                                                              // 92\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 93\n      },                                                                                                               // 94\n      \"data-autoform-mincount\": function() {                                                                           // 95\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 96\n      },                                                                                                               // 97\n      \"data-autoform-maxcount\": function() {                                                                           // 98\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 99\n      }                                                                                                                // 100\n    }, HTML.SPAN({                                                                                                     // 101\n      \"class\": \"glyphicon glyphicon-plus\"                                                                              // 102\n    })), \"\\n          \"), \"\\n          \" ];                                                                            // 103\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");                                                                  // 104\n}));                                                                                                                   // 105\n                                                                                                                       // 106\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9960\n}).call(this);                                                       // 9961\n                                                                     // 9962\n                                                                     // 9963\n                                                                     // 9964\n                                                                     // 9965\n                                                                     // 9966\n                                                                     // 9967\n(function () {                                                       // 9968\n                                                                     // 9969\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afArrayField/afArrayField.js                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate[\"afArrayField_bootstrap3-horizontal\"].helpers({                                                               // 1\n  rightColumnClass: function () {                                                                                      // 2\n    var atts = this.atts || {};                                                                                        // 3\n    return atts['input-col-class'] || \"\";                                                                              // 4\n  },                                                                                                                   // 5\n  afFieldLabelAtts: function () {                                                                                      // 6\n    // Use only atts beginning with label-                                                                             // 7\n    var labelAtts = {};                                                                                                // 8\n    _.each(this.atts, function (val, key) {                                                                            // 9\n      if (key.indexOf(\"label-\") === 0) {                                                                               // 10\n        labelAtts[key.substring(6)] = val;                                                                             // 11\n      }                                                                                                                // 12\n    });                                                                                                                // 13\n    // Add bootstrap class                                                                                             // 14\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");                                                 // 15\n    return labelAtts;                                                                                                  // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 9996\n}).call(this);                                                       // 9997\n                                                                     // 9998\n                                                                     // 9999\n                                                                     // 10000\n                                                                     // 10001\n                                                                     // 10002\n                                                                     // 10003\n(function () {                                                       // 10004\n                                                                     // 10005\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afFormGroup/template.afFormGroup.js             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup_bootstrap3-horizontal\");                                                             // 2\nTemplate[\"afFormGroup_bootstrap3-horizontal\"] = new Template(\"Template.afFormGroup_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 13\n    },                                                                                                                 // 14\n    \"data-required\": function() {                                                                                      // 15\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 16\n    }                                                                                                                  // 17\n  }, function() {                                                                                                      // 18\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 19\n  }), \"\\n    \", Blaze.If(function() {                                                                                  // 20\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 21\n  }, function() {                                                                                                      // 22\n    return [ \"\\n    \\n    \", HTML.LABEL(HTML.Attrs(function() {                                                        // 23\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 24\n    })), \"\\n    \" ];                                                                                                   // 25\n  }, function() {                                                                                                      // 26\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 27\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 28\n    }), Blaze.If(function() {                                                                                          // 29\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 30\n    }, function() {                                                                                                    // 31\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 32\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 33\n      });                                                                                                              // 34\n    }, function() {                                                                                                    // 35\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 36\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 37\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 38\n        }));                                                                                                           // 39\n      });                                                                                                              // 40\n    })), \"\\n    \" ];                                                                                                   // 41\n  }), \"\\n    \", HTML.DIV({                                                                                             // 42\n    \"class\": function() {                                                                                              // 43\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 44\n    }                                                                                                                  // 45\n  }, \"\\n      \", Blaze._TemplateWith(function() {                                                                      // 46\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));                                                            // 47\n  }, function() {                                                                                                      // 48\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 49\n  }), \"\\n      \", HTML.SPAN({                                                                                          // 50\n    \"class\": \"help-block\"                                                                                              // 51\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                  // 52\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 53\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 54\n    })));                                                                                                              // 55\n  })), \"\\n    \"), \"\\n  \");                                                                                             // 56\n}));                                                                                                                   // 57\n                                                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10071\n}).call(this);                                                       // 10072\n                                                                     // 10073\n                                                                     // 10074\n                                                                     // 10075\n                                                                     // 10076\n                                                                     // 10077\n                                                                     // 10078\n(function () {                                                       // 10079\n                                                                     // 10080\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afFormGroup/afFormGroup.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate[\"afFormGroup_bootstrap3-horizontal\"].helpers({                                                                // 1\n  afFieldInputAtts: function () {                                                                                      // 2\n    var atts = _.omit(this.afFieldInputAtts || {}, 'input-col-class');                                                 // 3\n    // We have a special template for check boxes, but otherwise we                                                    // 4\n    // want to use the same as those defined for bootstrap3 template.                                                  // 5\n    if (AutoForm.getInputType(this.afFieldInputAtts) === \"boolean-checkbox\") {                                         // 6\n      atts.template = \"bootstrap3-horizontal\";                                                                         // 7\n    } else {                                                                                                           // 8\n      atts.template = \"bootstrap3\";                                                                                    // 9\n    }                                                                                                                  // 10\n    return atts;                                                                                                       // 11\n  },                                                                                                                   // 12\n  afFieldLabelAtts: function () {                                                                                      // 13\n    var atts = _.clone(this.afFieldLabelAtts || {});                                                                   // 14\n    // Add bootstrap class                                                                                             // 15\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");                                                           // 16\n    return atts;                                                                                                       // 17\n  },                                                                                                                   // 18\n  rightColumnClass: function () {                                                                                      // 19\n    var atts = this.afFieldInputAtts || {};                                                                            // 20\n    return atts['input-col-class'] || \"\";                                                                              // 21\n  },                                                                                                                   // 22\n  skipLabel: function () {                                                                                             // 23\n    var self = this;                                                                                                   // 24\n                                                                                                                       // 25\n    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 26\n    return (self.skipLabel || (type === \"boolean-checkbox\" && !self.afFieldInputAtts.leftLabel));                      // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10118\n}).call(this);                                                       // 10119\n                                                                     // 10120\n                                                                     // 10121\n                                                                     // 10122\n                                                                     // 10123\n                                                                     // 10124\n                                                                     // 10125\n(function () {                                                       // 10126\n                                                                     // 10127\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afObjectField/template.afObjectField.js         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField_bootstrap3-horizontal\");                                                           // 2\nTemplate[\"afObjectField_bootstrap3-horizontal\"] = new Template(\"Template.afObjectField_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }) ];                                                                                                            // 13\n    }                                                                                                                  // 14\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                    // 16\n  }), Blaze.View(\"lookup:afFieldLabelText\", function() {                                                               // 17\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 18\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 19\n    }));                                                                                                               // 20\n  })), \"\\n    \", HTML.DIV({                                                                                            // 21\n    \"class\": function() {                                                                                              // 22\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 23\n    }                                                                                                                  // 24\n  }, \"\\n      \", HTML.DIV({                                                                                            // 25\n    \"class\": function() {                                                                                              // 26\n      return [ \"panel panel-default autoform-padding-fix \", Spacebars.mustache(view.lookup(\"panelClass\")) ];           // 27\n    }                                                                                                                  // 28\n  }, \"\\n        \", HTML.DIV({                                                                                          // 29\n    \"class\": function() {                                                                                              // 30\n      return [ \"panel-body \", Spacebars.mustache(view.lookup(\"bodyClass\")) ];                                          // 31\n    }                                                                                                                  // 32\n  }, \"\\n          \", Blaze._TemplateWith(function() {                                                                  // 33\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                             // 34\n  }, function() {                                                                                                      // 35\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 36\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");                                                                  // 37\n}));                                                                                                                   // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10174\n}).call(this);                                                       // 10175\n                                                                     // 10176\n                                                                     // 10177\n                                                                     // 10178\n                                                                     // 10179\n                                                                     // 10180\n                                                                     // 10181\n(function () {                                                       // 10182\n                                                                     // 10183\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afObjectField/afObjectField.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate[\"afObjectField_bootstrap3-horizontal\"].helpers({                                                              // 3\n  rightColumnClass: function () {                                                                                      // 4\n    return this['input-col-class'] || \"\";                                                                              // 5\n  },                                                                                                                   // 6\n  afFieldLabelAtts: function () {                                                                                      // 7\n    // Use only atts beginning with label-                                                                             // 8\n    var labelAtts = {};                                                                                                // 9\n    _.each(this, function (val, key) {                                                                                 // 10\n      if (key.indexOf(\"label-\") === 0) {                                                                               // 11\n        labelAtts[key.substring(6)] = val;                                                                             // 12\n      }                                                                                                                // 13\n    });                                                                                                                // 14\n    // Add bootstrap class                                                                                             // 15\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");                                                 // 16\n    return labelAtts;                                                                                                  // 17\n  },                                                                                                                   // 18\n  quickFieldsAtts: function () {                                                                                       // 19\n    var atts = _.pick(this, 'name', 'id-prefix');                                                                      // 20\n    // We want to default to using bootstrap3 template below this point                                                // 21\n    // because we don't want horizontal within horizontal                                                              // 22\n    atts.template = 'bootstrap3';                                                                                      // 23\n    return atts;                                                                                                       // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10218\n}).call(this);                                                       // 10219\n                                                                     // 10220\n                                                                     // 10221\n                                                                     // 10222\n                                                                     // 10223\n                                                                     // 10224\n                                                                     // 10225\n(function () {                                                       // 10226\n                                                                     // 10227\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/template.boolean-checkbox.js   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckbox_bootstrap3-horizontal\");                                                              // 2\nTemplate[\"afCheckbox_bootstrap3-horizontal\"] = new Template(\"Template.afCheckbox_bootstrap3-horizontal\", (function() { // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.If(function() {                                                                                         // 5\n    return Spacebars.call(view.lookup(\"useLeftLabel\"));                                                                // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n  \\n  \", HTML.DIV({                                                                                    // 8\n      \"class\": \"checkbox\"                                                                                              // 9\n    }, \"\\n    \", HTML.INPUT(HTML.Attrs({                                                                               // 10\n      type: \"checkbox\",                                                                                                // 11\n      value: \"true\"                                                                                                    // 12\n    }, function() {                                                                                                    // 13\n      return Spacebars.attrMustache(view.lookup(\"attsPlusSpecialClass\"));                                              // 14\n    })), \"\\n  \"), \"\\n  \" ];                                                                                            // 15\n  }, function() {                                                                                                      // 16\n    return [ \"\\n  \", HTML.DIV({                                                                                        // 17\n      \"class\": \"checkbox\"                                                                                              // 18\n    }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                        // 19\n      type: \"checkbox\",                                                                                                // 20\n      value: \"true\"                                                                                                    // 21\n    }, function() {                                                                                                    // 22\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 23\n    })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                // 24\n      return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                        // 25\n        name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                  // 26\n      }));                                                                                                             // 27\n    }), \"\\n    \"), \"\\n  \"), \"\\n  \" ];                                                                                  // 28\n  });                                                                                                                  // 29\n}));                                                                                                                   // 30\n                                                                                                                       // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10266\n}).call(this);                                                       // 10267\n                                                                     // 10268\n                                                                     // 10269\n                                                                     // 10270\n                                                                     // 10271\n                                                                     // 10272\n                                                                     // 10273\n(function () {                                                       // 10274\n                                                                     // 10275\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/boolean-checkbox.js            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate[\"afCheckbox_bootstrap3-horizontal\"].helpers({                                                                 // 1\n  attsPlusSpecialClass: function () {                                                                                  // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    atts = AutoForm.Utility.addClass(atts, \"autoform-checkbox-margin-fix\");                                            // 4\n    return atts;                                                                                                       // 5\n  },                                                                                                                   // 6\n  useLeftLabel: function () {                                                                                          // 7\n    return this.atts.leftLabel;                                                                                        // 8\n  }                                                                                                                    // 9\n});                                                                                                                    // 10\n                                                                                                                       // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10294\n}).call(this);                                                       // 10295\n                                                                     // 10296\n                                                                     // 10297\n                                                                     // 10298\n                                                                     // 10299\n                                                                     // 10300\n                                                                     // 10301\n(function () {                                                       // 10302\n                                                                     // 10303\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-inline/template.bootstrap3-inline.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3-inline\");                                                                   // 2\nTemplate[\"quickForm_bootstrap3-inline\"] = new Template(\"Template.quickForm_bootstrap3-inline\", (function() {           // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", Blaze._TemplateWith(function() {                                                              // 9\n        return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                // 12\n      }), \"\\n    \", Blaze.If(function() {                                                                              // 13\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 14\n      }, function() {                                                                                                  // 15\n        return [ \"\\n    \", HTML.BUTTON(HTML.Attrs({                                                                    // 16\n          type: \"submit\"                                                                                               // 17\n        }, function() {                                                                                                // 18\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 19\n        }), \"\\n    \", Spacebars.With(function() {                                                                      // 20\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 21\n        }, function() {                                                                                                // 22\n          return [ \"\\n    \", Blaze.View(\"lookup:.\", function() {                                                       // 23\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 24\n          }), \"\\n    \" ];                                                                                              // 25\n        }, function() {                                                                                                // 26\n          return \"\\n    Submit\\n    \";                                                                                 // 27\n        }), \"\\n    \"), \"\\n    \" ];                                                                                     // 28\n      }), \"\\n  \" ];                                                                                                    // 29\n    });                                                                                                                // 30\n  });                                                                                                                  // 31\n}));                                                                                                                   // 32\n                                                                                                                       // 33\nTemplate.__checkName(\"afFormGroup_bootstrap3-inline\");                                                                 // 34\nTemplate[\"afFormGroup_bootstrap3-inline\"] = new Template(\"Template.afFormGroup_bootstrap3-inline\", (function() {       // 35\n  var view = this;                                                                                                     // 36\n  return HTML.DIV(HTML.Attrs({                                                                                         // 37\n    \"class\": function() {                                                                                              // 38\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 39\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 40\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 41\n        }));                                                                                                           // 42\n      }, function() {                                                                                                  // 43\n        return \"has-error\";                                                                                            // 44\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 45\n    },                                                                                                                 // 46\n    \"data-required\": function() {                                                                                      // 47\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 48\n    }                                                                                                                  // 49\n  }, function() {                                                                                                      // 50\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 51\n  }), \"\\n    \", Blaze.Unless(function() {                                                                              // 52\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 53\n  }, function() {                                                                                                      // 54\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 55\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 56\n    }), Blaze.If(function() {                                                                                          // 57\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 58\n    }, function() {                                                                                                    // 59\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 60\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 61\n      });                                                                                                              // 62\n    }, function() {                                                                                                    // 63\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 64\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 65\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 66\n        }));                                                                                                           // 67\n      });                                                                                                              // 68\n    })), \"\\n    \" ];                                                                                                   // 69\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 70\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));                                                            // 71\n  }, function() {                                                                                                      // 72\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 73\n  }), \"\\n    \", HTML.SPAN({                                                                                            // 74\n    \"class\": \"help-block\"                                                                                              // 75\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                  // 76\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 77\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 78\n    })));                                                                                                              // 79\n  })), \"\\n  \");                                                                                                        // 80\n}));                                                                                                                   // 81\n                                                                                                                       // 82\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10393\n}).call(this);                                                       // 10394\n                                                                     // 10395\n                                                                     // 10396\n                                                                     // 10397\n                                                                     // 10398\n                                                                     // 10399\n                                                                     // 10400\n(function () {                                                       // 10401\n                                                                     // 10402\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-inline/bootstrap3-inline.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate['quickForm_bootstrap3-inline'].helpers({                                                                      // 3\n  submitButtonAtts: function () {                                                                                      // 4\n    var qfAtts = this.atts;                                                                                            // 5\n    var atts = {};                                                                                                     // 6\n    if (typeof qfAtts.buttonClasses === 'string') {                                                                    // 7\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 8\n    } else {                                                                                                           // 9\n      atts['class'] = 'btn btn-primary autoform-inline-align';                                                         // 10\n    }                                                                                                                  // 11\n    return atts;                                                                                                       // 12\n  },                                                                                                                   // 13\n  qfAutoFormContext: function () {                                                                                     // 14\n    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 15\n    ctx = AutoForm.Utility.addClass(ctx, 'form-inline');                                                               // 16\n                                                                                                                       // 17\n    // label-class attribute is unique to this template so it will                                                     // 18\n    // not have been removed by AutoForm core. We remove it from the autoForm context                                  // 19\n    // because it is an attribute supported only by quickFields, quickField,                                           // 20\n    // afObjectField, afArrayField, and afFormGroup.                                                                   // 21\n    delete ctx['label-class'];                                                                                         // 22\n                                                                                                                       // 23\n    return ctx;                                                                                                        // 24\n  },                                                                                                                   // 25\n  quickFieldsAtts: function () {                                                                                       // 26\n    // These are the quickForm attributes that we want to forward to                                                   // 27\n    // the afQuickFields component.                                                                                    // 28\n    return _.pick(this.atts, 'id-prefix', 'label-class');                                                              // 29\n  }                                                                                                                    // 30\n});                                                                                                                    // 31\n                                                                                                                       // 32\nTemplate['afFormGroup_bootstrap3-inline'].helpers({                                                                    // 33\n  afFieldInputAtts: function () {                                                                                      // 34\n    var atts = _.clone(this.afFieldInputAtts || {});                                                                   // 35\n    // Use the same templates as those defined for bootstrap3 template.                                                // 36\n    atts.template = 'bootstrap3';                                                                                      // 37\n    return atts;                                                                                                       // 38\n  }                                                                                                                    // 39\n});                                                                                                                    // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10451\n}).call(this);                                                       // 10452\n                                                                     // 10453\n                                                                     // 10454\n                                                                     // 10455\n                                                                     // 10456\n                                                                     // 10457\n                                                                     // 10458\n(function () {                                                       // 10459\n                                                                     // 10460\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/quickForm/template.quickForm.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_plain\");                                                                               // 2\nTemplate[\"quickForm_plain\"] = new Template(\"Template.quickForm_plain\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n\\n    \", Spacebars.With(function() {                                                                 // 9\n        return Spacebars.call(view.lookup(\"grouplessFields\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", Blaze._TemplateWith(function() {                                                          // 12\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 13\n        }, function() {                                                                                                // 14\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 15\n        }), \"\\n    \" ];                                                                                                // 16\n      }), \"\\n\\n    \", Blaze.Each(function() {                                                                          // 17\n        return Spacebars.call(view.lookup(\"fieldGroups\"));                                                             // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.FIELDSET({                                                                           // 20\n          \"class\": \"af-fieldGroup\"                                                                                     // 21\n        }, \"\\n        \", Spacebars.With(function() {                                                                   // 22\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));                                                       // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n          \", HTML.LEGEND({                                                                       // 25\n            \"class\": \"af-fieldGroup-heading\"                                                                           // 26\n          }, Blaze.View(\"lookup:.\", function() {                                                                       // 27\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 28\n          })), \"\\n        \" ];                                                                                         // 29\n        }), \"\\n        \", Blaze._TemplateWith(function() {                                                             // 30\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 31\n        }, function() {                                                                                                // 32\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 33\n        }), \"\\n      \"), \"\\n    \" ];                                                                                   // 34\n      }), \"\\n\\n    \", Blaze.If(function() {                                                                            // 35\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 36\n      }, function() {                                                                                                  // 37\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({                                               // 38\n          type: \"submit\"                                                                                               // 39\n        }, function() {                                                                                                // 40\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 41\n        }), \"\\n      \", Spacebars.With(function() {                                                                    // 42\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 43\n        }, function() {                                                                                                // 44\n          return [ \"\\n      \", Blaze.View(\"lookup:.\", function() {                                                     // 45\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 46\n          }), \"\\n      \" ];                                                                                            // 47\n        }, function() {                                                                                                // 48\n          return \"\\n      Submit\\n      \";                                                                             // 49\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 50\n      }), \"\\n\\n  \" ];                                                                                                  // 51\n    });                                                                                                                // 52\n  });                                                                                                                  // 53\n}));                                                                                                                   // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10523\n}).call(this);                                                       // 10524\n                                                                     // 10525\n                                                                     // 10526\n                                                                     // 10527\n                                                                     // 10528\n                                                                     // 10529\n                                                                     // 10530\n(function () {                                                       // 10531\n                                                                     // 10532\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/quickForm/quickForm.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.quickForm_plain.helpers({                                                                                     // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    // These are the quickForm attributes that we want to forward to                                                   // 3\n    // the afQuickFields component.                                                                                    // 4\n    return _.pick(this.atts, 'id-prefix');                                                                             // 5\n  },                                                                                                                   // 6\n  submitButtonAtts: function plQuickFormSubmitButtonAtts() {                                                           // 7\n    var qfAtts = this.atts;                                                                                            // 8\n    var atts = {};                                                                                                     // 9\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 10\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 11\n    }                                                                                                                  // 12\n    return atts;                                                                                                       // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10556\n}).call(this);                                                       // 10557\n                                                                     // 10558\n                                                                     // 10559\n                                                                     // 10560\n                                                                     // 10561\n                                                                     // 10562\n                                                                     // 10563\n(function () {                                                       // 10564\n                                                                     // 10565\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/afArrayField/template.afArrayField.js                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField_plain\");                                                                            // 2\nTemplate[\"afArrayField_plain\"] = new Template(\"Template.afArrayField_plain\", (function() {                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.FIELDSET(\"\\n    \", HTML.LEGEND(Blaze.View(\"lookup:afFieldLabelText\", function() {                        // 5\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 6\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 7\n    }));                                                                                                               // 8\n  })), \"\\n    \", Blaze.If(function() {                                                                                 // 9\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 10\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 11\n    }));                                                                                                               // 12\n  }, function() {                                                                                                      // 13\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 14\n      \"class\": \"autoform-array-field-error\"                                                                            // 15\n    }, \"\\n      \", Blaze.View(\"lookup:afFieldMessage\", function() {                                                    // 16\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 17\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 18\n      })));                                                                                                            // 19\n    }), \"\\n    \"), \"\\n    \" ];                                                                                         // 20\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 21\n    return {                                                                                                           // 22\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 23\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 24\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 25\n    };                                                                                                                 // 26\n  }, function() {                                                                                                      // 27\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 28\n      return [ \"\\n    \", HTML.DIV({                                                                                    // 29\n        \"class\": \"autoform-array-item\"                                                                                 // 30\n      }, \"\\n      \", Blaze._TemplateWith(function() {                                                                  // 31\n        return {                                                                                                       // 32\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 33\n          label: Spacebars.call(false)                                                                                 // 34\n        };                                                                                                             // 35\n      }, function() {                                                                                                  // 36\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 37\n      }), \"\\n      \", Blaze.If(function() {                                                                            // 38\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 39\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 40\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 41\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 42\n        }));                                                                                                           // 43\n      }, function() {                                                                                                  // 44\n        return [ \"\\n      \", HTML.BUTTON({                                                                             // 45\n          type: \"button\",                                                                                              // 46\n          \"class\": \"autoform-remove-item\"                                                                              // 47\n        }, \"Remove\"), \"\\n      \" ];                                                                                    // 48\n      }), \"\\n    \"), \"\\n    \" ];                                                                                       // 49\n    });                                                                                                                // 50\n  }), \"\\n    \", Blaze.If(function() {                                                                                  // 51\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 52\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 53\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 54\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 55\n    }));                                                                                                               // 56\n  }, function() {                                                                                                      // 57\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 58\n      style: \"margin-top: 20px;\"                                                                                       // 59\n    }, \"\\n      \", HTML.BUTTON({                                                                                       // 60\n      type: \"button\",                                                                                                  // 61\n      \"class\": \"autoform-add-item\",                                                                                    // 62\n      \"data-autoform-field\": function() {                                                                              // 63\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 64\n      },                                                                                                               // 65\n      \"data-autoform-mincount\": function() {                                                                           // 66\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 67\n      },                                                                                                               // 68\n      \"data-autoform-maxcount\": function() {                                                                           // 69\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 70\n      }                                                                                                                // 71\n    }, \"Add\"), \"\\n    \"), \"\\n    \" ];                                                                                  // 72\n  }), \"\\n  \");                                                                                                         // 73\n}));                                                                                                                   // 74\n                                                                                                                       // 75\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10648\n}).call(this);                                                       // 10649\n                                                                     // 10650\n                                                                     // 10651\n                                                                     // 10652\n                                                                     // 10653\n                                                                     // 10654\n                                                                     // 10655\n(function () {                                                       // 10656\n                                                                     // 10657\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/afFormGroup/template.afFormGroup.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup_plain\");                                                                             // 2\nTemplate[\"afFormGroup_plain\"] = new Template(\"Template.afFormGroup_plain\", (function() {                               // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": function() {                                                                                              // 6\n      return [ Blaze.If(function() {                                                                                   // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 13\n    },                                                                                                                 // 14\n    \"data-required\": function() {                                                                                      // 15\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 16\n    }                                                                                                                  // 17\n  }, function() {                                                                                                      // 18\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 19\n  }), \"\\n    \", Blaze.Unless(function() {                                                                              // 20\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"skipLabel\"));                                               // 21\n  }, function() {                                                                                                      // 22\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 23\n      return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"afFieldLabelAtts\"));                              // 24\n    }), Blaze.If(function() {                                                                                          // 25\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 26\n    }, function() {                                                                                                    // 27\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 28\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 29\n      });                                                                                                              // 30\n    }, function() {                                                                                                    // 31\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 32\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 33\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 34\n        }));                                                                                                           // 35\n      });                                                                                                              // 36\n    })), \"\\n    \" ];                                                                                                   // 37\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 38\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));                                        // 39\n  }, function() {                                                                                                      // 40\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 41\n  }), \"\\n    \", HTML.SPAN(Blaze.View(\"lookup:afFieldMessage\", function() {                                             // 42\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 43\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 44\n    })));                                                                                                              // 45\n  })), \"\\n  \");                                                                                                        // 46\n}));                                                                                                                   // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10713\n}).call(this);                                                       // 10714\n                                                                     // 10715\n                                                                     // 10716\n                                                                     // 10717\n                                                                     // 10718\n                                                                     // 10719\n                                                                     // 10720\n(function () {                                                       // 10721\n                                                                     // 10722\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/afObjectField/template.afObjectField.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField_plain\");                                                                           // 2\nTemplate[\"afObjectField_plain\"] = new Template(\"Template.afObjectField_plain\", (function() {                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.FIELDSET(\"\\n    \", Spacebars.With(function() {                                                           // 5\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 6\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", HTML.LEGEND(Blaze.View(\"lookup:.\", function() {                                                 // 10\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 11\n    })), \"\\n    \" ];                                                                                                   // 12\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 13\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                             // 14\n  }, function() {                                                                                                      // 15\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 16\n  }), \"\\n  \");                                                                                                         // 17\n}));                                                                                                                   // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10749\n}).call(this);                                                       // 10750\n                                                                     // 10751\n                                                                     // 10752\n                                                                     // 10753\n                                                                     // 10754\n                                                                     // 10755\n                                                                     // 10756\n(function () {                                                       // 10757\n                                                                     // 10758\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/afObjectField/afObjectField.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afObjectField_plain.helpers({                                                                                 // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    return _.pick(this, 'name', 'id-prefix');                                                                          // 3\n  }                                                                                                                    // 4\n});                                                                                                                    // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10772\n}).call(this);                                                       // 10773\n                                                                     // 10774\n                                                                     // 10775\n                                                                     // 10776\n                                                                     // 10777\n                                                                     // 10778\n                                                                     // 10779\n(function () {                                                       // 10780\n                                                                     // 10781\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain-fieldset/template.plain-fieldset.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_plain-fieldset\");                                                                      // 2\nTemplate[\"quickForm_plain-fieldset\"] = new Template(\"Template.quickForm_plain-fieldset\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", HTML.FIELDSET(\"\\n      \", Spacebars.With(function() {                                         // 9\n        return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"legend\"));                                     // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", HTML.LEGEND(Blaze.View(\"lookup:.\", function() {                                           // 12\n          return Spacebars.mustache(view.lookup(\".\"));                                                                 // 13\n        })), \"\\n      \" ];                                                                                             // 14\n      }), \"\\n      \", Blaze._TemplateWith(function() {                                                                 // 15\n        return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                         // 16\n      }, function() {                                                                                                  // 17\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                // 18\n      }), \"\\n    \"), \"\\n    \", Blaze.If(function() {                                                                   // 19\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 20\n      }, function() {                                                                                                  // 21\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({                                               // 22\n          type: \"submit\"                                                                                               // 23\n        }, function() {                                                                                                // 24\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 25\n        }), \"\\n        \", Spacebars.With(function() {                                                                  // 26\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 27\n        }, function() {                                                                                                // 28\n          return [ \"\\n        \", Blaze.View(\"lookup:.\", function() {                                                   // 29\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 30\n          }), \"\\n        \" ];                                                                                          // 31\n        }, function() {                                                                                                // 32\n          return \"\\n        Submit\\n        \";                                                                         // 33\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 34\n      }), \"\\n  \" ];                                                                                                    // 35\n    });                                                                                                                // 36\n  });                                                                                                                  // 37\n}));                                                                                                                   // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10828\n}).call(this);                                                       // 10829\n                                                                     // 10830\n                                                                     // 10831\n                                                                     // 10832\n                                                                     // 10833\n                                                                     // 10834\n                                                                     // 10835\n(function () {                                                       // 10836\n                                                                     // 10837\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain-fieldset/plain-fieldset.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate['quickForm_plain-fieldset'].helpers({                                                                         // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    // These are the quickForm attributes that we want to forward to                                                   // 3\n    // the afQuickFields component.                                                                                    // 4\n    return _.pick(this.atts, 'id-prefix');                                                                             // 5\n  },                                                                                                                   // 6\n  submitButtonAtts: function plfsQuickFormSubmitButtonAtts() {                                                         // 7\n    var qfAtts = this.atts;                                                                                            // 8\n    var atts = {};                                                                                                     // 9\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 10\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 11\n    }                                                                                                                  // 12\n    return atts;                                                                                                       // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10861\n}).call(this);                                                       // 10862\n                                                                     // 10863\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['aldeed:autoform'] = {\n  AutoForm: AutoForm,\n  Utility: Utility\n};\n\n})();\n","servePath":"/packages/aldeed_autoform.js","sourceMap":{"version":3,"sources":["/packages/aldeed_autoform/packages/aldeed_autoform.js"],"names":[],"mappingsfile":"/packages/aldeed_autoform.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-common.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This is the only file that is run on the server, too                                                                // 1\n                                                                                                                       // 2\n// Extend the schema options allowed by SimpleSchema                                                                   // 3\nSimpleSchema.extendOptions({                                                                                           // 4\n  autoform: Match.Optional(Object)                                                                                     // 5\n});                                                                                                                    // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/utility.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global Utility:true, MongoObject, AutoForm, moment, SimpleSchema */                                                 // 1\n                                                                                                                       // 2\nUtility = {                                                                                                            // 3\n  componentTypeList: ['afArrayField', 'afEachArrayItem', 'afFieldInput', 'afFormGroup', 'afObjectField', 'afQuickField', 'afQuickFields', 'autoForm', 'quickForm'],\n  /**                                                                                                                  // 5\n   * @method Utility.cleanNulls                                                                                        // 6\n   * @private                                                                                                          // 7\n   * @param {Object} doc - Source object                                                                               // 8\n   * @returns {Object}                                                                                                 // 9\n   *                                                                                                                   // 10\n   * Returns an object in which all properties with null, undefined, or empty                                          // 11\n   * string values have been removed, recursively.                                                                     // 12\n   */                                                                                                                  // 13\n  cleanNulls: function cleanNulls(doc, isArray, keepEmptyStrings) {                                                    // 14\n    var newDoc = isArray ? [] : {};                                                                                    // 15\n    _.each(doc, function(val, key) {                                                                                   // 16\n      if (!_.isArray(val) && isBasicObject(val)) {                                                                     // 17\n        val = cleanNulls(val, false, keepEmptyStrings); //recurse into plain objects                                   // 18\n        if (!_.isEmpty(val)) {                                                                                         // 19\n          newDoc[key] = val;                                                                                           // 20\n        }                                                                                                              // 21\n      } else if (_.isArray(val)) {                                                                                     // 22\n        val = cleanNulls(val, true, keepEmptyStrings); //recurse into non-typed arrays                                 // 23\n        if (!_.isEmpty(val)) {                                                                                         // 24\n          newDoc[key] = val;                                                                                           // 25\n        }                                                                                                              // 26\n      } else if (!Utility.isNullUndefinedOrEmptyString(val)) {                                                         // 27\n        newDoc[key] = val;                                                                                             // 28\n      } else if (keepEmptyStrings && typeof val === \"string\" && val.length === 0) {                                    // 29\n        newDoc[key] = val;                                                                                             // 30\n      }                                                                                                                // 31\n    });                                                                                                                // 32\n    return newDoc;                                                                                                     // 33\n  },                                                                                                                   // 34\n  /**                                                                                                                  // 35\n   * @method Utility.reportNulls                                                                                       // 36\n   * @private                                                                                                          // 37\n   * @param {Object} flatDoc - An object with no properties that are also objects.                                     // 38\n   * @returns {Object} An object in which the keys represent the keys in the                                           // 39\n   * original object that were null, undefined, or empty strings, and the value                                        // 40\n   * of each key is \"\".                                                                                                // 41\n   */                                                                                                                  // 42\n  reportNulls: function reportNulls(flatDoc, keepEmptyStrings) {                                                       // 43\n    var nulls = {};                                                                                                    // 44\n    // Loop through the flat doc                                                                                       // 45\n    _.each(flatDoc, function(val, key) {                                                                               // 46\n      // If value is undefined, null, or an empty string, report this as null so it will be unset                      // 47\n      if (val === null) {                                                                                              // 48\n        nulls[key] = \"\";                                                                                               // 49\n      } else if (val === void 0) {                                                                                     // 50\n        nulls[key] = \"\";                                                                                               // 51\n      } else if (!keepEmptyStrings && typeof val === \"string\" && val.length === 0) {                                   // 52\n        nulls[key] = \"\";                                                                                               // 53\n      }                                                                                                                // 54\n      // If value is an array in which all the values recursively are undefined, null, or an empty string, report this as null so it will be unset\n      else if (_.isArray(val) && Utility.cleanNulls(val, true, keepEmptyStrings).length === 0) {                       // 56\n        nulls[key] = \"\";                                                                                               // 57\n      }                                                                                                                // 58\n    });                                                                                                                // 59\n    return nulls;                                                                                                      // 60\n  },                                                                                                                   // 61\n  /**                                                                                                                  // 62\n   * @method Utility.docToModifier                                                                                     // 63\n   * @private                                                                                                          // 64\n   * @param {Object} doc - An object to be converted into a MongoDB modifier                                           // 65\n   * @param {Object} [options] - Options                                                                               // 66\n   * @param {Boolean} [options.keepEmptyStrings] - Pass `true` to keep empty strings in the $set. Otherwise $unset them.\n   * @param {Boolean} [options.keepArrays] - Pass `true` to $set entire arrays. Otherwise the modifier will $set individual array items.\n   * @returns {Object} A MongoDB modifier.                                                                             // 69\n   *                                                                                                                   // 70\n   * Converts an object into a modifier by flattening it, putting keys with                                            // 71\n   * null, undefined, and empty string values into `modifier.$unset`, and                                              // 72\n   * putting the rest of the keys into `modifier.$set`.                                                                // 73\n   */                                                                                                                  // 74\n  docToModifier: function docToModifier(doc, options) {                                                                // 75\n    var modifier = {}, mDoc, flatDoc, nulls;                                                                           // 76\n    options = options || {};                                                                                           // 77\n                                                                                                                       // 78\n    // Flatten doc                                                                                                     // 79\n    mDoc = new MongoObject(doc);                                                                                       // 80\n    flatDoc = mDoc.getFlatObject({keepArrays: !!options.keepArrays});                                                  // 81\n    // Get a list of null, undefined, and empty string values so we can unset them instead                             // 82\n    nulls = Utility.reportNulls(flatDoc, !!options.keepEmptyStrings);                                                  // 83\n    flatDoc = Utility.cleanNulls(flatDoc, false, !!options.keepEmptyStrings);                                          // 84\n                                                                                                                       // 85\n    if (!_.isEmpty(flatDoc)) {                                                                                         // 86\n      modifier.$set = flatDoc;                                                                                         // 87\n    }                                                                                                                  // 88\n    if (!_.isEmpty(nulls)) {                                                                                           // 89\n      modifier.$unset = nulls;                                                                                         // 90\n    }                                                                                                                  // 91\n    return modifier;                                                                                                   // 92\n  },                                                                                                                   // 93\n  /**                                                                                                                  // 94\n   * @method Utility.getSelectValues                                                                                   // 95\n   * @private                                                                                                          // 96\n   * @param {Element} select - DOM Element from which to get current values                                            // 97\n   * @returns {string[]}                                                                                               // 98\n   *                                                                                                                   // 99\n   * Gets a string array of all the selected values in a given `select` DOM element.                                   // 100\n   */                                                                                                                  // 101\n  getSelectValues: function getSelectValues(select) {                                                                  // 102\n    var result = [];                                                                                                   // 103\n    var options = select && select.options || [];                                                                      // 104\n    var opt;                                                                                                           // 105\n                                                                                                                       // 106\n    for (var i = 0, ln = options.length; i < ln; i++) {                                                                // 107\n      opt = options[i];                                                                                                // 108\n                                                                                                                       // 109\n      if (opt.selected) {                                                                                              // 110\n        result.push(opt.value || opt.text);                                                                            // 111\n      }                                                                                                                // 112\n    }                                                                                                                  // 113\n    return result;                                                                                                     // 114\n  },                                                                                                                   // 115\n  /*                                                                                                                   // 116\n   * Get select options                                                                                                // 117\n   */                                                                                                                  // 118\n  getSelectOptions: function getSelectOptions(defs, hash) {                                                            // 119\n    var schemaType = defs.type;                                                                                        // 120\n    var selectOptions = hash.options;                                                                                  // 121\n                                                                                                                       // 122\n    // Handle options=\"allowed\"                                                                                        // 123\n    if (selectOptions === \"allowed\") {                                                                                 // 124\n      selectOptions = _.map(defs.allowedValues, function(v) {                                                          // 125\n        var label = v;                                                                                                 // 126\n        if (hash.capitalize && v.length > 0 && schemaType === String) {                                                // 127\n          label = v.charAt(0).toUpperCase() + v.slice(1).toLowerCase();                                                // 128\n        }                                                                                                              // 129\n                                                                                                                       // 130\n        return {label: label, value: v};                                                                               // 131\n      });                                                                                                              // 132\n    }                                                                                                                  // 133\n                                                                                                                       // 134\n    // Hashtable                                                                                                       // 135\n    else if (_.isObject(selectOptions) && !_.isArray(selectOptions)) {                                                 // 136\n      selectOptions = _.map(selectOptions, function(v, k) {                                                            // 137\n        return {label: v, value: schemaType(k)};                                                                       // 138\n      });                                                                                                              // 139\n    }                                                                                                                  // 140\n                                                                                                                       // 141\n    return selectOptions;                                                                                              // 142\n  },                                                                                                                   // 143\n  /**                                                                                                                  // 144\n   * @method Utility.lookup                                                                                            // 145\n   * @private                                                                                                          // 146\n   * @param {Any} obj                                                                                                  // 147\n   * @returns {Any}                                                                                                    // 148\n   *                                                                                                                   // 149\n   * If `obj` is a string, returns the value of the property with that                                                 // 150\n   * name on the `window` object. Otherwise returns `obj`.                                                             // 151\n   */                                                                                                                  // 152\n  lookup: function lookup(obj) {                                                                                       // 153\n    var ref = window, arr;                                                                                             // 154\n    if (typeof obj === \"string\") {                                                                                     // 155\n      arr = obj.split(\".\");                                                                                            // 156\n      while(arr.length && (ref = ref[arr.shift()]));                                                                   // 157\n      if (!ref) {                                                                                                      // 158\n        throw new Error(obj + \" is not in the window scope\");                                                          // 159\n      }                                                                                                                // 160\n      return ref;                                                                                                      // 161\n    }                                                                                                                  // 162\n    return obj;                                                                                                        // 163\n  },                                                                                                                   // 164\n  /**                                                                                                                  // 165\n   * @method Utility.getDefs                                                                                           // 166\n   * @private                                                                                                          // 167\n   * @param {SimpleSchema} ss                                                                                          // 168\n   * @param {String} name                                                                                              // 169\n   * @return {Object} Schema definitions object                                                                        // 170\n   *                                                                                                                   // 171\n   * Returns the schema definitions object from a SimpleSchema instance. Equivalent to calling                         // 172\n   * `ss.schema(name)` but handles throwing errors if `name` is not a string or is not a valid                         // 173\n   * field name for this SimpleSchema instance.                                                                        // 174\n   */                                                                                                                  // 175\n  getDefs: function getDefs(ss, name) {                                                                                // 176\n    if (typeof name !== \"string\") {                                                                                    // 177\n      throw new Error(\"Invalid field name: (not a string)\");                                                           // 178\n    }                                                                                                                  // 179\n                                                                                                                       // 180\n    var defs = ss.schema(name);                                                                                        // 181\n    if (!defs) {                                                                                                       // 182\n      throw new Error(\"Invalid field name: \" + name);                                                                  // 183\n    }                                                                                                                  // 184\n    return defs;                                                                                                       // 185\n  },                                                                                                                   // 186\n  /**                                                                                                                  // 187\n   * @method Utility.objAffectsKey                                                                                     // 188\n   * @private                                                                                                          // 189\n   * @param  {Object} obj                                                                                              // 190\n   * @param  {String} key                                                                                              // 191\n   * @return {Boolean}                                                                                                 // 192\n   * @todo should make this a static method in MongoObject                                                             // 193\n   */                                                                                                                  // 194\n  objAffectsKey: function objAffectsKey(obj, key) {                                                                    // 195\n    var mDoc = new MongoObject(obj);                                                                                   // 196\n    return mDoc.affectsKey(key);                                                                                       // 197\n  },                                                                                                                   // 198\n  /**                                                                                                                  // 199\n   * @method Utility.expandObj                                                                                         // 200\n   * @private                                                                                                          // 201\n   * @param  {Object} doc                                                                                              // 202\n   * @return {Object}                                                                                                  // 203\n   *                                                                                                                   // 204\n   * Takes a flat object and returns an expanded version of it.                                                        // 205\n   */                                                                                                                  // 206\n  expandObj: function expandObj(doc) {                                                                                 // 207\n    var newDoc = {}, subkeys, subkey, subkeylen, nextPiece, current;                                                   // 208\n    _.each(doc, function(val, key) {                                                                                   // 209\n      subkeys = key.split(\".\");                                                                                        // 210\n      subkeylen = subkeys.length;                                                                                      // 211\n      current = newDoc;                                                                                                // 212\n      for (var i = 0; i < subkeylen; i++) {                                                                            // 213\n        subkey = subkeys[i];                                                                                           // 214\n        if (typeof current[subkey] !== \"undefined\" && !_.isObject(current[subkey])) {                                  // 215\n          break; //already set for some reason; leave it alone                                                         // 216\n        }                                                                                                              // 217\n        if (i === subkeylen - 1) {                                                                                     // 218\n          //last iteration; time to set the value                                                                      // 219\n          current[subkey] = val;                                                                                       // 220\n        } else {                                                                                                       // 221\n          //see if the next piece is a number                                                                          // 222\n          nextPiece = subkeys[i + 1];                                                                                  // 223\n          nextPiece = parseInt(nextPiece, 10);                                                                         // 224\n          if (isNaN(nextPiece) && !_.isObject(current[subkey])) {                                                      // 225\n            current[subkey] = {};                                                                                      // 226\n          } else if (!isNaN(nextPiece) && !_.isArray(current[subkey])) {                                               // 227\n            current[subkey] = [];                                                                                      // 228\n          }                                                                                                            // 229\n        }                                                                                                              // 230\n        current = current[subkey];                                                                                     // 231\n      }                                                                                                                // 232\n    });                                                                                                                // 233\n    return newDoc;                                                                                                     // 234\n  },                                                                                                                   // 235\n  /**                                                                                                                  // 236\n   * @method Utility.compactArrays                                                                                     // 237\n   * @private                                                                                                          // 238\n   * @param  {Object} obj                                                                                              // 239\n   * @return {undefined}                                                                                               // 240\n   *                                                                                                                   // 241\n   * Edits the object by reference, compacting any arrays at any level recursively.                                    // 242\n   */                                                                                                                  // 243\n  compactArrays: function compactArrays(obj) {                                                                         // 244\n    if (_.isObject(obj)) {                                                                                             // 245\n      _.each(obj, function (val, key) {                                                                                // 246\n        if (_.isArray(val)) {                                                                                          // 247\n          obj[key] = _.without(val, void 0, null);                                                                     // 248\n          _.each(obj[key], function (arrayItem) {                                                                      // 249\n            compactArrays(arrayItem);                                                                                  // 250\n          });                                                                                                          // 251\n        } else if (!(val instanceof Date) && _.isObject(val)) {                                                        // 252\n          //recurse into objects                                                                                       // 253\n          compactArrays(val);                                                                                          // 254\n        }                                                                                                              // 255\n      });                                                                                                              // 256\n    }                                                                                                                  // 257\n  },                                                                                                                   // 258\n  /**                                                                                                                  // 259\n   * @method Utility.bubbleEmpty                                                                                       // 260\n   * @private                                                                                                          // 261\n   * @param  {Object} obj                                                                                              // 262\n   * @return {undefined}                                                                                               // 263\n   *                                                                                                                   // 264\n   * Edits the object by reference.                                                                                    // 265\n   */                                                                                                                  // 266\n  bubbleEmpty: function bubbleEmpty(obj, keepEmptyStrings) {                                                           // 267\n    if (_.isObject(obj)) {                                                                                             // 268\n      _.each(obj, function (val, key) {                                                                                // 269\n        if (_.isArray(val)) {                                                                                          // 270\n          _.each(val, function (arrayItem) {                                                                           // 271\n            bubbleEmpty(arrayItem);                                                                                    // 272\n          });                                                                                                          // 273\n        } else if (isBasicObject(val)) {                                                                               // 274\n          var allEmpty = _.all(val, function (prop) {                                                                  // 275\n            return (prop === void 0 || prop === null || (!keepEmptyStrings && typeof prop === \"string\" && prop.length === 0));\n          });                                                                                                          // 277\n          if (_.isEmpty(val) || allEmpty) {                                                                            // 278\n            obj[key] = null;                                                                                           // 279\n          } else {                                                                                                     // 280\n            //recurse into objects                                                                                     // 281\n            bubbleEmpty(val);                                                                                          // 282\n          }                                                                                                            // 283\n        }                                                                                                              // 284\n      });                                                                                                              // 285\n    }                                                                                                                  // 286\n  },                                                                                                                   // 287\n  /**                                                                                                                  // 288\n   * @method Utility.isNullUndefinedOrEmptyString                                                                      // 289\n   * @private                                                                                                          // 290\n   * @param  {Any} val                                                                                                 // 291\n   * @return {Boolean}                                                                                                 // 292\n   *                                                                                                                   // 293\n   * Returns `true` if the value is null, undefined, or an empty string                                                // 294\n   */                                                                                                                  // 295\n  isNullUndefinedOrEmptyString: function isNullUndefinedOrEmptyString(val) {                                           // 296\n    return (val === void 0 || val === null || (typeof val === \"string\" && val.length === 0));                          // 297\n  },                                                                                                                   // 298\n  /**                                                                                                                  // 299\n   * @method Utility.isValidDateString                                                                                 // 300\n   * @private                                                                                                          // 301\n   * @param  {String}  dateString                                                                                      // 302\n   * @return {Boolean}                                                                                                 // 303\n   *                                                                                                                   // 304\n   * Returns `true` if dateString is a \"valid date string\"                                                             // 305\n   */                                                                                                                  // 306\n  isValidDateString: function isValidDateString(dateString) {                                                          // 307\n    var m = moment(dateString, 'YYYY-MM-DD', true);                                                                    // 308\n    return m && m.isValid();                                                                                           // 309\n  },                                                                                                                   // 310\n  /**                                                                                                                  // 311\n   * @method Utility.isValidTimeString                                                                                 // 312\n   * @private                                                                                                          // 313\n   * @param  {String}  timeString                                                                                      // 314\n   * @return {Boolean}                                                                                                 // 315\n   *                                                                                                                   // 316\n   * Returns `true` if timeString is a \"valid time string\"                                                             // 317\n   */                                                                                                                  // 318\n  isValidTimeString: function isValidTimeString(timeString) {                                                          // 319\n    if (typeof timeString !== \"string\") {                                                                              // 320\n      return false;                                                                                                    // 321\n    }                                                                                                                  // 322\n                                                                                                                       // 323\n    //this reg ex actually allows a few invalid hours/minutes/seconds, but                                             // 324\n    //we can catch that when parsing                                                                                   // 325\n    var regEx = /^[0-2][0-9]:[0-5][0-9](:[0-5][0-9](\\.[0-9]{1,3})?)?$/;                                                // 326\n    return regEx.test(timeString);                                                                                     // 327\n  },                                                                                                                   // 328\n  /**                                                                                                                  // 329\n   * @method  Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString                                                // 330\n   * @private                                                                                                          // 331\n   * @param  {String} dateString                                                                                       // 332\n   * @return {Boolean}                                                                                                 // 333\n   *                                                                                                                   // 334\n   * Returns true if dateString is a \"valid normalized forced-UTC global date and time string\"                         // 335\n   */                                                                                                                  // 336\n  isValidNormalizedForcedUtcGlobalDateAndTimeString: function isValidNormalizedForcedUtcGlobalDateAndTimeString(dateString) {\n    if (typeof dateString !== \"string\") {                                                                              // 338\n      return false;                                                                                                    // 339\n    }                                                                                                                  // 340\n                                                                                                                       // 341\n    var datePart = dateString.substring(0, 10);                                                                        // 342\n    var tPart = dateString.substring(10, 11);                                                                          // 343\n    var timePart = dateString.substring(11, dateString.length - 1);                                                    // 344\n    var zPart = dateString.substring(dateString.length - 1);                                                           // 345\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart) && zPart === \"Z\";\n  },                                                                                                                   // 347\n  /**                                                                                                                  // 348\n   * @method  Utility.isValidNormalizedLocalDateAndTimeString                                                          // 349\n   * @private                                                                                                          // 350\n   * @param  {String} dtString                                                                                         // 351\n   * @return {Boolean}                                                                                                 // 352\n   *                                                                                                                   // 353\n   * Returns true if dtString is a \"valid normalized local date and time string\"                                       // 354\n   */                                                                                                                  // 355\n  isValidNormalizedLocalDateAndTimeString: function isValidNormalizedLocalDateAndTimeString(dtString) {                // 356\n    if (typeof dtString !== \"string\") {                                                                                // 357\n      return false;                                                                                                    // 358\n    }                                                                                                                  // 359\n                                                                                                                       // 360\n    var datePart = dtString.substring(0, 10);                                                                          // 361\n    var tPart = dtString.substring(10, 11);                                                                            // 362\n    var timePart = dtString.substring(11, dtString.length);                                                            // 363\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart);                // 364\n  },                                                                                                                   // 365\n  /**                                                                                                                  // 366\n   * @method Utility.getComponentContext                                                                               // 367\n   * @private                                                                                                          // 368\n   * @param  {Object} context A context (`this`) object                                                                // 369\n   * @param {String} name The name of the helper or component we're calling from.                                      // 370\n   * @return {Object} Normalized context object                                                                        // 371\n   *                                                                                                                   // 372\n   * Returns an object with `atts` and `defs` properties, normalized from whatever object is passed in.                // 373\n   * This helps deal with the fact that we have to pass the ancestor autoform's context to different                   // 374\n   * helpers and components in different ways, but in all cases we want to get access to it and throw                  // 375\n   * an error if we can't find an autoform context.                                                                    // 376\n   */                                                                                                                  // 377\n  getComponentContext: function autoFormGetComponentContext(context, name) {                                           // 378\n    var atts, defs, formComponentAttributes, fieldAttributes, fieldAttributesForComponentType, ss;                     // 379\n                                                                                                                       // 380\n    atts = _.clone(context || {});                                                                                     // 381\n    ss = AutoForm.getFormSchema();                                                                                     // 382\n    defs = Utility.getDefs(ss, atts.name); //defs will not be undefined                                                // 383\n                                                                                                                       // 384\n    // Look up the tree if we're in a helper, checking to see if any ancestor components                               // 385\n    // had a <componentType>-attribute specified.                                                                      // 386\n    formComponentAttributes = AutoForm.findAttributesWithPrefix(name + \"-\");                                           // 387\n                                                                                                                       // 388\n    // Get any field-specific attributes defined in the schema.                                                        // 389\n    // They can be in autoform.attrName or autoform.componentType.attrName, with                                       // 390\n    // the latter overriding the former.                                                                               // 391\n    fieldAttributes = _.clone(defs.autoform) || {};                                                                    // 392\n    fieldAttributesForComponentType = fieldAttributes[name] || {};                                                     // 393\n    fieldAttributes = _.omit(fieldAttributes, Utility.componentTypeList);                                              // 394\n    fieldAttributes = _.extend({}, fieldAttributes, fieldAttributesForComponentType);                                  // 395\n                                                                                                                       // 396\n    // \"autoform\" option in the schema provides default atts                                                           // 397\n    atts = _.extend({}, formComponentAttributes, fieldAttributes, atts);                                               // 398\n                                                                                                                       // 399\n    // eval any attribute that is provided as a function                                                               // 400\n    var evaluatedAtts = {};                                                                                            // 401\n    _.each(atts, function (v, k) {                                                                                     // 402\n      if (typeof v === 'function') {                                                                                   // 403\n        evaluatedAtts[k] = v.call({                                                                                    // 404\n          name: atts.name                                                                                              // 405\n        });                                                                                                            // 406\n      } else {                                                                                                         // 407\n        evaluatedAtts[k] = v;                                                                                          // 408\n      }                                                                                                                // 409\n    });                                                                                                                // 410\n                                                                                                                       // 411\n    return {                                                                                                           // 412\n      atts: evaluatedAtts,                                                                                             // 413\n      defs: defs                                                                                                       // 414\n    };                                                                                                                 // 415\n  },                                                                                                                   // 416\n  /**                                                                                                                  // 417\n   * @method Utility.stringToArray                                                                                     // 418\n   * @private                                                                                                          // 419\n   * @param {String|Array} s A variable that might be a string or an array.                                            // 420\n   * @param {String} errorMessage Error message to use if it's not a string or an array.                               // 421\n   * @return {Array} The array, building it from a comma-delimited string if necessary.                                // 422\n   */                                                                                                                  // 423\n  stringToArray: function stringToArray(s, errorMessage) {                                                             // 424\n    if (typeof s === \"string\") {                                                                                       // 425\n      return s.replace(/ /g, '').split(',');                                                                           // 426\n    } else if (!_.isArray(s)) {                                                                                        // 427\n      throw new Error(errorMessage);                                                                                   // 428\n    } else {                                                                                                           // 429\n      return s;                                                                                                        // 430\n    }                                                                                                                  // 431\n  },                                                                                                                   // 432\n  /**                                                                                                                  // 433\n   * @method Utility.addClass                                                                                          // 434\n   * @private                                                                                                          // 435\n   * @param {Object} atts An object that might have a \"class\" property                                                 // 436\n   * @param {String} klass The class string to add                                                                     // 437\n   * @return {Object} The object with klass added to the \"class\" property, creating the property if necessary          // 438\n   */                                                                                                                  // 439\n  addClass: function addClass(atts, klass) {                                                                           // 440\n    if (typeof atts[\"class\"] === \"string\") {                                                                           // 441\n      atts[\"class\"] += \" \" + klass;                                                                                    // 442\n    } else {                                                                                                           // 443\n      atts[\"class\"] = klass;                                                                                           // 444\n    }                                                                                                                  // 445\n    return atts;                                                                                                       // 446\n  },                                                                                                                   // 447\n  /**                                                                                                                  // 448\n   * @method Utility.getFormTypeDef                                                                                    // 449\n   * @private                                                                                                          // 450\n   * @param {String} formType The form type                                                                            // 451\n   * @return {Object} The definition. Throws an error if type hasn't been defined.                                     // 452\n   */                                                                                                                  // 453\n  getFormTypeDef: function getFormTypeDef(formType) {                                                                  // 454\n    var ftd = AutoForm._formTypeDefinitions[formType];                                                                 // 455\n    if (!ftd) {                                                                                                        // 456\n      throw new Error('AutoForm: Form type \"' + formType + '\" has not been defined');                                  // 457\n    }                                                                                                                  // 458\n    return ftd;                                                                                                        // 459\n  }                                                                                                                    // 460\n};                                                                                                                     // 461\n                                                                                                                       // 462\n// getPrototypeOf polyfill                                                                                             // 463\nif (typeof Object.getPrototypeOf !== \"function\") {                                                                     // 464\n  if (typeof \"\".__proto__ === \"object\") {                                                                              // 465\n    Object.getPrototypeOf = function(object) {                                                                         // 466\n      return object.__proto__;                                                                                         // 467\n    };                                                                                                                 // 468\n  } else {                                                                                                             // 469\n    Object.getPrototypeOf = function(object) {                                                                         // 470\n      // May break if the constructor has been tampered with                                                           // 471\n      return object.constructor.prototype;                                                                             // 472\n    };                                                                                                                 // 473\n  }                                                                                                                    // 474\n}                                                                                                                      // 475\n                                                                                                                       // 476\n/* Tests whether \"obj\" is an Object as opposed to                                                                      // 477\n * something that inherits from Object                                                                                 // 478\n *                                                                                                                     // 479\n * @param {any} obj                                                                                                    // 480\n * @returns {Boolean}                                                                                                  // 481\n */                                                                                                                    // 482\nvar isBasicObject = function(obj) {                                                                                    // 483\n  return _.isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;                                           // 484\n};                                                                                                                     // 485\n                                                                                                                       // 486\n/*                                                                                                                     // 487\n * Extend SS for now; TODO put this in SS package                                                                      // 488\n */                                                                                                                    // 489\nif (typeof SimpleSchema.prototype.getAllowedValuesForKey !== 'function') {                                             // 490\n  SimpleSchema.prototype.getAllowedValuesForKey = function (key) {                                                     // 491\n    var defs = this.getDefinition(key, ['type', 'allowedValues']);                                                     // 492\n                                                                                                                       // 493\n    // For array fields, `allowedValues` is on the array item definition                                               // 494\n    if (defs.type === Array) {                                                                                         // 495\n      defs = this.getDefinition(key+\".$\", ['allowedValues']);                                                          // 496\n    }                                                                                                                  // 497\n                                                                                                                       // 498\n    return defs.allowedValues;                                                                                         // 499\n  };                                                                                                                   // 500\n}                                                                                                                      // 501\n                                                                                                                       // 502\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/form-preserve.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @constructor                                                                                                        // 2\n * @private                                                                                                            // 3\n * @param {String} migrationName                                                                                       // 4\n *                                                                                                                     // 5\n * Internal helper object to preserve form inputs across Hot Code Push                                                 // 6\n * and across \"pages\" navigation if the option is enabled.                                                             // 7\n */                                                                                                                    // 8\nFormPreserve = function formPreserveConstructor(migrationName) {                                                       // 9\n  var self = this;                                                                                                     // 10\n  if (! _.isString(migrationName))                                                                                     // 11\n    throw Error(\"You must define an unique migration name of type String\");                                            // 12\n  self.registeredForms = {};                                                                                           // 13\n  self.retrievedDocuments = {};                                                                                        // 14\n  if (Package.reload) {                                                                                                // 15\n    var Reload = Package.reload.Reload;                                                                                // 16\n    self.retrievedDocuments = Reload._migrationData(migrationName) || '{}';                                            // 17\n                                                                                                                       // 18\n    // Currently migration does not seem to support proper storage                                                     // 19\n    // of Date type. It comes back as a string, so we need to store                                                    // 20\n    // EJSON instead.                                                                                                  // 21\n    if (typeof self.retrievedDocuments === 'string') {                                                                 // 22\n      self.retrievedDocuments = EJSON.parse(self.retrievedDocuments);                                                  // 23\n    }                                                                                                                  // 24\n                                                                                                                       // 25\n    Reload._onMigrate(migrationName, function () {                                                                     // 26\n      var doc = self._retrieveRegisteredDocuments();                                                                   // 27\n      return [true, EJSON.stringify(doc)];                                                                             // 28\n    });                                                                                                                // 29\n  }                                                                                                                    // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\nFormPreserve.prototype.getDocument = function (formId) {                                                               // 33\n  var self = this, doc;                                                                                                // 34\n  if (! _.has(self.retrievedDocuments, formId)) {                                                                      // 35\n    return false;                                                                                                      // 36\n  }                                                                                                                    // 37\n                                                                                                                       // 38\n  return self.retrievedDocuments[formId];                                                                              // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\nFormPreserve.prototype.clearDocument = function (formId) {                                                             // 42\n  delete this.retrievedDocuments[formId];                                                                              // 43\n};                                                                                                                     // 44\n                                                                                                                       // 45\nFormPreserve.prototype.registerForm = function (formId, retrieveFunc) {                                                // 46\n  this.registeredForms[formId] = retrieveFunc;                                                                         // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nFormPreserve.prototype.formIsRegistered = function (formId) {                                                          // 50\n  return !!this.registeredForms[formId];                                                                               // 51\n};                                                                                                                     // 52\n                                                                                                                       // 53\nFormPreserve.prototype.unregisterForm = function (formId) {                                                            // 54\n  delete this.registeredForms[formId];                                                                                 // 55\n  delete this.retrievedDocuments[formId];                                                                              // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\nFormPreserve.prototype.unregisterAllForms = function () {                                                              // 59\n  var self = this;                                                                                                     // 60\n  self.registeredForms = {};                                                                                           // 61\n  self.retrievedDocuments = {};                                                                                        // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\nFormPreserve.prototype._retrieveRegisteredDocuments = function () {                                                    // 65\n  var self = this;                                                                                                     // 66\n  res = {};                                                                                                            // 67\n  _.each(self.registeredForms, function (retrieveFunc, formId) {                                                       // 68\n    res[formId] = retrieveFunc();                                                                                      // 69\n  });                                                                                                                  // 70\n  return res;                                                                                                          // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-hooks.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Manages all hooks, supporting append/replace, get                                                                   // 1\n                                                                                                                       // 2\nHooks = {                                                                                                              // 3\n  form: {}                                                                                                             // 4\n};                                                                                                                     // 5\n                                                                                                                       // 6\n// The names of all supported hooks, excluding \"before\" and \"after\".                                                   // 7\nvar hookNames = ['formToDoc', 'formToModifier', 'docToForm', 'onSubmit', 'onSuccess', 'onError',                       // 8\n    'beginSubmit', 'endSubmit'];                                                                                       // 9\n                                                                                                                       // 10\nHooks.getDefault = function() {                                                                                        // 11\n  var hooks = {                                                                                                        // 12\n    before: {},                                                                                                        // 13\n    after: {}                                                                                                          // 14\n  };                                                                                                                   // 15\n  _.each(hookNames, function(hookName) {                                                                               // 16\n    hooks[hookName] = [];                                                                                              // 17\n  });                                                                                                                  // 18\n  return hooks;                                                                                                        // 19\n};                                                                                                                     // 20\n                                                                                                                       // 21\nHooks.global = Hooks.getDefault();                                                                                     // 22\n                                                                                                                       // 23\nHooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {                                            // 24\n  // Add before hooks                                                                                                  // 25\n  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {                                  // 26\n    if (typeof func !== \"function\") {                                                                                  // 27\n      throw new Error(\"AutoForm before hook must be a function, not \" + typeof func);                                  // 28\n    }                                                                                                                  // 29\n    hooksList.before[type] = (!replace && hooksList.before[type]) ? hooksList.before[type] : [];                       // 30\n    hooksList.before[type].push(func);                                                                                 // 31\n  });                                                                                                                  // 32\n                                                                                                                       // 33\n  // Add after hooks                                                                                                   // 34\n  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {                                     // 35\n    if (typeof func !== \"function\") {                                                                                  // 36\n      throw new Error(\"AutoForm after hook must be a function, not \" + typeof func);                                   // 37\n    }                                                                                                                  // 38\n    hooksList.after[type] = (!replace && hooksList.after[type]) ? hooksList.after[type] : [];                          // 39\n    hooksList.after[type].push(func);                                                                                  // 40\n  });                                                                                                                  // 41\n                                                                                                                       // 42\n  // Add all other hooks                                                                                               // 43\n  _.each(hookNames, function autoFormHooksEach(name) {                                                                 // 44\n    if (hooks[name]) {                                                                                                 // 45\n      if (typeof hooks[name] !== \"function\") {                                                                         // 46\n        throw new Error(\"AutoForm \" + name + \" hook must be a function, not \" + typeof hooks[name]);                   // 47\n      }                                                                                                                // 48\n                                                                                                                       // 49\n      if(replace) {                                                                                                    // 50\n          hooksList[name] = [];                                                                                        // 51\n      }                                                                                                                // 52\n                                                                                                                       // 53\n      hooksList[name].push(hooks[name]);                                                                               // 54\n    }                                                                                                                  // 55\n  });                                                                                                                  // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\nHooks.getHooks = function getHooks(formId, type, subtype) {                                                            // 59\n  var f, g;                                                                                                            // 60\n  if (subtype) {                                                                                                       // 61\n    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];                     // 62\n    g = Hooks.global[type] && Hooks.global[type][subtype] || [];                                                       // 63\n  } else {                                                                                                             // 64\n    f = Hooks.form[formId] && Hooks.form[formId][type] || [];                                                          // 65\n    g = Hooks.global[type] || [];                                                                                      // 66\n  }                                                                                                                    // 67\n  return f.concat(g);                                                                                                  // 68\n};                                                                                                                     // 69\n                                                                                                                       // 70\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-formdata.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global FormData:true */                                                                                             // 1\n                                                                                                                       // 2\n/*                                                                                                                     // 3\n * Tracks form data with reactivity. This is similar to                                                                // 4\n * ReactiveDict, but we need to store typed objects and                                                                // 5\n * keep their type upon retrieval.                                                                                     // 6\n */                                                                                                                    // 7\n                                                                                                                       // 8\nFormData = function () {                                                                                               // 9\n  var self = this;                                                                                                     // 10\n  self.forms = {};                                                                                                     // 11\n};                                                                                                                     // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initializes tracking for a given form, if not already done.                                                         // 15\n * @param {String} formId The form's `id` attribute                                                                    // 16\n */                                                                                                                    // 17\nFormData.prototype.initForm = function (formId) {                                                                      // 18\n  var self = this;                                                                                                     // 19\n                                                                                                                       // 20\n  if (self.forms[formId]) {                                                                                            // 21\n    return;                                                                                                            // 22\n  }                                                                                                                    // 23\n                                                                                                                       // 24\n  self.forms[formId] = {                                                                                               // 25\n    sourceDoc: null,                                                                                                   // 26\n    deps: {                                                                                                            // 27\n      sourceDoc: new Tracker.Dependency()                                                                              // 28\n    }                                                                                                                  // 29\n  };                                                                                                                   // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Initializes tracking for a given form, if not already done.                                                         // 34\n * @param {String} formId The form's `id` attribute                                                                    // 35\n */                                                                                                                    // 36\n                                                                                                                       // 37\n/**                                                                                                                    // 38\n * Gets or sets a source doc for the given form. Reactive.                                                             // 39\n * @param   {String}                formId    The form's `id` attribute                                                // 40\n * @param   {MongoObject|null}      sourceDoc The mDoc for the form or `null` if no doc.                               // 41\n * @returns {MongoObject|undefined} Returns the form's MongoObject if getting.                                         // 42\n */                                                                                                                    // 43\nFormData.prototype.sourceDoc = function (formId, sourceDoc) {                                                          // 44\n  var self = this;                                                                                                     // 45\n  self.initForm(formId);                                                                                               // 46\n                                                                                                                       // 47\n  if (sourceDoc || sourceDoc === null) {                                                                               // 48\n    //setter                                                                                                           // 49\n    self.forms[formId].sourceDoc = sourceDoc;                                                                          // 50\n    self.forms[formId].deps.sourceDoc.changed();                                                                       // 51\n  } else {                                                                                                             // 52\n    //getter                                                                                                           // 53\n    self.forms[formId].deps.sourceDoc.depend();                                                                        // 54\n    return self.forms[formId].sourceDoc;                                                                               // 55\n  }                                                                                                                    // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-arrays.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Track arrays; this allows us to add/remove fields or groups of fields for an array                                  // 1\n// but still easily respect minCount and maxCount, and properly add/remove the same                                    // 2\n// items from the database once the form is submitted.                                                                 // 3\n                                                                                                                       // 4\nArrayTracker = function afArrayTracker() {                                                                             // 5\n  var self = this;                                                                                                     // 6\n  self.info = {};                                                                                                      // 7\n};                                                                                                                     // 8\n                                                                                                                       // 9\nArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {               // 10\n  var defs = AutoForm.Utility.getDefs(ss, field);                                                                      // 11\n                                                                                                                       // 12\n  // minCount is set by the schema, but can be set higher on the field attribute                                       // 13\n  overrideMinCount = overrideMinCount || 0;                                                                            // 14\n  var minCount = defs.minCount || 0;                                                                                   // 15\n  minCount = Math.max(overrideMinCount, minCount);                                                                     // 16\n                                                                                                                       // 17\n  // maxCount is set by the schema, but can be set lower on the field attribute                                        // 18\n  overrideMaxCount = overrideMaxCount || Infinity;                                                                     // 19\n  var maxCount = defs.maxCount || Infinity;                                                                            // 20\n  maxCount = Math.min(overrideMaxCount, maxCount);                                                                     // 21\n                                                                                                                       // 22\n  return {minCount: minCount, maxCount: maxCount};                                                                     // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\nArrayTracker.prototype.initForm = function atInitForm(formId) {                                                        // 26\n\tvar self = this;                                                                                                      // 27\n                                                                                                                       // 28\n\tif (self.info[formId])                                                                                                // 29\n\t\treturn;                                                                                                              // 30\n                                                                                                                       // 31\n\tself.info[formId] = {};                                                                                               // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nArrayTracker.prototype.getForm = function atInitForm(formId) {                                                         // 35\n\tvar self = this;                                                                                                      // 36\n\tself.initForm(formId);                                                                                                // 37\n\treturn self.info[formId];                                                                                             // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\nArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {                                           // 41\n\tvar self = this;                                                                                                      // 42\n\tself.initForm(formId);                                                                                                // 43\n                                                                                                                       // 44\n\tif (!self.info[formId][field]) {                                                                                      // 45\n\t\tself.resetField(formId, field);                                                                                      // 46\n\t}                                                                                                                     // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {\n\tvar self = this;                                                                                                      // 51\n\tself.ensureField(formId, field);                                                                                      // 52\n                                                                                                                       // 53\n\tif (self.info[formId][field].array != null)                                                                           // 54\n\t\treturn;                                                                                                              // 55\n                                                                                                                       // 56\n\t// If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.           // 57\n\t// If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.                 // 58\n\tvar range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);                                            // 59\n\tvar arrayCount = Math.max(range.minCount, (docCount == null) ? 1 : docCount);                                         // 60\n                                                                                                                       // 61\n\t// If this is an array of objects, collect names of object props                                                      // 62\n\tvar childKeys = [];                                                                                                   // 63\n\tif (ss.schema(field + '.$').type === Object) {                                                                        // 64\n    childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                                // 65\n\t}                                                                                                                     // 66\n                                                                                                                       // 67\n\tvar loopArray = [];                                                                                                   // 68\n\tfor (var i = 0; i < arrayCount; i++) {                                                                                // 69\n\t\tvar loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                        // 70\n\t\tloopArray.push(loopCtx);                                                                                             // 71\n\t};                                                                                                                    // 72\n                                                                                                                       // 73\n\tself.info[formId][field].array = loopArray;                                                                           // 74\n\tvar count = loopArray.length;                                                                                         // 75\n\tself.info[formId][field].count = count;                                                                               // 76\n\tself.info[formId][field].visibleCount = count;                                                                        // 77\n\tself.info[formId][field].deps.changed();                                                                              // 78\n};                                                                                                                     // 79\n                                                                                                                       // 80\nArrayTracker.prototype.resetField = function atResetField(formId, field) {                                             // 81\n\tvar self = this;                                                                                                      // 82\n\tself.initForm(formId);                                                                                                // 83\n                                                                                                                       // 84\n\tif (!self.info[formId][field]) {                                                                                      // 85\n\t\tself.info[formId][field] = {                                                                                         // 86\n\t\t\tdeps: new Tracker.Dependency()                                                                                      // 87\n\t\t};                                                                                                                   // 88\n\t}                                                                                                                     // 89\n                                                                                                                       // 90\n\tself.info[formId][field].array = null;                                                                                // 91\n\tself.info[formId][field].count = 0;                                                                                   // 92\n\tself.info[formId][field].visibleCount = 0;                                                                            // 93\n\tself.info[formId][field].deps.changed();                                                                              // 94\n};                                                                                                                     // 95\n                                                                                                                       // 96\nArrayTracker.prototype.resetForm = function atResetForm(formId) {                                                      // 97\n\tvar self = this;                                                                                                      // 98\n\t_.each(self.info[formId], function (info, field) {                                                                    // 99\n\t\tself.resetField(formId, field);                                                                                      // 100\n\t});                                                                                                                   // 101\n};                                                                                                                     // 102\n                                                                                                                       // 103\nArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {                                                  // 104\n\tvar self = this;                                                                                                      // 105\n\tself.info[formId] = {};                                                                                               // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\nArrayTracker.prototype.tracksField = function atTracksField(formId, field) {                                           // 109\n\tvar self = this;                                                                                                      // 110\n\tself.ensureField(formId, field);                                                                                      // 111\n\tself.info[formId][field].deps.depend();                                                                               // 112\n\treturn !!self.info[formId][field].array;                                                                              // 113\n};                                                                                                                     // 114\n                                                                                                                       // 115\nArrayTracker.prototype.getField = function atGetField(formId, field) {                                                 // 116\n\tvar self = this;                                                                                                      // 117\n\tself.ensureField(formId, field);                                                                                      // 118\n\tself.info[formId][field].deps.depend();                                                                               // 119\n\treturn self.info[formId][field].array;                                                                                // 120\n};                                                                                                                     // 121\n                                                                                                                       // 122\nArrayTracker.prototype.getCount = function atGetCount(formId, field) {                                                 // 123\n\tvar self = this;                                                                                                      // 124\n\tself.ensureField(formId, field);                                                                                      // 125\n\tself.info[formId][field].deps.depend();                                                                               // 126\n\treturn self.info[formId][field].count;                                                                                // 127\n};                                                                                                                     // 128\n                                                                                                                       // 129\nArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {                                   // 130\n\tvar self = this;                                                                                                      // 131\n\tself.ensureField(formId, field);                                                                                      // 132\n\tself.info[formId][field].deps.depend();                                                                               // 133\n\treturn self.info[formId][field].visibleCount;                                                                         // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\nArrayTracker.prototype.isFirstFieldlVisible = function atIsFirstFieldlVisible(formId, field, currentIndex) {           // 137\n\tvar self = this;                                                                                                      // 138\n\tself.ensureField(formId, field);                                                                                      // 139\n\tself.info[formId][field].deps.depend();                                                                               // 140\n\tvar firstVisibleField = _.find(self.info[formId][field].array, function(currentField) {                               // 141\n\t\treturn !currentField.removed;                                                                                        // 142\n\t});                                                                                                                   // 143\n\treturn (firstVisibleField && firstVisibleField.index === currentIndex);                                               // 144\n};                                                                                                                     // 145\n                                                                                                                       // 146\nArrayTracker.prototype.isLastFieldlVisible = function atIsLastFieldlVisible(formId, field, currentIndex) {             // 147\n\tvar self = this;                                                                                                      // 148\n\tself.ensureField(formId, field);                                                                                      // 149\n\tself.info[formId][field].deps.depend();                                                                               // 150\n\tvar lastVisibleField = _.last(_.filter(self.info[formId][field].array, function(currentField) {                       // 151\n\t\treturn !currentField.removed;                                                                                        // 152\n\t}));                                                                                                                  // 153\n\treturn (lastVisibleField && lastVisibleField.index === currentIndex);                                                 // 154\n};                                                                                                                     // 155\n                                                                                                                       // 156\nArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;                                                                                                     // 158\n  self.ensureField(formId, field);                                                                                     // 159\n                                                                                                                       // 160\n  if (!self.info[formId][field].array) {                                                                               // 161\n  \treturn;                                                                                                             // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n  var currentCount = self.info[formId][field].visibleCount                                                             // 165\n  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;                               // 166\n                                                                                                                       // 167\n  if (currentCount < maxCount) {                                                                                       // 168\n\t  var i = self.info[formId][field].array.length;                                                                      // 169\n                                                                                                                       // 170\n\t  // If this is an array of objects, collect names of object props                                                    // 171\n\t  var childKeys = [];                                                                                                 // 172\n\t  if (ss.schema(field + '.$').type === Object) {                                                                      // 173\n      childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                              // 174\n\t  }                                                                                                                   // 175\n                                                                                                                       // 176\n\t  var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                       // 177\n                                                                                                                       // 178\n\t  self.info[formId][field].array.push(loopCtx);                                                                       // 179\n\t  self.info[formId][field].count++;                                                                                   // 180\n\t  self.info[formId][field].visibleCount++;                                                                            // 181\n\t  self.info[formId][field].deps.changed();                                                                            // 182\n  }                                                                                                                    // 183\n};                                                                                                                     // 184\n                                                                                                                       // 185\nArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;                                                                                                     // 187\n  self.ensureField(formId, field);                                                                                     // 188\n                                                                                                                       // 189\n  if (!self.info[formId][field].array) {                                                                               // 190\n  \treturn;                                                                                                             // 191\n  }                                                                                                                    // 192\n                                                                                                                       // 193\n  var currentCount = self.info[formId][field].visibleCount;                                                            // 194\n  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;                               // 195\n                                                                                                                       // 196\n  if (currentCount > minCount) {                                                                                       // 197\n    self.info[formId][field].array[index].removed = true;                                                              // 198\n    self.info[formId][field].count--;                                                                                  // 199\n    self.info[formId][field].visibleCount--;                                                                           // 200\n    self.info[formId][field].deps.changed();                                                                           // 201\n  }                                                                                                                    // 202\n}                                                                                                                      // 203\n                                                                                                                       // 204\n/*                                                                                                                     // 205\n * PRIVATE                                                                                                             // 206\n */                                                                                                                    // 207\nvar createLoopCtx = function(formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {                    // 208\n  var loopCtx = {                                                                                                      // 209\n  \tformId:         formId,                                                                                             // 210\n  \tarrayFieldName: field,                                                                                              // 211\n  \tname:           field + '.' + index,                                                                                // 212\n  \tindex:          index,                                                                                              // 213\n  \tminCount:       overrideMinCount,                                                                                   // 214\n  \tmaxCount:       overrideMaxCount                                                                                    // 215\n  };                                                                                                                   // 216\n                                                                                                                       // 217\n  // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName                // 218\n  if (childKeys.length) {                                                                                              // 219\n    loopCtx.current = {};                                                                                              // 220\n\t_.each(childKeys, function (k) {                                                                                      // 221\n\t  loopCtx.current[k] = field + '.' + index + '.' + k;                                                                 // 222\n    });                                                                                                                // 223\n  }                                                                                                                    // 224\n                                                                                                                       // 225\n  return loopCtx;                                                                                                      // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm:true, FormPreserve */                                                                               // 1\n                                                                                                                       // 2\nAutoForm = AutoForm || {};                                                                                             // 3\n                                                                                                                       // 4\n// formPreserve is used to keep current form data across hot code                                                      // 5\n// reloads for any forms that are currently rendered                                                                   // 6\nAutoForm.formPreserve = new FormPreserve(\"autoforms\");                                                                 // 7\n                                                                                                                       // 8\nAutoForm.reactiveFormData = new FormData();                                                                            // 9\n                                                                                                                       // 10\nAutoForm._inputTypeDefinitions = {}; //for storing input type definitions added by AutoForm.addInputType               // 11\nAutoForm._formTypeDefinitions = {}; //for storing submit type definitions added by AutoForm.addFormType                // 12\n                                                                                                                       // 13\narrayTracker = new ArrayTracker();                                                                                     // 14\n                                                                                                                       // 15\n// Used by AutoForm._forceResetFormValues; temporary hack                                                              // 16\nAutoForm._destroyForm = {};                                                                                            // 17\n                                                                                                                       // 18\n// reactive templates                                                                                                  // 19\nglobalDefaultTemplate = \"bootstrap3\";                                                                                  // 20\ndefaultTypeTemplates = {};                                                                                             // 21\ndeps = {                                                                                                               // 22\n  defaultTemplate: new Tracker.Dependency(),                                                                           // 23\n  defaultTypeTemplates: {}                                                                                             // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-helpers.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global arrayTracker, SimpleSchema, AutoForm */                                                                      // 1\n                                                                                                                       // 2\nfunction parseOptions(options) {                                                                                       // 3\n  var hash = (options || {}).hash || {};                                                                               // 4\n  // Find the form's schema                                                                                            // 5\n  var ss = AutoForm.getFormSchema();                                                                                   // 6\n  // Call getDefs for side effect of throwing errors when name is not in schema                                        // 7\n  if (hash.name) {                                                                                                     // 8\n    AutoForm.Utility.getDefs(ss, hash.name);                                                                           // 9\n  }                                                                                                                    // 10\n  return _.extend({}, hash, {ss: ss});                                                                                 // 11\n}                                                                                                                      // 12\n                                                                                                                       // 13\n/*                                                                                                                     // 14\n * Global template helpers (exported to app)                                                                           // 15\n */                                                                                                                    // 16\n                                                                                                                       // 17\n/*                                                                                                                     // 18\n * afFieldMessage                                                                                                      // 19\n */                                                                                                                    // 20\nTemplate.registerHelper('afFieldMessage', function autoFormFieldMessage(options) {                                     // 21\n  options = parseOptions(options, 'afFieldMessage');                                                                   // 22\n  var formId = AutoForm.getFormId();                                                                                   // 23\n                                                                                                                       // 24\n  return options.ss.namedContext(formId).keyErrorMessage(options.name);                                                // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/*                                                                                                                     // 28\n * afFieldIsInvalid                                                                                                    // 29\n */                                                                                                                    // 30\nTemplate.registerHelper('afFieldIsInvalid', function autoFormFieldIsInvalid(options) {                                 // 31\n  options = parseOptions(options, 'afFieldIsInvalid');                                                                 // 32\n  var formId = AutoForm.getFormId();                                                                                   // 33\n                                                                                                                       // 34\n  return options.ss.namedContext(formId).keyIsInvalid(options.name);                                                   // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\n/*                                                                                                                     // 38\n * afArrayFieldHasMoreThanMinimum                                                                                      // 39\n */                                                                                                                    // 40\nTemplate.registerHelper('afArrayFieldHasMoreThanMinimum', function autoFormArrayFieldHasMoreThanMinimum(options) {     // 41\n  options = parseOptions(options, 'afArrayFieldHasMoreThanMinimum');                                                   // 42\n  var form = AutoForm.getCurrentDataPlusExtrasForForm();                                                               // 43\n                                                                                                                       // 44\n  // Registered form types can disable adding/removing array items                                                     // 45\n  if (form.formTypeDef.hideArrayItemButtons) {                                                                         // 46\n    return false;                                                                                                      // 47\n  }                                                                                                                    // 48\n                                                                                                                       // 49\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 50\n  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);                                              // 51\n  return (visibleCount > range.minCount);                                                                              // 52\n});                                                                                                                    // 53\n                                                                                                                       // 54\n/*                                                                                                                     // 55\n * afArrayFieldHasLessThanMaximum                                                                                      // 56\n */                                                                                                                    // 57\nTemplate.registerHelper('afArrayFieldHasLessThanMaximum', function autoFormArrayFieldHasLessThanMaximum(options) {     // 58\n  options = parseOptions(options, 'afArrayFieldHasLessThanMaximum');                                                   // 59\n  var form = AutoForm.getCurrentDataPlusExtrasForForm();                                                               // 60\n                                                                                                                       // 61\n  // Registered form types can disable adding/removing array items                                                     // 62\n  if (form.formTypeDef.hideArrayItemButtons) {                                                                         // 63\n    return false;                                                                                                      // 64\n  }                                                                                                                    // 65\n                                                                                                                       // 66\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 67\n  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);                                              // 68\n  return (visibleCount < range.maxCount);                                                                              // 69\n});                                                                                                                    // 70\n                                                                                                                       // 71\n/*                                                                                                                     // 72\n * afFieldValueIs                                                                                                      // 73\n */                                                                                                                    // 74\nTemplate.registerHelper('afFieldValueIs', function autoFormFieldValueIs(options) {                                     // 75\n  options = parseOptions(options, 'afFieldValueIs');                                                                   // 76\n                                                                                                                       // 77\n  var currentValue = AutoForm.getFieldValue(options.name, options.formId);                                             // 78\n  return currentValue === options.value;                                                                               // 79\n});                                                                                                                    // 80\n                                                                                                                       // 81\n/*                                                                                                                     // 82\n * afArrayFieldIsFirstVisible                                                                                          // 83\n */                                                                                                                    // 84\nTemplate.registerHelper('afArrayFieldIsFirstVisible', function autoFormArrayFieldIsFirstVisible() {                    // 85\n  var context = this;                                                                                                  // 86\n  return arrayTracker.isFirstFieldlVisible(context.formId, context.arrayFieldName, context.index);                     // 87\n});                                                                                                                    // 88\n                                                                                                                       // 89\n/*                                                                                                                     // 90\n * afArrayFieldIsLastVisible                                                                                           // 91\n */                                                                                                                    // 92\nTemplate.registerHelper('afArrayFieldIsLastVisible', function autoFormArrayFieldIsLastVisible() {                      // 93\n  var context = this;                                                                                                  // 94\n  return arrayTracker.isLastFieldlVisible(context.formId, context.arrayFieldName, context.index);                      // 95\n});                                                                                                                    // 96\n                                                                                                                       // 97\n/*                                                                                                                     // 98\n * afFieldValueContains                                                                                                // 99\n */                                                                                                                    // 100\nTemplate.registerHelper('afFieldValueContains', function autoFormFieldValueContains(options) {                         // 101\n  options = parseOptions(options, 'afFieldValueContains');                                                             // 102\n                                                                                                                       // 103\n  var currentValue = AutoForm.getFieldValue(options.name, options.formId);                                             // 104\n  return _.isArray(currentValue) && (_.contains(currentValue, options.value) || options.values && _.intersection(currentValue, options.values.split(\",\")));\n});                                                                                                                    // 106\n                                                                                                                       // 107\n/*                                                                                                                     // 108\n * afFieldLabelText                                                                                                    // 109\n */                                                                                                                    // 110\nTemplate.registerHelper('afFieldLabelText', function autoFormFieldLabelText(options) {                                 // 111\n  options = parseOptions(options, 'afFieldLabelText');                                                                 // 112\n  return AutoForm.getLabelForField(options.name);                                                                      // 113\n});                                                                                                                    // 114\n                                                                                                                       // 115\n/*                                                                                                                     // 116\n * afFieldNames                                                                                                        // 117\n */                                                                                                                    // 118\nTemplate.registerHelper(\"afFieldNames\", function autoFormFieldNames(options) {                                         // 119\n  options = parseOptions(options, 'afFieldNames');                                                                     // 120\n  var ss = options.ss, name = options.name, namePlusDot, genericName, genericNamePlusDot;                              // 121\n  var form = AutoForm.getCurrentDataForForm();                                                                         // 122\n                                                                                                                       // 123\n  if (name) {                                                                                                          // 124\n    namePlusDot = name + \".\";                                                                                          // 125\n    genericName = SimpleSchema._makeGeneric(name);                                                                     // 126\n    genericNamePlusDot = genericName + \".\";                                                                            // 127\n  }                                                                                                                    // 128\n                                                                                                                       // 129\n  // Get the list of fields we want included                                                                           // 130\n  var fieldList = options.fields, usedAncestorFieldList = false;                                                       // 131\n  if (fieldList) {                                                                                                     // 132\n    fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n  }                                                                                                                    // 134\n                                                                                                                       // 135\n  var ancestorFieldList = AutoForm.findAttribute(\"fields\");                                                            // 136\n  if (ancestorFieldList) {                                                                                             // 137\n    ancestorFieldList = AutoForm.Utility.stringToArray(ancestorFieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n                                                                                                                       // 139\n    // Use the ancestor field list as backup, unless there is                                                          // 140\n    // a name and that name is listed in the ancestor field list                                                       // 141\n    if (!fieldList) {                                                                                                  // 142\n      fieldList = ancestorFieldList;                                                                                   // 143\n      usedAncestorFieldList = true;                                                                                    // 144\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  if (fieldList) {                                                                                                     // 148\n                                                                                                                       // 149\n    // Take only those fields in the fieldList that are descendants of the `name` field                                // 150\n    if (name) {                                                                                                        // 151\n      // Replace generic name with real name. We assume that field names                                               // 152\n      // with $ apply to all array items. Field list will now have the                                                 // 153\n      // correct array field item number instead of $.                                                                 // 154\n      if (genericName !== name) {                                                                                      // 155\n        fieldList = _.map(fieldList, function (field) {                                                                // 156\n          if (field.indexOf(genericNamePlusDot) === 0) {                                                               // 157\n            return namePlusDot + field.slice(genericNamePlusDot.length);                                               // 158\n          }                                                                                                            // 159\n          return field;                                                                                                // 160\n        });                                                                                                            // 161\n      }                                                                                                                // 162\n                                                                                                                       // 163\n      fieldList = _.filter(fieldList, function filterFieldsByName(field) {                                             // 164\n        return field.indexOf(namePlusDot) === 0;                                                                       // 165\n      });                                                                                                              // 166\n    }                                                                                                                  // 167\n                                                                                                                       // 168\n    // If top level fields, be sure to remove any with $ in them                                                       // 169\n    else {                                                                                                             // 170\n      fieldList = _.filter(fieldList, function filterArrayFields(field) {                                              // 171\n        return (field.slice(-2) !== '.$' && field.indexOf('.$.') === -1);                                              // 172\n      });                                                                                                              // 173\n    }                                                                                                                  // 174\n                                                                                                                       // 175\n    // First we filter out any fields that are subobjects where the                                                    // 176\n    // parent object is also in the fieldList and is NOT the current                                                   // 177\n    // field name.                                                                                                     // 178\n    // This means that if you do `fields=\"address,address.city\"` we                                                    // 179\n    // will use an afObjectField for address and include only the                                                      // 180\n    // \"city\" field within that, but if you instead do `fields=\"address.city\"`                                         // 181\n    // we will use a single field for the city, with no afObjectField                                                  // 182\n    // template around it.                                                                                             // 183\n    fieldList = _.reject(fieldList, function (field) {                                                                 // 184\n      var lastDotPos = field.lastIndexOf(\".\");                                                                         // 185\n      if (lastDotPos === -1) {                                                                                         // 186\n        return false; //keep                                                                                           // 187\n      }                                                                                                                // 188\n                                                                                                                       // 189\n      var parentField = field.slice(0, lastDotPos);                                                                    // 190\n      if (parentField.slice(-2) === \".$\") {                                                                            // 191\n        parentField = parentField.slice(0, -2);                                                                        // 192\n      }                                                                                                                // 193\n      return _.contains(fieldList, parentField) && parentField !== name && parentField !== genericName;                // 194\n    });                                                                                                                // 195\n  }                                                                                                                    // 196\n                                                                                                                       // 197\n  if (!fieldList || (fieldList.length === 0 && usedAncestorFieldList)) {                                               // 198\n    // Get list of field names that are descendants of this field's name.                                              // 199\n    // If name/genericName is undefined, this will return top-level                                                    // 200\n    // schema keys.                                                                                                    // 201\n    fieldList = ss.objectKeys(genericName);                                                                            // 202\n                                                                                                                       // 203\n    if (name) {                                                                                                        // 204\n      // Tack child field name on to end of parent field name. This                                                    // 205\n      // ensures that we keep the desired array index for array items.                                                 // 206\n      fieldList = _.map(fieldList, function (field) {                                                                  // 207\n        return name + \".\" + field;                                                                                     // 208\n      });                                                                                                              // 209\n    }                                                                                                                  // 210\n  }                                                                                                                    // 211\n                                                                                                                       // 212\n  // If user wants to omit some fields, remove those from the array                                                    // 213\n  var omitFields = options.omitFields || AutoForm.findAttribute(\"omitFields\");                                         // 214\n  if (omitFields) {                                                                                                    // 215\n    omitFields = AutoForm.Utility.stringToArray(omitFields, 'AutoForm: omitFields attribute must be an array or a string containing a comma-delimited list of fields');\n    fieldList = _.difference(fieldList, omitFields);                                                                   // 217\n    // If omitFields contains generic field names (with $) we omit those too                                           // 218\n    fieldList = _.reject(fieldList, function (f) {                                                                     // 219\n      return _.contains(omitFields, SimpleSchema._makeGeneric(f));                                                     // 220\n    });                                                                                                                // 221\n  }                                                                                                                    // 222\n                                                                                                                       // 223\n  // Filter out fields we never want                                                                                   // 224\n  fieldList = _.filter(fieldList, function shouldIncludeField(field) {                                                 // 225\n    var fieldDefs = ss.schema(field);                                                                                  // 226\n                                                                                                                       // 227\n    // Don't include fields that are not in the schema                                                                 // 228\n    if (!fieldDefs) {                                                                                                  // 229\n      return false;                                                                                                    // 230\n    }                                                                                                                  // 231\n                                                                                                                       // 232\n    // Don't include fields with autoform.omit=true                                                                    // 233\n    if (fieldDefs.autoform && fieldDefs.autoform.omit === true) {                                                      // 234\n      return false;                                                                                                    // 235\n    }                                                                                                                  // 236\n                                                                                                                       // 237\n    // Don't include fields with denyInsert=true when it's an insert form                                              // 238\n    if (fieldDefs.denyInsert && form.type === \"insert\") {                                                              // 239\n      return false;                                                                                                    // 240\n    }                                                                                                                  // 241\n                                                                                                                       // 242\n    // Don't include fields with denyUpdate=true when it's an update form                                              // 243\n    if (fieldDefs.denyUpdate && form.type === \"update\") {                                                              // 244\n      return false;                                                                                                    // 245\n    }                                                                                                                  // 246\n                                                                                                                       // 247\n    return true;                                                                                                       // 248\n  });                                                                                                                  // 249\n                                                                                                                       // 250\n  // Ensure fields are not added more than once                                                                        // 251\n  fieldList = _.unique(fieldList);                                                                                     // 252\n                                                                                                                       // 253\n  // We return it as an array of objects because that                                                                  // 254\n  // works better with Blaze contexts                                                                                  // 255\n  fieldList = _.map(fieldList, function (name) {                                                                       // 256\n    return {name: name};                                                                                               // 257\n  });                                                                                                                  // 258\n                                                                                                                       // 259\n  return fieldList;                                                                                                    // 260\n});                                                                                                                    // 261\n                                                                                                                       // 262\n                                                                                                                       // 263\n/*                                                                                                                     // 264\n * afSelectOptionAtts                                                                                                  // 265\n */                                                                                                                    // 266\nTemplate.registerHelper('afSelectOptionAtts', function afSelectOptionAtts() {                                          // 267\n  var atts = _.pick(this, 'value');                                                                                    // 268\n  if (this.selected) {                                                                                                 // 269\n    atts.selected = \"\";                                                                                                // 270\n  }                                                                                                                    // 271\n  if (this.htmlAtts) {                                                                                                 // 272\n    _.extend(atts, this.htmlAtts);                                                                                     // 273\n  }                                                                                                                    // 274\n  return atts;                                                                                                         // 275\n});                                                                                                                    // 276\n                                                                                                                       // 277\n// Expects to be called with this.name available                                                                       // 278\nTemplate.registerHelper('afOptionsFromSchema', function afOptionsFromSchema() {                                        // 279\n  return AutoForm._getOptionsForField(this.name);                                                                      // 280\n});                                                                                                                    // 281\n                                                                                                                       // 282\n/*                                                                                                                     // 283\n * afTemplateName                                                                                                      // 284\n * Deprecated. Don't use this. Eventually remove it.                                                                   // 285\n */                                                                                                                    // 286\nTemplate.registerHelper('afTemplateName', function afTemplateNameHelper(templateType, templateName) {                  // 287\n  var self = this;                                                                                                     // 288\n  console.log('The afTemplateName template helper is deprecated. Use AutoForm.getTemplateName method in your own helper.');\n  return AutoForm.getTemplateName(templateType, templateName, self.atts && self.atts.name);                            // 290\n});                                                                                                                    // 291\n                                                                                                                       // 292\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-validation.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, validateField:true */                                                                              // 1\n                                                                                                                       // 2\nfunction _validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid) {                                                // 3\n  var docToValidate;                                                                                                   // 4\n                                                                                                                       // 5\n  // Due to throttling, this can be called after the autoForm template is destroyed.                                   // 6\n  // If that happens, we exit without error.                                                                           // 7\n  var template = AutoForm.templateInstanceForForm(formId);                                                             // 8\n                                                                                                                       // 9\n  // If form is not currently rendered, return true                                                                    // 10\n  if (!template ||                                                                                                     // 11\n      !template.view ||                                                                                                // 12\n      !template.view._domrange ||                                                                                      // 13\n      template.view.isDestroyed) {                                                                                     // 14\n    return true;                                                                                                       // 15\n  }                                                                                                                    // 16\n                                                                                                                       // 17\n  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 18\n  var ss = AutoForm.getFormSchema(formId, form);                                                                       // 19\n                                                                                                                       // 20\n  if (!ss) {                                                                                                           // 21\n    return true;                                                                                                       // 22\n  }                                                                                                                    // 23\n                                                                                                                       // 24\n  // Skip validation if onlyIfAlreadyInvalid is true and the form is                                                   // 25\n  // currently valid.                                                                                                  // 26\n  if (onlyIfAlreadyInvalid && ss.namedContext(formId).isValid()) {                                                     // 27\n    return true; //skip validation                                                                                     // 28\n  }                                                                                                                    // 29\n                                                                                                                       // 30\n  // Create a document based on all the values of all the inputs on the form                                           // 31\n  // Get the form type definition                                                                                      // 32\n  var ftd = Utility.getFormTypeDef(form.type);                                                                         // 33\n                                                                                                                       // 34\n  // Clean and validate doc                                                                                            // 35\n  docToValidate = AutoForm.getFormValues(formId, template, ss, !!ftd.usesModifier);                                    // 36\n                                                                                                                       // 37\n  // If form is not currently rendered, return true                                                                    // 38\n  if (!docToValidate) {                                                                                                // 39\n    return true;                                                                                                       // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  // Skip validation if skipEmpty is true and the field we're validating                                               // 43\n  // has no value.                                                                                                     // 44\n  if (skipEmpty && !AutoForm.Utility.objAffectsKey(docToValidate, key)) {                                              // 45\n    return true; //skip validation                                                                                     // 46\n  }                                                                                                                    // 47\n                                                                                                                       // 48\n  return AutoForm._validateFormDoc(docToValidate, !!ftd.usesModifier, formId, ss, form, key);                          // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\n// Throttle field validation to occur at most every 300ms,                                                             // 52\n// with leading and trailing calls.                                                                                    // 53\nvalidateField = _.throttle(_validateField, 300);                                                                       // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-inputs.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, getInputValue:true, getAllFieldsInForm:true, getInputData:true, updateTrackedFieldValue:true, updateAllTrackedFieldValues:true, getFlatDocOfFieldValues:true */\n                                                                                                                       // 2\ngetFlatDocOfFieldValues = function getFlatDocOfFieldValues(fields, ss) {                                               // 3\n  var doc = {};                                                                                                        // 4\n  fields.each(function () {                                                                                            // 5\n    var fieldName, val = AutoForm.getInputValue(this, ss);                                                             // 6\n    if (val !== void 0) {                                                                                              // 7\n      // Get the field/schema key name                                                                                 // 8\n      fieldName = $(this).attr(\"data-schema-key\");                                                                     // 9\n      doc[fieldName] = val;                                                                                            // 10\n    }                                                                                                                  // 11\n  });                                                                                                                  // 12\n  return doc;                                                                                                          // 13\n};                                                                                                                     // 14\n                                                                                                                       // 15\n/*                                                                                                                     // 16\n * package scope functions                                                                                             // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\n/*                                                                                                                     // 20\n * Gets the value that should be shown/selected in the input. Returns                                                  // 21\n * a string, a boolean, or an array of strings. The value used,                                                        // 22\n * in order of preference, is one of:                                                                                  // 23\n * * The `value` attribute provided                                                                                    // 24\n * * The value that is set in the `doc` provided on the containing autoForm                                            // 25\n * * The `defaultValue` from the schema                                                                                // 26\n */                                                                                                                    // 27\ngetInputValue = function getInputValue(atts, value, mDoc, schemaDefaultValue, fieldDefaultValue, typeDefs) {           // 28\n                                                                                                                       // 29\n  if (typeof value === \"undefined\") {                                                                                  // 30\n    // Get the value for this key in the current document                                                              // 31\n    if (mDoc) {                                                                                                        // 32\n      var valueInfo = mDoc.getInfoForKey(atts.name);                                                                   // 33\n      if (valueInfo) {                                                                                                 // 34\n        value = valueInfo.value;                                                                                       // 35\n      } else {                                                                                                         // 36\n        value = fieldDefaultValue;                                                                                     // 37\n      }                                                                                                                // 38\n    }                                                                                                                  // 39\n                                                                                                                       // 40\n    // Only if there is no current document, use the schema defaultValue                                               // 41\n    else {                                                                                                             // 42\n      // Use the field default value if provided                                                                       // 43\n      if (typeof fieldDefaultValue !== 'undefined') {                                                                  // 44\n        value = fieldDefaultValue;                                                                                     // 45\n      }                                                                                                                // 46\n      // Or use the defaultValue in the schema                                                                         // 47\n      else {                                                                                                           // 48\n        value = schemaDefaultValue;                                                                                    // 49\n      }                                                                                                                // 50\n    }                                                                                                                  // 51\n  }                                                                                                                    // 52\n                                                                                                                       // 53\n  // Change null or undefined to an empty string                                                                       // 54\n  value = (value === null || value === void 0) ? '' : value;                                                           // 55\n                                                                                                                       // 56\n  // If the component expects the value to be an array, and it's not, make it one                                      // 57\n  if (typeDefs.valueIsArray && !_.isArray(value)) {                                                                    // 58\n    if (typeof value === \"string\") {                                                                                   // 59\n      value = value.split(',');                                                                                        // 60\n    } else {                                                                                                           // 61\n      value = [value];                                                                                                 // 62\n    }                                                                                                                  // 63\n  }                                                                                                                    // 64\n                                                                                                                       // 65\n  // At this point we have a value or an array of values.                                                              // 66\n  // Run through the components valueIn function if we have one.                                                       // 67\n  // It should then be in whatever format the component expects.                                                       // 68\n  if (typeof typeDefs.valueIn === \"function\") {                                                                        // 69\n    value = typeDefs.valueIn(value, atts);                                                                             // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  return value;                                                                                                        // 73\n};                                                                                                                     // 74\n                                                                                                                       // 75\n/*                                                                                                                     // 76\n * Builds the data context that the input component will have.                                                         // 77\n */                                                                                                                    // 78\ngetInputData = function getInputData(defs, hash, value, label, formType) {                                             // 79\n                                                                                                                       // 80\n  /*                                                                                                                   // 81\n   * Get HTML attributes                                                                                               // 82\n   */                                                                                                                  // 83\n                                                                                                                       // 84\n  // We don't want to alter the original hash, so we clone it and                                                      // 85\n  // remove some stuff that should not be HTML attributes.                                                             // 86\n  var inputAtts = _.omit(hash,                                                                                         // 87\n          \"type\",                                                                                                      // 88\n          \"value\",                                                                                                     // 89\n          \"noselect\",                                                                                                  // 90\n          \"options\",                                                                                                   // 91\n          \"template\",                                                                                                  // 92\n          \"defaultValue\");                                                                                             // 93\n                                                                                                                       // 94\n  // Add required if required                                                                                          // 95\n  if (typeof inputAtts.required === \"undefined\" && !defs.optional) {                                                   // 96\n    inputAtts.required = \"\";                                                                                           // 97\n  }                                                                                                                    // 98\n                                                                                                                       // 99\n   // Add data-schema-key to every type of element                                                                     // 100\n  inputAtts['data-schema-key'] = inputAtts.name;                                                                       // 101\n                                                                                                                       // 102\n  // Set placeholder to label from schema if requested.                                                                // 103\n  // We check hash.placeholder instead of inputAtts.placeholder because                                                // 104\n  // we're setting inputAtts.placeholder, so it wouldn't be the same on                                                // 105\n  // subsequent reactive runs of this function.                                                                        // 106\n  if (hash.placeholder === \"schemaLabel\") {                                                                            // 107\n    inputAtts.placeholder = label;                                                                                     // 108\n  }                                                                                                                    // 109\n                                                                                                                       // 110\n  // To enable reactively toggling boolean attributes                                                                  // 111\n  // in a simple way, we add the attributes to the HTML                                                                // 112\n  // only if their value is `true`. That is, unlike in                                                                 // 113\n  // HTML, their mere presence does not matter.                                                                        // 114\n  _.each([\"disabled\", \"readonly\", \"checked\", \"required\", \"autofocus\"], function (booleanProp) {                        // 115\n    if (!_.has(hash, booleanProp)) {                                                                                   // 116\n      return;                                                                                                          // 117\n    }                                                                                                                  // 118\n                                                                                                                       // 119\n    // For historical reasons, we treat the string \"true\" and an empty string as `true`, too.                          // 120\n    // But an empty string value results in the cleanest rendered output for boolean props,                            // 121\n    // so we standardize as that.                                                                                      // 122\n    if (hash[booleanProp] === true || hash[booleanProp] === \"true\" || hash[booleanProp] === \"\") {                      // 123\n      inputAtts[booleanProp] = \"\";                                                                                     // 124\n    } else {                                                                                                           // 125\n      // If the value is anything else, we don't render it                                                             // 126\n      delete inputAtts[booleanProp];                                                                                   // 127\n    }                                                                                                                  // 128\n  });                                                                                                                  // 129\n                                                                                                                       // 130\n  /*                                                                                                                   // 131\n   * Set up the context. This is the object that becomes `this` in the                                                 // 132\n   * input type template.                                                                                              // 133\n   */                                                                                                                  // 134\n                                                                                                                       // 135\n  var inputTypeContext = {                                                                                             // 136\n    name: inputAtts.name,                                                                                              // 137\n    schemaType: defs.type,                                                                                             // 138\n    min: (typeof defs.min === \"function\") ? defs.min() : defs.min,                                                     // 139\n    max: (typeof defs.max === \"function\") ? defs.max() : defs.max,                                                     // 140\n    decimal: defs.decimal,                                                                                             // 141\n    value: value,                                                                                                      // 142\n    atts: inputAtts,                                                                                                   // 143\n    selectOptions: AutoForm.Utility.getSelectOptions(defs, hash)                                                       // 144\n  };                                                                                                                   // 145\n                                                                                                                       // 146\n  // Before returning the context, we allow the registered form type to                                                // 147\n  // adjust it if necessary.                                                                                           // 148\n  var ftd = Utility.getFormTypeDef(formType);                                                                          // 149\n  if (typeof ftd.adjustInputContext === 'function') {                                                                  // 150\n    inputTypeContext = ftd.adjustInputContext(inputTypeContext);                                                       // 151\n  }                                                                                                                    // 152\n                                                                                                                       // 153\n  return inputTypeContext;                                                                                             // 154\n};                                                                                                                     // 155\n                                                                                                                       // 156\nfunction markChanged(template, fieldName) {                                                                            // 157\n  // We always want to be sure to wait for DOM updates to                                                              // 158\n  // finish before we indicate that values have changed.                                                               // 159\n  // Using a value of 0 here did not work, but 100 seems to                                                            // 160\n  // work in testing. We'll need to keep an eye on this.                                                               // 161\n  // Not an ideal solution.                                                                                            // 162\n  setTimeout(function () {                                                                                             // 163\n    // Template or view may have disappeared while                                                                     // 164\n    // we waited to run this                                                                                           // 165\n    if (template &&                                                                                                    // 166\n        template.view &&                                                                                               // 167\n        template.view._domrange &&                                                                                     // 168\n        !template.view.isDestroyed) {                                                                                  // 169\n                                                                                                                       // 170\n      template.formValues[fieldName].changed();                                                                        // 171\n      template.formValues[fieldName].requestInProgress = false;                                                        // 172\n                                                                                                                       // 173\n    }                                                                                                                  // 174\n  }, 100);                                                                                                             // 175\n}                                                                                                                      // 176\n                                                                                                                       // 177\nupdateTrackedFieldValue = function updateTrackedFieldValue(template, fieldName) {                                      // 178\n  if (!template) {                                                                                                     // 179\n    return;                                                                                                            // 180\n  }                                                                                                                    // 181\n                                                                                                                       // 182\n  template.formValues = template.formValues || {};                                                                     // 183\n  if (!template.formValues[fieldName]) {                                                                               // 184\n    template.formValues[fieldName] = new Tracker.Dependency();                                                         // 185\n  }                                                                                                                    // 186\n  // In case we call updateTrackedFieldValue from multiple places at once,                                             // 187\n  // call .changed() only once                                                                                         // 188\n  if (template.formValues[fieldName].requestInProgress) {                                                              // 189\n    return;                                                                                                            // 190\n  }                                                                                                                    // 191\n  template.formValues[fieldName].requestInProgress = true;                                                             // 192\n                                                                                                                       // 193\n  markChanged(template, fieldName);                                                                                    // 194\n                                                                                                                       // 195\n  // To properly handle array fields, we'll mark the ancestors as changed, too                                         // 196\n  // XXX Might be a more elegant way to handle this                                                                    // 197\n  var dotPos = fieldName.lastIndexOf('.');                                                                             // 198\n  while (dotPos !== -1) {                                                                                              // 199\n    fieldName = fieldName.slice(0, dotPos);                                                                            // 200\n                                                                                                                       // 201\n    if (!template.formValues[fieldName]) {                                                                             // 202\n      template.formValues[fieldName] = new Tracker.Dependency();                                                       // 203\n    }                                                                                                                  // 204\n                                                                                                                       // 205\n    markChanged(template, fieldName);                                                                                  // 206\n                                                                                                                       // 207\n    dotPos = fieldName.lastIndexOf('.');                                                                               // 208\n  }                                                                                                                    // 209\n};                                                                                                                     // 210\n                                                                                                                       // 211\nupdateAllTrackedFieldValues = function updateAllTrackedFieldValues(template) {                                         // 212\n  if (template && template.formValues) {                                                                               // 213\n    _.each(template.formValues, function (o, fieldName) {                                                              // 214\n      updateTrackedFieldValue(template, fieldName);                                                                    // 215\n    });                                                                                                                // 216\n  }                                                                                                                    // 217\n};                                                                                                                     // 218\n                                                                                                                       // 219\ngetAllFieldsInForm = function getAllFieldsInForm(template) {                                                           // 220\n  // Get all elements with `data-schema-key` attribute, unless disabled                                                // 221\n  return template.$(\"[data-schema-key]\").not(\"[disabled]\");                                                            // 222\n  // Exclude fields in sub-forms, since they will belong to a different AutoForm and schema.                           // 223\n  // TODO need some selector/filter that actually works correctly for excluding subforms                               // 224\n  // return template.$('[data-schema-key]').not(\"[disabled]\").not(template.$('form form [data-schema-key]'));          // 225\n};                                                                                                                     // 226\n                                                                                                                       // 227\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-api.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm:true, SimpleSchema, Utility, Hooks, deps, globalDefaultTemplate:true, defaultTypeTemplates:true, validateField, arrayTracker, ReactiveVar, getAllFieldsInForm, setDefaults:true, getFlatDocOfFieldValues, MongoObject */\n                                                                                                                       // 2\n// This file defines the public, exported API                                                                          // 3\n                                                                                                                       // 4\nAutoForm = AutoForm || {}; //exported                                                                                  // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * @property AutoForm.Utility                                                                                          // 8\n * @public                                                                                                             // 9\n */                                                                                                                    // 10\nAutoForm.Utility = Utility;                                                                                            // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * @method AutoForm.addHooks                                                                                           // 14\n * @public                                                                                                             // 15\n * @param {String[]|String|null} formIds Form `id` or array of form IDs to which these hooks apply. Specify `null` to add hooks that will run for every form.\n * @param {Object} hooks Hooks to add, where supported names are \"before\", \"after\", \"formToDoc\", \"docToForm\", \"onSubmit\", \"onSuccess\", and \"onError\".\n * @returns {undefined}                                                                                                // 18\n *                                                                                                                     // 19\n * Defines hooks to be used by one or more forms. Extends hooks lists if called multiple times for the same            // 20\n * form.                                                                                                               // 21\n */                                                                                                                    // 22\nAutoForm.addHooks = function autoFormAddHooks(formIds, hooks, replace) {                                               // 23\n  if (typeof formIds === \"string\") {                                                                                   // 24\n    formIds = [formIds];                                                                                               // 25\n  }                                                                                                                    // 26\n                                                                                                                       // 27\n  // If formIds is null, add global hooks                                                                              // 28\n  if (!formIds) {                                                                                                      // 29\n    Hooks.addHooksToList(Hooks.global, hooks, replace);                                                                // 30\n  } else {                                                                                                             // 31\n    _.each(formIds, function (formId) {                                                                                // 32\n                                                                                                                       // 33\n      // Init the hooks object if not done yet                                                                         // 34\n      Hooks.form[formId] = Hooks.form[formId] || Hooks.getDefault();                                                   // 35\n                                                                                                                       // 36\n      Hooks.addHooksToList(Hooks.form[formId], hooks, replace);                                                        // 37\n    });                                                                                                                // 38\n  }                                                                                                                    // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * @method AutoForm.hooks                                                                                              // 43\n * @public                                                                                                             // 44\n * @param {Object} hooks                                                                                               // 45\n * @returns {undefined}                                                                                                // 46\n *                                                                                                                     // 47\n * Defines hooks by form id. Extends hooks lists if called multiple times for the same                                 // 48\n * form.                                                                                                               // 49\n */                                                                                                                    // 50\nAutoForm.hooks = function autoFormHooks(hooks, replace) {                                                              // 51\n  _.each(hooks, function(hooksObj, formId) {                                                                           // 52\n    AutoForm.addHooks(formId, hooksObj, replace);                                                                      // 53\n  });                                                                                                                  // 54\n};                                                                                                                     // 55\n                                                                                                                       // 56\n/**                                                                                                                    // 57\n * @property AutoForm._hooks                                                                                           // 58\n * @public                                                                                                             // 59\n *                                                                                                                     // 60\n * Hooks list to aid automated testing                                                                                 // 61\n */                                                                                                                    // 62\nAutoForm._hooks = Hooks.form;                                                                                          // 63\n                                                                                                                       // 64\n/**                                                                                                                    // 65\n * @property AutoForm._globalHooks                                                                                     // 66\n * @public                                                                                                             // 67\n *                                                                                                                     // 68\n * Global hooks list to aid automated testing                                                                          // 69\n */                                                                                                                    // 70\nAutoForm._globalHooks = Hooks.global;                                                                                  // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * @method AutoForm._forceResetFormValues                                                                              // 74\n * @public                                                                                                             // 75\n * @param {String} formId                                                                                              // 76\n * @returns {undefined}                                                                                                // 77\n *                                                                                                                     // 78\n * Forces an AutoForm's values to properly update.                                                                     // 79\n * See https://github.com/meteor/meteor/issues/2431                                                                    // 80\n */                                                                                                                    // 81\nAutoForm._forceResetFormValues = function autoFormForceResetFormValues(formId) {                                       // 82\n  AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);                             // 83\n                                                                                                                       // 84\n  AutoForm._destroyForm[formId].set(true);                                                                             // 85\n  setTimeout(function () {                                                                                             // 86\n    AutoForm._destroyForm[formId].set(false);                                                                          // 87\n  }, 0);                                                                                                               // 88\n};                                                                                                                     // 89\n                                                                                                                       // 90\n/**                                                                                                                    // 91\n * @method AutoForm.resetForm                                                                                          // 92\n * @public                                                                                                             // 93\n * @param {String} formId                                                                                              // 94\n * @param {TemplateInstance} [template] Looked up if not provided. Pass in for efficiency.                             // 95\n * @returns {undefined}                                                                                                // 96\n *                                                                                                                     // 97\n * Resets an autoform, including resetting validation errors. The same as clicking the reset button for an autoform.   // 98\n */                                                                                                                    // 99\nAutoForm.resetForm = function autoFormResetForm(formId, template) {                                                    // 100\n  template = template || AutoForm.templateInstanceForForm(formId);                                                     // 101\n                                                                                                                       // 102\n  if (template && template.view._domrange && !template.view.isDestroyed) {                                             // 103\n    template.$(\"form\")[0].reset();                                                                                     // 104\n  }                                                                                                                    // 105\n};                                                                                                                     // 106\n                                                                                                                       // 107\n/**                                                                                                                    // 108\n * @method AutoForm.setDefaultTemplate                                                                                 // 109\n * @public                                                                                                             // 110\n * @param {String} template                                                                                            // 111\n */                                                                                                                    // 112\nAutoForm.setDefaultTemplate = function autoFormSetDefaultTemplate(template) {                                          // 113\n  globalDefaultTemplate = template;                                                                                    // 114\n  deps.defaultTemplate.changed();                                                                                      // 115\n};                                                                                                                     // 116\n                                                                                                                       // 117\n/**                                                                                                                    // 118\n * @method AutoForm.getDefaultTemplate                                                                                 // 119\n * @public                                                                                                             // 120\n *                                                                                                                     // 121\n * Reactive.                                                                                                           // 122\n */                                                                                                                    // 123\nAutoForm.getDefaultTemplate = function autoFormGetDefaultTemplate() {                                                  // 124\n  deps.defaultTemplate.depend();                                                                                       // 125\n  return globalDefaultTemplate;                                                                                        // 126\n};                                                                                                                     // 127\n                                                                                                                       // 128\n/**                                                                                                                    // 129\n * @method AutoForm.setDefaultTemplateForType                                                                          // 130\n * @public                                                                                                             // 131\n * @param {String} type                                                                                                // 132\n * @param {String} template                                                                                            // 133\n */                                                                                                                    // 134\nAutoForm.setDefaultTemplateForType = function autoFormSetDefaultTemplateForType(type, template) {                      // 135\n  if (!deps.defaultTypeTemplates[type]) {                                                                              // 136\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 137\n  }                                                                                                                    // 138\n  if (template !== null && !Template[type + \"_\" + template]) {                                                         // 139\n    throw new Error(\"setDefaultTemplateForType can't set default template to \\\"\" + template + \"\\\" for type \\\"\" + type + \"\\\" because there is no defined template with the name \\\"\" + type + \"_\" + template + \"\\\"\");\n  }                                                                                                                    // 141\n  defaultTypeTemplates[type] = template;                                                                               // 142\n  deps.defaultTypeTemplates[type].changed();                                                                           // 143\n};                                                                                                                     // 144\n                                                                                                                       // 145\n/**                                                                                                                    // 146\n * @method AutoForm.getDefaultTemplateForType                                                                          // 147\n * @public                                                                                                             // 148\n * @param {String} type                                                                                                // 149\n * @return {String} Template name                                                                                      // 150\n *                                                                                                                     // 151\n * Reactive.                                                                                                           // 152\n */                                                                                                                    // 153\nAutoForm.getDefaultTemplateForType = function autoFormGetDefaultTemplateForType(type) {                                // 154\n  if (!deps.defaultTypeTemplates[type]) {                                                                              // 155\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 156\n  }                                                                                                                    // 157\n  deps.defaultTypeTemplates[type].depend();                                                                            // 158\n  return defaultTypeTemplates[type];                                                                                   // 159\n};                                                                                                                     // 160\n                                                                                                                       // 161\n/**                                                                                                                    // 162\n * @method AutoForm.getTemplateName                                                                                    // 163\n * @public                                                                                                             // 164\n * @param {String} templateType                                                                                        // 165\n * @param {String} templateName                                                                                        // 166\n * @param {String} [fieldName]                                                                                         // 167\n * @param {Boolean} [skipExistsCheck] Pass `true` to return a template name even if that template hasn't been defined. // 168\n * @return {String} Template name                                                                                      // 169\n *                                                                                                                     // 170\n * Returns the full template name. In the simplest scenario, this is templateType_templateName                         // 171\n * as passed in. However, if templateName is not provided, it is looked up in the following                            // 172\n * manner:                                                                                                             // 173\n *                                                                                                                     // 174\n * 1. autoform.<componentType>.template from the schema (field+type override for all forms)                            // 175\n * 2. autoform.template from the schema (field override for all forms)                                                 // 176\n * 3. template-<componentType> attribute on an ancestor component within the same form (form+type for all fields)      // 177\n * 4. template attribute on an ancestor component within the same form (form specificity for all types and fields)     // 178\n * 5. Default template for component type, as set by AutoForm.setDefaultTemplateForType                                // 179\n * 6. Default template, as set by AutoForm.setDefaultTemplate.                                                         // 180\n * 7. Built-in default template, currently bootstrap-3.                                                                // 181\n */                                                                                                                    // 182\nAutoForm.getTemplateName = function autoFormGetTemplateName(templateType, templateName, fieldName, skipExistsCheck) {  // 183\n  var schemaAutoFormDefs, templateFromAncestor, defaultTemplate;                                                       // 184\n                                                                                                                       // 185\n  function templateExists(t) {                                                                                         // 186\n    return !!(skipExistsCheck || Template[t]);                                                                         // 187\n  }                                                                                                                    // 188\n                                                                                                                       // 189\n  // Default case: use the `template` attribute provided                                                               // 190\n  if (templateName && templateExists(templateType + '_' + templateName)) {                                             // 191\n    return templateType + '_' + templateName;                                                                          // 192\n  }                                                                                                                    // 193\n                                                                                                                       // 194\n  // If the attributes provided a templateName but that template didn't exist, show a warning                          // 195\n  if (templateName && AutoForm._debug) {                                                                               // 196\n    console.warn(templateType + ': \"' + templateName + '\" is not a valid template name. Falling back to a different template.');\n  }                                                                                                                    // 198\n                                                                                                                       // 199\n  // Get `autoform` object from the schema, if present.                                                                // 200\n  // Skip for quickForm because it renders a form and not a field.                                                     // 201\n  if (templateType !== 'quickForm' && fieldName) {                                                                     // 202\n    schemaAutoFormDefs = AutoForm.getSchemaForField(fieldName).autoform;                                               // 203\n  }                                                                                                                    // 204\n                                                                                                                       // 205\n  // Fallback #1: autoform.<componentType>.template from the schema                                                    // 206\n  if (schemaAutoFormDefs && schemaAutoFormDefs[templateType] && schemaAutoFormDefs[templateType].template && templateExists(templateType + '_' + schemaAutoFormDefs[templateType].template)) {\n    return templateType + '_' + schemaAutoFormDefs[templateType].template;                                             // 208\n  }                                                                                                                    // 209\n                                                                                                                       // 210\n  // Fallback #2: autoform.template from the schema                                                                    // 211\n  if (schemaAutoFormDefs && schemaAutoFormDefs.template && templateExists(templateType + '_' + schemaAutoFormDefs.template)) {\n    return templateType + '_' + schemaAutoFormDefs.template;                                                           // 213\n  }                                                                                                                    // 214\n                                                                                                                       // 215\n  // Fallback #3: template-<componentType> attribute on an ancestor component within the same form                     // 216\n  templateFromAncestor = AutoForm.findAttribute(\"template-\" + templateType);                                           // 217\n  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {                             // 218\n    return templateType + '_' + templateFromAncestor;                                                                  // 219\n  }                                                                                                                    // 220\n                                                                                                                       // 221\n  // Fallback #4: template attribute on an ancestor component within the same form                                     // 222\n  templateFromAncestor = AutoForm.findAttribute(\"template\");                                                           // 223\n  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {                             // 224\n    return templateType + '_' + templateFromAncestor;                                                                  // 225\n  }                                                                                                                    // 226\n                                                                                                                       // 227\n  // Fallback #5: Default template for component type, as set by AutoForm.setDefaultTemplateForType                    // 228\n  defaultTemplate = AutoForm.getDefaultTemplateForType(templateType);                                                  // 229\n  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {                                       // 230\n    return templateType + '_' + defaultTemplate;                                                                       // 231\n  }                                                                                                                    // 232\n                                                                                                                       // 233\n  // Fallback #6: Default template, as set by AutoForm.setDefaultTemplate                                              // 234\n  defaultTemplate = AutoForm.getDefaultTemplate();                                                                     // 235\n  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {                                       // 236\n    return templateType + '_' + defaultTemplate;                                                                       // 237\n  }                                                                                                                    // 238\n                                                                                                                       // 239\n  // Found nothing. Return undefined                                                                                   // 240\n  return;                                                                                                              // 241\n};                                                                                                                     // 242\n                                                                                                                       // 243\n/**                                                                                                                    // 244\n * @method AutoForm.getFormValues                                                                                      // 245\n * @public                                                                                                             // 246\n * @param {String} formId The `id` attribute of the `autoForm` you want current values for.                            // 247\n * @param {Template} [template] The template instance, if already known, as a performance optimization.                // 248\n * @param {SimpleSchema} [ss] The SimpleSchema instance, if already known, as a performance optimization.              // 249\n * @param {Boolean} [getModifier] Set to `true` to return a modifier object or `false` to return a normal object. For backwards compatibility, and object containing both is returned if this is undefined.\n * @return {Object|null}                                                                                               // 251\n *                                                                                                                     // 252\n * Returns an object representing the current values of all schema-based fields in the form.                           // 253\n * The returned object is either a normal object or a MongoDB modifier, based on the `getModifier` argument. Return value may be `null` if the form is not currently rendered on screen.\n */                                                                                                                    // 255\nAutoForm.getFormValues = function autoFormGetFormValues(formId, template, ss, getModifier) {                           // 256\n  var insertDoc, updateDoc, transforms;                                                                                // 257\n                                                                                                                       // 258\n  template = template || AutoForm.templateInstanceForForm(formId);                                                     // 259\n  if (!template ||                                                                                                     // 260\n      !template.view ||                                                                                                // 261\n      !template.view._domrange ||                                                                                      // 262\n      template.view.isDestroyed) {                                                                                     // 263\n    return null;                                                                                                       // 264\n  }                                                                                                                    // 265\n                                                                                                                       // 266\n  // Get a reference to the SimpleSchema instance that should be used for                                              // 267\n  // determining what types we want back for each field.                                                               // 268\n  ss = ss || AutoForm.getFormSchema(formId);                                                                           // 269\n                                                                                                                       // 270\n  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 271\n                                                                                                                       // 272\n  // By default, we do not keep empty strings                                                                          // 273\n  var keepEmptyStrings = false;                                                                                        // 274\n  if (form.removeEmptyStrings === false) {                                                                             // 275\n    keepEmptyStrings = true;                                                                                           // 276\n  }                                                                                                                    // 277\n  // By default, we do filter                                                                                          // 278\n  var filter = true;                                                                                                   // 279\n  if (form.filter === false) {                                                                                         // 280\n    filter = false;                                                                                                    // 281\n  }                                                                                                                    // 282\n  // By default, we do autoConvert                                                                                     // 283\n  var autoConvert = true;                                                                                              // 284\n  if (form.autoConvert === false) {                                                                                    // 285\n    autoConvert = false;                                                                                               // 286\n  }                                                                                                                    // 287\n  // By default, we do trimStrings                                                                                     // 288\n  var trimStrings = true;                                                                                              // 289\n  if (form.trimStrings === false) {                                                                                    // 290\n    trimStrings = false;                                                                                               // 291\n  }                                                                                                                    // 292\n  // By default, we do keepArrays                                                                                      // 293\n  // We need keepArrays: false when we need update fields                                                              // 294\n  // like \"foo.2.bar\" to update the proper index. But in                                                               // 295\n  // most cases, we need to keep arrays together due to the mongo                                                      // 296\n  // bug that creates objects rather than arrays if the array                                                          // 297\n  // does not already exist in the db.                                                                                 // 298\n  var keepArrays = true;                                                                                               // 299\n  if (form.setArrayItems === true) {                                                                                   // 300\n    keepArrays = false;                                                                                                // 301\n  }                                                                                                                    // 302\n                                                                                                                       // 303\n  var hookCtx = {                                                                                                      // 304\n    template: template,                                                                                                // 305\n    formId: formId,                                                                                                    // 306\n    schema: ss                                                                                                         // 307\n  };                                                                                                                   // 308\n                                                                                                                       // 309\n  // Build a flat document from field values                                                                           // 310\n  var doc = getFlatDocOfFieldValues(getAllFieldsInForm(template), ss);                                                 // 311\n                                                                                                                       // 312\n  // Expand the flat document                                                                                          // 313\n  doc = AutoForm.Utility.expandObj(doc);                                                                               // 314\n                                                                                                                       // 315\n  // When all fields that comprise a sub-object are empty, we should unset                                             // 316\n  // the whole subobject and not complain about required fields in it. For example,                                    // 317\n  // if `profile.address` has several properties but they are all null or undefined,                                   // 318\n  // we will set `profile.address=null`. This ensures that we don't get incorrect validation                           // 319\n  // errors about required fields that are children of optional objects.                                               // 320\n  AutoForm.Utility.bubbleEmpty(doc, keepEmptyStrings);                                                                 // 321\n                                                                                                                       // 322\n  // Create and clean insert doc.                                                                                      // 323\n  if (getModifier !== true) {                                                                                          // 324\n    // Delete any properties that are null, undefined, or empty strings,                                               // 325\n    // unless the form has requested to keep empty string.                                                             // 326\n    // Do not add autoValues at this stage.                                                                            // 327\n    insertDoc = AutoForm.Utility.cleanNulls(doc, false, keepEmptyStrings);                                             // 328\n                                                                                                                       // 329\n    // As array items are removed, gaps can appear in the numbering,                                                   // 330\n    // which results in arrays that have undefined items. Here we                                                      // 331\n    // remove any array items that are undefined.                                                                      // 332\n    //                                                                                                                 // 333\n    // We do this to the insertDoc, but we don't want to do it earlier to the                                          // 334\n    // doc, because that would cause the update modifier to have $sets for                                             // 335\n    // the wrong array indexes.                                                                                        // 336\n    AutoForm.Utility.compactArrays(insertDoc);                                                                         // 337\n                                                                                                                       // 338\n    ss.clean(insertDoc, {                                                                                              // 339\n      isModifier: false,                                                                                               // 340\n      getAutoValues: false,                                                                                            // 341\n      filter: filter,                                                                                                  // 342\n      autoConvert: autoConvert,                                                                                        // 343\n      trimStrings: trimStrings                                                                                         // 344\n    });                                                                                                                // 345\n                                                                                                                       // 346\n    // Pass expanded doc through formToDoc hooks                                                                       // 347\n    transforms = Hooks.getHooks(formId, 'formToDoc');                                                                  // 348\n    _.each(transforms, function formValuesTransform(transform) {                                                       // 349\n      insertDoc = transform.call(hookCtx, insertDoc, ss);                                                              // 350\n    });                                                                                                                // 351\n  }                                                                                                                    // 352\n                                                                                                                       // 353\n  // Create and clean update modifier.                                                                                 // 354\n  if (getModifier !== false) {                                                                                         // 355\n    // Converts to modifier object with $set and $unset.                                                               // 356\n    // Do not add autoValues at this stage.                                                                            // 357\n    updateDoc = AutoForm.Utility.docToModifier(doc, {                                                                  // 358\n      keepEmptyStrings: keepEmptyStrings,                                                                              // 359\n      keepArrays: keepArrays                                                                                           // 360\n    });                                                                                                                // 361\n                                                                                                                       // 362\n    ss.clean(updateDoc, {                                                                                              // 363\n      isModifier: true,                                                                                                // 364\n      getAutoValues: false,                                                                                            // 365\n      filter: filter,                                                                                                  // 366\n      autoConvert: autoConvert,                                                                                        // 367\n      trimStrings: trimStrings                                                                                         // 368\n    });                                                                                                                // 369\n                                                                                                                       // 370\n    // Pass modifier through formToModifier hooks                                                                      // 371\n    transforms = Hooks.getHooks(formId, 'formToModifier');                                                             // 372\n    _.each(transforms, function formValuesTransform(transform) {                                                       // 373\n      updateDoc = transform.call(hookCtx, updateDoc);                                                                  // 374\n    });                                                                                                                // 375\n  }                                                                                                                    // 376\n                                                                                                                       // 377\n  if (getModifier === true) {                                                                                          // 378\n    return updateDoc;                                                                                                  // 379\n  } else if (getModifier === false) {                                                                                  // 380\n    return insertDoc;                                                                                                  // 381\n  } else {                                                                                                             // 382\n    // We return insertDoc and updateDoc when getModifier                                                              // 383\n    // is undefined for backwards compatibility                                                                        // 384\n    return {                                                                                                           // 385\n      insertDoc: insertDoc,                                                                                            // 386\n      updateDoc: updateDoc                                                                                             // 387\n    };                                                                                                                 // 388\n  }                                                                                                                    // 389\n};                                                                                                                     // 390\n                                                                                                                       // 391\n/**                                                                                                                    // 392\n * @method AutoForm.getFieldValue                                                                                      // 393\n * @public                                                                                                             // 394\n * @param {String} fieldName The name of the field for which you want the current value.                               // 395\n * @param {String} [formId] The `id` attribute of the `autoForm` you want current values for. Default is the closest form from the current context.\n * @return {Any|undefined}                                                                                             // 397\n *                                                                                                                     // 398\n * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 399\n * This is a reactive method that will rerun whenever the current value of the requested field changes. Return value will be undefined if the field is not currently rendered.\n */                                                                                                                    // 401\nAutoForm.getFieldValue = function autoFormGetFieldValue(fieldName, formId) {                                           // 402\n  // find AutoForm template                                                                                            // 403\n  var template = Tracker.nonreactive(function () {                                                                     // 404\n    return AutoForm.templateInstanceForForm(formId);                                                                   // 405\n  });                                                                                                                  // 406\n                                                                                                                       // 407\n  if (!template) {                                                                                                     // 408\n    if (formId) {                                                                                                      // 409\n      AutoForm.rerunWhenFormRenderedOrDestroyed(formId);                                                               // 410\n    }                                                                                                                  // 411\n    return;                                                                                                            // 412\n  }                                                                                                                    // 413\n                                                                                                                       // 414\n  // reactive dependency                                                                                               // 415\n  template.formValues = template.formValues || {};                                                                     // 416\n  if (!template.formValues[fieldName]) {                                                                               // 417\n    template.formValues[fieldName] = new Tracker.Dependency();                                                         // 418\n  }                                                                                                                    // 419\n  template.formValues[fieldName].depend();                                                                             // 420\n                                                                                                                       // 421\n  if (!template.view ||                                                                                                // 422\n      !template.view._domrange ||                                                                                      // 423\n      template.view.isDestroyed) {                                                                                     // 424\n    return;                                                                                                            // 425\n  }                                                                                                                    // 426\n                                                                                                                       // 427\n  var doc = AutoForm.getFormValues(formId, template, null, false);                                                     // 428\n  if (!doc) {                                                                                                          // 429\n    return;                                                                                                            // 430\n  }                                                                                                                    // 431\n                                                                                                                       // 432\n  var mDoc = new MongoObject(doc);                                                                                     // 433\n  var value = mDoc.getValueForKey(fieldName);                                                                          // 434\n                                                                                                                       // 435\n  return value;                                                                                                        // 436\n};                                                                                                                     // 437\n                                                                                                                       // 438\n/**                                                                                                                    // 439\n * @method AutoForm.getInputTypeTemplateNameForElement                                                                 // 440\n * @public                                                                                                             // 441\n * @param {DOMElement} element The input DOM element, generated by an autoform input control                           // 442\n * @return {String}                                                                                                    // 443\n *                                                                                                                     // 444\n * Returns the name of the template used to render the element.                                                        // 445\n */                                                                                                                    // 446\nAutoForm.getInputTypeTemplateNameForElement = function autoFormGetInputTypeTemplateNameForElement(element) {           // 447\n  // get the enclosing view                                                                                            // 448\n  var view = Blaze.getView(element);                                                                                   // 449\n  // if the enclosing view is not a template, perhaps because                                                          // 450\n  // the template contains a block helper like if, with, each,                                                         // 451\n  // then look up the view chain until we arrive at a template                                                         // 452\n  while (view && view.name.slice(0, 9) !== \"Template.\") {                                                              // 453\n    view = view.originalParentView || view.parentView;                                                                 // 454\n  }                                                                                                                    // 455\n                                                                                                                       // 456\n  if (!view) return;                                                                                                   // 457\n                                                                                                                       // 458\n  // View names have \"Template.\" at the beginning so we slice that off.                                                // 459\n  return view.name.slice(9);                                                                                           // 460\n};                                                                                                                     // 461\n                                                                                                                       // 462\n/**                                                                                                                    // 463\n * @method AutoForm.getInputValue                                                                                      // 464\n * @public                                                                                                             // 465\n * @param {DOMElement} element The input DOM element, generated by an autoform input control, which must have a `data-schema-key` attribute set to the correct schema key name.\n * @param {SimpleSchema} [ss] Provide the SimpleSchema instance if you already have it.                                // 467\n * @return {Any}                                                                                                       // 468\n *                                                                                                                     // 469\n * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 470\n * Unlike `AutoForm.getFieldValue`, this function is not reactive.                                                     // 471\n */                                                                                                                    // 472\nAutoForm.getInputValue = function autoFormGetInputValue(element, ss) {                                                 // 473\n  var field, fieldName, fieldType, arrayItemFieldType, val, typeDef, inputTypeTemplate, dataContext, autoConvert;      // 474\n                                                                                                                       // 475\n  Tracker.nonreactive(function() {                                                                                     // 476\n    //don't rerun when data context of element changes, can cause infinite loops                                       // 477\n                                                                                                                       // 478\n    dataContext = Blaze.getData(element);                                                                              // 479\n    if (dataContext && dataContext.atts) {                                                                             // 480\n      autoConvert = dataContext.atts.autoConvert;                                                                      // 481\n    }                                                                                                                  // 482\n  });                                                                                                                  // 483\n                                                                                                                       // 484\n  // Get jQuery field reference                                                                                        // 485\n  field = $(element);                                                                                                  // 486\n                                                                                                                       // 487\n  // Get the field/schema key name                                                                                     // 488\n  fieldName = field.attr(\"data-schema-key\");                                                                           // 489\n                                                                                                                       // 490\n  // If we have a schema, we can autoconvert to the correct data type                                                  // 491\n  if (ss) {                                                                                                            // 492\n    fieldType = ss.schema(fieldName).type;                                                                             // 493\n  }                                                                                                                    // 494\n                                                                                                                       // 495\n  // Get the name of the input type template used to render the input element                                          // 496\n  inputTypeTemplate = AutoForm.getInputTypeTemplateNameForElement(element);                                            // 497\n                                                                                                                       // 498\n  // Slice off the potential theme template, after the last underscore.                                                // 499\n  var lastUnderscore = inputTypeTemplate.lastIndexOf('_');                                                             // 500\n  if (lastUnderscore !== -1) {                                                                                         // 501\n    inputTypeTemplate = inputTypeTemplate.slice(0, lastUnderscore);                                                    // 502\n  }                                                                                                                    // 503\n                                                                                                                       // 504\n  // Figure out what registered input type was used to render this element                                             // 505\n  typeDef = _.where(AutoForm._inputTypeDefinitions, {template: inputTypeTemplate})[0];                                 // 506\n                                                                                                                       // 507\n  // If field has a \"data-null-value\" attribute, value should always be null                                           // 508\n  if (field.attr(\"data-null-value\") !== void 0) {                                                                      // 509\n    val = null;                                                                                                        // 510\n  }                                                                                                                    // 511\n  // Otherwise get the field's value using the input type's `valueOut` function if provided                            // 512\n  else if (typeDef && typeDef.valueOut) {                                                                              // 513\n    val = typeDef.valueOut.call(field);                                                                                // 514\n  }                                                                                                                    // 515\n  // Otherwise get the field's value in a default way                                                                  // 516\n  else {                                                                                                               // 517\n    val = field.val();                                                                                                 // 518\n  }                                                                                                                    // 519\n                                                                                                                       // 520\n  // run through input's type converter if provided                                                                    // 521\n  if (val !== void 0 && autoConvert !== false && typeDef && typeDef.valueConverters && fieldType) {                    // 522\n    var converterFunc;                                                                                                 // 523\n    if (fieldType === String) {                                                                                        // 524\n      converterFunc = typeDef.valueConverters.string;                                                                  // 525\n    } else if (fieldType === Number) {                                                                                 // 526\n      converterFunc = typeDef.valueConverters.number;                                                                  // 527\n    } else if (fieldType === Boolean) {                                                                                // 528\n      converterFunc = typeDef.valueConverters.boolean;                                                                 // 529\n    } else if (fieldType === Date) {                                                                                   // 530\n      converterFunc = typeDef.valueConverters.date;                                                                    // 531\n    } else if (fieldType === Array) {                                                                                  // 532\n      arrayItemFieldType = ss.schema(fieldName + \".$\").type;                                                           // 533\n      if (arrayItemFieldType === String) {                                                                             // 534\n        converterFunc = typeDef.valueConverters.stringArray;                                                           // 535\n      } else if (arrayItemFieldType === Number) {                                                                      // 536\n        converterFunc = typeDef.valueConverters.numberArray;                                                           // 537\n      } else if (arrayItemFieldType === Boolean) {                                                                     // 538\n        converterFunc = typeDef.valueConverters.booleanArray;                                                          // 539\n      } else if (arrayItemFieldType === Date) {                                                                        // 540\n        converterFunc = typeDef.valueConverters.dateArray;                                                             // 541\n      }                                                                                                                // 542\n    }                                                                                                                  // 543\n                                                                                                                       // 544\n    if (typeof converterFunc === \"function\") {                                                                         // 545\n      val = converterFunc.call(field, val);                                                                            // 546\n    }                                                                                                                  // 547\n  }                                                                                                                    // 548\n                                                                                                                       // 549\n  return val;                                                                                                          // 550\n};                                                                                                                     // 551\n                                                                                                                       // 552\n/**                                                                                                                    // 553\n * @method AutoForm.addInputType                                                                                       // 554\n * @public                                                                                                             // 555\n * @param {String} name The type string that this definition is for.                                                   // 556\n * @param {Object} definition Defines how the input type should be rendered.                                           // 557\n * @param {String} definition.componentName The component name. A template with the name <componentName>_bootstrap3, and potentially others, must be defined.\n * @return {undefined}                                                                                                 // 559\n *                                                                                                                     // 560\n * Use this method to add custom input components.                                                                     // 561\n */                                                                                                                    // 562\nAutoForm.addInputType = function afAddInputType(name, definition) {                                                    // 563\n  var obj = {};                                                                                                        // 564\n  obj[name] = definition;                                                                                              // 565\n  _.extend(AutoForm._inputTypeDefinitions, obj);                                                                       // 566\n};                                                                                                                     // 567\n                                                                                                                       // 568\n/**                                                                                                                    // 569\n * @method AutoForm.addFormType                                                                                        // 570\n * @public                                                                                                             // 571\n * @param {String} name The type string that this definition is for.                                                   // 572\n * @param {Object} definition Defines how the submit type should work                                                  // 573\n * @param {Function} [definition.adjustInputContext] A function that accepts a single argument, which is the context with which an input template in the form will be called, potentially changes the context object, and then returns it. For example, the \"readonly\" and \"disabled\" form types use this function to add the \"readonly\" or \"disabled\" attribute, respectively, to every input within the form.\n * @param {Function} [definition.adjustSchema] A function that accepts a single argument, which is the form schema, and potentially uses that to return a different schema to use instead. For example, the \"update-pushArray\" form type uses this function to build and return a schema that is limited by the `scope` attribute on the form. When this function is called, `this` contains useful information about the form.\n * @param {Boolean} [definition.hideArrayItemButtons] Set to `true` if this form type should not show buttons for adding and removing items in an array field. The \"disabled\" and \"readonly\" form types do this.\n * @param {Function} definition.onSubmit A function that does whatever should happen upon submission of this form type. When this function is called, `this` contains useful information about the form. At a minimum, you probably want to call `this.event.preventDefault()` to prevent the browser from submitting the form. Your submission logic may want to rely on additional custom form attributes, which will be available in `this.formAttributes`. If you do any additional validation and it fails, you should call `this.failedValidation()`. When your logic is done, you should call `this.result(error, result)`. If you want to end the submission process without providing a result, call `this.endSubmission()`. If you don't call `this.result()` or `this.endSubmission()`, `endSubmit` hooks won't be called, so for example the submit button might remain disabled. `onError` hooks will be called only if you pass an error to `this.result()`. `onSuccess` hooks will be called only if you do not pass an error to `this.result()`.\n * @param {Function} [definition.shouldPrevalidate] A function that returns `true` if validation against the form schema should happen before the `onSubmit` function is called, or `false` if not. When this function is called, `this` contains useful information about the form. If this function is not provided for a form type, the default is `true`.\n * @param {Function} definition.validateForm A function that validates the form and returns `true` if valid or `false` if not. This can happen during submission but also at other times. When this function is called, `this` contains useful information about the form and the validation options.\n * @return {undefined}                                                                                                 // 580\n *                                                                                                                     // 581\n * Use this method to add custom form types.                                                                           // 582\n */                                                                                                                    // 583\nAutoForm.addFormType = function afAddFormType(name, definition) {                                                      // 584\n  var obj = {};                                                                                                        // 585\n  obj[name] = definition;                                                                                              // 586\n  _.extend(AutoForm._formTypeDefinitions, obj);                                                                        // 587\n};                                                                                                                     // 588\n                                                                                                                       // 589\n/**                                                                                                                    // 590\n * @method AutoForm.validateField                                                                                      // 591\n * @public                                                                                                             // 592\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 593\n * @param {String} fieldName The name of the field within the `autoForm` you want to validate.                         // 594\n * @param {Boolean} [skipEmpty=false] Set to `true` to skip validation if the field has no value. Useful for preventing `required` errors in form fields that the user has not yet filled out.\n * @return {Boolean} Is it valid?                                                                                      // 596\n *                                                                                                                     // 597\n * In addition to returning a boolean that indicates whether the field is currently valid,                             // 598\n * this method causes the reactive validation messages to appear.                                                      // 599\n */                                                                                                                    // 600\nAutoForm.validateField = function autoFormValidateField(formId, fieldName, skipEmpty) {                                // 601\n  var template = AutoForm.templateInstanceForForm(formId);                                                             // 602\n  if (!template ||                                                                                                     // 603\n      !template.view ||                                                                                                // 604\n      !template.view._domrange ||                                                                                      // 605\n      template.view.isDestroyed) {                                                                                     // 606\n    return true;                                                                                                       // 607\n  }                                                                                                                    // 608\n                                                                                                                       // 609\n  return validateField(fieldName, formId, skipEmpty, false);                                                           // 610\n};                                                                                                                     // 611\n                                                                                                                       // 612\n/**                                                                                                                    // 613\n * @method AutoForm.validateForm                                                                                       // 614\n * @public                                                                                                             // 615\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 616\n * @return {Boolean} Is it valid?                                                                                      // 617\n *                                                                                                                     // 618\n * In addition to returning a boolean that indicates whether the form is currently valid,                              // 619\n * this method causes the reactive validation messages to appear.                                                      // 620\n */                                                                                                                    // 621\nAutoForm.validateForm = function autoFormValidateForm(formId) {                                                        // 622\n  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 623\n  var formDoc, formType = form.type;                                                                                   // 624\n                                                                                                                       // 625\n  var ftd = Utility.getFormTypeDef(formType);                                                                          // 626\n                                                                                                                       // 627\n  // Gather all form values                                                                                            // 628\n  if (ftd.needsModifierAndDoc) {                                                                                       // 629\n    formDoc = AutoForm.getFormValues(formId, null, null);                                                              // 630\n  } else if (ftd.usesModifier) {                                                                                       // 631\n    formDoc = AutoForm.getFormValues(formId, null, null, true);                                                        // 632\n  } else {                                                                                                             // 633\n    formDoc = AutoForm.getFormValues(formId, null, null, false);                                                       // 634\n  }                                                                                                                    // 635\n                                                                                                                       // 636\n  // If form is not currently rendered, return true                                                                    // 637\n  if (!formDoc) {                                                                                                      // 638\n    return true;                                                                                                       // 639\n  }                                                                                                                    // 640\n                                                                                                                       // 641\n  return (form.validation === 'none') || ftd.validateForm.call({                                                       // 642\n    form: form,                                                                                                        // 643\n    formDoc: formDoc,                                                                                                  // 644\n    useCollectionSchema: false                                                                                         // 645\n  });                                                                                                                  // 646\n};                                                                                                                     // 647\n                                                                                                                       // 648\n/**                                                                                                                    // 649\n * @method AutoForm.getValidationContext                                                                               // 650\n * @public                                                                                                             // 651\n * @param {String} formId The `id` attribute of the `autoForm` for which you want the validation context               // 652\n * @return {SimpleSchemaValidationContext} The SimpleSchema validation context object.                                 // 653\n *                                                                                                                     // 654\n * Use this method to get the validation context, which can be used to check                                           // 655\n * the current invalid fields, manually invalidate fields, etc.                                                        // 656\n */                                                                                                                    // 657\nAutoForm.getValidationContext = function autoFormGetValidationContext(formId) {                                        // 658\n  var ss = AutoForm.getFormSchema(formId);                                                                             // 659\n  return ss && ss.namedContext(formId);                                                                                // 660\n};                                                                                                                     // 661\n                                                                                                                       // 662\n/**                                                                                                                    // 663\n * @method AutoForm.findAttribute                                                                                      // 664\n * @public                                                                                                             // 665\n * @param {String} attrName Attribute name                                                                             // 666\n * @return {Any|undefined} Searches for the given attribute, looking up the parent context tree until the closest autoform is reached.\n *                                                                                                                     // 668\n * Call this method from a UI helper. Might return undefined.                                                          // 669\n */                                                                                                                    // 670\nAutoForm.findAttribute = function autoFormFindAttribute(attrName) {                                                    // 671\n  var val, view, viewData;                                                                                             // 672\n                                                                                                                       // 673\n  function checkView() {                                                                                               // 674\n    // Is the attribute we're looking for on here?                                                                     // 675\n    // If so, stop searching                                                                                           // 676\n    viewData = Blaze.getData(view);                                                                                    // 677\n    if (viewData && viewData.atts && viewData.atts[attrName] !== void 0) {                                             // 678\n      val = viewData.atts[attrName];                                                                                   // 679\n    } else if (viewData && viewData[attrName] !== void 0) {                                                            // 680\n      // When searching for \"template\", make sure we didn't just                                                       // 681\n      // find the one that's on Template.dynamic                                                                       // 682\n      if (attrName !== 'template' || !('data' in viewData)) {                                                          // 683\n        val = viewData[attrName];                                                                                      // 684\n      }                                                                                                                // 685\n    }                                                                                                                  // 686\n  }                                                                                                                    // 687\n                                                                                                                       // 688\n  // Loop                                                                                                              // 689\n  view = Blaze.currentView;                                                                                            // 690\n  while (val === undefined && view && view.name !== 'Template.autoForm') {                                             // 691\n    checkView();                                                                                                       // 692\n    view = view.originalParentView || view.parentView;                                                                 // 693\n  }                                                                                                                    // 694\n                                                                                                                       // 695\n  // If we've reached the form, check there, too                                                                       // 696\n  if (val === undefined && view && view.name === 'Template.autoForm') {                                                // 697\n    checkView();                                                                                                       // 698\n  }                                                                                                                    // 699\n                                                                                                                       // 700\n  return val;                                                                                                          // 701\n};                                                                                                                     // 702\n                                                                                                                       // 703\n/**                                                                                                                    // 704\n * @method AutoForm.findAttributesWithPrefix                                                                           // 705\n * @public                                                                                                             // 706\n * @param {String} prefix Attribute prefix                                                                             // 707\n * @return {Object} An object containing all of the found attributes and their values, with the prefix removed from the keys.\n *                                                                                                                     // 709\n * Call this method from a UI helper. Searches for attributes that start with the given prefix, looking up the parent context tree until the closest autoform is reached.\n */                                                                                                                    // 711\nAutoForm.findAttributesWithPrefix = function autoFormFindAttributesWithPrefix(prefix) {                                // 712\n  var result = {}, view, viewData, searchObj;                                                                          // 713\n                                                                                                                       // 714\n  function checkView() {                                                                                               // 715\n    // Is the attribute we're looking for on here?                                                                     // 716\n    // If so, add to result object.                                                                                    // 717\n    viewData = Blaze.getData(view);                                                                                    // 718\n    if (viewData && viewData.atts) {                                                                                   // 719\n      searchObj = viewData.atts;                                                                                       // 720\n    } else {                                                                                                           // 721\n      searchObj = viewData;                                                                                            // 722\n    }                                                                                                                  // 723\n    // We need an isArray check, too because _.isObject([{}]) comes back true                                          // 724\n    if (_.isObject(searchObj) && !_.isArray(searchObj)) {                                                              // 725\n      _.each(searchObj, function (v, k) {                                                                              // 726\n        if (k.indexOf(prefix) === 0) {                                                                                 // 727\n          result[k.slice(prefix.length)] = v;                                                                          // 728\n        }                                                                                                              // 729\n      });                                                                                                              // 730\n    }                                                                                                                  // 731\n  }                                                                                                                    // 732\n                                                                                                                       // 733\n  // Loop                                                                                                              // 734\n  view = Blaze.currentView;                                                                                            // 735\n  while (view && view.name !== 'Template.autoForm') {                                                                  // 736\n    checkView();                                                                                                       // 737\n    view = view.originalParentView || view.parentView;                                                                 // 738\n  }                                                                                                                    // 739\n                                                                                                                       // 740\n  // If we've reached the form, check there, too                                                                       // 741\n  if (view && view.name === 'Template.autoForm') {                                                                     // 742\n    checkView();                                                                                                       // 743\n  }                                                                                                                    // 744\n                                                                                                                       // 745\n  return result;                                                                                                       // 746\n};                                                                                                                     // 747\n                                                                                                                       // 748\n/**                                                                                                                    // 749\n * @method AutoForm.debug                                                                                              // 750\n * @public                                                                                                             // 751\n *                                                                                                                     // 752\n * Call this method in client code while developing to turn on extra logging.                                          // 753\n * You need to call it just one time, usually in top level client code.                                                // 754\n */                                                                                                                    // 755\nAutoForm.debug = function autoFormDebug() {                                                                            // 756\n  SimpleSchema.debug = true;                                                                                           // 757\n  AutoForm._debug = true;                                                                                              // 758\n  AutoForm.addHooks(null, {                                                                                            // 759\n    onError: function (operation, error) {                                                                             // 760\n      console.log(\"Error in \" + this.formId, operation, error);                                                        // 761\n    }                                                                                                                  // 762\n  });                                                                                                                  // 763\n};                                                                                                                     // 764\n                                                                                                                       // 765\n/**                                                                                                                    // 766\n * @property AutoForm.arrayTracker                                                                                     // 767\n * @public                                                                                                             // 768\n */                                                                                                                    // 769\nAutoForm.arrayTracker = arrayTracker;                                                                                  // 770\n                                                                                                                       // 771\n/**                                                                                                                    // 772\n * @method AutoForm.getInputType                                                                                       // 773\n * @param {Object} atts The attributes provided to afFieldInput.                                                       // 774\n * @public                                                                                                             // 775\n * @return {String} The input type. Most are the same as the `type` attributes for HTML input elements, but some are special strings that autoform interprets.\n *                                                                                                                     // 777\n * Call this method from a UI helper to get the type string for the input control.                                     // 778\n */                                                                                                                    // 779\nAutoForm.getInputType = function getInputType(atts) {                                                                  // 780\n  var expectsArray = false, defs, schemaType, type;                                                                    // 781\n                                                                                                                       // 782\n  atts = AutoForm.Utility.getComponentContext(atts, 'afFieldInput').atts;                                              // 783\n                                                                                                                       // 784\n  // If a `type` attribute is specified, we just use that                                                              // 785\n  if (atts.type) {                                                                                                     // 786\n    return atts.type;                                                                                                  // 787\n  }                                                                                                                    // 788\n                                                                                                                       // 789\n  // Get schema definition, using the item definition for array fields                                                 // 790\n  defs = AutoForm.getSchemaForField(atts.name);                                                                        // 791\n  if (!defs) {                                                                                                         // 792\n    return 'text';                                                                                                     // 793\n  }                                                                                                                    // 794\n                                                                                                                       // 795\n  schemaType = defs.type;                                                                                              // 796\n  if (schemaType === Array) {                                                                                          // 797\n    expectsArray = true;                                                                                               // 798\n    schemaType = AutoForm.getSchemaForField(atts.name + \".$\").type;                                                    // 799\n    if (!defs) {                                                                                                       // 800\n      return 'text';                                                                                                   // 801\n    }                                                                                                                  // 802\n  }                                                                                                                    // 803\n                                                                                                                       // 804\n  // Based on the `type` attribute, the `type` from the schema, and/or                                                 // 805\n  // other characteristics such as regEx and whether an array is expected,                                             // 806\n  // choose which type string to return.                                                                               // 807\n                                                                                                                       // 808\n  // If options were provided, noselect is `true`, and the schema                                                      // 809\n  // expects the value of the field to be an array, use \"select-checkbox\".                                             // 810\n  if (atts.options && atts.noselect === true && expectsArray) {                                                        // 811\n    type = 'select-checkbox';                                                                                          // 812\n  }                                                                                                                    // 813\n                                                                                                                       // 814\n  // If options were provided, noselect is `true`, and the schema                                                      // 815\n  // does not expect the value of the field to be an array, use \"select-radio\".                                        // 816\n  else if (atts.options && atts.noselect === true && !expectsArray) {                                                  // 817\n    type = 'select-radio';                                                                                             // 818\n  }                                                                                                                    // 819\n                                                                                                                       // 820\n  // If options were provided, noselect is not `true`, and the schema                                                  // 821\n  // expects the value of the field to be an array, use \"select-multiple\".                                             // 822\n  else if (atts.options && atts.noselect !== true && expectsArray) {                                                   // 823\n    type = 'select-multiple';                                                                                          // 824\n  }                                                                                                                    // 825\n                                                                                                                       // 826\n  // If options were provided, noselect is not `true`, and the schema                                                  // 827\n  // does not expect the value of the field to be an array, use \"select\".                                              // 828\n  else if (atts.options && atts.noselect !== true && !expectsArray) {                                                  // 829\n    type = 'select';                                                                                                   // 830\n  }                                                                                                                    // 831\n                                                                                                                       // 832\n  // If the schema expects the value of the field to be a string and                                                   // 833\n  // the `rows` attribute is provided, use \"textarea\"                                                                  // 834\n  else if (schemaType === String && atts.rows === +atts.rows) {                                                        // 835\n    type = 'textarea';                                                                                                 // 836\n  }                                                                                                                    // 837\n                                                                                                                       // 838\n  // If the schema expects the value of the field to be a number,                                                      // 839\n  // use \"number\"                                                                                                      // 840\n  else if (schemaType === Number) {                                                                                    // 841\n    type = 'number';                                                                                                   // 842\n  }                                                                                                                    // 843\n                                                                                                                       // 844\n  // If the schema expects the value of the field to be a Date instance,                                               // 845\n  // use \"date\"                                                                                                        // 846\n  else if (schemaType === Date) {                                                                                      // 847\n    type = 'date';                                                                                                     // 848\n  }                                                                                                                    // 849\n                                                                                                                       // 850\n  // If the schema expects the value of the field to be a boolean,                                                     // 851\n  // use \"boolean-checkbox\"                                                                                            // 852\n  else if (schemaType === Boolean) {                                                                                   // 853\n    type = 'boolean-checkbox';                                                                                         // 854\n  }                                                                                                                    // 855\n                                                                                                                       // 856\n  // Default is \"text\"                                                                                                 // 857\n  else {                                                                                                               // 858\n    type = 'text';                                                                                                     // 859\n  }                                                                                                                    // 860\n                                                                                                                       // 861\n  return type;                                                                                                         // 862\n};                                                                                                                     // 863\n                                                                                                                       // 864\n/**                                                                                                                    // 865\n * @method AutoForm.getSchemaForField                                                                                  // 866\n * @public                                                                                                             // 867\n * @param {String} name The field name attribute / schema key.                                                         // 868\n * @return {Object|undefined}                                                                                          // 869\n *                                                                                                                     // 870\n * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.\n */                                                                                                                    // 872\nAutoForm.getSchemaForField = function autoFormGetSchemaForField(name) {                                                // 873\n  var ss = AutoForm.getFormSchema();                                                                                   // 874\n  return AutoForm.Utility.getDefs(ss, name);                                                                           // 875\n};                                                                                                                     // 876\n                                                                                                                       // 877\n/**                                                                                                                    // 878\n * @method AutoForm._getOptionsForField                                                                                // 879\n * @public                                                                                                             // 880\n * @param {String} name The field name attribute / schema key.                                                         // 881\n * @return {Array(Object)|String|undefined}                                                                            // 882\n *                                                                                                                     // 883\n * Call this method from a UI helper to get the select options for the field. Might return the string \"allowed\".       // 884\n */                                                                                                                    // 885\nAutoForm._getOptionsForField = function autoFormGetOptionsForField(name) {                                             // 886\n  var ss, def, saf, allowedValues;                                                                                     // 887\n                                                                                                                       // 888\n  ss = AutoForm.getFormSchema();                                                                                       // 889\n  if (!ss) {                                                                                                           // 890\n    return;                                                                                                            // 891\n  }                                                                                                                    // 892\n                                                                                                                       // 893\n  def = ss.getDefinition(name);                                                                                        // 894\n  if (!def) {                                                                                                          // 895\n    return;                                                                                                            // 896\n  }                                                                                                                    // 897\n                                                                                                                       // 898\n  // If options in schema, use those                                                                                   // 899\n  saf = def.autoform;                                                                                                  // 900\n  if (saf) {                                                                                                           // 901\n    if (saf.afFieldInput && saf.afFieldInput.options) {                                                                // 902\n      return saf.afFieldInput.options;                                                                                 // 903\n    } else if (saf.afQuickField && saf.afQuickField.options) {                                                         // 904\n      return saf.afQuickField.options;                                                                                 // 905\n    } else if (saf.options) {                                                                                          // 906\n      return saf.options;                                                                                              // 907\n    }                                                                                                                  // 908\n  }                                                                                                                    // 909\n                                                                                                                       // 910\n  // If schema has allowedValues, use those                                                                            // 911\n  allowedValues = ss.getAllowedValuesForKey(name);                                                                     // 912\n  if (allowedValues) {                                                                                                 // 913\n    return 'allowed';                                                                                                  // 914\n  }                                                                                                                    // 915\n};                                                                                                                     // 916\n                                                                                                                       // 917\n/**                                                                                                                    // 918\n * @method AutoForm.getLabelForField                                                                                   // 919\n * @public                                                                                                             // 920\n * @param {String} name The field name attribute / schema key.                                                         // 921\n * @return {Object}                                                                                                    // 922\n *                                                                                                                     // 923\n * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.\n */                                                                                                                    // 925\nAutoForm.getLabelForField = function autoFormGetSchemaForField(name) {                                                 // 926\n  var ss = AutoForm.getFormSchema(), label = ss.label(name);                                                           // 927\n  // for array items we don't want to inflect the label because                                                        // 928\n  // we will end up with a number;                                                                                     // 929\n  // TODO this check should probably be in the SimpleSchema code                                                       // 930\n  if (SimpleSchema._makeGeneric(name).slice(-1) === \"$\" && !isNaN(parseInt(label, 10))) {                              // 931\n    label = null;                                                                                                      // 932\n  }                                                                                                                    // 933\n  return label;                                                                                                        // 934\n};                                                                                                                     // 935\n                                                                                                                       // 936\n/**                                                                                                                    // 937\n * @method AutoForm.templateInstanceForForm                                                                            // 938\n * @public                                                                                                             // 939\n * @param {String} [formId] The form's `id` attribute                                                                  // 940\n * @returns {TemplateInstance|undefined} The template instance.                                                        // 941\n *                                                                                                                     // 942\n * Gets the template instance for the form with formId or the closest form to the current context.                     // 943\n */                                                                                                                    // 944\nAutoForm.templateInstanceForForm = function (formId) {                                                                 // 945\n  var view = AutoForm.viewForForm(formId);                                                                             // 946\n                                                                                                                       // 947\n  if (!view) return;                                                                                                   // 948\n                                                                                                                       // 949\n  return view.templateInstance();                                                                                      // 950\n};                                                                                                                     // 951\n                                                                                                                       // 952\n/**                                                                                                                    // 953\n * @method AutoForm.viewForForm                                                                                        // 954\n * @public                                                                                                             // 955\n * @param {String} [formId] The form's `id` attribute. Do not pass this if calling from within a form context.         // 956\n * @returns {Blaze.View|undefined} The `Blaze.View` instance for the autoForm.                                         // 957\n *                                                                                                                     // 958\n * Gets the `Blaze.View` instance for the form with formId or the closest form to the current context.                 // 959\n */                                                                                                                    // 960\nAutoForm.viewForForm = function (formId) {                                                                             // 961\n  var formElement, view;                                                                                               // 962\n                                                                                                                       // 963\n  if (formId) {                                                                                                        // 964\n    formElement = document.getElementById(formId);                                                                     // 965\n    if (!formElement) {                                                                                                // 966\n      return;                                                                                                          // 967\n    }                                                                                                                  // 968\n  }                                                                                                                    // 969\n                                                                                                                       // 970\n  // If formElement is undefined, Blaze.getView returns the current view.                                              // 971\n  try {                                                                                                                // 972\n    view = Blaze.getView(formElement);                                                                                 // 973\n  } catch (err) {}                                                                                                     // 974\n                                                                                                                       // 975\n  while (view && view.name !== 'Template.autoForm') {                                                                  // 976\n    view = view.originalParentView || view.parentView;                                                                 // 977\n  }                                                                                                                    // 978\n                                                                                                                       // 979\n  if (!view || view.name !== 'Template.autoForm') {                                                                    // 980\n    return;                                                                                                            // 981\n  }                                                                                                                    // 982\n                                                                                                                       // 983\n  return view;                                                                                                         // 984\n};                                                                                                                     // 985\n                                                                                                                       // 986\n/**                                                                                                                    // 987\n * @method AutoForm.getArrayCountFromDocForField                                                                       // 988\n * @public                                                                                                             // 989\n * @param {String} formId The form's `id` attribute                                                                    // 990\n * @param {String} field  The field name (schema key)                                                                  // 991\n * @returns {Number|undefined} Array count in the attached document.                                                   // 992\n *                                                                                                                     // 993\n * Looks in the document attached to the form to see if the                                                            // 994\n * requested field exists and is an array. If so, returns the                                                          // 995\n * length (count) of the array. Otherwise returns undefined.                                                           // 996\n */                                                                                                                    // 997\nAutoForm.getArrayCountFromDocForField = function (formId, field) {                                                     // 998\n  var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);                                                              // 999\n  var docCount;                                                                                                        // 1000\n  if (mDoc) {                                                                                                          // 1001\n    var keyInfo = mDoc.getInfoForKey(field);                                                                           // 1002\n    if (keyInfo && _.isArray(keyInfo.value)) {                                                                         // 1003\n      docCount = keyInfo.value.length;                                                                                 // 1004\n    }                                                                                                                  // 1005\n  }                                                                                                                    // 1006\n  return docCount;                                                                                                     // 1007\n};                                                                                                                     // 1008\n                                                                                                                       // 1009\n/**                                                                                                                    // 1010\n * @method AutoForm.parseData                                                                                          // 1011\n * @public                                                                                                             // 1012\n * @param {Object} data Current data context for the form, or an empty object. Usually this is used from a quickForm, since the autoForm won't be rendered yet. Otherwise you should use AutoForm.getCurrentDataForForm if you can.\n * @returns {Object} Current data context for the form, or an empty object.                                            // 1014\n *                                                                                                                     // 1015\n * Parses and alters the current data context for a form. It will have default values added and a `_resolvedSchema` property that has the schema the form should use.\n */                                                                                                                    // 1017\nAutoForm.parseData = function (data) {                                                                                 // 1018\n  return setDefaults(data);                                                                                            // 1019\n};                                                                                                                     // 1020\n                                                                                                                       // 1021\n/**                                                                                                                    // 1022\n * @method AutoForm.getCurrentDataForForm                                                                              // 1023\n * @public                                                                                                             // 1024\n * @param {String} formId The form's `id` attribute                                                                    // 1025\n * @returns {Object} Current data context for the form, or an empty object.                                            // 1026\n *                                                                                                                     // 1027\n * Returns the current data context for a form.                                                                        // 1028\n * You can call this without a formId from within a helper and                                                         // 1029\n * the data for the nearest containing form will be returned.                                                          // 1030\n */                                                                                                                    // 1031\nAutoForm.getCurrentDataForForm = function (formId) {                                                                   // 1032\n  var view = AutoForm.viewForForm(formId);                                                                             // 1033\n                                                                                                                       // 1034\n  if (!view) return;                                                                                                   // 1035\n                                                                                                                       // 1036\n  var data = Blaze.getData(view);                                                                                      // 1037\n                                                                                                                       // 1038\n  if (!data) return;                                                                                                   // 1039\n                                                                                                                       // 1040\n  return setDefaults(data);                                                                                            // 1041\n};                                                                                                                     // 1042\n                                                                                                                       // 1043\n/**                                                                                                                    // 1044\n * @method AutoForm.getCurrentDataPlusExtrasForForm                                                                    // 1045\n * @public                                                                                                             // 1046\n * @param   {String} [formId] The form's `id` attribute                                                                // 1047\n * @returns {Object} Current data context for the form, or an empty object.                                            // 1048\n *                                                                                                                     // 1049\n * Returns the current data context for a form plus some extra properties.                                             // 1050\n * You can call this without a formId from within a helper and                                                         // 1051\n * the data for the nearest containing form will be returned.                                                          // 1052\n */                                                                                                                    // 1053\nAutoForm.getCurrentDataPlusExtrasForForm = function (formId) {                                                         // 1054\n  var data = AutoForm.getCurrentDataForForm(formId);                                                                   // 1055\n                                                                                                                       // 1056\n  data = _.clone(data);                                                                                                // 1057\n                                                                                                                       // 1058\n  // add form type definition                                                                                          // 1059\n  var formType = data.type || 'normal';                                                                                // 1060\n  data.formTypeDef = Utility.getFormTypeDef(formType);                                                                 // 1061\n                                                                                                                       // 1062\n  return data;                                                                                                         // 1063\n};                                                                                                                     // 1064\n                                                                                                                       // 1065\n/**                                                                                                                    // 1066\n * @method AutoForm.getFormCollection                                                                                  // 1067\n * @public                                                                                                             // 1068\n * @param {String} formId The form's `id` attribute                                                                    // 1069\n * @returns {Mongo.Collection|undefined} The Collection instance                                                       // 1070\n *                                                                                                                     // 1071\n * Gets the collection for a form from the `collection` attribute                                                      // 1072\n */                                                                                                                    // 1073\nAutoForm.getFormCollection = function (formId) {                                                                       // 1074\n  var data = AutoForm.getCurrentDataForForm(formId);                                                                   // 1075\n  return AutoForm.Utility.lookup(data.collection);                                                                     // 1076\n};                                                                                                                     // 1077\n                                                                                                                       // 1078\n/**                                                                                                                    // 1079\n * @method AutoForm.getFormSchema                                                                                      // 1080\n * @public                                                                                                             // 1081\n * @param {String} formId The form's `id` attribute                                                                    // 1082\n * @param {Object} [form] Pass the form data context as an optimization or if the form is not yet rendered.            // 1083\n * @returns {SimpleSchema|undefined} The SimpleSchema instance                                                         // 1084\n *                                                                                                                     // 1085\n * Gets the schema for a form, from the `schema` attribute if                                                          // 1086\n * provided, or from the schema attached to the `Mongo.Collection`                                                     // 1087\n * specified in the `collection` attribute. The form must be                                                           // 1088\n * currently rendered.                                                                                                 // 1089\n */                                                                                                                    // 1090\nAutoForm.getFormSchema = function (formId, form) {                                                                     // 1091\n  form = form ? setDefaults(form) : AutoForm.getCurrentDataForForm(formId);                                            // 1092\n  return form._resolvedSchema;                                                                                         // 1093\n};                                                                                                                     // 1094\n                                                                                                                       // 1095\n/**                                                                                                                    // 1096\n * @method AutoForm.getFormId                                                                                          // 1097\n * @public                                                                                                             // 1098\n * @returns {String} The containing form's `id` attribute value                                                        // 1099\n *                                                                                                                     // 1100\n * Call in a helper to get the containing form's `id` attribute. Reactive.                                             // 1101\n */                                                                                                                    // 1102\nAutoForm.getFormId = function () {                                                                                     // 1103\n  return AutoForm.getCurrentDataForForm().id;                                                                          // 1104\n};                                                                                                                     // 1105\n                                                                                                                       // 1106\n/**                                                                                                                    // 1107\n * @method AutoForm.selectFirstInvalidField                                                                            // 1108\n * @public                                                                                                             // 1109\n * @param {String} formId The `id` attribute of the form                                                               // 1110\n * @param {SimpleSchema} ss The SimpleSchema instance that was used to create the form's validation context.           // 1111\n * @returns {undefined}                                                                                                // 1112\n *                                                                                                                     // 1113\n * Selects the focus the first field (in DOM order) with an error.                                                     // 1114\n */                                                                                                                    // 1115\nAutoForm.selectFirstInvalidField = function selectFirstInvalidField(formId, ss) {                                      // 1116\n  var ctx = ss.namedContext(formId), template, fields;                                                                 // 1117\n  if (!ctx.isValid()) {                                                                                                // 1118\n    template = AutoForm.templateInstanceForForm(formId);                                                               // 1119\n    fields = getAllFieldsInForm(template);                                                                             // 1120\n    fields.each(function () {                                                                                          // 1121\n      var f = $(this);                                                                                                 // 1122\n      if (ctx.keyIsInvalid(f.attr('data-schema-key'))) {                                                               // 1123\n        f.focus();                                                                                                     // 1124\n        return false;                                                                                                  // 1125\n      }                                                                                                                // 1126\n    });                                                                                                                // 1127\n  }                                                                                                                    // 1128\n};                                                                                                                     // 1129\n                                                                                                                       // 1130\n/**                                                                                                                    // 1131\n * @method AutoForm._validateFormDoc                                                                                   // 1132\n * @public                                                                                                             // 1133\n *                                                                                                                     // 1134\n * If creating a form type, you will often want to call this from the `validateForm` function. It provides the generic form validation logic that does not typically change between form types.\n *                                                                                                                     // 1136\n * @param {Object} doc The document with the gathered form values to validate.                                         // 1137\n * @param {Boolean} isModifier Is `doc` actually a mongo modifier object?                                              // 1138\n * @param {String} formId The form `id` attribute                                                                      // 1139\n * @param {SimpleSchema} ss The SimpleSchema instance against which to validate.                                       // 1140\n * @param {Object} form The form context object                                                                        // 1141\n * @param {String} [key] Optionally, a specific schema key to validate.                                                // 1142\n * @returns {Boolean} Is the form valid?                                                                               // 1143\n */                                                                                                                    // 1144\nAutoForm._validateFormDoc = function validateFormDoc(doc, isModifier, formId, ss, form, key) {                         // 1145\n  var isValid;                                                                                                         // 1146\n  var ec = {                                                                                                           // 1147\n    userId: (Meteor.userId && Meteor.userId()) || null,                                                                // 1148\n    isInsert: !isModifier,                                                                                             // 1149\n    isUpdate: !!isModifier,                                                                                            // 1150\n    isUpsert: false,                                                                                                   // 1151\n    isFromTrustedCode: false,                                                                                          // 1152\n    docId: (form.doc && form.doc._id) || null                                                                          // 1153\n  };                                                                                                                   // 1154\n                                                                                                                       // 1155\n  // Get a version of the doc that has auto values to validate here. We                                                // 1156\n  // don't want to actually send any auto values to the server because                                                 // 1157\n  // we ultimately want them generated on the server                                                                   // 1158\n  var docForValidation = _.clone(doc);                                                                                 // 1159\n  ss.clean(docForValidation, {                                                                                         // 1160\n    isModifier: isModifier,                                                                                            // 1161\n    filter: false,                                                                                                     // 1162\n    autoConvert: false,                                                                                                // 1163\n    trimStrings: false,                                                                                                // 1164\n    extendAutoValueContext: ec                                                                                         // 1165\n  });                                                                                                                  // 1166\n                                                                                                                       // 1167\n  // Get form's validation context                                                                                     // 1168\n  var vc = ss.namedContext(formId);                                                                                    // 1169\n                                                                                                                       // 1170\n  // Validate                                                                                                          // 1171\n  // If `key` is provided, we validate that key/field only                                                             // 1172\n  if (key) {                                                                                                           // 1173\n    isValid = vc.validateOne(docForValidation, key, {                                                                  // 1174\n      modifier: isModifier,                                                                                            // 1175\n      extendedCustomContext: ec                                                                                        // 1176\n    });                                                                                                                // 1177\n                                                                                                                       // 1178\n    // Add sticky error for this key if there is one                                                                   // 1179\n    var stickyError = AutoForm.templateInstanceForForm(formId)._stickyErrors[key];                                     // 1180\n    if (stickyError) {                                                                                                 // 1181\n      isValid = false;                                                                                                 // 1182\n      vc.addInvalidKeys([                                                                                              // 1183\n        {name: key, type: stickyError.type, value: stickyError.value}                                                  // 1184\n      ]);                                                                                                              // 1185\n    }                                                                                                                  // 1186\n  } else {                                                                                                             // 1187\n    isValid = vc.validate(docForValidation, {                                                                          // 1188\n      modifier: isModifier,                                                                                            // 1189\n      extendedCustomContext: ec                                                                                        // 1190\n    });                                                                                                                // 1191\n                                                                                                                       // 1192\n    // Add sticky errors for all keys if any                                                                           // 1193\n    var stickyErrors = AutoForm.templateInstanceForForm(formId)._stickyErrors;                                         // 1194\n    if (!_.isEmpty(stickyErrors)) {                                                                                    // 1195\n      isValid = false;                                                                                                 // 1196\n      stickyErrors = _.map(stickyErrors, function (obj, k) {                                                           // 1197\n        return {name: k, type: obj.type, value: obj.value};                                                            // 1198\n      });                                                                                                              // 1199\n      vc.addInvalidKeys(stickyErrors);                                                                                 // 1200\n    }                                                                                                                  // 1201\n                                                                                                                       // 1202\n    if (!isValid) {                                                                                                    // 1203\n      AutoForm.selectFirstInvalidField(formId, ss);                                                                    // 1204\n    }                                                                                                                  // 1205\n  }                                                                                                                    // 1206\n                                                                                                                       // 1207\n  return isValid;                                                                                                      // 1208\n};                                                                                                                     // 1209\n                                                                                                                       // 1210\n/**                                                                                                                    // 1211\n * Sets defaults for the form data context                                                                             // 1212\n * @private                                                                                                            // 1213\n * @returns {String} The data context with property defaults added.                                                    // 1214\n */                                                                                                                    // 1215\nsetDefaults = function setDefaults(data) {                                                                             // 1216\n  if (!data) {                                                                                                         // 1217\n    data = {};                                                                                                         // 1218\n  }                                                                                                                    // 1219\n                                                                                                                       // 1220\n  // default form type is \"normal\"                                                                                     // 1221\n  if (typeof data.type !== 'string') {                                                                                 // 1222\n    data.type = 'normal';                                                                                              // 1223\n  }                                                                                                                    // 1224\n                                                                                                                       // 1225\n  // default form validation is \"submitThenKeyup\"                                                                      // 1226\n  if (typeof data.validation !== 'string') {                                                                           // 1227\n    data.validation = 'submitThenKeyup';                                                                               // 1228\n  }                                                                                                                    // 1229\n                                                                                                                       // 1230\n  // Resolve form schema                                                                                               // 1231\n  if (!data._resolvedSchema) {                                                                                         // 1232\n    var formType = data.type;                                                                                          // 1233\n    var schema = data.schema;                                                                                          // 1234\n    if (schema) {                                                                                                      // 1235\n      schema = AutoForm.Utility.lookup(schema);                                                                        // 1236\n    } else {                                                                                                           // 1237\n      var collection = AutoForm.Utility.lookup(data.collection);                                                       // 1238\n      if (collection && typeof collection.simpleSchema === 'function') {                                               // 1239\n        schema = collection.simpleSchema();                                                                            // 1240\n      }                                                                                                                // 1241\n    }                                                                                                                  // 1242\n                                                                                                                       // 1243\n    // Form type definition can optionally alter the schema                                                            // 1244\n    var ftd = Utility.getFormTypeDef(formType);                                                                        // 1245\n                                                                                                                       // 1246\n    if (typeof ftd.adjustSchema === 'function') {                                                                      // 1247\n      schema = ftd.adjustSchema.call({form: data}, schema);                                                            // 1248\n    }                                                                                                                  // 1249\n                                                                                                                       // 1250\n    // If we have a schema, cache it                                                                                   // 1251\n    if (schema) {                                                                                                      // 1252\n      data._resolvedSchema = schema;                                                                                   // 1253\n    }                                                                                                                  // 1254\n  }                                                                                                                    // 1255\n                                                                                                                       // 1256\n  return data;                                                                                                         // 1257\n};                                                                                                                     // 1258\n                                                                                                                       // 1259\nvar waitingForForms = {};                                                                                              // 1260\nAutoForm.rerunWhenFormRenderedOrDestroyed = function (formId) {                                                        // 1261\n  if (!_.has(waitingForForms, formId)) {                                                                               // 1262\n    waitingForForms[formId] = new Tracker.Dependency();                                                                // 1263\n  }                                                                                                                    // 1264\n  waitingForForms[formId].depend();                                                                                    // 1265\n};                                                                                                                     // 1266\n                                                                                                                       // 1267\nAutoForm.triggerFormRenderedDestroyedReruns = function (formId) {                                                      // 1268\n  if (!_.has(waitingForForms, formId)) {                                                                               // 1269\n    waitingForForms[formId] = new Tracker.Dependency();                                                                // 1270\n  }                                                                                                                    // 1271\n  waitingForForms[formId].changed();                                                                                   // 1272\n};                                                                                                                     // 1273\n                                                                                                                       // 1274\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/insert.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('insert', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    // Make sure we have a collection                                                                                  // 10\n    var collection = this.collection;                                                                                  // 11\n    if (!collection) {                                                                                                 // 12\n      throw new Error(\"AutoForm: You must specify a collection when form type is insert.\");                            // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // See if the collection has a schema attached                                                                     // 16\n    var collectionHasSchema = (typeof collection.simpleSchema === \"function\" &&                                        // 17\n                               collection.simpleSchema() != null);                                                     // 18\n                                                                                                                       // 19\n    // Run \"before.insert\" hooks                                                                                       // 20\n    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 21\n      // Perform insert                                                                                                // 22\n      if (collectionHasSchema) {                                                                                       // 23\n        // If the collection2 pkg is used and a schema is attached, we pass a validationContext                        // 24\n        collection.insert(doc, c.validationOptions, c.result);                                                         // 25\n      } else {                                                                                                         // 26\n        // If the collection2 pkg is not used or no schema is attached, we don't pass options                          // 27\n        // because core Meteor's `insert` function does not accept                                                     // 28\n        // an options argument.                                                                                        // 29\n        collection.insert(doc, c.result);                                                                              // 30\n      }                                                                                                                // 31\n    });                                                                                                                // 32\n  },                                                                                                                   // 33\n  validateForm: function () {                                                                                          // 34\n    // Get SimpleSchema                                                                                                // 35\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 36\n    // Validate                                                                                                        // 37\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 38\n  },                                                                                                                   // 39\n  shouldPrevalidate: function () {                                                                                     // 40\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 41\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 42\n  }                                                                                                                    // 43\n});                                                                                                                    // 44\n                                                                                                                       // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/update.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('update', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    // Make sure we have a collection                                                                                  // 10\n    var collection = this.collection;                                                                                  // 11\n    if (!collection) {                                                                                                 // 12\n      throw new Error(\"AutoForm: You must specify a collection when form type is update.\");                            // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // Run \"before.update\" hooks                                                                                       // 16\n    this.runBeforeHooks(this.updateDoc, function (modifier) {                                                          // 17\n      if (_.isEmpty(modifier)) { // make sure this check stays after the before hooks                                  // 18\n        // Nothing to update. Just treat it as a successful update.                                                    // 19\n        c.result(null, 0);                                                                                             // 20\n      } else {                                                                                                         // 21\n        // Perform update                                                                                              // 22\n        collection.update({_id: c.docId}, modifier, c.validationOptions, c.result);                                    // 23\n      }                                                                                                                // 24\n    });                                                                                                                // 25\n  },                                                                                                                   // 26\n  usesModifier: true,                                                                                                  // 27\n  validateForm: function () {                                                                                          // 28\n    // Get SimpleSchema                                                                                                // 29\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 30\n    // We validate the modifier. We don't want to throw errors about missing required fields, etc.                     // 31\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);                                 // 32\n  },                                                                                                                   // 33\n  shouldPrevalidate: function () {                                                                                     // 34\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 35\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 36\n  }                                                                                                                    // 37\n});                                                                                                                    // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/update-pushArray.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, SimpleSchema */                                                                                    // 1\n                                                                                                                       // 2\nAutoForm.addFormType('update-pushArray', {                                                                             // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    // Make sure we have a collection                                                                                  // 10\n    var collection = this.collection;                                                                                  // 11\n    if (!collection) {                                                                                                 // 12\n      throw new Error(\"AutoForm: You must specify a collection when form type is update-pushArray.\");                  // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // Make sure we have a scope                                                                                       // 16\n    var scope = c.formAttributes.scope;                                                                                // 17\n    if (!scope) {                                                                                                      // 18\n      throw new Error(\"AutoForm: You must specify a scope when form type is update-pushArray.\");                       // 19\n    }                                                                                                                  // 20\n                                                                                                                       // 21\n    // Run \"before.update\" hooks                                                                                       // 22\n    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 23\n      if (_.isEmpty(doc)) { // make sure this check stays after the before hooks                                       // 24\n        // Nothing to update. Just treat it as a successful update.                                                    // 25\n        c.result(null, 0);                                                                                             // 26\n      } else {                                                                                                         // 27\n        var modifer = {$push: {}};                                                                                     // 28\n        modifer.$push[scope] = doc;                                                                                    // 29\n        // Perform update                                                                                              // 30\n        collection.update({_id: c.docId}, modifer, c.validationOptions, c.result);                                     // 31\n      }                                                                                                                // 32\n    });                                                                                                                // 33\n  },                                                                                                                   // 34\n  validateForm: function () {                                                                                          // 35\n    // Get SimpleSchema                                                                                                // 36\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 37\n    // We validate as if it's an insert form                                                                           // 38\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 39\n  },                                                                                                                   // 40\n  adjustSchema: function (ss) {                                                                                        // 41\n    var scope = this.form.scope, newSchemaDef = {};                                                                    // 42\n    var searchString = SimpleSchema._makeGeneric(scope) + '.$.';                                                       // 43\n                                                                                                                       // 44\n    // create new SS instance with only the fields that begin with `scope`                                             // 45\n    _.each(ss.schema(), function (val, key) {                                                                          // 46\n      if (key.indexOf(searchString) === 0) {                                                                           // 47\n        newSchemaDef[key.slice(searchString.length)] = val;                                                            // 48\n      }                                                                                                                // 49\n    });                                                                                                                // 50\n                                                                                                                       // 51\n    return new SimpleSchema(newSchemaDef);                                                                             // 52\n  },                                                                                                                   // 53\n  shouldPrevalidate: function () {                                                                                     // 54\n    // Prevalidate because the form is generated with a schema                                                         // 55\n    // that has keys different from the collection schema                                                              // 56\n    return true;                                                                                                       // 57\n  }                                                                                                                    // 58\n});                                                                                                                    // 59\n                                                                                                                       // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/method.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('method', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    if (!this.formAttributes.meteormethod) {                                                                           // 10\n      throw new Error('When form type is \"method\", you must also provide a \"meteormethod\" attribute');                 // 11\n    }                                                                                                                  // 12\n                                                                                                                       // 13\n    // Run \"before.method\" hooks                                                                                       // 14\n    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 15\n      // Validate. If both schema and collection were provided, then we validate                                       // 16\n      // against the collection schema here. Otherwise we validate against whichever                                   // 17\n      // one was passed.                                                                                               // 18\n      var valid = (c.formAttributes.validation === 'none') ||                                                          // 19\n          c.formTypeDefinition.validateForm.call({                                                                     // 20\n            form: c.formAttributes,                                                                                    // 21\n            formDoc: doc,                                                                                              // 22\n            useCollectionSchema: c.ssIsOverride                                                                        // 23\n          });                                                                                                          // 24\n                                                                                                                       // 25\n      if (valid === false) {                                                                                           // 26\n        c.failedValidation();                                                                                          // 27\n      } else {                                                                                                         // 28\n        // Call the method. If a ddp connection was provided, use                                                      // 29\n        // that instead of the default Meteor connection                                                               // 30\n        var ddp = c.formAttributes.ddp;                                                                                // 31\n        if (ddp && ddp.call && typeof ddp.call === 'function') {                                                       // 32\n          ddp.call(c.formAttributes.meteormethod, doc, c.result);                                                      // 33\n        } else {                                                                                                       // 34\n          Meteor.call(c.formAttributes.meteormethod, doc, c.result);                                                   // 35\n        }                                                                                                              // 36\n      }                                                                                                                // 37\n    });                                                                                                                // 38\n  },                                                                                                                   // 39\n  validateForm: function () {                                                                                          // 40\n    // Get SimpleSchema                                                                                                // 41\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 42\n                                                                                                                       // 43\n    var collection = AutoForm.getFormCollection(this.form.id);                                                         // 44\n    // If there is a `schema` attribute but you want to force validation against the                                   // 45\n    // collection's schema instead, pass useCollectionSchema=true                                                      // 46\n    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;                                    // 47\n                                                                                                                       // 48\n    // Validate                                                                                                        // 49\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 50\n  },                                                                                                                   // 51\n  shouldPrevalidate: function () {                                                                                     // 52\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 53\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 54\n  }                                                                                                                    // 55\n});                                                                                                                    // 56\n                                                                                                                       // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/method-update.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('method-update', {                                                                                // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    if (!this.formAttributes.meteormethod) {                                                                           // 10\n      throw new Error('When form type is \"method-update\", you must also provide a \"meteormethod\" attribute');          // 11\n    }                                                                                                                  // 12\n                                                                                                                       // 13\n    // Run \"before.method\" hooks                                                                                       // 14\n    this.runBeforeHooks(this.updateDoc, function (updateDoc) {                                                         // 15\n      // Validate. If both schema and collection were provided, then we validate                                       // 16\n      // against the collection schema here. Otherwise we validate against whichever                                   // 17\n      // one was passed.                                                                                               // 18\n      var valid = (c.formAttributes.validation === 'none') ||                                                          // 19\n          c.formTypeDefinition.validateForm.call({                                                                     // 20\n            form: c.formAttributes,                                                                                    // 21\n            formDoc: updateDoc,                                                                                        // 22\n            useCollectionSchema: c.ssIsOverride                                                                        // 23\n          });                                                                                                          // 24\n                                                                                                                       // 25\n      if (valid === false) {                                                                                           // 26\n        c.failedValidation();                                                                                          // 27\n      } else {                                                                                                         // 28\n        // Call the method. If a ddp connection was provided, use                                                      // 29\n        // that instead of the default Meteor connection                                                               // 30\n        var ddp = c.formAttributes.ddp;                                                                                // 31\n        if (ddp && ddp.call && typeof ddp.call === 'function') {                                                       // 32\n          ddp.call(c.formAttributes.meteormethod, updateDoc, c.docId, c.result);                                       // 33\n        } else {                                                                                                       // 34\n          Meteor.call(c.formAttributes.meteormethod, updateDoc, c.docId, c.result);                                    // 35\n        }                                                                                                              // 36\n      }                                                                                                                // 37\n    });                                                                                                                // 38\n  },                                                                                                                   // 39\n  usesModifier: true,                                                                                                  // 40\n  validateForm: function () {                                                                                          // 41\n    // Get SimpleSchema                                                                                                // 42\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 43\n                                                                                                                       // 44\n    var collection = AutoForm.getFormCollection(this.form.id);                                                         // 45\n    // If there is a `schema` attribute but you want to force validation against the                                   // 46\n    // collection's schema instead, pass useCollectionSchema=true                                                      // 47\n    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;                                    // 48\n                                                                                                                       // 49\n    // We validate the modifier. We don't want to throw errors about missing required fields, etc.                     // 50\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);                                 // 51\n  },                                                                                                                   // 52\n  shouldPrevalidate: function () {                                                                                     // 53\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 54\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 55\n  }                                                                                                                    // 56\n});                                                                                                                    // 57\n                                                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/normal.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, Hooks */                                                                                           // 1\n                                                                                                                       // 2\nAutoForm.addFormType('normal', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Get onSubmit hooks                                                                                              // 7\n    // These are called differently from the before hooks because                                                      // 8\n    // they run async, but they can run in parallel and we need the                                                    // 9\n    // result of all of them immediately because they can return                                                       // 10\n    // false to stop normal form submission.                                                                           // 11\n    var hooks = Hooks.getHooks(this.formId, 'onSubmit');                                                               // 12\n                                                                                                                       // 13\n    var hookCount = hooks.length, doneCount = 0, submitError, submitResult;                                            // 14\n                                                                                                                       // 15\n    if (hookCount === 0) {                                                                                             // 16\n      // we haven't called preventDefault, so normal browser                                                           // 17\n      // submission will now happen                                                                                    // 18\n      this.endSubmission();                                                                                            // 19\n      return;                                                                                                          // 20\n    }                                                                                                                  // 21\n                                                                                                                       // 22\n    // Set up onSubmit hook context                                                                                    // 23\n    var ctx = _.extend({                                                                                               // 24\n      done: function (error, result) {                                                                                 // 25\n        doneCount++;                                                                                                   // 26\n        if (!submitError && error) {                                                                                   // 27\n          submitError = error;                                                                                         // 28\n        }                                                                                                              // 29\n        if (!submitResult && result) {                                                                                 // 30\n          submitResult = result;                                                                                       // 31\n        }                                                                                                              // 32\n        if (doneCount === hookCount) {                                                                                 // 33\n          // run onError, onSuccess, endSubmit                                                                         // 34\n          c.result(submitError, submitResult);                                                                         // 35\n        }                                                                                                              // 36\n      }                                                                                                                // 37\n    }, this.hookContext);                                                                                              // 38\n                                                                                                                       // 39\n    // Call all hooks at once.                                                                                         // 40\n    // Pass both types of doc plus the doc attached to the form.                                                       // 41\n    // If any return false, we stop normal submission, but we don't                                                    // 42\n    // run onError, onSuccess, endSubmit hooks until they all call this.done().                                        // 43\n    var shouldStop = false;                                                                                            // 44\n    _.each(hooks, function eachOnSubmit(hook) {                                                                        // 45\n      var result = hook.call(ctx, c.insertDoc, c.updateDoc, c.currentDoc);                                             // 46\n      if (shouldStop === false && result === false) {                                                                  // 47\n        shouldStop = true;                                                                                             // 48\n      }                                                                                                                // 49\n    });                                                                                                                // 50\n    if (shouldStop) {                                                                                                  // 51\n      this.event.preventDefault();                                                                                     // 52\n      this.event.stopPropagation();                                                                                    // 53\n      this.endSubmission();                                                                                            // 54\n    }                                                                                                                  // 55\n  },                                                                                                                   // 56\n  needsModifierAndDoc: true,                                                                                           // 57\n  validateForm: function () {                                                                                          // 58\n    // Get SimpleSchema                                                                                                // 59\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 60\n    // Validate                                                                                                        // 61\n    return AutoForm._validateFormDoc(this.formDoc.insertDoc, false, this.form.id, ss, this.form);                      // 62\n  }                                                                                                                    // 63\n});                                                                                                                    // 64\n                                                                                                                       // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/readonly.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('readonly', {                                                                                     // 3\n  onSubmit: function () {                                                                                              // 4\n    // Prevent browser form submission                                                                                 // 5\n    this.event.preventDefault();                                                                                       // 6\n    // Nothing else                                                                                                    // 7\n  },                                                                                                                   // 8\n  validateForm: function () {                                                                                          // 9\n    // Always valid                                                                                                    // 10\n    return true;                                                                                                       // 11\n  },                                                                                                                   // 12\n  adjustInputContext: function (ctx) {                                                                                 // 13\n    ctx.atts.readonly = \"\";                                                                                            // 14\n    return ctx;                                                                                                        // 15\n  },                                                                                                                   // 16\n  hideArrayItemButtons: true                                                                                           // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/formTypes/disabled.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('disabled', {                                                                                     // 3\n  onSubmit: function () {                                                                                              // 4\n    // Prevent browser form submission                                                                                 // 5\n    this.event.preventDefault();                                                                                       // 6\n    // Nothing else                                                                                                    // 7\n  },                                                                                                                   // 8\n  validateForm: function () {                                                                                          // 9\n    // Always valid                                                                                                    // 10\n    return true;                                                                                                       // 11\n  },                                                                                                                   // 12\n  adjustInputContext: function (ctx) {                                                                                 // 13\n    ctx.atts.disabled = \"\";                                                                                            // 14\n    return ctx;                                                                                                        // 15\n  },                                                                                                                   // 16\n  hideArrayItemButtons: true                                                                                           // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/value-converters.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * The conversion functions in this file can be used by input types to convert their outgoing values into the data type expected by the schema\n */                                                                                                                    // 3\n                                                                                                                       // 4\nAutoForm.valueConverters = {                                                                                           // 5\n  booleanToString: function booleanToString(val) {                                                                     // 6\n    if (val === true) {                                                                                                // 7\n      return \"TRUE\";                                                                                                   // 8\n    } else if (val === false) {                                                                                        // 9\n      return \"FALSE\";                                                                                                  // 10\n    }                                                                                                                  // 11\n    return val;                                                                                                        // 12\n  },                                                                                                                   // 13\n  booleanToStringArray: function booleanToStringArray(val) {                                                           // 14\n    if (val === true) {                                                                                                // 15\n      return [\"TRUE\"];                                                                                                 // 16\n    } else if (val === false) {                                                                                        // 17\n      return [\"FALSE\"];                                                                                                // 18\n    }                                                                                                                  // 19\n    return val;                                                                                                        // 20\n  },                                                                                                                   // 21\n  booleanToNumber: function booleanToNumber(val) {                                                                     // 22\n    if (val === true) {                                                                                                // 23\n      return 1;                                                                                                        // 24\n    } else if (val === false) {                                                                                        // 25\n      return 0;                                                                                                        // 26\n    }                                                                                                                  // 27\n    return val;                                                                                                        // 28\n  },                                                                                                                   // 29\n  booleanToNumberArray: function booleanToNumberArray(val) {                                                           // 30\n    if (val === true) {                                                                                                // 31\n      return [1];                                                                                                      // 32\n    } else if (val === false) {                                                                                        // 33\n      return [0];                                                                                                      // 34\n    }                                                                                                                  // 35\n    return val;                                                                                                        // 36\n  },                                                                                                                   // 37\n  /**                                                                                                                  // 38\n   * @method  AutoForm.valueConverters.dateToDateString                                                                // 39\n   * @private                                                                                                          // 40\n   * @param  {Date} date                                                                                               // 41\n   * @return {String}                                                                                                  // 42\n   *                                                                                                                   // 43\n   * Returns a \"valid date string\" representing the local date.                                                        // 44\n   */                                                                                                                  // 45\n  dateToDateString: function dateToDateString(val) {                                                                   // 46\n    return (val instanceof Date) ? moment(val).format(\"YYYY-MM-DD\") : val;                                             // 47\n  },                                                                                                                   // 48\n  /**                                                                                                                  // 49\n   * @method  AutoForm.valueConverters.dateToDateStringUTC                                                             // 50\n   * @private                                                                                                          // 51\n   * @param  {Date} date                                                                                               // 52\n   * @return {String}                                                                                                  // 53\n   *                                                                                                                   // 54\n   * Returns a \"valid date string\" representing the date converted to the UTC time zone.                               // 55\n   */                                                                                                                  // 56\n  dateToDateStringUTC: function dateToDateStringUTC(val) {                                                             // 57\n    return (val instanceof Date) ? moment.utc(val).format(\"YYYY-MM-DD\") : val;                                         // 58\n  },                                                                                                                   // 59\n  dateToDateStringUTCArray: function dateToDateStringUTCArray(val) {                                                   // 60\n    if (val instanceof Date) {                                                                                         // 61\n      return [AutoForm.valueConverters.dateToDateStringUTC(val)];                                                      // 62\n    }                                                                                                                  // 63\n    return val;                                                                                                        // 64\n  },                                                                                                                   // 65\n  /**                                                                                                                  // 66\n   * @method  AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString                                // 67\n   * @private                                                                                                          // 68\n   * @param  {Date} date                                                                                               // 69\n   * @return {String}                                                                                                  // 70\n   *                                                                                                                   // 71\n   * Returns a \"valid normalized forced-UTC global date and time string\" representing the time                         // 72\n   * converted to the UTC time zone and expressed as the shortest possible string for the given                        // 73\n   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).            // 74\n   *                                                                                                                   // 75\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string\n   */                                                                                                                  // 78\n  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(val) {   // 79\n    return (val instanceof Date) ? moment(val).utc().format(\"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\") : val;                     // 80\n  },                                                                                                                   // 81\n  dateToNormalizedForcedUtcGlobalDateAndTimeStringArray: function dateToNormalizedForcedUtcGlobalDateAndTimeStringArray(val) {\n    if (val instanceof Date) {                                                                                         // 83\n      return [AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];                         // 84\n    }                                                                                                                  // 85\n    return val;                                                                                                        // 86\n  },                                                                                                                   // 87\n  /**                                                                                                                  // 88\n   * @method AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString                                           // 89\n   * @private                                                                                                          // 90\n   * @param {Date} date The Date object                                                                                // 91\n   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., \"America/Los_Angeles\"     // 92\n   * @return {String}                                                                                                  // 93\n   *                                                                                                                   // 94\n   * Returns a \"valid normalized local date and time string\".                                                          // 95\n   */                                                                                                                  // 96\n  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {          // 97\n    var m = moment(date);                                                                                              // 98\n    // by default, we assume local timezone; add moment-timezone to app and pass timezoneId                            // 99\n    // to use a different timezone                                                                                     // 100\n    if (typeof timezoneId === \"string\") {                                                                              // 101\n      if (typeof m.tz !== \"function\") {                                                                                // 102\n        throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n      }                                                                                                                // 104\n      m.tz(timezoneId);                                                                                                // 105\n    }                                                                                                                  // 106\n    return m.format(\"YYYY-MM-DD[T]HH:mm:ss.SSS\");                                                                      // 107\n  },                                                                                                                   // 108\n  dateToNumber: function dateToNumber(val) {                                                                           // 109\n    return (val instanceof Date) ? val.getTime() : val;                                                                // 110\n  },                                                                                                                   // 111\n  dateToNumberArray: function dateToNumberArray(val) {                                                                 // 112\n    if (val instanceof Date) {                                                                                         // 113\n      return [val.getTime()];                                                                                          // 114\n    }                                                                                                                  // 115\n    return val;                                                                                                        // 116\n  },                                                                                                                   // 117\n  dateToDateArray: function dateToDateArray(val) {                                                                     // 118\n    if (val instanceof Date) {                                                                                         // 119\n      return [val];                                                                                                    // 120\n    }                                                                                                                  // 121\n    return val;                                                                                                        // 122\n  },                                                                                                                   // 123\n  stringToStringArray: function stringToStringArray(val) {                                                             // 124\n    if (typeof val === \"string\") {                                                                                     // 125\n      val = val.split(\",\");                                                                                            // 126\n      return _.map(val, function (item) {                                                                              // 127\n        return $.trim(item);                                                                                           // 128\n      });                                                                                                              // 129\n    }                                                                                                                  // 130\n    return val;                                                                                                        // 131\n  },                                                                                                                   // 132\n  /**                                                                                                                  // 133\n   * @method AutoForm.valueConverters.stringToNumber                                                                   // 134\n   * @public                                                                                                           // 135\n   * @param {String} val A string or null or undefined.                                                                // 136\n   * @return {Number|String} The string converted to a Number or the original value.                                   // 137\n   *                                                                                                                   // 138\n   * For strings, returns Number(val) unless the result is NaN. Otherwise returns val.                                 // 139\n   */                                                                                                                  // 140\n  stringToNumber: function stringToNumber(val) {                                                                       // 141\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 142\n      var numVal = Number(val);                                                                                        // 143\n      if (!isNaN(numVal)) {                                                                                            // 144\n        return numVal;                                                                                                 // 145\n      }                                                                                                                // 146\n    }                                                                                                                  // 147\n    return val;                                                                                                        // 148\n  },                                                                                                                   // 149\n  stringToNumberArray: function stringToNumberArray(val) {                                                             // 150\n    if (typeof val === \"string\") {                                                                                     // 151\n      val = val.split(\",\");                                                                                            // 152\n      return _.map(val, function (item) {                                                                              // 153\n        item = $.trim(item);                                                                                           // 154\n        return AutoForm.valueConverters.stringToNumber(item);                                                          // 155\n      });                                                                                                              // 156\n    }                                                                                                                  // 157\n    return val;                                                                                                        // 158\n  },                                                                                                                   // 159\n  /**                                                                                                                  // 160\n   * @method AutoForm.valueConverters.stringToBoolean                                                                  // 161\n   * @private                                                                                                          // 162\n   * @param {String} val A string or null or undefined.                                                                // 163\n   * @return {Boolean|String} The string converted to a Boolean.                                                       // 164\n   *                                                                                                                   // 165\n   * If the string is \"true\" or \"1\", returns `true`. If the string is \"false\" or \"0\", returns `false`. Otherwise returns the original string.\n   */                                                                                                                  // 167\n  stringToBoolean: function stringToBoolean(val) {                                                                     // 168\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 169\n      var lval = val.toLowerCase();                                                                                    // 170\n      if (lval === \"true\" || lval === \"1\") {                                                                           // 171\n        return true;                                                                                                   // 172\n      } else if (lval === \"false\" || lval === \"0\") {                                                                   // 173\n        return false;                                                                                                  // 174\n      }                                                                                                                // 175\n    }                                                                                                                  // 176\n    return val;                                                                                                        // 177\n  },                                                                                                                   // 178\n  stringToBooleanArray: function stringToBooleanArray(val) {                                                           // 179\n    if (typeof val === \"string\") {                                                                                     // 180\n      val = val.split(\",\");                                                                                            // 181\n      return _.map(val, function (item) {                                                                              // 182\n        item = $.trim(item);                                                                                           // 183\n        return AutoForm.valueConverters.stringToBoolean(item);                                                         // 184\n      });                                                                                                              // 185\n    }                                                                                                                  // 186\n    return val;                                                                                                        // 187\n  },                                                                                                                   // 188\n  /**                                                                                                                  // 189\n   * @method AutoForm.valueConverters.stringToDate                                                                     // 190\n   * @private                                                                                                          // 191\n   * @param {String} val A string or null or undefined.                                                                // 192\n   * @return {Date|String} The string converted to a Date instance.                                                    // 193\n   *                                                                                                                   // 194\n   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.\n   */                                                                                                                  // 196\n  stringToDate: function stringToDate(val) {                                                                           // 197\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 198\n      return new Date(val);                                                                                            // 199\n    }                                                                                                                  // 200\n    return val;                                                                                                        // 201\n  },                                                                                                                   // 202\n  stringToDateArray: function stringToDateArray(val) {                                                                 // 203\n    if (typeof val === \"string\") {                                                                                     // 204\n      val = val.split(\",\");                                                                                            // 205\n      return _.map(val, function (item) {                                                                              // 206\n        item = $.trim(item);                                                                                           // 207\n        return AutoForm.valueConverters.stringToDate(item);                                                            // 208\n      });                                                                                                              // 209\n    }                                                                                                                  // 210\n    return val;                                                                                                        // 211\n  },                                                                                                                   // 212\n  numberToString: function numberToString(val) {                                                                       // 213\n    if (typeof val === \"number\") {                                                                                     // 214\n      return val.toString();                                                                                           // 215\n    }                                                                                                                  // 216\n    return val;                                                                                                        // 217\n  },                                                                                                                   // 218\n  numberToStringArray: function numberToStringArray(val) {                                                             // 219\n    if (typeof val === \"number\") {                                                                                     // 220\n      return [val.toString()];                                                                                         // 221\n    }                                                                                                                  // 222\n    return val;                                                                                                        // 223\n  },                                                                                                                   // 224\n  numberToNumberArray: function numberToNumberArray(val) {                                                             // 225\n    if (typeof val === \"number\") {                                                                                     // 226\n      return [val];                                                                                                    // 227\n    }                                                                                                                  // 228\n    return val;                                                                                                        // 229\n  },                                                                                                                   // 230\n  numberToBoolean: function numberToBoolean(val) {                                                                     // 231\n    if (val === 0) {                                                                                                   // 232\n      return false;                                                                                                    // 233\n    } else if (val === 1) {                                                                                            // 234\n      return true;                                                                                                     // 235\n    }                                                                                                                  // 236\n    return val;                                                                                                        // 237\n  },                                                                                                                   // 238\n  numberToBooleanArray: function numberToBooleanArray(val) {                                                           // 239\n    if (val === 0) {                                                                                                   // 240\n      return [false];                                                                                                  // 241\n    } else if (val === 1) {                                                                                            // 242\n      return [true];                                                                                                   // 243\n    }                                                                                                                  // 244\n    return val;                                                                                                        // 245\n  }                                                                                                                    // 246\n};                                                                                                                     // 247\n                                                                                                                       // 248\n// BACKWARDS COMPATIBILITY - some of these were formerly on the Utility object                                         // 249\nUtility.dateToDateString = AutoForm.valueConverters.dateToDateString;                                                  // 250\nUtility.dateToDateStringUTC = AutoForm.valueConverters.dateToDateStringUTC;                                            // 251\nUtility.dateToNormalizedForcedUtcGlobalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString;\nUtility.dateToNormalizedLocalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString;      // 253\nUtility.stringToBool = AutoForm.valueConverters.stringToBoolean;                                                       // 254\nUtility.stringToNumber = AutoForm.valueConverters.stringToNumber;                                                      // 255\nUtility.stringToDate = AutoForm.valueConverters.stringToDate;                                                          // 256\n                                                                                                                       // 257\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-checkbox/template.boolean-checkbox.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckbox\");                                                                                    // 2\nTemplate[\"afCheckbox\"] = new Template(\"Template.afCheckbox\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5\n    type: \"checkbox\",                                                                                                  // 6\n    value: \"true\"                                                                                                      // 7\n  }, function() {                                                                                                      // 8\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 9\n  })), \" \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                         // 10\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 11\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 12\n    }));                                                                                                               // 13\n  })));                                                                                                                // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-checkbox/boolean-checkbox.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-checkbox\", {                                                                            // 1\n  template: \"afCheckbox\",                                                                                              // 2\n  valueOut: function () {                                                                                              // 3\n    return !!this.is(\":checked\");                                                                                      // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": AutoForm.valueConverters.booleanToString,                                                                // 7\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,                                                      // 8\n    \"number\": AutoForm.valueConverters.booleanToNumber,                                                                // 9\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray                                                       // 10\n  },                                                                                                                   // 11\n  contextAdjust: function (context) {                                                                                  // 12\n    if (context.value === true) {                                                                                      // 13\n      context.atts.checked = \"\";                                                                                       // 14\n    }                                                                                                                  // 15\n    //don't add required attribute to checkboxes because some browsers assume that to mean that it must be checked, which is not what we mean by \"required\"\n    delete context.atts.required;                                                                                      // 17\n    return context;                                                                                                    // 18\n  }                                                                                                                    // 19\n});                                                                                                                    // 20\n                                                                                                                       // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-radios/template.boolean-radios.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanRadioGroup\");                                                                           // 2\nTemplate[\"afBooleanRadioGroup\"] = new Template(\"Template.afBooleanRadioGroup\", (function() {                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 6\n  }), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                // 7\n    type: \"radio\",                                                                                                     // 8\n    value: \"false\",                                                                                                    // 9\n    name: function() {                                                                                                 // 10\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 11\n    }                                                                                                                  // 12\n  }, function() {                                                                                                      // 13\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));                                                           // 14\n  })), \" \", Spacebars.With(function() {                                                                                // 15\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));                                      // 16\n  }, function() {                                                                                                      // 17\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 18\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 19\n    });                                                                                                                // 20\n  }, function() {                                                                                                      // 21\n    return \"False\";                                                                                                    // 22\n  })), \"\\n    \"), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                    // 23\n    type: \"radio\",                                                                                                     // 24\n    value: \"true\",                                                                                                     // 25\n    name: function() {                                                                                                 // 26\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 27\n    }                                                                                                                  // 28\n  }, function() {                                                                                                      // 29\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));                                                            // 30\n  })), \" \", Spacebars.With(function() {                                                                                // 31\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));                                       // 32\n  }, function() {                                                                                                      // 33\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 34\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 35\n    });                                                                                                                // 36\n  }, function() {                                                                                                      // 37\n    return \"True\";                                                                                                     // 38\n  })), \"\\n    \"), \"\\n    \", Spacebars.With(function() {                                                                // 39\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));                                       // 40\n  }, function() {                                                                                                      // 41\n    return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                         // 42\n      type: \"radio\",                                                                                                   // 43\n      value: \"\",                                                                                                       // 44\n      name: function() {                                                                                               // 45\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"..\"), \"name\"));                                           // 46\n      }                                                                                                                // 47\n    }, function() {                                                                                                    // 48\n      return Spacebars.attrMustache(view.lookup(\"nullAtts\"));                                                          // 49\n    })), \" \", Blaze.View(\"lookup:.\", function() {                                                                      // 50\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 51\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 52\n  }), \"\\n  \");                                                                                                         // 53\n}));                                                                                                                   // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-radios/boolean-radios.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-radios\", {                                                                              // 1\n  template: \"afBooleanRadioGroup\",                                                                                     // 2\n  valueOut: function () {                                                                                              // 3\n    if (this.find('input[value=false]').is(\":checked\")) {                                                              // 4\n      return false;                                                                                                    // 5\n    } else if (this.find('input[value=true]').is(\":checked\")) {                                                        // 6\n      return true;                                                                                                     // 7\n    }                                                                                                                  // 8\n  },                                                                                                                   // 9\n  valueConverters: {                                                                                                   // 10\n    \"string\": AutoForm.valueConverters.booleanToString,                                                                // 11\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,                                                      // 12\n    \"number\": AutoForm.valueConverters.booleanToNumber,                                                                // 13\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray                                                       // 14\n  }                                                                                                                    // 15\n});                                                                                                                    // 16\n                                                                                                                       // 17\nTemplate.afBooleanRadioGroup.helpers({                                                                                 // 18\n  falseAtts: function falseAtts() {                                                                                    // 19\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 20\n    if (this.value === false) {                                                                                        // 21\n      atts.checked = \"\";                                                                                               // 22\n    }                                                                                                                  // 23\n    return atts;                                                                                                       // 24\n  },                                                                                                                   // 25\n  trueAtts: function trueAtts() {                                                                                      // 26\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 27\n    if (this.value === true) {                                                                                         // 28\n      atts.checked = \"\";                                                                                               // 29\n    }                                                                                                                  // 30\n    return atts;                                                                                                       // 31\n  },                                                                                                                   // 32\n  nullAtts: function nullAtts() {                                                                                      // 33\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 34\n    if (this.value !== true && this.value !== false) {                                                                 // 35\n      atts.checked = \"\";                                                                                               // 36\n    }                                                                                                                  // 37\n    return atts;                                                                                                       // 38\n  },                                                                                                                   // 39\n  dsk: function () {                                                                                                   // 40\n    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 41\n  }                                                                                                                    // 42\n});                                                                                                                    // 43\n                                                                                                                       // 44\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-select/template.boolean-select.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanSelect\");                                                                               // 2\nTemplate[\"afBooleanSelect\"] = new Template(\"Template.afBooleanSelect\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                             // 10\n      return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                                // 11\n    }), Blaze.View(\"lookup:..label\", function() {                                                                      // 12\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 13\n    })), \"\\n    \" ];                                                                                                   // 14\n  }), \"\\n  \");                                                                                                         // 15\n}));                                                                                                                   // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-select/boolean-select.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-select\", {                                                                              // 1\n  template: \"afBooleanSelect\",                                                                                         // 2\n  valueOut: function () {                                                                                              // 3\n    var val = this.val();                                                                                              // 4\n    if (val === \"true\") {                                                                                              // 5\n      return true;                                                                                                     // 6\n    } else if (val === \"false\") {                                                                                      // 7\n      return false;                                                                                                    // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  valueConverters: {                                                                                                   // 11\n    \"string\": AutoForm.valueConverters.booleanToString,                                                                // 12\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,                                                      // 13\n    \"number\": AutoForm.valueConverters.booleanToNumber,                                                                // 14\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray                                                       // 15\n  },                                                                                                                   // 16\n  contextAdjust: function (context) {                                                                                  // 17\n    var atts = _.omit(context.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'firstOption');                            // 18\n                                                                                                                       // 19\n    // build items list                                                                                                // 20\n    context.items = [                                                                                                  // 21\n      {                                                                                                                // 22\n        name: context.name,                                                                                            // 23\n        value: \"\",                                                                                                     // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: \"\",                                                                                                       // 28\n        selected: (context.value !== false && context.value !== true),                                                 // 29\n        label: context.atts.nullLabel || context.atts.firstOption || \"(Select One)\",                                   // 30\n        atts: atts                                                                                                     // 31\n      },                                                                                                               // 32\n      {                                                                                                                // 33\n        name: context.name,                                                                                            // 34\n        value: \"false\",                                                                                                // 35\n        // _id must be included because it is a special property that                                                  // 36\n        // #each uses to track unique list items when adding and removing them                                         // 37\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 38\n        _id: \"false\",                                                                                                  // 39\n        selected: (context.value === false),                                                                           // 40\n        label: context.atts.falseLabel || \"False\",                                                                     // 41\n        atts: atts                                                                                                     // 42\n      },                                                                                                               // 43\n      {                                                                                                                // 44\n        name: context.name,                                                                                            // 45\n        value: \"true\",                                                                                                 // 46\n        // _id must be included because it is a special property that                                                  // 47\n        // #each uses to track unique list items when adding and removing them                                         // 48\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 49\n        _id: \"true\",                                                                                                   // 50\n        selected: (context.value === true),                                                                            // 51\n        label: context.atts.trueLabel || \"True\",                                                                       // 52\n        atts: atts                                                                                                     // 53\n      }                                                                                                                // 54\n    ];                                                                                                                 // 55\n                                                                                                                       // 56\n    return context;                                                                                                    // 57\n  }                                                                                                                    // 58\n});                                                                                                                    // 59\n                                                                                                                       // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/button/template.button.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputButton\");                                                                                 // 2\nTemplate[\"afInputButton\"] = new Template(\"Template.afInputButton\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"button\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/button/button.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"button\", {                                                                                      // 1\n  template: \"afInputButton\"                                                                                            // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/color/template.color.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputColor\");                                                                                  // 2\nTemplate[\"afInputColor\"] = new Template(\"Template.afInputColor\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"color\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/color/color.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"color\", {                                                                                       // 1\n  template: \"afInputColor\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/contenteditable/template.contenteditable.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afContenteditable\");                                                                             // 2\nTemplate[\"afContenteditable\"] = new Template(\"Template.afContenteditable\", (function() {                               // 3\n  var view = this;                                                                                                     // 4\n  return [ Blaze.View(\"lookup:getValue\", function() {                                                                  // 5\n    return Spacebars.mustache(view.lookup(\"getValue\"), Spacebars.dot(view.lookup(\".\"), \"value\"));                      // 6\n  }), \"\\n  \", HTML.DIV(HTML.Attrs({                                                                                    // 7\n    contenteditable: \"true\"                                                                                            // 8\n  }, function() {                                                                                                      // 9\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 10\n  })) ];                                                                                                               // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/contenteditable/contenteditable.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"contenteditable\", {                                                                             // 1\n  template: \"afContenteditable\",                                                                                       // 2\n  valueOut: function () {                                                                                              // 3\n    return this.html();                                                                                                // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts['data-maxlength'] === \"undefined\" && typeof context.max === \"number\") {                    // 7\n      context.atts['data-maxlength'] = context.max;                                                                    // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\nTemplate.afContenteditable.events({                                                                                    // 14\n  'blur div[contenteditable=true]': function (event, template) {                                                       // 15\n    template.$(event.target).change();                                                                                 // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\nTemplate.afContenteditable.helpers({                                                                                   // 20\n  getValue: function (value) {                                                                                         // 21\n    if(Template.instance().view.isRendered){                                                                           // 22\n      Template.instance().$('[contenteditable]').html(value);                                                          // 23\n    }                                                                                                                  // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/date/template.date.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDate\");                                                                                   // 2\nTemplate[\"afInputDate\"] = new Template(\"Template.afInputDate\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"date\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/date/date.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"date\", {                                                                                        // 1\n  template: \"afInputDate\",                                                                                             // 2\n  valueIn: function (val) {                                                                                            // 3\n    //convert Date to string value                                                                                     // 4\n    return AutoForm.valueConverters.dateToDateStringUTC(val);                                                          // 5\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    if (AutoForm.Utility.isValidDateString(val)) {                                                                     // 9\n      //Date constructor will interpret val as UTC and create                                                          // 10\n      //date at mignight in the morning of val date in UTC time zone                                                   // 11\n      return new Date(val);                                                                                            // 12\n    } else {                                                                                                           // 13\n      return null;                                                                                                     // 14\n    }                                                                                                                  // 15\n  },                                                                                                                   // 16\n  valueConverters: {                                                                                                   // 17\n    \"string\": AutoForm.valueConverters.dateToDateStringUTC,                                                            // 18\n    \"stringArray\": AutoForm.valueConverters.dateToDateStringUTCArray,                                                  // 19\n    \"number\": AutoForm.valueConverters.dateToNumber,                                                                   // 20\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,                                                         // 21\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray                                                              // 22\n  },                                                                                                                   // 23\n  contextAdjust: function (context) {                                                                                  // 24\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 25\n      context.atts.max = AutoForm.valueConverters.dateToDateStringUTC(context.max);                                    // 26\n    }                                                                                                                  // 27\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 28\n      context.atts.min = AutoForm.valueConverters.dateToDateStringUTC(context.min);                                    // 29\n    }                                                                                                                  // 30\n    return context;                                                                                                    // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\n                                                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime/template.datetime.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTime\");                                                                               // 2\nTemplate[\"afInputDateTime\"] = new Template(\"Template.afInputDateTime\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime/datetime.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"datetime\", {                                                                                    // 1\n  template: \"afInputDateTime\",                                                                                         // 2\n  valueIn: function (val) {                                                                                            // 3\n    //convert Date to string value                                                                                     // 4\n    return AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val);                             // 5\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;                                                    // 9\n    if (AutoForm.Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString(val)) {                                     // 10\n      //Date constructor will interpret val as UTC due to ending \"Z\"                                                   // 11\n      return new Date(val);                                                                                            // 12\n    } else {                                                                                                           // 13\n      return null;                                                                                                     // 14\n    }                                                                                                                  // 15\n  },                                                                                                                   // 16\n  valueConverters: {                                                                                                   // 17\n    \"string\": AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString,                               // 18\n    \"stringArray\": AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeStringArray,                     // 19\n    \"number\": AutoForm.valueConverters.dateToNumber,                                                                   // 20\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,                                                         // 21\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray                                                              // 22\n  },                                                                                                                   // 23\n  contextAdjust: function (context) {                                                                                  // 24\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 25\n      context.atts.max = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.max);       // 26\n    }                                                                                                                  // 27\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 28\n      context.atts.min = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.min);       // 29\n    }                                                                                                                  // 30\n    return context;                                                                                                    // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\n                                                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime-local/template.datetime-local.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTimeLocal\");                                                                          // 2\nTemplate[\"afInputDateTimeLocal\"] = new Template(\"Template.afInputDateTimeLocal\", (function() {                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime-local\",                                                                                            // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime-local/datetime-local.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"datetime-local\", {                                                                              // 1\n  template: \"afInputDateTimeLocal\",                                                                                    // 2\n  valueIn: function (val, atts) {                                                                                      // 3\n    //convert Date to string value                                                                                     // 4\n    return (val instanceof Date) ? AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, atts.timezoneId) : val;\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;                                                    // 9\n    if (AutoForm.Utility.isValidNormalizedLocalDateAndTimeString(val)) {                                               // 10\n      var timezoneId = this.attr(\"data-timezone-id\");                                                                  // 11\n      // default is local, but if there's a timezoneId, we use that                                                    // 12\n      if (typeof timezoneId === \"string\") {                                                                            // 13\n        if (typeof moment.tz !== \"function\") {                                                                         // 14\n          throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n        }                                                                                                              // 16\n        return moment.tz(val, timezoneId).toDate();                                                                    // 17\n      } else {                                                                                                         // 18\n        return moment(val).toDate();                                                                                   // 19\n      }                                                                                                                // 20\n    } else {                                                                                                           // 21\n      return this.val();                                                                                               // 22\n    }                                                                                                                  // 23\n  },                                                                                                                   // 24\n  valueConverters: {                                                                                                   // 25\n    \"string\": function dateToNormalizedLocalDateAndTimeString(val) {                                                   // 26\n      return (val instanceof Date) ? AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\")) : val;\n    },                                                                                                                 // 28\n    \"stringArray\": function dateToNormalizedLocalDateAndTimeStringArray(val) {                                         // 29\n      if (val instanceof Date) {                                                                                       // 30\n        return [AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\"))];  // 31\n      }                                                                                                                // 32\n      return val;                                                                                                      // 33\n    },                                                                                                                 // 34\n    \"number\": AutoForm.valueConverters.dateToNumber,                                                                   // 35\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,                                                         // 36\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray                                                              // 37\n  },                                                                                                                   // 38\n  contextAdjust: function (context) {                                                                                  // 39\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 40\n      context.atts.max = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(context.max, context.atts.timezoneId);\n    }                                                                                                                  // 42\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 43\n      context.atts.min = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(context.min, context.atts.timezoneId);\n    }                                                                                                                  // 45\n    if (context.atts.timezoneId) {                                                                                     // 46\n      context.atts[\"data-timezone-id\"] = context.atts.timezoneId;                                                      // 47\n    }                                                                                                                  // 48\n    delete context.atts.timezoneId;                                                                                    // 49\n    return context;                                                                                                    // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 52\n                                                                                                                       // 53\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/email/template.email.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputEmail\");                                                                                  // 2\nTemplate[\"afInputEmail\"] = new Template(\"Template.afInputEmail\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"email\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/email/email.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"email\", {                                                                                       // 1\n  template: \"afInputEmail\",                                                                                            // 2\n  contextAdjust: function (context) {                                                                                  // 3\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 4\n      context.atts.maxlength = context.max;                                                                            // 5\n    }                                                                                                                  // 6\n    return context;                                                                                                    // 7\n  }                                                                                                                    // 8\n});                                                                                                                    // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/file/template.file.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputFile\");                                                                                   // 2\nTemplate[\"afInputFile\"] = new Template(\"Template.afInputFile\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"file\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/file/file.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"file\", {                                                                                        // 1\n  template: \"afInputFile\"                                                                                              // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/hidden/template.hidden.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputHidden\");                                                                                 // 2\nTemplate[\"afInputHidden\"] = new Template(\"Template.afInputHidden\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"hidden\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/hidden/hidden.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"hidden\", {                                                                                      // 1\n  template: \"afInputHidden\",                                                                                           // 2\n  isHidden: true,                                                                                                      // 3\n  valueOut: function () {                                                                                              // 4\n    return this.val();                                                                                                 // 5\n  },                                                                                                                   // 6\n  valueConverters: {                                                                                                   // 7\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,                                                       // 8\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 9\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 10\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 11\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,                                                     // 12\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 13\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray                                                            // 14\n  }                                                                                                                    // 15\n});                                                                                                                    // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/image/template.image.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputImage\");                                                                                  // 2\nTemplate[\"afInputImage\"] = new Template(\"Template.afInputImage\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"image\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/image/image.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"image\", {                                                                                       // 1\n  template: \"afInputImage\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/month/template.month.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputMonth\");                                                                                  // 2\nTemplate[\"afInputMonth\"] = new Template(\"Template.afInputMonth\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"month\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/month/month.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"month\", {                                                                                       // 1\n  template: \"afInputMonth\",                                                                                            // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  }                                                                                                                    // 5\n});                                                                                                                    // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/number/template.number.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputNumber\");                                                                                 // 2\nTemplate[\"afInputNumber\"] = new Template(\"Template.afInputNumber\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"number\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/number/number.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"number\", {                                                                                      // 1\n  template: \"afInputNumber\",                                                                                           // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.valueConverters.stringToNumber(this.val());                                                        // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": AutoForm.valueConverters.numberToString,                                                                 // 7\n    \"stringArray\": AutoForm.valueConverters.numberToStringArray,                                                       // 8\n    \"numberArray\": AutoForm.valueConverters.numberToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.numberToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.numberToBooleanArray                                                      // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    if (typeof context.atts.max === \"undefined\" && typeof context.max === \"number\") {                                  // 14\n      context.atts.max = context.max;                                                                                  // 15\n    }                                                                                                                  // 16\n    if (typeof context.atts.min === \"undefined\" && typeof context.min === \"number\") {                                  // 17\n      context.atts.min = context.min;                                                                                  // 18\n    }                                                                                                                  // 19\n    if (typeof context.atts.step === \"undefined\" && context.decimal) {                                                 // 20\n      context.atts.step = '0.01';                                                                                      // 21\n    }                                                                                                                  // 22\n    return context;                                                                                                    // 23\n  }                                                                                                                    // 24\n});                                                                                                                    // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/password/template.password.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputPassword\");                                                                               // 2\nTemplate[\"afInputPassword\"] = new Template(\"Template.afInputPassword\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"password\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/password/password.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"password\", {                                                                                    // 1\n  template: \"afInputPassword\",                                                                                         // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/radio/template.radio.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadio\");                                                                                       // 2\nTemplate[\"afRadio\"] = new Template(\"Template.afRadio\", (function() {                                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5\n    type: \"checkbox\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 11\n  })), \" \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                         // 12\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 13\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 14\n    }));                                                                                                               // 15\n  })));                                                                                                                // 16\n}));                                                                                                                   // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/radio/radio.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"radio\", {                                                                                       // 1\n  template: \"afRadio\",                                                                                                 // 2\n  valueOut: function () {                                                                                              // 3\n    if (this.is(\":checked\")) {                                                                                         // 4\n      return this.val();                                                                                               // 5\n    }                                                                                                                  // 6\n  },                                                                                                                   // 7\n  valueConverters: {                                                                                                   // 8\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n                                                                                                                       // 12\nTemplate[\"afRadio\"].helpers({                                                                                          // 13\n  atts: function selectedAttsAdjust() {                                                                                // 14\n    var atts = _.clone(this.atts);                                                                                     // 15\n    if (this.selected) {                                                                                               // 16\n      atts.checked = \"\";                                                                                               // 17\n    }                                                                                                                  // 18\n    return atts;                                                                                                       // 19\n  }                                                                                                                    // 20\n});                                                                                                                    // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/range/template.range.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputRange\");                                                                                  // 2\nTemplate[\"afInputRange\"] = new Template(\"Template.afInputRange\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"range\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/range/range.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"range\", {                                                                                       // 1\n  template: \"afInputRange\",                                                                                            // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.valueConverters.stringToNumber(this.val());                                                        // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": AutoForm.valueConverters.numberToString,                                                                 // 7\n    \"stringArray\": AutoForm.valueConverters.numberToStringArray,                                                       // 8\n    \"numberArray\": AutoForm.valueConverters.numberToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.numberToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.numberToBooleanArray                                                      // 11\n  }                                                                                                                    // 12\n});                                                                                                                    // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/reset/template.reset.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputReset\");                                                                                  // 2\nTemplate[\"afInputReset\"] = new Template(\"Template.afInputReset\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"reset\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/reset/reset.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"reset\", {                                                                                       // 1\n  template: \"afInputReset\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/search/template.search.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSearch\");                                                                                 // 2\nTemplate[\"afInputSearch\"] = new Template(\"Template.afInputSearch\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"search\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/search/search.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"search\", {                                                                                      // 1\n  template: \"afInputSearch\",                                                                                           // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select/template.select.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelect\");                                                                                      // 2\nTemplate[\"afSelect\"] = new Template(\"Template.afSelect\", (function() {                                                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 10\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 13\n        label: function() {                                                                                            // 14\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 15\n        }                                                                                                              // 16\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 17\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 20\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 21\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 22\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 23\n        })), \"\\n        \" ];                                                                                           // 24\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 25\n    }, function() {                                                                                                    // 26\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 27\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 28\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 29\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 30\n      })), \"\\n      \" ];                                                                                               // 31\n    }), \"\\n    \" ];                                                                                                    // 32\n  }), \"\\n  \");                                                                                                         // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select/select.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select\", {                                                                                      // 1\n  template: \"afSelect\",                                                                                                // 2\n  valueOut: function () {                                                                                              // 3\n    return this.val();                                                                                                 // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,                                                       // 7\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 8\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,                                                     // 11\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 12\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray                                                            // 13\n  },                                                                                                                   // 14\n  contextAdjust: function (context) {                                                                                  // 15\n    //can fix issues with some browsers selecting the firstOption instead of the selected option                       // 16\n    context.atts.autocomplete = \"off\";                                                                                 // 17\n                                                                                                                       // 18\n    var itemAtts = _.omit(context.atts, 'firstOption');                                                                // 19\n    var firstOption = context.atts.firstOption;                                                                        // 20\n                                                                                                                       // 21\n    // build items list                                                                                                // 22\n    context.items = [];                                                                                                // 23\n                                                                                                                       // 24\n    // If a firstOption was provided, add that to the items list first                                                 // 25\n    if (firstOption !== false) {                                                                                       // 26\n      context.items.push({                                                                                             // 27\n        name: context.name,                                                                                            // 28\n        label: (typeof firstOption === \"string\" ? firstOption : \"(Select One)\"),                                       // 29\n        value: \"\",                                                                                                     // 30\n        // _id must be included because it is a special property that                                                  // 31\n        // #each uses to track unique list items when adding and removing them                                         // 32\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 33\n        //                                                                                                             // 34\n        // Setting this to an empty string caused problems if option with value                                        // 35\n        // 1 was in the options list because Spacebars evaluates \"\" to 1 and                                           // 36\n        // considers that a duplicate.                                                                                 // 37\n        // See https://github.com/aldeed/meteor-autoform/issues/656                                                    // 38\n        _id: \"AUTOFORM_EMPTY_FIRST_OPTION\",                                                                            // 39\n        selected: false,                                                                                               // 40\n        atts: itemAtts                                                                                                 // 41\n      });                                                                                                              // 42\n    }                                                                                                                  // 43\n                                                                                                                       // 44\n    // Add all defined options                                                                                         // 45\n    _.each(context.selectOptions, function(opt) {                                                                      // 46\n      if (opt.optgroup) {                                                                                              // 47\n        var subItems = _.map(opt.options, function(subOpt) {                                                           // 48\n          return {                                                                                                     // 49\n            name: context.name,                                                                                        // 50\n            label: subOpt.label,                                                                                       // 51\n            value: subOpt.value,                                                                                       // 52\n            htmlAtts: _.omit(subOpt, 'label', 'value'),                                                                // 53\n            // _id must be included because it is a special property that                                              // 54\n            // #each uses to track unique list items when adding and removing them                                     // 55\n            // See https://github.com/meteor/meteor/issues/2174                                                        // 56\n            //                                                                                                         // 57\n            // The toString() is necessary because otherwise Spacebars evaluates                                       // 58\n            // any string to 1 if the other values are numbers, and then considers                                     // 59\n            // that a duplicate.                                                                                       // 60\n            // See https://github.com/aldeed/meteor-autoform/issues/656                                                // 61\n            _id: subOpt.value.toString(),                                                                              // 62\n            selected: (subOpt.value === context.value),                                                                // 63\n            atts: itemAtts                                                                                             // 64\n          };                                                                                                           // 65\n        });                                                                                                            // 66\n        context.items.push({                                                                                           // 67\n          optgroup: opt.optgroup,                                                                                      // 68\n          items: subItems                                                                                              // 69\n        });                                                                                                            // 70\n      } else {                                                                                                         // 71\n        context.items.push({                                                                                           // 72\n          name: context.name,                                                                                          // 73\n          label: opt.label,                                                                                            // 74\n          value: opt.value,                                                                                            // 75\n          htmlAtts: _.omit(opt, 'label', 'value'),                                                                     // 76\n          // _id must be included because it is a special property that                                                // 77\n          // #each uses to track unique list items when adding and removing them                                       // 78\n          // See https://github.com/meteor/meteor/issues/2174                                                          // 79\n          //                                                                                                           // 80\n          // The toString() is necessary because otherwise Spacebars evaluates                                         // 81\n          // any string to 1 if the other values are numbers, and then considers                                       // 82\n          // that a duplicate.                                                                                         // 83\n          // See https://github.com/aldeed/meteor-autoform/issues/656                                                  // 84\n          _id: opt.value.toString(),                                                                                   // 85\n          selected: (opt.value === context.value),                                                                     // 86\n          atts: itemAtts                                                                                               // 87\n        });                                                                                                            // 88\n      }                                                                                                                // 89\n    });                                                                                                                // 90\n                                                                                                                       // 91\n    return context;                                                                                                    // 92\n  }                                                                                                                    // 93\n});                                                                                                                    // 94\n                                                                                                                       // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox/template.select-checkbox.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroup\");                                                                               // 2\nTemplate[\"afCheckboxGroup\"] = new Template(\"Template.afCheckboxGroup\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                   // 12\n      type: \"checkbox\",                                                                                                // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    }))), \"\\n    \" ];                                                                                                  // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox/select-checkbox.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-checkbox\", {                                                                             // 1\n  template: \"afCheckboxGroup\",                                                                                         // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    var val = [];                                                                                                      // 5\n    this.find('input[type=checkbox]').each(function () {                                                               // 6\n      if ($(this).is(\":checked\")) {                                                                                    // 7\n        val.push($(this).val());                                                                                       // 8\n      }                                                                                                                // 9\n    });                                                                                                                // 10\n    return val;                                                                                                        // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    var itemAtts = _.omit(context.atts);                                                                               // 14\n                                                                                                                       // 15\n    // build items list                                                                                                // 16\n    context.items = [];                                                                                                // 17\n                                                                                                                       // 18\n    // Add all defined options                                                                                         // 19\n    _.each(context.selectOptions, function(opt) {                                                                      // 20\n      context.items.push({                                                                                             // 21\n        name: context.name,                                                                                            // 22\n        label: opt.label,                                                                                              // 23\n        value: opt.value,                                                                                              // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: opt.value,                                                                                                // 28\n        selected: (_.contains(context.value, opt.value)),                                                              // 29\n        atts: itemAtts                                                                                                 // 30\n      });                                                                                                              // 31\n    });                                                                                                                // 32\n                                                                                                                       // 33\n    return context;                                                                                                    // 34\n  }                                                                                                                    // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\nTemplate.afCheckboxGroup.helpers({                                                                                     // 38\n  atts: function selectedAttsAdjust() {                                                                                // 39\n    var atts = _.clone(this.atts);                                                                                     // 40\n    if (this.selected) {                                                                                               // 41\n      atts.checked = \"\";                                                                                               // 42\n    }                                                                                                                  // 43\n    // remove data-schema-key attribute because we put it                                                              // 44\n    // on the entire group                                                                                             // 45\n    delete atts[\"data-schema-key\"];                                                                                    // 46\n    return atts;                                                                                                       // 47\n  },                                                                                                                   // 48\n  dsk: function dsk() {                                                                                                // 49\n    return {                                                                                                           // 50\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 51\n    }                                                                                                                  // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroupInline\");                                                                         // 2\nTemplate[\"afCheckboxGroupInline\"] = new Template(\"Template.afCheckboxGroupInline\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                            // 12\n      type: \"checkbox\",                                                                                                // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    })), \"\\n    \" ];                                                                                                   // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox-inline/select-checkbox-inline.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-checkbox-inline\", {                                                                      // 1\n  template: \"afCheckboxGroupInline\",                                                                                   // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    var val = [];                                                                                                      // 5\n    this.find('input[type=checkbox]').each(function () {                                                               // 6\n      if ($(this).is(\":checked\")) {                                                                                    // 7\n        val.push($(this).val());                                                                                       // 8\n      }                                                                                                                // 9\n    });                                                                                                                // 10\n    return val;                                                                                                        // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    var itemAtts = _.omit(context.atts);                                                                               // 14\n                                                                                                                       // 15\n    // build items list                                                                                                // 16\n    context.items = [];                                                                                                // 17\n                                                                                                                       // 18\n    // Add all defined options                                                                                         // 19\n    _.each(context.selectOptions, function(opt) {                                                                      // 20\n      context.items.push({                                                                                             // 21\n        name: context.name,                                                                                            // 22\n        label: opt.label,                                                                                              // 23\n        value: opt.value,                                                                                              // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: opt.value,                                                                                                // 28\n        selected: (_.contains(context.value, opt.value)),                                                              // 29\n        atts: itemAtts                                                                                                 // 30\n      });                                                                                                              // 31\n    });                                                                                                                // 32\n                                                                                                                       // 33\n    return context;                                                                                                    // 34\n  }                                                                                                                    // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\nTemplate.afCheckboxGroupInline.helpers({                                                                               // 38\n  atts: function selectedAttsAdjust() {                                                                                // 39\n    var atts = _.clone(this.atts);                                                                                     // 40\n    if (this.selected) {                                                                                               // 41\n      atts.checked = \"\";                                                                                               // 42\n    }                                                                                                                  // 43\n    // remove data-schema-key attribute because we put it                                                              // 44\n    // on the entire group                                                                                             // 45\n    delete atts[\"data-schema-key\"];                                                                                    // 46\n    return atts;                                                                                                       // 47\n  },                                                                                                                   // 48\n  dsk: function dsk() {                                                                                                // 49\n    return {                                                                                                           // 50\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 51\n    };                                                                                                                 // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-multiple/template.select-multiple.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelectMultiple\");                                                                              // 2\nTemplate[\"afSelectMultiple\"] = new Template(\"Template.afSelectMultiple\", (function() {                                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs({                                                                                      // 5\n    multiple: \"\"                                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 12\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 15\n        label: function() {                                                                                            // 16\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 17\n        }                                                                                                              // 18\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 19\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 20\n      }, function() {                                                                                                  // 21\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 22\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 23\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 24\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 25\n        })), \"\\n        \" ];                                                                                           // 26\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 27\n    }, function() {                                                                                                    // 28\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 29\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 30\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 31\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 32\n      })), \"\\n      \" ];                                                                                               // 33\n    }), \"\\n    \" ];                                                                                                    // 34\n  }), \"\\n  \");                                                                                                         // 35\n}));                                                                                                                   // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-multiple/select-multiple.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-multiple\", {                                                                             // 1\n  template: \"afSelectMultiple\",                                                                                        // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    return AutoForm.Utility.getSelectValues(this[0]);                                                                  // 5\n  },                                                                                                                   // 6\n  contextAdjust: function (context) {                                                                                  // 7\n    // build items list                                                                                                // 8\n    context.items = _.map(context.selectOptions, function(opt) {                                                       // 9\n      if (opt.optgroup) {                                                                                              // 10\n        var subItems = _.map(opt.options, function(subOpt) {                                                           // 11\n          return {                                                                                                     // 12\n            name: context.name,                                                                                        // 13\n            label: subOpt.label,                                                                                       // 14\n            value: subOpt.value,                                                                                       // 15\n            htmlAtts: _.omit(subOpt, 'label', 'value'),                                                                // 16\n            // _id must be included because it is a special property that                                              // 17\n            // #each uses to track unique list items when adding and removing them                                     // 18\n            // See https://github.com/meteor/meteor/issues/2174                                                        // 19\n            _id: subOpt.value,                                                                                         // 20\n            selected: _.contains(context.value, subOpt.value),                                                         // 21\n            atts: context.atts                                                                                         // 22\n          };                                                                                                           // 23\n        });                                                                                                            // 24\n        return {                                                                                                       // 25\n          optgroup: opt.optgroup,                                                                                      // 26\n          items: subItems                                                                                              // 27\n        };                                                                                                             // 28\n      } else {                                                                                                         // 29\n        return {                                                                                                       // 30\n          name: context.name,                                                                                          // 31\n          label: opt.label,                                                                                            // 32\n          value: opt.value,                                                                                            // 33\n          htmlAtts: _.omit(opt, 'label', 'value'),                                                                     // 34\n          // _id must be included because it is a special property that                                                // 35\n          // #each uses to track unique list items when adding and removing them                                       // 36\n          // See https://github.com/meteor/meteor/issues/2174                                                          // 37\n          _id: opt.value,                                                                                              // 38\n          selected: _.contains(context.value, opt.value),                                                              // 39\n          atts: context.atts                                                                                           // 40\n        };                                                                                                             // 41\n      }                                                                                                                // 42\n    });                                                                                                                // 43\n                                                                                                                       // 44\n    return context;                                                                                                    // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio/template.select-radio.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroup\");                                                                                  // 2\nTemplate[\"afRadioGroup\"] = new Template(\"Template.afRadioGroup\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n  \", Blaze.Each(function() {                                                                                  // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                     // 12\n      type: \"radio\",                                                                                                   // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    }))), \"\\n  \" ];                                                                                                    // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio/select-radio.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-radio\", {                                                                                // 1\n  template: \"afRadioGroup\",                                                                                            // 2\n  valueOut: function () {                                                                                              // 3\n    return this.find('input[type=radio]:checked').val();                                                               // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    var itemAtts = _.omit(context.atts);                                                                               // 7\n                                                                                                                       // 8\n    // build items list                                                                                                // 9\n    context.items = [];                                                                                                // 10\n                                                                                                                       // 11\n    // Add all defined options                                                                                         // 12\n    _.each(context.selectOptions, function(opt) {                                                                      // 13\n      context.items.push({                                                                                             // 14\n        name: context.name,                                                                                            // 15\n        label: opt.label,                                                                                              // 16\n        value: opt.value,                                                                                              // 17\n        // _id must be included because it is a special property that                                                  // 18\n        // #each uses to track unique list items when adding and removing them                                         // 19\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 20\n        _id: opt.value,                                                                                                // 21\n        selected: (opt.value === context.value),                                                                       // 22\n        atts: itemAtts                                                                                                 // 23\n      });                                                                                                              // 24\n    });                                                                                                                // 25\n                                                                                                                       // 26\n    return context;                                                                                                    // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\nTemplate.afRadioGroup.helpers({                                                                                        // 31\n  atts: function selectedAttsAdjust() {                                                                                // 32\n    var atts = _.clone(this.atts);                                                                                     // 33\n    if (this.selected) {                                                                                               // 34\n      atts.checked = \"\";                                                                                               // 35\n    }                                                                                                                  // 36\n    // remove data-schema-key attribute because we put it                                                              // 37\n    // on the entire group                                                                                             // 38\n    delete atts[\"data-schema-key\"];                                                                                    // 39\n    return atts;                                                                                                       // 40\n  },                                                                                                                   // 41\n  dsk: function dsk() {                                                                                                // 42\n    return {                                                                                                           // 43\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 44\n    };                                                                                                                 // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio-inline/template.select-radio-inline.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroupInline\");                                                                            // 2\nTemplate[\"afRadioGroupInline\"] = new Template(\"Template.afRadioGroupInline\", (function() {                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n  \", Blaze.Each(function() {                                                                                  // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                              // 12\n      type: \"radio\",                                                                                                   // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    })), \"\\n  \" ];                                                                                                     // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio-inline/select-radio-inline.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-radio-inline\", {                                                                         // 1\n  template: \"afRadioGroupInline\",                                                                                      // 2\n  valueOut: function () {                                                                                              // 3\n    return this.find('input[type=radio]:checked').val();                                                               // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    var itemAtts = _.omit(context.atts);                                                                               // 7\n                                                                                                                       // 8\n    // build items list                                                                                                // 9\n    context.items = [];                                                                                                // 10\n                                                                                                                       // 11\n    // Add all defined options                                                                                         // 12\n    _.each(context.selectOptions, function(opt) {                                                                      // 13\n      context.items.push({                                                                                             // 14\n        name: context.name,                                                                                            // 15\n        label: opt.label,                                                                                              // 16\n        value: opt.value,                                                                                              // 17\n        // _id must be included because it is a special property that                                                  // 18\n        // #each uses to track unique list items when adding and removing them                                         // 19\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 20\n        _id: opt.value,                                                                                                // 21\n        selected: (opt.value === context.value),                                                                       // 22\n        atts: itemAtts                                                                                                 // 23\n      });                                                                                                              // 24\n    });                                                                                                                // 25\n                                                                                                                       // 26\n    return context;                                                                                                    // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\nTemplate.afRadioGroupInline.helpers({                                                                                  // 31\n  atts: function selectedAttsAdjust() {                                                                                // 32\n    var atts = _.clone(this.atts);                                                                                     // 33\n    if (this.selected) {                                                                                               // 34\n      atts.checked = \"\";                                                                                               // 35\n    }                                                                                                                  // 36\n    // remove data-schema-key attribute because we put it                                                              // 37\n    // on the entire group                                                                                             // 38\n    delete atts[\"data-schema-key\"];                                                                                    // 39\n    return atts;                                                                                                       // 40\n  },                                                                                                                   // 41\n  dsk: function dsk() {                                                                                                // 42\n    return {                                                                                                           // 43\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 44\n    };                                                                                                                 // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/submit/template.submit.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSubmit\");                                                                                 // 2\nTemplate[\"afInputSubmit\"] = new Template(\"Template.afInputSubmit\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"submit\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/submit/submit.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"submit\", {                                                                                      // 1\n  template: \"afInputSubmit\"                                                                                            // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/tel/template.tel.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTel\");                                                                                    // 2\nTemplate[\"afInputTel\"] = new Template(\"Template.afInputTel\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"tel\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/tel/tel.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"tel\", {                                                                                         // 1\n  template: \"afInputTel\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/text/template.text.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputText\");                                                                                   // 2\nTemplate[\"afInputText\"] = new Template(\"Template.afInputText\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"text\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/text/text.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"text\", {                                                                                        // 1\n  template: \"afInputText\",                                                                                             // 2\n  valueOut: function () {                                                                                              // 3\n    return this.val();                                                                                                 // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,                                                       // 7\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 8\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,                                                     // 11\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 12\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray                                                            // 13\n  },                                                                                                                   // 14\n  contextAdjust: function (context) {                                                                                  // 15\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 16\n      context.atts.maxlength = context.max;                                                                            // 17\n    }                                                                                                                  // 18\n    return context;                                                                                                    // 19\n  }                                                                                                                    // 20\n});                                                                                                                    // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/textarea/template.textarea.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afTextarea\");                                                                                    // 2\nTemplate[\"afTextarea\"] = new Template(\"Template.afTextarea\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }, {                                                                                                                 // 7\n    value: function() {                                                                                                // 8\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 9\n    }                                                                                                                  // 10\n  }));                                                                                                                 // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/textarea/textarea.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"textarea\", {                                                                                    // 1\n  template: \"afTextarea\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return linesToArray(val);                                                                                      // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    },                                                                                                                 // 9\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 10\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 11\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 12\n    \"booleanArray\": function (val) {                                                                                   // 13\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 14\n        var arr = linesToArray(val);                                                                                   // 15\n        return _.map(arr, function (item) {                                                                            // 16\n          return AutoForm.valueConverters.stringToBoolean(item);                                                       // 17\n        });                                                                                                            // 18\n      }                                                                                                                // 19\n      return val;                                                                                                      // 20\n    },                                                                                                                 // 21\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 22\n    \"dateArray\": function (val) {                                                                                      // 23\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 24\n        var arr = linesToArray(val);                                                                                   // 25\n        return _.map(arr, function (item) {                                                                            // 26\n          return AutoForm.valueConverters.stringToDate(item);                                                          // 27\n        });                                                                                                            // 28\n      }                                                                                                                // 29\n      return val;                                                                                                      // 30\n    }                                                                                                                  // 31\n  },                                                                                                                   // 32\n  contextAdjust: function (context) {                                                                                  // 33\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 34\n      context.atts.maxlength = context.max;                                                                            // 35\n    }                                                                                                                  // 36\n    return context;                                                                                                    // 37\n  }                                                                                                                    // 38\n});                                                                                                                    // 39\n                                                                                                                       // 40\nfunction linesToArray(text) {                                                                                          // 41\n  text = text.split('\\n');                                                                                             // 42\n  var lines = [];                                                                                                      // 43\n  _.each(text, function (line) {                                                                                       // 44\n    line = $.trim(line);                                                                                               // 45\n    if (line.length) {                                                                                                 // 46\n      lines.push(line);                                                                                                // 47\n    }                                                                                                                  // 48\n  });                                                                                                                  // 49\n  return lines;                                                                                                        // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/time/template.time.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTime\");                                                                                   // 2\nTemplate[\"afInputTime\"] = new Template(\"Template.afInputTime\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"time\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/time/time.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"time\", {                                                                                        // 1\n  template: \"afInputTime\",                                                                                             // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  }                                                                                                                    // 5\n});                                                                                                                    // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/url/template.url.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputUrl\");                                                                                    // 2\nTemplate[\"afInputUrl\"] = new Template(\"Template.afInputUrl\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"url\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/url/url.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"url\", {                                                                                         // 1\n  template: \"afInputUrl\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/week/template.week.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputWeek\");                                                                                   // 2\nTemplate[\"afInputWeek\"] = new Template(\"Template.afInputWeek\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"week\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/week/week.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"week\", {                                                                                        // 1\n  template: \"afInputWeek\",                                                                                             // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  }                                                                                                                    // 5\n});                                                                                                                    // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/autoForm/template.autoForm.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"autoForm\");                                                                                      // 2\nTemplate[\"autoForm\"] = new Template(\"Template.autoForm\", (function() {                                                 // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.Unless(function() {                                                                                     // 5\n    return Spacebars.dataMustache(view.lookup(\"afDestroyUpdateForm\"), Spacebars.dot(view.lookup(\".\"), \"id\"));          // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n  \\n  \\n  \", HTML.FORM(HTML.Attrs(function() {                                                         // 8\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 9\n    }), \"\\n    \", Blaze._InOuterTemplateScope(view, function() {                                                       // 10\n      return Blaze._TemplateWith(function() {                                                                          // 11\n        return Spacebars.call(view.lookup(\"..\"));                                                                      // 12\n      }, function() {                                                                                                  // 13\n        return Spacebars.include(function() {                                                                          // 14\n          return Spacebars.call(view.templateContentBlock);                                                            // 15\n        });                                                                                                            // 16\n      });                                                                                                              // 17\n    }), \"\\n  \"), \"\\n  \" ];                                                                                             // 18\n  });                                                                                                                  // 19\n}));                                                                                                                   // 20\n                                                                                                                       // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/autoForm/autoForm.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, ReactiveVar, arrayTracker, Hooks, MongoObject, Utility, setDefaults */                             // 1\n                                                                                                                       // 2\nTemplate.autoForm.helpers({                                                                                            // 3\n  atts: function autoFormTplAtts() {                                                                                   // 4\n    // After removing all of the props we know about, everything else should                                           // 5\n    // become a form attribute unless it's an array or object.                                                         // 6\n    var val, htmlAttributes = {}, context = this;                                                                      // 7\n    var removeProps = [                                                                                                // 8\n      \"schema\",                                                                                                        // 9\n      \"collection\",                                                                                                    // 10\n      \"validation\",                                                                                                    // 11\n      \"doc\",                                                                                                           // 12\n      \"resetOnSuccess\",                                                                                                // 13\n      \"type\",                                                                                                          // 14\n      \"template\",                                                                                                      // 15\n      \"autosave\",                                                                                                      // 16\n      \"autosaveOnKeyup\",                                                                                               // 17\n      \"meteormethod\",                                                                                                  // 18\n      \"filter\",                                                                                                        // 19\n      \"autoConvert\",                                                                                                   // 20\n      \"removeEmptyStrings\",                                                                                            // 21\n      \"trimStrings\"                                                                                                    // 22\n    ];                                                                                                                 // 23\n                                                                                                                       // 24\n    // Filter out any attributes that have a component prefix                                                          // 25\n    function hasComponentPrefix(prop) {                                                                                // 26\n      return _.any(Utility.componentTypeList, function (componentType) {                                               // 27\n        return prop.indexOf(componentType + '-') === 0;                                                                // 28\n      });                                                                                                              // 29\n    }                                                                                                                  // 30\n                                                                                                                       // 31\n    // Filter out arrays and objects, which are obviously not meant to be                                              // 32\n    // HTML attributes.                                                                                                // 33\n    for (var prop in context) {                                                                                        // 34\n      if (context.hasOwnProperty(prop) &&                                                                              // 35\n          !_.contains(removeProps, prop) &&                                                                            // 36\n          !hasComponentPrefix(prop)) {                                                                                 // 37\n        val = context[prop];                                                                                           // 38\n        if (!_.isArray(val) && !_.isObject(val)) {                                                                     // 39\n          htmlAttributes[prop] = val;                                                                                  // 40\n        }                                                                                                              // 41\n      }                                                                                                                // 42\n    }                                                                                                                  // 43\n                                                                                                                       // 44\n    // By default, we add the `novalidate=\"novalidate\"` attribute to our form,                                         // 45\n    // unless the user passes `validation=\"browser\"`.                                                                  // 46\n    if (this.validation !== \"browser\" && !htmlAttributes.novalidate) {                                                 // 47\n      htmlAttributes.novalidate = \"novalidate\";                                                                        // 48\n    }                                                                                                                  // 49\n                                                                                                                       // 50\n    return htmlAttributes;                                                                                             // 51\n  },                                                                                                                   // 52\n  afDestroyUpdateForm: function (formId) {                                                                             // 53\n    AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);                           // 54\n    return AutoForm._destroyForm[formId].get();                                                                        // 55\n  }                                                                                                                    // 56\n});                                                                                                                    // 57\n                                                                                                                       // 58\nTemplate.autoForm.created = function autoFormCreated() {                                                               // 59\n  var template = this;                                                                                                 // 60\n                                                                                                                       // 61\n  // We'll add tracker dependencies for reactive field values                                                          // 62\n  // to this object as necessary                                                                                       // 63\n  template.formValues = template.formValues || {};                                                                     // 64\n                                                                                                                       // 65\n  // We'll store \"sticky\" errors here. These are errors added                                                          // 66\n  // manually based on server validation, which we don't want to                                                       // 67\n  // be wiped out by further client validation.                                                                        // 68\n  template._stickyErrors = {};                                                                                         // 69\n                                                                                                                       // 70\n  template.autorun(function (c) {                                                                                      // 71\n    var data = Template.currentData(); // rerun when current data changes                                              // 72\n    var formId = data.id;                                                                                              // 73\n                                                                                                                       // 74\n    if (!formId) {                                                                                                     // 75\n      throw new Error('Every autoForm and quickForm must have an \"id\" attribute set to a unique string.');             // 76\n    }                                                                                                                  // 77\n                                                                                                                       // 78\n    // When we change the form, loading a different doc, reloading the current doc, etc.,                              // 79\n    // we also want to reset the array counts for the form                                                             // 80\n    arrayTracker.resetForm(formId);                                                                                    // 81\n                                                                                                                       // 82\n    data = setDefaults(data);                                                                                          // 83\n                                                                                                                       // 84\n    // Clone the doc so that docToForm and other modifications do not change                                           // 85\n    // the original referenced object.                                                                                 // 86\n    var doc = data.doc ? EJSON.clone(data.doc) : null;                                                                 // 87\n                                                                                                                       // 88\n    // Update cached form values for hot code reload persistence                                                       // 89\n    if (data.preserveForm === false) {                                                                                 // 90\n      AutoForm.formPreserve.unregisterForm(formId);                                                                    // 91\n    } else {                                                                                                           // 92\n      // Even if we have already registered, we reregister to ensure that the                                          // 93\n      // closure values of template, formId, and ss remain correct after each                                          // 94\n      // reaction                                                                                                      // 95\n      AutoForm.formPreserve.registerForm(formId, function autoFormRegFormCallback() {                                  // 96\n        return AutoForm.getFormValues(formId, template, data._resolvedSchema, false);                                  // 97\n      });                                                                                                              // 98\n    }                                                                                                                  // 99\n                                                                                                                       // 100\n    // Retain doc values after a \"hot code push\", if possible                                                          // 101\n    if (c.firstRun) {                                                                                                  // 102\n      var retrievedDoc = AutoForm.formPreserve.getDocument(formId);                                                    // 103\n      if (retrievedDoc !== false) {                                                                                    // 104\n        // Ensure we keep the _id property which may not be present in retrievedDoc.                                   // 105\n        doc = _.extend(doc || {}, retrievedDoc || {});                                                                 // 106\n      }                                                                                                                // 107\n    }                                                                                                                  // 108\n                                                                                                                       // 109\n    var mDoc;                                                                                                          // 110\n    if (doc && !_.isEmpty(doc)) {                                                                                      // 111\n      var hookCtx = {formId: formId};                                                                                  // 112\n      // Pass doc through docToForm hooks                                                                              // 113\n      _.each(Hooks.getHooks(formId, 'docToForm'), function autoFormEachDocToForm(hook) {                               // 114\n        doc = hook.call(hookCtx, doc, data._resolvedSchema);                                                           // 115\n        if (!doc) {                                                                                                    // 116\n          throw new Error('Oops! Did you forget to return the modified document from your docToForm hook for the ' + formId + ' form?');\n        }                                                                                                              // 118\n      });                                                                                                              // 119\n                                                                                                                       // 120\n      // Create a \"flat doc\" that can be used to easily get values for corresponding                                   // 121\n      // form fields.                                                                                                  // 122\n      mDoc = new MongoObject(doc);                                                                                     // 123\n      AutoForm.reactiveFormData.sourceDoc(formId, mDoc);                                                               // 124\n    } else {                                                                                                           // 125\n      AutoForm.reactiveFormData.sourceDoc(formId, null);                                                               // 126\n    }                                                                                                                  // 127\n  });                                                                                                                  // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\nTemplate.autoForm.rendered = function autoFormRendered() {                                                             // 131\n  var lastId;                                                                                                          // 132\n  this.autorun(function () {                                                                                           // 133\n    var data = Template.currentData(); // rerun when current data changes                                              // 134\n                                                                                                                       // 135\n    if (data.id === lastId) return;                                                                                    // 136\n    lastId = data.id;                                                                                                  // 137\n                                                                                                                       // 138\n    AutoForm.triggerFormRenderedDestroyedReruns(data.id);                                                              // 139\n  });                                                                                                                  // 140\n};                                                                                                                     // 141\n                                                                                                                       // 142\nTemplate.autoForm.destroyed = function autoFormDestroyed() {                                                           // 143\n  var self = this;                                                                                                     // 144\n  var formId = self.data.id;                                                                                           // 145\n                                                                                                                       // 146\n  // TODO if formId was changing reactively during life of instance,                                                   // 147\n  // some data won't be removed by the calls below.                                                                    // 148\n                                                                                                                       // 149\n  // Remove from array fields list                                                                                     // 150\n  arrayTracker.untrackForm(formId);                                                                                    // 151\n                                                                                                                       // 152\n  // Unregister form preservation                                                                                      // 153\n  AutoForm.formPreserve.unregisterForm(formId);                                                                        // 154\n                                                                                                                       // 155\n  // Trigger value reruns                                                                                              // 156\n  AutoForm.triggerFormRenderedDestroyedReruns(formId);                                                                 // 157\n};                                                                                                                     // 158\n                                                                                                                       // 159\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/quickForm/template.quickForm.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm\");                                                                                     // 2\nTemplate[\"quickForm\"] = new Template(\"Template.quickForm\", (function() {                                               // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/quickForm/quickForm.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.quickForm.helpers({                                                                                           // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('quickForm', this.template);                                                       // 5\n  },                                                                                                                   // 6\n  innerContext: function quickFormContext() {                                                                          // 7\n    var atts = this;                                                                                                   // 8\n    var adjustedData = AutoForm.parseData(_.clone(this));                                                              // 9\n    var simpleSchema = adjustedData._resolvedSchema;                                                                   // 10\n    var sortedSchema = {};                                                                                             // 11\n    var fieldGroups = [];                                                                                              // 12\n    var grouplessFieldContext;                                                                                         // 13\n                                                                                                                       // 14\n    // --------------- A. Schema --------------- //                                                                    // 15\n                                                                                                                       // 16\n    var fieldList = atts.fields;                                                                                       // 17\n    if (fieldList) {                                                                                                   // 18\n      fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n                                                                                                                       // 20\n      // get the schema object, but sorted into the same order as the field list                                       // 21\n      fieldList.forEach(function (fieldName) {                                                                         // 22\n        sortedSchema[fieldName] = simpleSchema.schema(fieldName);                                                      // 23\n      });                                                                                                              // 24\n    } else {                                                                                                           // 25\n      sortedSchema = simpleSchema.schema();                                                                            // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    // --------------- B. Field With No Groups --------------- //                                                      // 29\n                                                                                                                       // 30\n    var grouplessFields = getFieldsWithNoGroup(sortedSchema);                                                          // 31\n    if (grouplessFields.length > 0) {                                                                                  // 32\n      grouplessFieldContext = {                                                                                        // 33\n        atts: _.extend({}, atts, {fields: grouplessFields}),                                                           // 34\n        fields: grouplessFields                                                                                        // 35\n      };                                                                                                               // 36\n    }                                                                                                                  // 37\n                                                                                                                       // 38\n    // --------------- C. Field With Groups --------------- //                                                         // 39\n                                                                                                                       // 40\n    // get sorted list of field groups                                                                                 // 41\n    var fieldGroupNames = getSortedFieldGroupNames(sortedSchema);                                                      // 42\n                                                                                                                       // 43\n    // Loop through the list and make a field group context for each                                                   // 44\n    _.each(fieldGroupNames, function (fieldGroupName) {                                                                // 45\n      var fieldsForGroup = getFieldsForGroup(fieldGroupName, sortedSchema);                                            // 46\n                                                                                                                       // 47\n      if (fieldsForGroup.length > 0) {                                                                                 // 48\n        fieldGroups.push({                                                                                             // 49\n          name: fieldGroupName,                                                                                        // 50\n          atts: _.extend({}, atts, {fields: fieldsForGroup}),                                                          // 51\n          fields: fieldsForGroup                                                                                       // 52\n        });                                                                                                            // 53\n      }                                                                                                                // 54\n    });                                                                                                                // 55\n                                                                                                                       // 56\n    // --------------- D. Context --------------- //                                                                   // 57\n                                                                                                                       // 58\n    // Pass along quickForm context to autoForm context, minus a few                                                   // 59\n    // properties that are specific to quickForms.                                                                     // 60\n    var qfAutoFormContext = _.omit(atts,                                                                               // 61\n                                   'buttonContent',                                                                    // 62\n                                   'buttonClasses',                                                                    // 63\n                                   'fields',                                                                           // 64\n                                   'omitFields',                                                                       // 65\n                                   'id-prefix');                                                                       // 66\n                                                                                                                       // 67\n    // Determine whether we want to render a submit button                                                             // 68\n    var qfShouldRenderButton = (atts.buttonContent !== false && atts.type !== 'readonly' && atts.type !== 'disabled'); // 69\n                                                                                                                       // 70\n    var context = {                                                                                                    // 71\n      qfAutoFormContext: qfAutoFormContext,                                                                            // 72\n      atts: atts,                                                                                                      // 73\n      qfShouldRenderButton: qfShouldRenderButton,                                                                      // 74\n      fieldGroups: fieldGroups,                                                                                        // 75\n      grouplessFields: grouplessFieldContext                                                                           // 76\n    };                                                                                                                 // 77\n    return context;                                                                                                    // 78\n  }                                                                                                                    // 79\n});                                                                                                                    // 80\n                                                                                                                       // 81\n/* Private Functions */                                                                                                // 82\n                                                                                                                       // 83\n/**                                                                                                                    // 84\n * Takes a schema object and returns a sorted array of field group names for it                                        // 85\n *                                                                                                                     // 86\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 87\n * @returns {String[]} Array of field group names                                                                      // 88\n */                                                                                                                    // 89\nfunction getSortedFieldGroupNames(schemaObj) {                                                                         // 90\n  var names = _.map(schemaObj, function (field) {                                                                      // 91\n    return field.autoform && field.autoform.group;                                                                     // 92\n  });                                                                                                                  // 93\n                                                                                                                       // 94\n  // Remove undefined                                                                                                  // 95\n  names = _.compact(names);                                                                                            // 96\n                                                                                                                       // 97\n  // Remove duplicate names                                                                                            // 98\n  names = _.unique(names);                                                                                             // 99\n                                                                                                                       // 100\n  return names.sort();                                                                                                 // 101\n}                                                                                                                      // 102\n                                                                                                                       // 103\n/**                                                                                                                    // 104\n * Returns the schema field names that belong in the group.                                                            // 105\n *                                                                                                                     // 106\n * @param   {String}   groupName The group name                                                                        // 107\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 108\n * @returns {String[]} Array of field names (schema keys)                                                              // 109\n */                                                                                                                    // 110\nfunction getFieldsForGroup(groupName, schemaObj) {                                                                     // 111\n  var fields = _.map(schemaObj, function (field, fieldName) {                                                          // 112\n    return (fieldName.slice(-2) !== '.$') &&                                                                           // 113\n      field.autoform &&                                                                                                // 114\n      field.autoform.group === groupName &&                                                                            // 115\n      fieldName;                                                                                                       // 116\n  });                                                                                                                  // 117\n                                                                                                                       // 118\n  // Remove undefined                                                                                                  // 119\n  fields = _.compact(fields);                                                                                          // 120\n                                                                                                                       // 121\n  return fields;                                                                                                       // 122\n}                                                                                                                      // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * Returns the schema field names that don't belong to a group                                                         // 126\n *                                                                                                                     // 127\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 128\n * @returns {String[]} Array of field names (schema keys)                                                              // 129\n */                                                                                                                    // 130\nfunction getFieldsWithNoGroup(schemaObj) {                                                                             // 131\n  var fields = _.map(schemaObj, function (field, fieldName) {                                                          // 132\n    return (fieldName.slice(-2) !== '.$') &&                                                                           // 133\n      (!field.autoform || !field.autoform.group) &&                                                                    // 134\n      fieldName;                                                                                                       // 135\n  });                                                                                                                  // 136\n                                                                                                                       // 137\n  // Remove undefined                                                                                                  // 138\n  fields = _.compact(fields);                                                                                          // 139\n                                                                                                                       // 140\n  return fields;                                                                                                       // 141\n}                                                                                                                      // 142\n                                                                                                                       // 143\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afArrayField/template.afArrayField.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField\");                                                                                  // 2\nTemplate[\"afArrayField\"] = new Template(\"Template.afArrayField\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afArrayField/afArrayField.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, arrayTracker */                                                                                    // 1\n                                                                                                                       // 2\nTemplate.afArrayField.helpers({                                                                                        // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('afArrayField', this.template, this.name);                                         // 5\n  },                                                                                                                   // 6\n  innerContext: function afArrayFieldContext() {                                                                       // 7\n    var c = AutoForm.Utility.getComponentContext(this, \"afArrayField\");                                                // 8\n    var name = c.atts.name;                                                                                            // 9\n    var fieldMinCount = c.atts.minCount || 0;                                                                          // 10\n    var fieldMaxCount = c.atts.maxCount || Infinity;                                                                   // 11\n    var ss = AutoForm.getFormSchema();                                                                                 // 12\n    var formId = AutoForm.getFormId();                                                                                 // 13\n                                                                                                                       // 14\n    // Init the array tracking for this field                                                                          // 15\n    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);                                                // 16\n    if (docCount === undefined) {                                                                                      // 17\n      docCount = c.atts.initialCount;                                                                                  // 18\n    }                                                                                                                  // 19\n    arrayTracker.initField(formId, name, ss, docCount, fieldMinCount, fieldMaxCount);                                  // 20\n                                                                                                                       // 21\n    return {                                                                                                           // 22\n      atts: c.atts                                                                                                     // 23\n    };                                                                                                                 // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afEachArrayItem/template.afEachArrayItem.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afEachArrayItem\");                                                                               // 2\nTemplate[\"afEachArrayItem\"] = new Template(\"Template.afEachArrayItem\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return [ \"\\n  \", Spacebars.With(function() {                                                                         // 5\n    return Spacebars.call(view.lookup(\"innerContext\"));                                                                // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n    \", Blaze.Each(function() {                                                                         // 8\n      return Spacebars.call(view.lookup(\".\"));                                                                         // 9\n    }, function() {                                                                                                    // 10\n      return [ \"\\n    \", Blaze.If(function() {                                                                         // 11\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"removed\"));                                             // 12\n      }, function() {                                                                                                  // 13\n        return [ \"\\n    \", HTML.INPUT({                                                                                // 14\n          type: \"hidden\",                                                                                              // 15\n          name: function() {                                                                                           // 16\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                        // 17\n          },                                                                                                           // 18\n          \"data-schema-key\": function() {                                                                              // 19\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                        // 20\n          },                                                                                                           // 21\n          \"data-null-value\": \"true\",                                                                                   // 22\n          value: \"\"                                                                                                    // 23\n        }), \"\\n    \" ];                                                                                                // 24\n      }, function() {                                                                                                  // 25\n        return [ \"\\n    \", Blaze._InOuterTemplateScope(view, function() {                                              // 26\n          return Blaze._TemplateWith(function() {                                                                      // 27\n            return Spacebars.call(view.lookup(\".\"));                                                                   // 28\n          }, function() {                                                                                              // 29\n            return Spacebars.include(function() {                                                                      // 30\n              return Spacebars.call(view.templateContentBlock);                                                        // 31\n            });                                                                                                        // 32\n          });                                                                                                          // 33\n        }), \"\\n    \" ];                                                                                                // 34\n      }), \"\\n    \" ];                                                                                                  // 35\n    }), \"\\n  \" ];                                                                                                      // 36\n  }) ];                                                                                                                // 37\n}));                                                                                                                   // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afEachArrayItem/afEachArrayItem.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, arrayTracker */                                                                                    // 1\n                                                                                                                       // 2\nTemplate.afEachArrayItem.helpers({                                                                                     // 3\n  innerContext: function afEachArrayItemContext() {                                                                    // 4\n    var c = AutoForm.Utility.getComponentContext(this, \"afEachArrayItem\");                                             // 5\n    var formId = AutoForm.getFormId();                                                                                 // 6\n    var ss = AutoForm.getFormSchema();                                                                                 // 7\n    var name = c.atts.name;                                                                                            // 8\n                                                                                                                       // 9\n    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);                                                // 10\n    if (docCount === undefined) {                                                                                      // 11\n      docCount = c.atts.initialCount;                                                                                  // 12\n    }                                                                                                                  // 13\n    arrayTracker.initField(formId, name, ss, docCount, c.atts.minCount, c.atts.maxCount);                              // 14\n                                                                                                                       // 15\n    return arrayTracker.getField(formId, name);                                                                        // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFieldInput/template.afFieldInput.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFieldInput\");                                                                                  // 2\nTemplate[\"afFieldInput\"] = new Template(\"Template.afFieldInput\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFieldInput/afFieldInput.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, getInputValue, getInputData, updateTrackedFieldValue */                                            // 1\n                                                                                                                       // 2\nTemplate.afFieldInput.helpers({                                                                                        // 3\n  // similar to AutoForm.getTemplateName, but we have fewer layers of fallback, and we fall back                       // 4\n  // lastly to a template without an _ piece at the end                                                                // 5\n  getTemplateName: function getTemplateName() {                                                                        // 6\n    var self = this;                                                                                                   // 7\n                                                                                                                       // 8\n    // Determine what `type` attribute should be if not set                                                            // 9\n    var inputType = AutoForm.getInputType(this);                                                                       // 10\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                      // 11\n    if (!componentDef) {                                                                                               // 12\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');               // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    var inputTemplateName = componentDef.template;                                                                     // 16\n    var styleTemplateName = this.template;                                                                             // 17\n                                                                                                                       // 18\n    // We skip the check for existence here so that we can get the `_plain` string                                     // 19\n    // even though they don't exist.                                                                                   // 20\n    var templateName = AutoForm.getTemplateName(inputTemplateName, styleTemplateName, self.name, true);                // 21\n                                                                                                                       // 22\n    // Special case: the built-in \"plain\" template uses the basic input templates for                                  // 23\n    // everything, so if we found _plain, we use inputTemplateName instead                                             // 24\n    if (templateName.indexOf('_plain') !== -1) {                                                                       // 25\n      templateName = null;                                                                                             // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    // If no override templateName found, use the exact name from the input type definition                            // 29\n    if (!templateName || !Template[templateName]) {                                                                    // 30\n      templateName = inputTemplateName;                                                                                // 31\n    }                                                                                                                  // 32\n                                                                                                                       // 33\n    return templateName;                                                                                               // 34\n  },                                                                                                                   // 35\n  innerContext: function afFieldInputContext() {                                                                       // 36\n    var c = AutoForm.Utility.getComponentContext(this, \"afFieldInput\");                                                // 37\n    var form = AutoForm.getCurrentDataForForm();                                                                       // 38\n    var formId = form.id;                                                                                              // 39\n    var ss = AutoForm.getFormSchema();                                                                                 // 40\n    var defs = c.defs;                                                                                                 // 41\n                                                                                                                       // 42\n    // Get schema default value.                                                                                       // 43\n    // We must do this before adjusting defs for arrays.                                                               // 44\n    var schemaDefaultValue = defs.defaultValue;                                                                        // 45\n                                                                                                                       // 46\n    // Adjust for array fields if necessary                                                                            // 47\n    if (defs.type === Array) {                                                                                         // 48\n      defs = ss.schema(c.atts.name + \".$\");                                                                            // 49\n    }                                                                                                                  // 50\n                                                                                                                       // 51\n    // Determine what `type` attribute should be if not set                                                            // 52\n    var inputType = AutoForm.getInputType(this);                                                                       // 53\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                      // 54\n    if (!componentDef) {                                                                                               // 55\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');               // 56\n    }                                                                                                                  // 57\n                                                                                                                       // 58\n    // Get reactive mDoc                                                                                               // 59\n    var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);                                                            // 60\n                                                                                                                       // 61\n    // Get input value                                                                                                 // 62\n    var value = getInputValue(c.atts, c.atts.value, mDoc, schemaDefaultValue, c.atts.defaultValue, componentDef);      // 63\n                                                                                                                       // 64\n    // Mark field value as changed for reactive updates                                                                // 65\n    // We need to defer this until the element will be                                                                 // 66\n    // added to the DOM. Otherwise, AutoForm.getFieldValue                                                             // 67\n    // will not pick up the new value when there are #if etc.                                                          // 68\n    // blocks involved.                                                                                                // 69\n    // See https://github.com/aldeed/meteor-autoform/issues/461                                                        // 70\n    var template = AutoForm.templateInstanceForForm();                                                                 // 71\n    if (template.view.isRendered) {                                                                                    // 72\n      // No need to do this on first run because we'll rerun the value functions                                       // 73\n      // once the form is rendered anyway                                                                              // 74\n      updateTrackedFieldValue(template, c.atts.name);                                                                  // 75\n    }                                                                                                                  // 76\n                                                                                                                       // 77\n    // Build input data context                                                                                        // 78\n    var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), form.type);                                   // 79\n                                                                                                                       // 80\n    // Adjust and return context                                                                                       // 81\n    return (typeof componentDef.contextAdjust === \"function\") ? componentDef.contextAdjust(iData) : iData;             // 82\n  }                                                                                                                    // 83\n});                                                                                                                    // 84\n                                                                                                                       // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFormGroup/template.afFormGroup.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup\");                                                                                   // 2\nTemplate[\"afFormGroup\"] = new Template(\"Template.afFormGroup\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFormGroup/afFormGroup.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afFormGroup.helpers({                                                                                         // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('afFormGroup', this.template, this.name);                                          // 5\n  },                                                                                                                   // 6\n  innerContext: function afFormGroupContext() {                                                                        // 7\n    var c = AutoForm.Utility.getComponentContext(this, 'afFormGroup');                                                 // 8\n    var afFormGroupAtts = formGroupAtts(c.atts);                                                                       // 9\n    var afFieldLabelAtts = formGroupLabelAtts(c.atts);                                                                 // 10\n    var afFieldInputAtts = formGroupInputAtts(c.atts);                                                                 // 11\n                                                                                                                       // 12\n    // Construct an `id` attribute for the input, optionally                                                           // 13\n    // adding a user-provided prefix. Since id attribute is                                                            // 14\n    // supposed to be unique in the DOM and templates can be                                                           // 15\n    // included multiple times, it's best not to provide an `id`                                                       // 16\n    // and generate a random one here for accessibility reasons.                                                       // 17\n    var id = c.atts.id || Random.id();                                                                                 // 18\n    var idPrefix = c.atts['id-prefix'];                                                                                // 19\n    if (idPrefix && idPrefix.length > 0) {                                                                             // 20\n      id = idPrefix + '-' + id;                                                                                        // 21\n    }                                                                                                                  // 22\n                                                                                                                       // 23\n    // Set the input's `id` attribute and the label's `for` attribute to                                               // 24\n    // the same ID.                                                                                                    // 25\n    // NOTE: `afFieldLabelAtts.for` causes exception in IE8                                                            // 26\n    afFieldLabelAtts['for'] = afFieldInputAtts.id = id;                                                                // 27\n                                                                                                                       // 28\n    // Get the field's schema definition                                                                               // 29\n    var fieldSchema = AutoForm.getSchemaForField(c.atts.name);                                                         // 30\n                                                                                                                       // 31\n    return {                                                                                                           // 32\n      skipLabel: (c.atts.label === false),                                                                             // 33\n      afFormGroupClass: c.atts['formgroup-class'],                                                                     // 34\n      afFormGroupAtts: afFormGroupAtts,                                                                                // 35\n      afFieldLabelAtts: afFieldLabelAtts,                                                                              // 36\n      afFieldInputAtts: afFieldInputAtts,                                                                              // 37\n      name: c.atts.name,                                                                                               // 38\n      required: fieldSchema ? !fieldSchema.optional : false,                                                           // 39\n      labelText: (typeof c.atts.label === 'string') ? c.atts.label : null                                              // 40\n    };                                                                                                                 // 41\n  }                                                                                                                    // 42\n});                                                                                                                    // 43\n                                                                                                                       // 44\n/*                                                                                                                     // 45\n * Private                                                                                                             // 46\n */                                                                                                                    // 47\n                                                                                                                       // 48\nfunction formGroupAtts(atts) {                                                                                         // 49\n  // Separate formgroup options from input options; formgroup items begin with 'formgroup-'                            // 50\n  var labelAtts = {};                                                                                                  // 51\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 52\n    if (key.indexOf('formgroup-') === 0 && key != 'formgroup-class') {                                                 // 53\n      labelAtts[key.substring(10)] = val;                                                                              // 54\n    }                                                                                                                  // 55\n  });                                                                                                                  // 56\n  return labelAtts;                                                                                                    // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nfunction formGroupLabelAtts(atts) {                                                                                    // 60\n  // Separate label options from input options; label items begin with 'label-'                                        // 61\n  var labelAtts = {};                                                                                                  // 62\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 63\n    if (key.indexOf('label-') === 0) {                                                                                 // 64\n      labelAtts[key.substring(6)] = val;                                                                               // 65\n    }                                                                                                                  // 66\n  });                                                                                                                  // 67\n  return labelAtts;                                                                                                    // 68\n}                                                                                                                      // 69\n                                                                                                                       // 70\nfunction formGroupInputAtts(atts) {                                                                                    // 71\n  // Separate input options from label and formgroup options                                                           // 72\n  // We also don't want the 'label' option                                                                             // 73\n  var inputAtts = {};                                                                                                  // 74\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 75\n    if (['id-prefix', 'id', 'label'].indexOf(key) === -1 && key.indexOf('label-') !== 0 && key.indexOf('formgroup-') !== 0) {\n      inputAtts[key] = val;                                                                                            // 77\n    }                                                                                                                  // 78\n  });                                                                                                                  // 79\n  return inputAtts;                                                                                                    // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afObjectField/template.afObjectField.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField\");                                                                                 // 2\nTemplate[\"afObjectField\"] = new Template(\"Template.afObjectField\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afObjectField/afObjectField.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afObjectField.helpers({                                                                                       // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('afObjectField', this.template, this.name);                                        // 5\n  },                                                                                                                   // 6\n  innerContext: function() {                                                                                           // 7\n    var c = AutoForm.Utility.getComponentContext(this, 'afObjectField');                                               // 8\n    return _.extend({}, this, c.atts);                                                                                 // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n                                                                                                                       // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickField/template.afQuickField.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afQuickField\");                                                                                  // 2\nTemplate[\"afQuickField\"] = new Template(\"Template.afQuickField\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.If(function() {                                                                                         // 5\n    return Spacebars.call(view.lookup(\"isGroup\"));                                                                     // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"afObjectField\")), \"\\n  \" ];                              // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Blaze.If(function() {                                                                           // 10\n      return Spacebars.call(view.lookup(\"isFieldArray\"));                                                              // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"afArrayField\")), \"\\n    \" ];                         // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n      \", Blaze.If(function() {                                                                       // 15\n        return Spacebars.call(view.lookup(\"isHiddenInput\"));                                                           // 16\n      }, function() {                                                                                                  // 17\n        return [ \"\\n        \\n        \", Blaze._TemplateWith(function() {                                              // 18\n          return Spacebars.call(view.lookup(\"groupAtts\"));                                                             // 19\n        }, function() {                                                                                                // 20\n          return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                               // 21\n        }), \"\\n      \" ];                                                                                              // 22\n      }, function() {                                                                                                  // 23\n        return [ \"\\n        \", Blaze._TemplateWith(function() {                                                        // 24\n          return Spacebars.call(view.lookup(\"groupAtts\"));                                                             // 25\n        }, function() {                                                                                                // 26\n          return Spacebars.include(view.lookupTemplate(\"afFormGroup\"));                                                // 27\n        }), \"\\n      \" ];                                                                                              // 28\n      }), \"\\n    \" ];                                                                                                  // 29\n    }), \"\\n  \" ];                                                                                                      // 30\n  });                                                                                                                  // 31\n}));                                                                                                                   // 32\n                                                                                                                       // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickField/afQuickField.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afQuickField.helpers({                                                                                        // 3\n  isGroup: function afQuickFieldIsGroup() {                                                                            // 4\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");                                                // 5\n    // Render a group of fields if we expect an Object and we don't have options                                       // 6\n    // and we have not overridden the type                                                                             // 7\n    return (c.defs.type === Object && !c.atts.options && !c.atts.type);                                                // 8\n  },                                                                                                                   // 9\n  isFieldArray: function afQuickFieldIsFieldArray() {                                                                  // 10\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");                                                // 11\n    // Render an array of fields if we expect an Array and we don't have options                                       // 12\n    // and we have not overridden the type                                                                             // 13\n    return (c.defs.type === Array && !c.atts.options && !c.atts.type);                                                 // 14\n  },                                                                                                                   // 15\n  groupAtts: function afQuickFieldGroupAtts() {                                                                        // 16\n    // afQuickField passes `fields` and `omitFields` on to `afObjectField`                                             // 17\n    // and `afArrayField`, but not to `afFormGroup`                                                                    // 18\n    return _.omit(this, 'fields', 'omitFields');                                                                       // 19\n  },                                                                                                                   // 20\n  isHiddenInput: function afQuickFieldIsHiddenInput() {                                                                // 21\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");                                                // 22\n    var inputType = c.atts.type;                                                                                       // 23\n    if (inputType) {                                                                                                   // 24\n      var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                    // 25\n      if (!componentDef) {                                                                                             // 26\n        throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');             // 27\n      }                                                                                                                // 28\n      return componentDef.isHidden;                                                                                    // 29\n    }                                                                                                                  // 30\n                                                                                                                       // 31\n    return false;                                                                                                      // 32\n  }                                                                                                                    // 33\n});                                                                                                                    // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickFields/template.afQuickFields.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afQuickFields\");                                                                                 // 2\nTemplate[\"afQuickFields\"] = new Template(\"Template.afQuickFields\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.Each(function() {                                                                                       // 5\n    return Spacebars.dataMustache(view.lookup(\"afFieldNames\"), Spacebars.kw({                                          // 6\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Blaze._TemplateWith(function() {                                                                // 10\n      return Spacebars.call(view.lookup(\"quickFieldAtts\"));                                                            // 11\n    }, function() {                                                                                                    // 12\n      return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                   // 13\n    }), \"\\n  \" ];                                                                                                      // 14\n  });                                                                                                                  // 15\n}));                                                                                                                   // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickFields/afQuickFields.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afQuickFields.helpers({                                                                                       // 3\n  quickFieldAtts: function afQuickFieldsQuickFieldAtts() {                                                             // 4\n    var afQuickFieldsComponentAtts, defaultOptions, atts = {};                                                         // 5\n                                                                                                                       // 6\n    // Get the attributes that were on the afQuickFields component                                                     // 7\n    afQuickFieldsComponentAtts = Template.parentData(1);                                                               // 8\n    // It's possible to call {{> afQuickFields}} with no attributes, in which case we                                  // 9\n    // don't want the \"attributes\" because they're really just the parent context.                                     // 10\n    if (!afQuickFieldsComponentAtts || afQuickFieldsComponentAtts.atts) {                                              // 11\n      afQuickFieldsComponentAtts = {};                                                                                 // 12\n    }                                                                                                                  // 13\n                                                                                                                       // 14\n    // Add default options from schema/allowed                                                                         // 15\n    defaultOptions = AutoForm._getOptionsForField(this.name);                                                          // 16\n    if (defaultOptions) {                                                                                              // 17\n      atts.options = defaultOptions;                                                                                   // 18\n    }                                                                                                                  // 19\n                                                                                                                       // 20\n    return _.extend(atts, afQuickFieldsComponentAtts, this);                                                           // 21\n  }                                                                                                                    // 22\n});                                                                                                                    // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-events.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, Hooks, validateField, updateTrackedFieldValue, arrayTracker, updateAllTrackedFieldValues, SimpleSchema */\n                                                                                                                       // 2\n// all form events handled here                                                                                        // 3\nvar lastAutoSaveElement = null;                                                                                        // 4\nvar lastKeyVal = null;                                                                                                 // 5\n                                                                                                                       // 6\nfunction beginSubmit(formId, template, hookContext) {                                                                  // 7\n  if (!template || !template.view._domrange || template.view.isDestroyed) {                                            // 8\n    return;                                                                                                            // 9\n  }                                                                                                                    // 10\n                                                                                                                       // 11\n  // Get user-defined hooks                                                                                            // 12\n  var hooks = Hooks.getHooks(formId, 'beginSubmit');                                                                   // 13\n  if (hooks.length) {                                                                                                  // 14\n    _.each(hooks, function beginSubmitHooks(hook) {                                                                    // 15\n      hook.call(hookContext);                                                                                          // 16\n    });                                                                                                                // 17\n  } else {                                                                                                             // 18\n    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 19\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");                    // 20\n    if (submitButton) {                                                                                                // 21\n      submitButton.disabled = true;                                                                                    // 22\n    }                                                                                                                  // 23\n  }                                                                                                                    // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\nfunction endSubmit(formId, template, hookContext) {                                                                    // 27\n  if (!template || !template.view._domrange || template.view.isDestroyed) {                                            // 28\n    return;                                                                                                            // 29\n  }                                                                                                                    // 30\n                                                                                                                       // 31\n  // Try to avoid incorrect reporting of which input caused autosave                                                   // 32\n  lastAutoSaveElement = null;                                                                                          // 33\n  // Get user-defined hooks                                                                                            // 34\n  var hooks = Hooks.getHooks(formId, 'endSubmit');                                                                     // 35\n  if (hooks.length) {                                                                                                  // 36\n    _.each(hooks, function endSubmitHooks(hook) {                                                                      // 37\n      hook.call(hookContext);                                                                                          // 38\n    });                                                                                                                // 39\n  } else {                                                                                                             // 40\n    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 41\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");                    // 42\n    if (submitButton) {                                                                                                // 43\n      submitButton.disabled = false;                                                                                   // 44\n    }                                                                                                                  // 45\n  }                                                                                                                    // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\nfunction adjustKeyForArrays(key) {                                                                                     // 49\n  var gKey = SimpleSchema._makeGeneric(key);                                                                           // 50\n  if (gKey.slice(-2) === '.$' || gKey.indexOf('.$.') !== -1) {                                                         // 51\n    key = gKey.slice(0, gKey.indexOf('.$'));                                                                           // 52\n  }                                                                                                                    // 53\n  return key;                                                                                                          // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\n/**                                                                                                                    // 57\n * Returns `true` if the specified validation type should                                                              // 58\n * be revalidated only when the form is already invalid.                                                               // 59\n * @param {String} validationType The validation type string.                                                          // 60\n */                                                                                                                    // 61\nfunction onlyIfAlreadyInvalid(validationType) {                                                                        // 62\n  return validationType === 'submitThenKeyup' ||                                                                       // 63\n    validationType === 'submitThenBlur';                                                                               // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * Given an element, returns the schema key for it, using the                                                          // 68\n * `data-schema-key` attribute on the element or on the closest                                                        // 69\n * element that has one.                                                                                               // 70\n *                                                                                                                     // 71\n * @param   {Element}          element The DOM element                                                                 // 72\n * @returns {String|undefined} The schema key                                                                          // 73\n */                                                                                                                    // 74\nfunction getKeyForElement(element) {                                                                                   // 75\n  var key = element.getAttribute(\"data-schema-key\");                                                                   // 76\n  if (!key) {                                                                                                          // 77\n    key = $(element).closest('[data-schema-key]').attr(\"data-schema-key\");                                             // 78\n  }                                                                                                                    // 79\n  return key;                                                                                                          // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\n//throttle autosave, at most autosave every 500ms                                                                      // 83\nvar throttleAutosave = _.throttle(function(event) {                                                                    // 84\n  lastAutoSaveElement = event.target;                                                                                  // 85\n  $(event.currentTarget).submit();                                                                                     // 86\n}, 500, {leading: false});                                                                                             // 87\n                                                                                                                       // 88\nTemplate.autoForm.events({                                                                                             // 89\n  'submit form': function autoFormSubmitHandler(event, template) {                                                     // 90\n    var formDoc;                                                                                                       // 91\n    // Gather necessary form info                                                                                      // 92\n    var formId = this.id;                                                                                              // 93\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 94\n    var formType = form.type;                                                                                          // 95\n    // ss will be the schema for the `schema` attribute if present,                                                    // 96\n    // else the schema for the collection                                                                              // 97\n    var ss = AutoForm.getFormSchema(formId);                                                                           // 98\n    var collection = AutoForm.getFormCollection(formId);                                                               // 99\n    var ssIsOverride = !!(collection && form.schema);                                                                  // 100\n                                                                                                                       // 101\n    var currentDoc = form.doc;                                                                                         // 102\n    var docId = currentDoc ? currentDoc._id : null;                                                                    // 103\n    var isValid;                                                                                                       // 104\n                                                                                                                       // 105\n    var validationOptions = {                                                                                          // 106\n      validationContext: formId,                                                                                       // 107\n      filter: form.filter,                                                                                             // 108\n      autoConvert: form.autoConvert,                                                                                   // 109\n      removeEmptyStrings: form.removeEmptyStrings,                                                                     // 110\n      trimStrings: form.trimStrings                                                                                    // 111\n    };                                                                                                                 // 112\n                                                                                                                       // 113\n    // Get the form type definition                                                                                    // 114\n    var ftd;                                                                                                           // 115\n    try {                                                                                                              // 116\n      ftd = Utility.getFormTypeDef(formType);                                                                          // 117\n    } catch (err) {                                                                                                    // 118\n      event.preventDefault();                                                                                          // 119\n      throw err;                                                                                                       // 120\n    }                                                                                                                  // 121\n                                                                                                                       // 122\n    // Gather hooks                                                                                                    // 123\n    var onSuccessHooks = Hooks.getHooks(formId, 'onSuccess');                                                          // 124\n    var onErrorHooks = Hooks.getHooks(formId, 'onError');                                                              // 125\n    var beforeHooks = Hooks.getHooks(formId, 'before', formType);                                                      // 126\n    var afterHooks = Hooks.getHooks(formId, 'after', formType);                                                        // 127\n                                                                                                                       // 128\n    // Prep context with which hooks are called                                                                        // 129\n    var hookContext = {                                                                                                // 130\n      addStickyValidationError: function (key, type, value) {                                                          // 131\n        AutoForm.templateInstanceForForm(formId)._stickyErrors[key] = {type: type, value: value};                      // 132\n      },                                                                                                               // 133\n      autoSaveChangedElement: lastAutoSaveElement,                                                                     // 134\n      collection: collection,                                                                                          // 135\n      currentDoc: currentDoc,                                                                                          // 136\n      docId: docId,                                                                                                    // 137\n      event: event,                                                                                                    // 138\n      formAttributes: form,                                                                                            // 139\n      formId: formId,                                                                                                  // 140\n      formTypeDefinition: ftd,                                                                                         // 141\n      removeStickyValidationError: function (key) {                                                                    // 142\n        delete AutoForm.templateInstanceForForm(formId)._stickyErrors[key];                                            // 143\n        // revalidate that field                                                                                       // 144\n        validateField(key, formId, false, false);                                                                      // 145\n      },                                                                                                               // 146\n      resetForm: function () {                                                                                         // 147\n        AutoForm.resetForm(formId, template);                                                                          // 148\n      },                                                                                                               // 149\n      ss: ss,                                                                                                          // 150\n      ssIsOverride: ssIsOverride,                                                                                      // 151\n      template: template,                                                                                              // 152\n      validationContext: AutoForm.getValidationContext(formId)                                                         // 153\n    };                                                                                                                 // 154\n                                                                                                                       // 155\n    // Gather all form values                                                                                          // 156\n    if (ftd.needsModifierAndDoc) {                                                                                     // 157\n      formDoc = AutoForm.getFormValues(formId, template, ss);                                                          // 158\n      hookContext.updateDoc = formDoc.updateDoc;                                                                       // 159\n      hookContext.insertDoc = formDoc.insertDoc;                                                                       // 160\n    } else if (ftd.usesModifier) {                                                                                     // 161\n      formDoc = AutoForm.getFormValues(formId, template, ss, true);                                                    // 162\n      hookContext.updateDoc = formDoc;                                                                                 // 163\n    } else {                                                                                                           // 164\n      formDoc = AutoForm.getFormValues(formId, template, ss, false);                                                   // 165\n      hookContext.insertDoc = formDoc;                                                                                 // 166\n    }                                                                                                                  // 167\n                                                                                                                       // 168\n    // It is pretty unlikely since we are submitting it, but if                                                        // 169\n    // for some reason this form is not currently rendered, we exit.                                                   // 170\n    if (!formDoc) {                                                                                                    // 171\n      event.preventDefault();                                                                                          // 172\n      return;                                                                                                          // 173\n    }                                                                                                                  // 174\n                                                                                                                       // 175\n    function endSubmission() {                                                                                         // 176\n      // Run endSubmit hooks (re-enabled submit button or form, etc.)                                                  // 177\n      endSubmit(formId, template, hookContext);                                                                        // 178\n    }                                                                                                                  // 179\n                                                                                                                       // 180\n    function failedValidation() {                                                                                      // 181\n      // add invalidKeys array as a property                                                                           // 182\n      // of the Error object before we call                                                                            // 183\n      // onError hooks                                                                                                 // 184\n      var ec = ss.namedContext(formId);                                                                                // 185\n      var ik = ec.invalidKeys(), error;                                                                                // 186\n      if (ik) {                                                                                                        // 187\n        if (ik.length) {                                                                                               // 188\n          // We add `message` prop to the invalidKeys.                                                                 // 189\n          // Maybe SS pkg should just add that property back in?                                                       // 190\n          ik = _.map(ik, function (o) {                                                                                // 191\n            return _.extend({message: ec.keyErrorMessage(o.name)}, o);                                                 // 192\n          });                                                                                                          // 193\n          error = new Error(ik[0].message);                                                                            // 194\n        } else {                                                                                                       // 195\n          error = new Error('form failed validation');                                                                 // 196\n        }                                                                                                              // 197\n        error.invalidKeys = ik;                                                                                        // 198\n      } else {                                                                                                         // 199\n        error = new Error('form failed validation');                                                                   // 200\n      }                                                                                                                // 201\n      _.each(onErrorHooks, function onErrorEach(hook) {                                                                // 202\n        hook.call(hookContext, 'pre-submit validation', error);                                                        // 203\n      });                                                                                                              // 204\n      event.preventDefault();                                                                                          // 205\n      event.stopPropagation();                                                                                         // 206\n      endSubmission();                                                                                                 // 207\n    }                                                                                                                  // 208\n                                                                                                                       // 209\n    // Prep function that calls before hooks.                                                                          // 210\n    function runBeforeHooks(doc, next) {                                                                               // 211\n      // We call the hooks recursively, in order added,                                                                // 212\n      // passing the result of the first hook to the                                                                   // 213\n      // second hook, etc.                                                                                             // 214\n      function runHook(i, doc) {                                                                                       // 215\n        var hook = beforeHooks[i];                                                                                     // 216\n                                                                                                                       // 217\n        if (!hook) {                                                                                                   // 218\n          // We've run all hooks; continue submission                                                                  // 219\n          next(doc);                                                                                                   // 220\n          return;                                                                                                      // 221\n        }                                                                                                              // 222\n                                                                                                                       // 223\n        // Define a `result` function                                                                                  // 224\n        var cb = function (d) {                                                                                        // 225\n          // If the hook returns false, we cancel                                                                      // 226\n          if (d === false) {                                                                                           // 227\n            endSubmission();                                                                                           // 228\n          } else if (!_.isObject(d)) {                                                                                 // 229\n            throw new Error(\"A 'before' hook must return an object\");                                                  // 230\n          } else {                                                                                                     // 231\n            runHook(i+1, d);                                                                                           // 232\n          }                                                                                                            // 233\n        };                                                                                                             // 234\n                                                                                                                       // 235\n        // Add the `result` function to the before hook context                                                        // 236\n        var ctx = _.extend({                                                                                           // 237\n          result: _.once(cb)                                                                                           // 238\n        }, hookContext);                                                                                               // 239\n                                                                                                                       // 240\n        var result = hook.call(ctx, doc);                                                                              // 241\n                                                                                                                       // 242\n        // If the hook returns undefined, we wait for it                                                               // 243\n        // to call this.result()                                                                                       // 244\n        if (result !== void 0) {                                                                                       // 245\n          ctx.result(result);                                                                                          // 246\n        }                                                                                                              // 247\n      }                                                                                                                // 248\n                                                                                                                       // 249\n      runHook(0, doc);                                                                                                 // 250\n    }                                                                                                                  // 251\n                                                                                                                       // 252\n    // Prep function that calls after, onError, and onSuccess hooks.                                                   // 253\n    // Also resets the form on success.                                                                                // 254\n    function resultCallback(error, result) {                                                                           // 255\n      if (error) {                                                                                                     // 256\n        if (onErrorHooks && onErrorHooks.length) {                                                                     // 257\n          _.each(onErrorHooks, function onErrorEach(hook) {                                                            // 258\n            hook.call(hookContext, formType, error);                                                                   // 259\n          });                                                                                                          // 260\n        } else if ((!afterHooks || !afterHooks.length) && ss.namedContext(formId).isValid()) {                         // 261\n          // if there are no onError or \"after\" hooks or validation errors, log the error                              // 262\n          // because it must be some other error from the server                                                       // 263\n          console.log(error);                                                                                          // 264\n        }                                                                                                              // 265\n      } else {                                                                                                         // 266\n        // By default, we reset form after successful submit, but                                                      // 267\n        // you can opt out. We should never reset after submit                                                         // 268\n        // when autosaving.                                                                                            // 269\n        if (form.resetOnSuccess !== false && form.autosave !== true) {                                                 // 270\n          AutoForm.resetForm(formId, template);                                                                        // 271\n        }                                                                                                              // 272\n        // Set docId in the context for insert forms, too                                                              // 273\n        if (formType === \"insert\") {                                                                                   // 274\n          hookContext.docId = result;                                                                                  // 275\n        }                                                                                                              // 276\n        _.each(onSuccessHooks, function onSuccessEach(hook) {                                                          // 277\n          hook.call(hookContext, formType, result);                                                                    // 278\n        });                                                                                                            // 279\n      }                                                                                                                // 280\n      _.each(afterHooks, function afterHooksEach(hook) {                                                               // 281\n        hook.call(hookContext, error, result);                                                                         // 282\n      });                                                                                                              // 283\n      endSubmission();                                                                                                 // 284\n    }                                                                                                                  // 285\n                                                                                                                       // 286\n    // Run beginSubmit hooks (disable submit button or form, etc.)                                                     // 287\n    // NOTE: This needs to stay after getFormValues in case a                                                          // 288\n    // beginSubmit hook disables inputs. We don't get values for                                                       // 289\n    // disabled inputs, but if they are just disabling during submission,                                              // 290\n    // then we actually do want the values.                                                                            // 291\n    //                                                                                                                 // 292\n    // Also keep this before prevalidation so that sticky errors can be                                                // 293\n    // removed in this hook.                                                                                           // 294\n    beginSubmit(formId, template, hookContext);                                                                        // 295\n                                                                                                                       // 296\n    // Ask form type definition whether we should prevalidate. By default we do.                                       // 297\n    var shouldPrevalidate = ftd.shouldPrevalidate ? ftd.shouldPrevalidate.call(hookContext) : true;                    // 298\n                                                                                                                       // 299\n    if (shouldPrevalidate) {                                                                                           // 300\n      // This validation pass happens before any \"before\" hooks run. We                                                // 301\n      // validate against the form schema. Then before hooks can add any missing                                       // 302\n      // properties before we validate against the full collection schema.                                             // 303\n      try {                                                                                                            // 304\n        isValid = (form.validation === 'none') ||                                                                      // 305\n          ftd.validateForm.call({                                                                                      // 306\n            form: form,                                                                                                // 307\n            formDoc: formDoc,                                                                                          // 308\n            useCollectionSchema: false                                                                                 // 309\n          });                                                                                                          // 310\n      } catch (e) {                                                                                                    // 311\n        // Catch exceptions in validation functions which will bubble up here, cause a form with                       // 312\n        // onSubmit() to submit prematurely and prevent the error from being reported                                  // 313\n        // (due to a page refresh).                                                                                    // 314\n        console.error('Validation error', e);                                                                          // 315\n        isValid = false;                                                                                               // 316\n      }                                                                                                                // 317\n      // If we failed pre-submit validation, we stop submission.                                                       // 318\n      if (isValid === false) {                                                                                         // 319\n        failedValidation();                                                                                            // 320\n        return;                                                                                                        // 321\n      }                                                                                                                // 322\n    }                                                                                                                  // 323\n                                                                                                                       // 324\n    // Call onSubmit from the form type definition                                                                     // 325\n    ftd.onSubmit.call(_.extend({                                                                                       // 326\n      runBeforeHooks: runBeforeHooks,                                                                                  // 327\n      result: resultCallback,                                                                                          // 328\n      endSubmission: endSubmission,                                                                                    // 329\n      failedValidation: failedValidation,                                                                              // 330\n      validationOptions: validationOptions,                                                                            // 331\n      hookContext: hookContext                                                                                         // 332\n    }, hookContext));                                                                                                  // 333\n  },                                                                                                                   // 334\n  'keyup [data-schema-key]': function autoFormKeyUpHandler(event) {                                                    // 335\n    // validateField is throttled, so we need to get the nearest form's                                                // 336\n    // ID here, while we're still in the correct context                                                               // 337\n    var formId = AutoForm.getFormId();                                                                                 // 338\n                                                                                                                       // 339\n    // Get current form data context                                                                                   // 340\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 341\n                                                                                                                       // 342\n    var validationType = form.validation;                                                                              // 343\n    var skipEmpty = !(event.keyCode === 8 || event.keyCode === 46); //if deleting or backspacing, don't skip empty     // 344\n                                                                                                                       // 345\n    if ((validationType === 'keyup' || validationType === 'submitThenKeyup')) {                                        // 346\n      var key = getKeyForElement(event.currentTarget);                                                                 // 347\n      if (!key) {return;}                                                                                              // 348\n                                                                                                                       // 349\n      validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));                                     // 350\n                                                                                                                       // 351\n      // If it's an array field, we also want to validate the entire topmost array                                     // 352\n      // in case there are minCount/maxCount errors, etc.                                                              // 353\n      var arrayKey = adjustKeyForArrays(key);                                                                          // 354\n      if (arrayKey !== key) {                                                                                          // 355\n        validateField(arrayKey, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));                              // 356\n      }                                                                                                                // 357\n                                                                                                                       // 358\n      // If the form should be auto-saved whenever updated, we do that on field                                        // 359\n      // changes instead of validating the field                                                                       // 360\n      if (form.autosaveOnKeyup === true) {                                                                             // 361\n        throttleAutosave(event);                                                                                       // 362\n      }                                                                                                                // 363\n    }                                                                                                                  // 364\n  },                                                                                                                   // 365\n  'blur [data-schema-key]': function autoFormBlurHandler(event) {                                                      // 366\n    // validateField is throttled, so we need to get the nearest form's                                                // 367\n    // ID here, while we're still in the correct context                                                               // 368\n    var formId = AutoForm.getFormId();                                                                                 // 369\n                                                                                                                       // 370\n    // Get current form data context                                                                                   // 371\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 372\n    var validationType = form.validation;                                                                              // 373\n                                                                                                                       // 374\n    if (validationType === 'keyup' ||                                                                                  // 375\n        validationType === 'blur' ||                                                                                   // 376\n        validationType === 'submitThenKeyup' ||                                                                        // 377\n        validationType === 'submitThenBlur') {                                                                         // 378\n      var key = getKeyForElement(event.currentTarget);                                                                 // 379\n      if (!key) {return;}                                                                                              // 380\n                                                                                                                       // 381\n      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));                                         // 382\n                                                                                                                       // 383\n      // If it's an array field, we also want to validate the entire topmost array                                     // 384\n      // in case there are minCount/maxCount errors, etc.                                                              // 385\n      var arrayKey = adjustKeyForArrays(key);                                                                          // 386\n      if (arrayKey !== key) {                                                                                          // 387\n        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));                                  // 388\n      }                                                                                                                // 389\n    }                                                                                                                  // 390\n  },                                                                                                                   // 391\n  'change form': function autoFormChangeHandler(event, template) {                                                     // 392\n    var key = getKeyForElement(event.target);                                                                          // 393\n    if (!key) {return;}                                                                                                // 394\n                                                                                                                       // 395\n    // Some plugins, like jquery.inputmask, can cause infinite                                                         // 396\n    // loops by continually saying the field changed when it did not,                                                  // 397\n    // especially in an autosave situation. This is an attempt to                                                      // 398\n    // prevent that from happening.                                                                                    // 399\n    var keyVal = event.target.value;                                                                                   // 400\n    if (event.target.type === 'checkbox') {                                                                            // 401\n      // Special handling for checkboxes, which always have the same value                                             // 402\n      keyVal = keyVal + '_' + $(event.target).prop('checked');                                                         // 403\n    }                                                                                                                  // 404\n                                                                                                                       // 405\n    keyVal = key + '___' + keyVal;                                                                                     // 406\n                                                                                                                       // 407\n    if (keyVal === lastKeyVal) {                                                                                       // 408\n      return;                                                                                                          // 409\n    }                                                                                                                  // 410\n    lastKeyVal = keyVal;                                                                                               // 411\n                                                                                                                       // 412\n    var formId = this.id;                                                                                              // 413\n                                                                                                                       // 414\n    // Mark field value as changed for reactive updates                                                                // 415\n    updateTrackedFieldValue(template, key);                                                                            // 416\n                                                                                                                       // 417\n    // Get current form data context                                                                                   // 418\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 419\n                                                                                                                       // 420\n    // If the form should be auto-saved whenever updated, we do that on field                                          // 421\n    // changes instead of validating the field                                                                         // 422\n    if (form.autosave === true || form.autosaveOnKeyup === true) {                                                     // 423\n      lastAutoSaveElement = event.target;                                                                              // 424\n      $(event.currentTarget).submit();                                                                                 // 425\n      return;                                                                                                          // 426\n    }                                                                                                                  // 427\n                                                                                                                       // 428\n    var validationType = form.validation;                                                                              // 429\n                                                                                                                       // 430\n    if (validationType === 'keyup' ||                                                                                  // 431\n        validationType === 'blur' ||                                                                                   // 432\n        validationType === 'submitThenKeyup' ||                                                                        // 433\n        validationType === 'submitThenBlur') {                                                                         // 434\n                                                                                                                       // 435\n      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));                                         // 436\n                                                                                                                       // 437\n      // If it's an array field, we also want to validate the entire topmost array                                     // 438\n      // in case there are minCount/maxCount errors, etc.                                                              // 439\n      var arrayKey = adjustKeyForArrays(key);                                                                          // 440\n      if (arrayKey !== key) {                                                                                          // 441\n        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));                                  // 442\n      }                                                                                                                // 443\n    }                                                                                                                  // 444\n  },                                                                                                                   // 445\n  'reset form': function autoFormResetHandler(event, template) {                                                       // 446\n    var formId = this.id;                                                                                              // 447\n                                                                                                                       // 448\n    AutoForm.formPreserve.clearDocument(formId);                                                                       // 449\n                                                                                                                       // 450\n    // Reset array counts                                                                                              // 451\n    arrayTracker.resetForm(formId);                                                                                    // 452\n                                                                                                                       // 453\n    var vc = AutoForm.getValidationContext(formId);                                                                    // 454\n    if (vc) {                                                                                                          // 455\n      vc.resetValidation();                                                                                            // 456\n      // If simpleSchema is undefined, we haven't yet rendered the form, and therefore                                 // 457\n      // there is no need to reset validation for it. No error need be thrown.                                         // 458\n    }                                                                                                                  // 459\n                                                                                                                       // 460\n    if (this.doc) {                                                                                                    // 461\n      event.preventDefault();                                                                                          // 462\n      AutoForm._forceResetFormValues(formId);                                                                          // 463\n    }                                                                                                                  // 464\n                                                                                                                       // 465\n    // Mark all fields as changed                                                                                      // 466\n    updateAllTrackedFieldValues(template);                                                                             // 467\n    // Focus the autofocus element                                                                                     // 468\n    template.$(\"[autofocus]\").focus();                                                                                 // 469\n                                                                                                                       // 470\n  },                                                                                                                   // 471\n  'keydown .autoform-array-item input': function (event) {                                                             // 472\n    // When enter is pressed in an array item field, default behavior                                                  // 473\n    // seems to be to \"click\" the remove item button. This doesn't make                                                // 474\n    // sense so we stop it.                                                                                            // 475\n    if (event.keyCode === 13) {                                                                                        // 476\n      event.preventDefault();                                                                                          // 477\n    }                                                                                                                  // 478\n  },                                                                                                                   // 479\n  'click .autoform-remove-item': function autoFormClickRemoveItem(event, template) {                                   // 480\n    var self = this; // This type of button must be used within an afEachArrayItem block, so we know the context       // 481\n                                                                                                                       // 482\n    event.preventDefault();                                                                                            // 483\n                                                                                                                       // 484\n    var name = self.arrayFieldName;                                                                                    // 485\n    var minCount = self.minCount; // optional, overrides schema                                                        // 486\n    var maxCount = self.maxCount; // optional, overrides schema                                                        // 487\n    var index = self.index;                                                                                            // 488\n    var data = template.data;                                                                                          // 489\n    var formId = data && data.id;                                                                                      // 490\n    var ss = AutoForm.getFormSchema(formId);                                                                           // 491\n                                                                                                                       // 492\n    // remove the item we clicked                                                                                      // 493\n    arrayTracker.removeFromFieldAtIndex(formId, name, index, ss, minCount, maxCount);                                  // 494\n  },                                                                                                                   // 495\n  'click .autoform-add-item': function autoFormClickAddItem(event, template) {                                         // 496\n    event.preventDefault();                                                                                            // 497\n                                                                                                                       // 498\n    // We pull from data attributes because the button could be manually                                               // 499\n    // added anywhere, so we don't know the data context.                                                              // 500\n    var btn = $(event.currentTarget);                                                                                  // 501\n    var name = btn.attr(\"data-autoform-field\");                                                                        // 502\n    var minCount = btn.attr(\"data-autoform-minCount\"); // optional, overrides schema                                   // 503\n    var maxCount = btn.attr(\"data-autoform-maxCount\"); // optional, overrides schema                                   // 504\n                                                                                                                       // 505\n    var data = template.data;                                                                                          // 506\n    var formId = data && data.id;                                                                                      // 507\n    var ss = AutoForm.getFormSchema(formId);                                                                           // 508\n                                                                                                                       // 509\n    arrayTracker.addOneToField(formId, name, ss, minCount, maxCount);                                                  // 510\n  }                                                                                                                    // 511\n});                                                                                                                    // 512\n                                                                                                                       // 513\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/bootstrap3.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\n/*                                                                                                                     // 3\n * Template helpers for \"bootstrap3\" templates                                                                         // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\nTemplate.registerHelper('attsPlusFormControlClass', function attsPlusFormControlClass() {                              // 7\n  var atts = _.clone(this.atts);                                                                                       // 8\n  // Add bootstrap class                                                                                               // 9\n  atts = AutoForm.Utility.addClass(atts, \"form-control\");                                                              // 10\n  return atts;                                                                                                         // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\nTemplate.registerHelper('attsPlusBtnClass', function attsPlusBtnClass() {                                              // 14\n  var atts = _.clone(this.atts);                                                                                       // 15\n  // Add bootstrap class                                                                                               // 16\n  atts = AutoForm.Utility.addClass(atts, \"btn\");                                                                       // 17\n  return atts;                                                                                                         // 18\n});                                                                                                                    // 19\n                                                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/quickForm/template.quickForm.js                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3\");                                                                          // 2\nTemplate[\"quickForm_bootstrap3\"] = new Template(\"Template.quickForm_bootstrap3\", (function() {                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n\\n    \", Spacebars.With(function() {                                                                 // 9\n        return Spacebars.call(view.lookup(\"grouplessFields\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", Blaze._TemplateWith(function() {                                                          // 12\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 13\n        }, function() {                                                                                                // 14\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 15\n        }), \"\\n    \" ];                                                                                                // 16\n      }), \"\\n\\n    \", Blaze.Each(function() {                                                                          // 17\n        return Spacebars.call(view.lookup(\"fieldGroups\"));                                                             // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.FIELDSET({                                                                           // 20\n          \"class\": \"af-fieldGroup\"                                                                                     // 21\n        }, \"\\n        \", Spacebars.With(function() {                                                                   // 22\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));                                                       // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n          \", HTML.LEGEND({                                                                       // 25\n            \"class\": \"af-fieldGroup-heading\"                                                                           // 26\n          }, Blaze.View(\"lookup:.\", function() {                                                                       // 27\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 28\n          })), \"\\n        \" ];                                                                                         // 29\n        }), \"\\n        \", Blaze._TemplateWith(function() {                                                             // 30\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 31\n        }, function() {                                                                                                // 32\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 33\n        }), \"\\n      \"), \"\\n    \" ];                                                                                   // 34\n      }), \"\\n\\n    \", Blaze.If(function() {                                                                            // 35\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 36\n      }, function() {                                                                                                  // 37\n        return [ \"\\n      \", HTML.DIV({                                                                                // 38\n          \"class\": \"form-group\"                                                                                        // 39\n        }, \"\\n        \", HTML.BUTTON(HTML.Attrs({                                                                      // 40\n          type: \"submit\"                                                                                               // 41\n        }, function() {                                                                                                // 42\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 43\n        }), \"\\n          \", Spacebars.With(function() {                                                                // 44\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 45\n        }, function() {                                                                                                // 46\n          return [ \"\\n          \", Blaze.View(\"lookup:.\", function() {                                                 // 47\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 48\n          }), \"\\n          \" ];                                                                                        // 49\n        }, function() {                                                                                                // 50\n          return \"\\n          Submit\\n          \";                                                                     // 51\n        }), \"\\n        \"), \"\\n      \"), \"\\n    \" ];                                                                    // 52\n      }), \"\\n\\n  \" ];                                                                                                  // 53\n    });                                                                                                                // 54\n  });                                                                                                                  // 55\n}));                                                                                                                   // 56\n                                                                                                                       // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/quickForm/quickForm.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.quickForm_bootstrap3.helpers({                                                                                // 1\n  fieldGroupLabel: function () {                                                                                       // 2\n    var name = this.name;                                                                                              // 3\n                                                                                                                       // 4\n    // if field group name is of the form XY_abcde where \"XY\" is a number, remove prefix                               // 5\n    if (!isNaN(parseInt(name.substr(0,2), 10)) && name.charAt(2) === \"_\") {                                            // 6\n      name = name.substr(3);                                                                                           // 7\n    }                                                                                                                  // 8\n                                                                                                                       // 9\n    // if SimpleSchema.defaultLabel is defined, use it                                                                 // 10\n    if (typeof SimpleSchema.defaultLabel === \"function\") {                                                             // 11\n      return SimpleSchema.defaultLabel(name);                                                                          // 12\n    } else {                                                                                                           // 13\n      // else, just capitalise name                                                                                    // 14\n      return name.charAt(0).toUpperCase() + name.slice(1);                                                             // 15\n    }                                                                                                                  // 16\n  },                                                                                                                   // 17\n  quickFieldsAtts: function () {                                                                                       // 18\n    // These are the quickForm attributes that we want to forward to                                                   // 19\n    // the afQuickFields component.                                                                                    // 20\n    return _.pick(this.atts, 'fields', 'id-prefix', 'input-col-class', 'label-class');                                 // 21\n  },                                                                                                                   // 22\n  submitButtonAtts: function bsQuickFormSubmitButtonAtts() {                                                           // 23\n    var qfAtts = this.atts;                                                                                            // 24\n    var atts = {};                                                                                                     // 25\n    if (typeof qfAtts.buttonClasses === 'string') {                                                                    // 26\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 27\n    } else {                                                                                                           // 28\n      atts['class'] = 'btn btn-primary';                                                                               // 29\n    }                                                                                                                  // 30\n    return atts;                                                                                                       // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\n                                                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/afArrayField/template.afArrayField.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField_bootstrap3\");                                                                       // 2\nTemplate[\"afArrayField_bootstrap3\"] = new Template(\"Template.afArrayField_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": \"panel panel-default\"                                                                                     // 6\n  }, \"\\n    \", HTML.DIV({                                                                                              // 7\n    \"class\": \"panel-heading\"                                                                                           // 8\n  }, Blaze.View(\"lookup:afFieldLabelText\", function() {                                                                // 9\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 10\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 11\n    }));                                                                                                               // 12\n  })), \"\\n    \", Blaze.If(function() {                                                                                 // 13\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 14\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 15\n    }));                                                                                                               // 16\n  }, function() {                                                                                                      // 17\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 18\n      \"class\": \"panel-body has-error\"                                                                                  // 19\n    }, \"\\n      \", HTML.SPAN({                                                                                         // 20\n      \"class\": \"help-block\"                                                                                            // 21\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                // 22\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 23\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 24\n      })));                                                                                                            // 25\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 26\n  }), \"\\n    \", HTML.UL({                                                                                              // 27\n    \"class\": \"list-group\"                                                                                              // 28\n  }, \"\\n      \", Blaze._TemplateWith(function() {                                                                      // 29\n    return {                                                                                                           // 30\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 31\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 32\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 33\n    };                                                                                                                 // 34\n  }, function() {                                                                                                      // 35\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 36\n      return [ \"\\n      \", HTML.LI({                                                                                   // 37\n        \"class\": \"list-group-item autoform-array-item\"                                                                 // 38\n      }, \"\\n        \", HTML.DIV(\"\\n          \", HTML.DIV({                                                             // 39\n        \"class\": \"autoform-remove-item-wrap\"                                                                           // 40\n      }, \"\\n            \", Blaze.If(function() {                                                                       // 41\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 42\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 43\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 44\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 45\n        }));                                                                                                           // 46\n      }, function() {                                                                                                  // 47\n        return [ \"\\n            \", HTML.BUTTON({                                                                       // 48\n          type: \"button\",                                                                                              // 49\n          \"class\": \"btn btn-primary autoform-remove-item\"                                                              // 50\n        }, HTML.SPAN({                                                                                                 // 51\n          \"class\": \"glyphicon glyphicon-minus\"                                                                         // 52\n        })), \"\\n            \" ];                                                                                       // 53\n      }), \"\\n          \"), \"\\n          \", HTML.DIV({                                                                  // 54\n        \"class\": \"autoform-array-item-body\"                                                                            // 55\n      }, \"\\n            \", Blaze._TemplateWith(function() {                                                            // 56\n        return {                                                                                                       // 57\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 58\n          label: Spacebars.call(false),                                                                                // 59\n          options: Spacebars.call(view.lookup(\"afOptionsFromSchema\"))                                                  // 60\n        };                                                                                                             // 61\n      }, function() {                                                                                                  // 62\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 63\n      }), \"\\n          \"), \"\\n        \"), \"\\n      \"), \"\\n      \" ];                                                   // 64\n    });                                                                                                                // 65\n  }), \"\\n      \", Blaze.If(function() {                                                                                // 66\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 67\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 68\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 69\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 70\n    }));                                                                                                               // 71\n  }, function() {                                                                                                      // 72\n    return [ \"\\n      \", HTML.LI({                                                                                     // 73\n      \"class\": \"list-group-item\"                                                                                       // 74\n    }, \"\\n        \", HTML.BUTTON({                                                                                     // 75\n      type: \"button\",                                                                                                  // 76\n      \"class\": \"btn btn-primary autoform-add-item\",                                                                    // 77\n      \"data-autoform-field\": function() {                                                                              // 78\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 79\n      },                                                                                                               // 80\n      \"data-autoform-mincount\": function() {                                                                           // 81\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 82\n      },                                                                                                               // 83\n      \"data-autoform-maxcount\": function() {                                                                           // 84\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 85\n      }                                                                                                                // 86\n    }, HTML.SPAN({                                                                                                     // 87\n      \"class\": \"glyphicon glyphicon-plus\"                                                                              // 88\n    })), \"\\n      \"), \"\\n      \" ];                                                                                    // 89\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 90\n}));                                                                                                                   // 91\n                                                                                                                       // 92\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/afFormGroup/template.afFormGroup.js                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup_bootstrap3\");                                                                        // 2\nTemplate[\"afFormGroup_bootstrap3\"] = new Template(\"Template.afFormGroup_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 13\n    },                                                                                                                 // 14\n    \"data-required\": function() {                                                                                      // 15\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 16\n    }                                                                                                                  // 17\n  }, function() {                                                                                                      // 18\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 19\n  }), \"\\n    \", Blaze.Unless(function() {                                                                              // 20\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 21\n  }, function() {                                                                                                      // 22\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 23\n      return Spacebars.attrMustache(view.lookup(\"bsFieldLabelAtts\"));                                                  // 24\n    }), Blaze.If(function() {                                                                                          // 25\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 26\n    }, function() {                                                                                                    // 27\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 28\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 29\n      });                                                                                                              // 30\n    }, function() {                                                                                                    // 31\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 32\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 33\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 34\n        }));                                                                                                           // 35\n      });                                                                                                              // 36\n    })), \"\\n    \" ];                                                                                                   // 37\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 38\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));                                        // 39\n  }, function() {                                                                                                      // 40\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 41\n  }), \"\\n    \", HTML.SPAN({                                                                                            // 42\n    \"class\": \"help-block\"                                                                                              // 43\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                  // 44\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 45\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 46\n    })));                                                                                                              // 47\n  })), \"\\n  \");                                                                                                        // 48\n}));                                                                                                                   // 49\n                                                                                                                       // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/afFormGroup/afFormGroup.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afFormGroup_bootstrap3.helpers({                                                                              // 1\n  skipLabel: function bsFormGroupSkipLabel() {                                                                         // 2\n    var self = this;                                                                                                   // 3\n                                                                                                                       // 4\n    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 5\n    return (self.skipLabel || type === \"boolean-checkbox\");                                                            // 6\n  },                                                                                                                   // 7\n  bsFieldLabelAtts: function bsFieldLabelAtts() {                                                                      // 8\n    var atts = _.clone(this.afFieldLabelAtts);                                                                         // 9\n    // Add bootstrap class                                                                                             // 10\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");                                                           // 11\n    return atts;                                                                                                       // 12\n  }                                                                                                                    // 13\n});                                                                                                                    // 14\n                                                                                                                       // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/afObjectField/template.afObjectField.js                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField_bootstrap3\");                                                                      // 2\nTemplate[\"afObjectField_bootstrap3\"] = new Template(\"Template.afObjectField_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"panel \", Spacebars.mustache(view.lookup(\"panelClass\")) ];                                              // 7\n    }                                                                                                                  // 8\n  }, \"\\n    \", Spacebars.With(function() {                                                                             // 9\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 10\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 11\n    }));                                                                                                               // 12\n  }, function() {                                                                                                      // 13\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 14\n      \"class\": function() {                                                                                            // 15\n        return [ \"panel-heading \", Spacebars.mustache(view.lookup(\"headingClass\")) ];                                  // 16\n      }                                                                                                                // 17\n    }, \"\\n      \", HTML.H3({                                                                                           // 18\n      \"class\": \"panel-title\"                                                                                           // 19\n    }, Blaze.View(\"lookup:.\", function() {                                                                             // 20\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 21\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 22\n  }), \"\\n    \", HTML.DIV({                                                                                             // 23\n    \"class\": function() {                                                                                              // 24\n      return [ \"panel-body \", Spacebars.mustache(view.lookup(\"bodyClass\")) ];                                          // 25\n    }                                                                                                                  // 26\n  }, \"\\n      \", Blaze.If(function() {                                                                                 // 27\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 28\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 29\n    }));                                                                                                               // 30\n  }, function() {                                                                                                      // 31\n    return [ \"\\n      \", HTML.SPAN({                                                                                   // 32\n      \"class\": \"help-block\"                                                                                            // 33\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                // 34\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 35\n        name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                  // 36\n      })));                                                                                                            // 37\n    })), \"\\n      \" ];                                                                                                 // 38\n  }), \"\\n      \", Blaze._TemplateWith(function() {                                                                     // 39\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                             // 40\n  }, function() {                                                                                                      // 41\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 42\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 43\n}));                                                                                                                   // 44\n                                                                                                                       // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/components/afObjectField/afObjectField.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afObjectField_bootstrap3.helpers({                                                                            // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    return _.pick(this, 'name', 'id-prefix');                                                                          // 3\n  },                                                                                                                   // 4\n  panelClass: function() {                                                                                             // 5\n    return this.panelClass || 'panel-default';                                                                         // 6\n  }                                                                                                                    // 7\n});                                                                                                                    // 8\n                                                                                                                       // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-checkbox/template.boolean-checkbox.js              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckbox_bootstrap3\");                                                                         // 2\nTemplate[\"afCheckbox_bootstrap3\"] = new Template(\"Template.afCheckbox_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": \"checkbox\"                                                                                                // 6\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                          // 7\n    type: \"checkbox\",                                                                                                  // 8\n    value: \"true\"                                                                                                      // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 11\n  })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                  // 12\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 13\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 14\n    }));                                                                                                               // 15\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 16\n}));                                                                                                                   // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-radios/template.boolean-radios.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanRadioGroup_bootstrap3\");                                                                // 2\nTemplate[\"afBooleanRadioGroup_bootstrap3\"] = new Template(\"Template.afBooleanRadioGroup_bootstrap3\", (function() {     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 6\n  }), \"\\n    \", HTML.DIV({                                                                                             // 7\n    \"class\": \"radio\"                                                                                                   // 8\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 9\n    type: \"radio\",                                                                                                     // 10\n    value: \"false\",                                                                                                    // 11\n    name: function() {                                                                                                 // 12\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 13\n    }                                                                                                                  // 14\n  }, function() {                                                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));                                                           // 16\n  })), \" \", Spacebars.With(function() {                                                                                // 17\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));                                      // 18\n  }, function() {                                                                                                      // 19\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 20\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 21\n    });                                                                                                                // 22\n  }, function() {                                                                                                      // 23\n    return \"False\";                                                                                                    // 24\n  })), \"\\n    \"), \"\\n    \", HTML.DIV({                                                                                 // 25\n    \"class\": \"radio\"                                                                                                   // 26\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 27\n    type: \"radio\",                                                                                                     // 28\n    value: \"true\",                                                                                                     // 29\n    name: function() {                                                                                                 // 30\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 31\n    }                                                                                                                  // 32\n  }, function() {                                                                                                      // 33\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));                                                            // 34\n  })), \" \", Spacebars.With(function() {                                                                                // 35\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));                                       // 36\n  }, function() {                                                                                                      // 37\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 38\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 39\n    });                                                                                                                // 40\n  }, function() {                                                                                                      // 41\n    return \"True\";                                                                                                     // 42\n  })), \"\\n    \"), \"\\n    \", Spacebars.With(function() {                                                                // 43\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));                                       // 44\n  }, function() {                                                                                                      // 45\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 46\n      \"class\": \"radio\"                                                                                                 // 47\n    }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                  // 48\n      type: \"radio\",                                                                                                   // 49\n      value: \"\",                                                                                                       // 50\n      name: function() {                                                                                               // 51\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"..\"), \"name\"));                                           // 52\n      }                                                                                                                // 53\n    }, function() {                                                                                                    // 54\n      return Spacebars.attrMustache(view.lookup(\"nullAtts\"));                                                          // 55\n    })), \" \", Blaze.View(\"lookup:.\", function() {                                                                      // 56\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 57\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 58\n  }), \"\\n  \");                                                                                                         // 59\n}));                                                                                                                   // 60\n                                                                                                                       // 61\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-radios/boolean-radios.js                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afBooleanRadioGroup_bootstrap3.helpers({                                                                      // 1\n  falseAtts: function falseAtts() {                                                                                    // 2\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 3\n    if (this.value === false) {                                                                                        // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    return atts;                                                                                                       // 7\n  },                                                                                                                   // 8\n  trueAtts: function trueAtts() {                                                                                      // 9\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 10\n    if (this.value === true) {                                                                                         // 11\n      atts.checked = \"\";                                                                                               // 12\n    }                                                                                                                  // 13\n    return atts;                                                                                                       // 14\n  },                                                                                                                   // 15\n  nullAtts: function nullAtts() {                                                                                      // 16\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 17\n    if (this.value !== true && this.value !== false) {                                                                 // 18\n      atts.checked = \"\";                                                                                               // 19\n    }                                                                                                                  // 20\n    return atts;                                                                                                       // 21\n  },                                                                                                                   // 22\n  dsk: function () {                                                                                                   // 23\n    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-select/template.boolean-select.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanSelect_bootstrap3\");                                                                    // 2\nTemplate[\"afBooleanSelect_bootstrap3\"] = new Template(\"Template.afBooleanSelect_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                             // 10\n      return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                                // 11\n    }), Blaze.View(\"lookup:..label\", function() {                                                                      // 12\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 13\n    })), \"\\n    \" ];                                                                                                   // 14\n  }), \"\\n  \");                                                                                                         // 15\n}));                                                                                                                   // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/button/template.button.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputButton_bootstrap3\");                                                                      // 2\nTemplate[\"afInputButton_bootstrap3\"] = new Template(\"Template.afInputButton_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"button\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));                                                    // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/color/template.color.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputColor_bootstrap3\");                                                                       // 2\nTemplate[\"afInputColor_bootstrap3\"] = new Template(\"Template.afInputColor_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"color\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/date/template.date.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDate_bootstrap3\");                                                                        // 2\nTemplate[\"afInputDate_bootstrap3\"] = new Template(\"Template.afInputDate_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"date\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/datetime/template.datetime.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTime_bootstrap3\");                                                                    // 2\nTemplate[\"afInputDateTime_bootstrap3\"] = new Template(\"Template.afInputDateTime_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/datetime-local/template.datetime-local.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTimeLocal_bootstrap3\");                                                               // 2\nTemplate[\"afInputDateTimeLocal_bootstrap3\"] = new Template(\"Template.afInputDateTimeLocal_bootstrap3\", (function() {   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime-local\",                                                                                            // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/email/template.email.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputEmail_bootstrap3\");                                                                       // 2\nTemplate[\"afInputEmail_bootstrap3\"] = new Template(\"Template.afInputEmail_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"email\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/month/template.month.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputMonth_bootstrap3\");                                                                       // 2\nTemplate[\"afInputMonth_bootstrap3\"] = new Template(\"Template.afInputMonth_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"month\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/number/template.number.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputNumber_bootstrap3\");                                                                      // 2\nTemplate[\"afInputNumber_bootstrap3\"] = new Template(\"Template.afInputNumber_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"number\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/password/template.password.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputPassword_bootstrap3\");                                                                    // 2\nTemplate[\"afInputPassword_bootstrap3\"] = new Template(\"Template.afInputPassword_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"password\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/radio/template.radio.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadio_bootstrap3\");                                                                            // 2\nTemplate[\"afRadio_bootstrap3\"] = new Template(\"Template.afRadio_bootstrap3\", (function() {                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": \"radio\"                                                                                                   // 6\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                          // 7\n    type: \"radio\",                                                                                                     // 8\n    value: function() {                                                                                                // 9\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 10\n    }                                                                                                                  // 11\n  }, function() {                                                                                                      // 12\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 13\n  })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                  // 14\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 15\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 16\n    }));                                                                                                               // 17\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 18\n}));                                                                                                                   // 19\n                                                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/radio/radio.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afRadio_bootstrap3.helpers({                                                                                  // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    return atts;                                                                                                       // 7\n  }                                                                                                                    // 8\n});                                                                                                                    // 9\n                                                                                                                       // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/range/template.range.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputRange_bootstrap3\");                                                                       // 2\nTemplate[\"afInputRange_bootstrap3\"] = new Template(\"Template.afInputRange_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"range\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/reset/template.reset.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputReset_bootstrap3\");                                                                       // 2\nTemplate[\"afInputReset_bootstrap3\"] = new Template(\"Template.afInputReset_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"reset\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));                                                    // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/search/template.search.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSearch_bootstrap3\");                                                                      // 2\nTemplate[\"afInputSearch_bootstrap3\"] = new Template(\"Template.afInputSearch_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"search\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select/template.select.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelect_bootstrap3\");                                                                           // 2\nTemplate[\"afSelect_bootstrap3\"] = new Template(\"Template.afSelect_bootstrap3\", (function() {                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Blaze.If(function() {                                                                           // 10\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n    \", HTML.OPTGROUP({                                                                               // 13\n        label: function() {                                                                                            // 14\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 15\n        }                                                                                                              // 16\n      }, \"\\n      \", Blaze.Each(function() {                                                                           // 17\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.OPTION(HTML.Attrs(function() {                                                       // 20\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 21\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 22\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 23\n        })), \"\\n      \" ];                                                                                             // 24\n      }), \"\\n    \"), \"\\n    \" ];                                                                                       // 25\n    }, function() {                                                                                                    // 26\n      return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                           // 27\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 28\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 29\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 30\n      })), \"\\n    \" ];                                                                                                 // 31\n    }), \"\\n    \" ];                                                                                                    // 32\n  }), \"\\n  \");                                                                                                         // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox/template.select-checkbox.js                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroup_bootstrap3\");                                                                    // 2\nTemplate[\"afCheckboxGroup_bootstrap3\"] = new Template(\"Template.afCheckboxGroup_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 12\n      \"class\": \"checkbox\"                                                                                              // 13\n    }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT(HTML.Attrs({                                                    // 14\n      type: \"checkbox\",                                                                                                // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n        \", Blaze.View(\"lookup:..label\", function() {                                                       // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                            // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox/select-checkbox.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afCheckboxGroup_bootstrap3.helpers({                                                                          // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroupInline_bootstrap3\");                                                              // 2\nTemplate[\"afCheckboxGroupInline_bootstrap3\"] = new Template(\"Template.afCheckboxGroupInline_bootstrap3\", (function() { // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.LABEL({                                                                                    // 12\n      \"class\": \"checkbox-inline fix-indent\"                                                                            // 13\n    }, \"\\n      \", HTML.INPUT(HTML.Attrs({                                                                             // 14\n      type: \"checkbox\",                                                                                                // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n      \", Blaze.View(\"lookup:..label\", function() {                                                         // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n    \"), \"\\n    \" ];                                                                                         // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/select-checkbox-inline.js           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afCheckboxGroupInline_bootstrap3.helpers({                                                                    // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-multiple/template.select-multiple.js                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelectMultiple_bootstrap3\");                                                                   // 2\nTemplate[\"afSelectMultiple_bootstrap3\"] = new Template(\"Template.afSelectMultiple_bootstrap3\", (function() {           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs({                                                                                      // 5\n    multiple: \"\"                                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", Blaze.If(function() {                                                                           // 12\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n    \", HTML.OPTGROUP({                                                                               // 15\n        label: function() {                                                                                            // 16\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 17\n        }                                                                                                              // 18\n      }, \"\\n      \", Blaze.Each(function() {                                                                           // 19\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 20\n      }, function() {                                                                                                  // 21\n        return [ \"\\n      \", HTML.OPTION(HTML.Attrs(function() {                                                       // 22\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 23\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 24\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 25\n        })), \"\\n      \" ];                                                                                             // 26\n      }), \"\\n    \"), \"\\n    \" ];                                                                                       // 27\n    }, function() {                                                                                                    // 28\n      return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                           // 29\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 30\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 31\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 32\n      })), \"\\n    \" ];                                                                                                 // 33\n    }), \"\\n    \" ];                                                                                                    // 34\n  }), \"\\n  \");                                                                                                         // 35\n}));                                                                                                                   // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio/template.select-radio.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroup_bootstrap3\");                                                                       // 2\nTemplate[\"afRadioGroup_bootstrap3\"] = new Template(\"Template.afRadioGroup_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 12\n      \"class\": \"radio\"                                                                                                 // 13\n    }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT(HTML.Attrs({                                                    // 14\n      type: \"radio\",                                                                                                   // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n        \", Blaze.View(\"lookup:..label\", function() {                                                       // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                            // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio/select-radio.js                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afRadioGroup_bootstrap3.helpers({                                                                             // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio-inline/template.select-radio-inline.js        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroupInline_bootstrap3\");                                                                 // 2\nTemplate[\"afRadioGroupInline_bootstrap3\"] = new Template(\"Template.afRadioGroupInline_bootstrap3\", (function() {       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.LABEL({                                                                                    // 12\n      \"class\": \"radio-inline fix-indent\"                                                                               // 13\n    }, \"\\n      \", HTML.INPUT(HTML.Attrs({                                                                             // 14\n      type: \"radio\",                                                                                                   // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n      \", Blaze.View(\"lookup:..label\", function() {                                                         // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n    \"), \"\\n    \" ];                                                                                         // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio-inline/select-radio-inline.js                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afRadioGroupInline_bootstrap3.helpers({                                                                       // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/submit/template.submit.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSubmit_bootstrap3\");                                                                      // 2\nTemplate[\"afInputSubmit_bootstrap3\"] = new Template(\"Template.afInputSubmit_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"submit\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));                                                    // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/tel/template.tel.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTel_bootstrap3\");                                                                         // 2\nTemplate[\"afInputTel_bootstrap3\"] = new Template(\"Template.afInputTel_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"tel\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/text/template.text.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputText_bootstrap3\");                                                                        // 2\nTemplate[\"afInputText_bootstrap3\"] = new Template(\"Template.afInputText_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"text\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/textarea/template.textarea.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afTextarea_bootstrap3\");                                                                         // 2\nTemplate[\"afTextarea_bootstrap3\"] = new Template(\"Template.afTextarea_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 6\n  }, {                                                                                                                 // 7\n    value: function() {                                                                                                // 8\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 9\n    }                                                                                                                  // 10\n  }));                                                                                                                 // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/time/template.time.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTime_bootstrap3\");                                                                        // 2\nTemplate[\"afInputTime_bootstrap3\"] = new Template(\"Template.afInputTime_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"time\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/url/template.url.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputUrl_bootstrap3\");                                                                         // 2\nTemplate[\"afInputUrl_bootstrap3\"] = new Template(\"Template.afInputUrl_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"url\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/inputTypes/week/template.week.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputWeek_bootstrap3\");                                                                        // 2\nTemplate[\"afInputWeek_bootstrap3\"] = new Template(\"Template.afInputWeek_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"week\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/quickForm/template.quickForm.js                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3-horizontal\");                                                               // 2\nTemplate[\"quickForm_bootstrap3-horizontal\"] = new Template(\"Template.quickForm_bootstrap3-horizontal\", (function() {   // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n\\n    \", Spacebars.With(function() {                                                                 // 9\n        return Spacebars.call(view.lookup(\"grouplessFields\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", Blaze._TemplateWith(function() {                                                          // 12\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 13\n        }, function() {                                                                                                // 14\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 15\n        }), \"\\n    \" ];                                                                                                // 16\n      }), \"\\n\\n    \", Blaze.Each(function() {                                                                          // 17\n        return Spacebars.call(view.lookup(\"fieldGroups\"));                                                             // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.FIELDSET({                                                                           // 20\n          \"class\": \"af-fieldGroup\"                                                                                     // 21\n        }, \"\\n        \", Spacebars.With(function() {                                                                   // 22\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));                                                       // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n          \", HTML.LEGEND({                                                                       // 25\n            \"class\": \"af-fieldGroup-heading\"                                                                           // 26\n          }, Blaze.View(\"lookup:.\", function() {                                                                       // 27\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 28\n          })), \"\\n        \" ];                                                                                         // 29\n        }), \"\\n        \", Blaze._TemplateWith(function() {                                                             // 30\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 31\n        }, function() {                                                                                                // 32\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 33\n        }), \"\\n      \"), \"\\n    \" ];                                                                                   // 34\n      }), \"\\n\\n    \", Blaze.If(function() {                                                                            // 35\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 36\n      }, function() {                                                                                                  // 37\n        return [ \"\\n    \", HTML.DIV({                                                                                  // 38\n          \"class\": \"form-group\"                                                                                        // 39\n        }, \"\\n      \", HTML.DIV({                                                                                      // 40\n          \"class\": function() {                                                                                        // 41\n            return Spacebars.mustache(view.lookup(\"labelClass\"));                                                      // 42\n          }                                                                                                            // 43\n        }), \"\\n      \", HTML.DIV({                                                                                     // 44\n          \"class\": function() {                                                                                        // 45\n            return Spacebars.mustache(view.lookup(\"inputClass\"));                                                      // 46\n          }                                                                                                            // 47\n        }, \"\\n        \", HTML.BUTTON(HTML.Attrs({                                                                      // 48\n          type: \"submit\"                                                                                               // 49\n        }, function() {                                                                                                // 50\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 51\n        }), \"\\n          \", Spacebars.With(function() {                                                                // 52\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 53\n        }, function() {                                                                                                // 54\n          return [ \"\\n          \", Blaze.View(\"lookup:.\", function() {                                                 // 55\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 56\n          }), \"\\n          \" ];                                                                                        // 57\n        }, function() {                                                                                                // 58\n          return \"\\n          Submit\\n          \";                                                                     // 59\n        }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                         // 60\n      }), \"\\n\\n  \" ];                                                                                                  // 61\n    });                                                                                                                // 62\n  });                                                                                                                  // 63\n}));                                                                                                                   // 64\n                                                                                                                       // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/quickForm/quickForm.js                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate['quickForm_bootstrap3-horizontal'].helpers({                                                                  // 1\n  inputClass: function () {                                                                                            // 2\n    return this.atts[\"input-col-class\"];                                                                               // 3\n  },                                                                                                                   // 4\n  labelClass: function () {                                                                                            // 5\n    return this.atts[\"label-class\"];                                                                                   // 6\n  },                                                                                                                   // 7\n  fieldGroupLabel: function () {                                                                                       // 8\n    var name = this.name;                                                                                              // 9\n                                                                                                                       // 10\n    // if field group name is of the form XY_abcde where \"XY\" is a number, remove prefix                               // 11\n    if (!isNaN(parseInt(name.substr(0,2), 10)) && name.charAt(2) === \"_\") {                                            // 12\n      name = name.substr(3);                                                                                           // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // if SimpleSchema.defaultLabel is defined, use it                                                                 // 16\n    if (typeof SimpleSchema.defaultLabel === \"function\") {                                                             // 17\n      return SimpleSchema.defaultLabel(name);                                                                          // 18\n    } else {                                                                                                           // 19\n      // else, just capitalise name                                                                                    // 20\n      return name.charAt(0).toUpperCase() + name.slice(1);                                                             // 21\n    }                                                                                                                  // 22\n  },                                                                                                                   // 23\n  quickFieldsAtts: function () {                                                                                       // 24\n    // These are the quickForm attributes that we want to forward to                                                   // 25\n    // the afQuickFields component.                                                                                    // 26\n    return _.pick(this.atts, 'fields', 'id-prefix', 'input-col-class', 'label-class');                                 // 27\n  },                                                                                                                   // 28\n  submitButtonAtts: function () {                                                                                      // 29\n    var qfAtts = this.atts;                                                                                            // 30\n    var atts = {};                                                                                                     // 31\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 32\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 33\n    } else {                                                                                                           // 34\n      atts['class'] = 'btn btn-primary';                                                                               // 35\n    }                                                                                                                  // 36\n    return atts;                                                                                                       // 37\n  },                                                                                                                   // 38\n  qfAutoFormContext: function () {                                                                                     // 39\n    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 40\n    ctx = AutoForm.Utility.addClass(ctx, 'form-horizontal');                                                           // 41\n                                                                                                                       // 42\n    // input-col-class and label-class attributes are unique to this template so they will                             // 43\n    // not have been removed by AutoForm core. We remove them from the autoForm context                                // 44\n    // because they are attributes supported only by quickFields, quickField,                                          // 45\n    // afObjectField, afArrayField, and afFormGroup.                                                                   // 46\n    delete ctx['input-col-class'];                                                                                     // 47\n    delete ctx['label-class'];                                                                                         // 48\n                                                                                                                       // 49\n    return ctx;                                                                                                        // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 52\n                                                                                                                       // 53\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afArrayField/template.afArrayField.js           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField_bootstrap3-horizontal\");                                                            // 2\nTemplate[\"afArrayField_bootstrap3-horizontal\"] = new Template(\"Template.afArrayField_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group\", Blaze.If(function() {                                                                     // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \" has-error\";                                                                                           // 12\n      }) ];                                                                                                            // 13\n    }                                                                                                                  // 14\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                    // 16\n  }), Blaze.View(\"lookup:afFieldLabelText\", function() {                                                               // 17\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 18\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 19\n    }));                                                                                                               // 20\n  })), \"\\n    \", HTML.DIV({                                                                                            // 21\n    \"class\": function() {                                                                                              // 22\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 23\n    }                                                                                                                  // 24\n  }, \"\\n      \", HTML.DIV({                                                                                            // 25\n    \"class\": \"panel panel-default autoform-padding-fix\"                                                                // 26\n  }, \"\\n        \", Blaze.If(function() {                                                                               // 27\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 28\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 29\n    }));                                                                                                               // 30\n  }, function() {                                                                                                      // 31\n    return [ \"\\n        \", HTML.DIV({                                                                                  // 32\n      \"class\": \"panel-body has-error\"                                                                                  // 33\n    }, \"\\n          \", HTML.SPAN({                                                                                     // 34\n      \"class\": \"help-block\"                                                                                            // 35\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                // 36\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 37\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 38\n      })));                                                                                                            // 39\n    })), \"\\n        \"), \"\\n        \" ];                                                                                // 40\n  }), \"\\n        \", HTML.UL({                                                                                          // 41\n    \"class\": \"list-group\"                                                                                              // 42\n  }, \"\\n          \", Blaze._TemplateWith(function() {                                                                  // 43\n    return {                                                                                                           // 44\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 45\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 46\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 47\n    };                                                                                                                 // 48\n  }, function() {                                                                                                      // 49\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 50\n      return [ \"\\n          \", HTML.LI({                                                                               // 51\n        \"class\": \"list-group-item autoform-array-item\"                                                                 // 52\n      }, \"\\n            \", HTML.DIV(\"\\n              \", HTML.DIV({                                                     // 53\n        \"class\": \"autoform-remove-item-wrap\"                                                                           // 54\n      }, \"\\n                \", Blaze.If(function() {                                                                   // 55\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 56\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 57\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 58\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 59\n        }));                                                                                                           // 60\n      }, function() {                                                                                                  // 61\n        return [ \"\\n                \", HTML.BUTTON({                                                                   // 62\n          type: \"button\",                                                                                              // 63\n          \"class\": \"btn btn-primary autoform-remove-item\"                                                              // 64\n        }, HTML.SPAN({                                                                                                 // 65\n          \"class\": \"glyphicon glyphicon-minus\"                                                                         // 66\n        })), \"\\n                \" ];                                                                                   // 67\n      }), \"\\n              \"), \"\\n              \", HTML.DIV({                                                          // 68\n        \"class\": \"autoform-array-item-body\"                                                                            // 69\n      }, \"\\n                \", Blaze._TemplateWith(function() {                                                        // 70\n        return {                                                                                                       // 71\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 72\n          label: Spacebars.call(false),                                                                                // 73\n          options: Spacebars.call(view.lookup(\"afOptionsFromSchema\"))                                                  // 74\n        };                                                                                                             // 75\n      }, function() {                                                                                                  // 76\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 77\n      }), \"\\n              \"), \"\\n            \"), \"\\n          \"), \"\\n          \" ];                                   // 78\n    });                                                                                                                // 79\n  }), \"\\n          \", Blaze.If(function() {                                                                            // 80\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 81\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 82\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 83\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 84\n    }));                                                                                                               // 85\n  }, function() {                                                                                                      // 86\n    return [ \"\\n          \", HTML.LI({                                                                                 // 87\n      \"class\": \"list-group-item\"                                                                                       // 88\n    }, \"\\n            \", HTML.BUTTON({                                                                                 // 89\n      type: \"button\",                                                                                                  // 90\n      \"class\": \"btn btn-primary autoform-add-item\",                                                                    // 91\n      \"data-autoform-field\": function() {                                                                              // 92\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 93\n      },                                                                                                               // 94\n      \"data-autoform-mincount\": function() {                                                                           // 95\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 96\n      },                                                                                                               // 97\n      \"data-autoform-maxcount\": function() {                                                                           // 98\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 99\n      }                                                                                                                // 100\n    }, HTML.SPAN({                                                                                                     // 101\n      \"class\": \"glyphicon glyphicon-plus\"                                                                              // 102\n    })), \"\\n          \"), \"\\n          \" ];                                                                            // 103\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");                                                                  // 104\n}));                                                                                                                   // 105\n                                                                                                                       // 106\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afArrayField/afArrayField.js                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate[\"afArrayField_bootstrap3-horizontal\"].helpers({                                                               // 1\n  rightColumnClass: function () {                                                                                      // 2\n    var atts = this.atts || {};                                                                                        // 3\n    return atts['input-col-class'] || \"\";                                                                              // 4\n  },                                                                                                                   // 5\n  afFieldLabelAtts: function () {                                                                                      // 6\n    // Use only atts beginning with label-                                                                             // 7\n    var labelAtts = {};                                                                                                // 8\n    _.each(this.atts, function (val, key) {                                                                            // 9\n      if (key.indexOf(\"label-\") === 0) {                                                                               // 10\n        labelAtts[key.substring(6)] = val;                                                                             // 11\n      }                                                                                                                // 12\n    });                                                                                                                // 13\n    // Add bootstrap class                                                                                             // 14\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");                                                 // 15\n    return labelAtts;                                                                                                  // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afFormGroup/template.afFormGroup.js             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup_bootstrap3-horizontal\");                                                             // 2\nTemplate[\"afFormGroup_bootstrap3-horizontal\"] = new Template(\"Template.afFormGroup_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 13\n    },                                                                                                                 // 14\n    \"data-required\": function() {                                                                                      // 15\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 16\n    }                                                                                                                  // 17\n  }, function() {                                                                                                      // 18\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 19\n  }), \"\\n    \", Blaze.If(function() {                                                                                  // 20\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 21\n  }, function() {                                                                                                      // 22\n    return [ \"\\n    \\n    \", HTML.LABEL(HTML.Attrs(function() {                                                        // 23\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 24\n    })), \"\\n    \" ];                                                                                                   // 25\n  }, function() {                                                                                                      // 26\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 27\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 28\n    }), Blaze.If(function() {                                                                                          // 29\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 30\n    }, function() {                                                                                                    // 31\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 32\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 33\n      });                                                                                                              // 34\n    }, function() {                                                                                                    // 35\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 36\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 37\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 38\n        }));                                                                                                           // 39\n      });                                                                                                              // 40\n    })), \"\\n    \" ];                                                                                                   // 41\n  }), \"\\n    \", HTML.DIV({                                                                                             // 42\n    \"class\": function() {                                                                                              // 43\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 44\n    }                                                                                                                  // 45\n  }, \"\\n      \", Blaze._TemplateWith(function() {                                                                      // 46\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));                                                            // 47\n  }, function() {                                                                                                      // 48\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 49\n  }), \"\\n      \", HTML.SPAN({                                                                                          // 50\n    \"class\": \"help-block\"                                                                                              // 51\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                  // 52\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 53\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 54\n    })));                                                                                                              // 55\n  })), \"\\n    \"), \"\\n  \");                                                                                             // 56\n}));                                                                                                                   // 57\n                                                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afFormGroup/afFormGroup.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate[\"afFormGroup_bootstrap3-horizontal\"].helpers({                                                                // 1\n  afFieldInputAtts: function () {                                                                                      // 2\n    var atts = _.omit(this.afFieldInputAtts || {}, 'input-col-class');                                                 // 3\n    // We have a special template for check boxes, but otherwise we                                                    // 4\n    // want to use the same as those defined for bootstrap3 template.                                                  // 5\n    if (AutoForm.getInputType(this.afFieldInputAtts) === \"boolean-checkbox\") {                                         // 6\n      atts.template = \"bootstrap3-horizontal\";                                                                         // 7\n    } else {                                                                                                           // 8\n      atts.template = \"bootstrap3\";                                                                                    // 9\n    }                                                                                                                  // 10\n    return atts;                                                                                                       // 11\n  },                                                                                                                   // 12\n  afFieldLabelAtts: function () {                                                                                      // 13\n    var atts = _.clone(this.afFieldLabelAtts || {});                                                                   // 14\n    // Add bootstrap class                                                                                             // 15\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");                                                           // 16\n    return atts;                                                                                                       // 17\n  },                                                                                                                   // 18\n  rightColumnClass: function () {                                                                                      // 19\n    var atts = this.afFieldInputAtts || {};                                                                            // 20\n    return atts['input-col-class'] || \"\";                                                                              // 21\n  },                                                                                                                   // 22\n  skipLabel: function () {                                                                                             // 23\n    var self = this;                                                                                                   // 24\n                                                                                                                       // 25\n    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 26\n    return (self.skipLabel || (type === \"boolean-checkbox\" && !self.afFieldInputAtts.leftLabel));                      // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afObjectField/template.afObjectField.js         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField_bootstrap3-horizontal\");                                                           // 2\nTemplate[\"afObjectField_bootstrap3-horizontal\"] = new Template(\"Template.afObjectField_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }) ];                                                                                                            // 13\n    }                                                                                                                  // 14\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                    // 16\n  }), Blaze.View(\"lookup:afFieldLabelText\", function() {                                                               // 17\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 18\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 19\n    }));                                                                                                               // 20\n  })), \"\\n    \", HTML.DIV({                                                                                            // 21\n    \"class\": function() {                                                                                              // 22\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 23\n    }                                                                                                                  // 24\n  }, \"\\n      \", HTML.DIV({                                                                                            // 25\n    \"class\": function() {                                                                                              // 26\n      return [ \"panel panel-default autoform-padding-fix \", Spacebars.mustache(view.lookup(\"panelClass\")) ];           // 27\n    }                                                                                                                  // 28\n  }, \"\\n        \", HTML.DIV({                                                                                          // 29\n    \"class\": function() {                                                                                              // 30\n      return [ \"panel-body \", Spacebars.mustache(view.lookup(\"bodyClass\")) ];                                          // 31\n    }                                                                                                                  // 32\n  }, \"\\n          \", Blaze._TemplateWith(function() {                                                                  // 33\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                             // 34\n  }, function() {                                                                                                      // 35\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 36\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");                                                                  // 37\n}));                                                                                                                   // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afObjectField/afObjectField.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate[\"afObjectField_bootstrap3-horizontal\"].helpers({                                                              // 3\n  rightColumnClass: function () {                                                                                      // 4\n    return this['input-col-class'] || \"\";                                                                              // 5\n  },                                                                                                                   // 6\n  afFieldLabelAtts: function () {                                                                                      // 7\n    // Use only atts beginning with label-                                                                             // 8\n    var labelAtts = {};                                                                                                // 9\n    _.each(this, function (val, key) {                                                                                 // 10\n      if (key.indexOf(\"label-\") === 0) {                                                                               // 11\n        labelAtts[key.substring(6)] = val;                                                                             // 12\n      }                                                                                                                // 13\n    });                                                                                                                // 14\n    // Add bootstrap class                                                                                             // 15\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");                                                 // 16\n    return labelAtts;                                                                                                  // 17\n  },                                                                                                                   // 18\n  quickFieldsAtts: function () {                                                                                       // 19\n    var atts = _.pick(this, 'name', 'id-prefix');                                                                      // 20\n    // We want to default to using bootstrap3 template below this point                                                // 21\n    // because we don't want horizontal within horizontal                                                              // 22\n    atts.template = 'bootstrap3';                                                                                      // 23\n    return atts;                                                                                                       // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/template.boolean-checkbox.js   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckbox_bootstrap3-horizontal\");                                                              // 2\nTemplate[\"afCheckbox_bootstrap3-horizontal\"] = new Template(\"Template.afCheckbox_bootstrap3-horizontal\", (function() { // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.If(function() {                                                                                         // 5\n    return Spacebars.call(view.lookup(\"useLeftLabel\"));                                                                // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n  \\n  \", HTML.DIV({                                                                                    // 8\n      \"class\": \"checkbox\"                                                                                              // 9\n    }, \"\\n    \", HTML.INPUT(HTML.Attrs({                                                                               // 10\n      type: \"checkbox\",                                                                                                // 11\n      value: \"true\"                                                                                                    // 12\n    }, function() {                                                                                                    // 13\n      return Spacebars.attrMustache(view.lookup(\"attsPlusSpecialClass\"));                                              // 14\n    })), \"\\n  \"), \"\\n  \" ];                                                                                            // 15\n  }, function() {                                                                                                      // 16\n    return [ \"\\n  \", HTML.DIV({                                                                                        // 17\n      \"class\": \"checkbox\"                                                                                              // 18\n    }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                        // 19\n      type: \"checkbox\",                                                                                                // 20\n      value: \"true\"                                                                                                    // 21\n    }, function() {                                                                                                    // 22\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 23\n    })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                // 24\n      return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                        // 25\n        name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                  // 26\n      }));                                                                                                             // 27\n    }), \"\\n    \"), \"\\n  \"), \"\\n  \" ];                                                                                  // 28\n  });                                                                                                                  // 29\n}));                                                                                                                   // 30\n                                                                                                                       // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/boolean-checkbox.js            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate[\"afCheckbox_bootstrap3-horizontal\"].helpers({                                                                 // 1\n  attsPlusSpecialClass: function () {                                                                                  // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    atts = AutoForm.Utility.addClass(atts, \"autoform-checkbox-margin-fix\");                                            // 4\n    return atts;                                                                                                       // 5\n  },                                                                                                                   // 6\n  useLeftLabel: function () {                                                                                          // 7\n    return this.atts.leftLabel;                                                                                        // 8\n  }                                                                                                                    // 9\n});                                                                                                                    // 10\n                                                                                                                       // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-inline/template.bootstrap3-inline.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3-inline\");                                                                   // 2\nTemplate[\"quickForm_bootstrap3-inline\"] = new Template(\"Template.quickForm_bootstrap3-inline\", (function() {           // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", Blaze._TemplateWith(function() {                                                              // 9\n        return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                // 12\n      }), \"\\n    \", Blaze.If(function() {                                                                              // 13\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 14\n      }, function() {                                                                                                  // 15\n        return [ \"\\n    \", HTML.BUTTON(HTML.Attrs({                                                                    // 16\n          type: \"submit\"                                                                                               // 17\n        }, function() {                                                                                                // 18\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 19\n        }), \"\\n    \", Spacebars.With(function() {                                                                      // 20\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 21\n        }, function() {                                                                                                // 22\n          return [ \"\\n    \", Blaze.View(\"lookup:.\", function() {                                                       // 23\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 24\n          }), \"\\n    \" ];                                                                                              // 25\n        }, function() {                                                                                                // 26\n          return \"\\n    Submit\\n    \";                                                                                 // 27\n        }), \"\\n    \"), \"\\n    \" ];                                                                                     // 28\n      }), \"\\n  \" ];                                                                                                    // 29\n    });                                                                                                                // 30\n  });                                                                                                                  // 31\n}));                                                                                                                   // 32\n                                                                                                                       // 33\nTemplate.__checkName(\"afFormGroup_bootstrap3-inline\");                                                                 // 34\nTemplate[\"afFormGroup_bootstrap3-inline\"] = new Template(\"Template.afFormGroup_bootstrap3-inline\", (function() {       // 35\n  var view = this;                                                                                                     // 36\n  return HTML.DIV(HTML.Attrs({                                                                                         // 37\n    \"class\": function() {                                                                                              // 38\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 39\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 40\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 41\n        }));                                                                                                           // 42\n      }, function() {                                                                                                  // 43\n        return \"has-error\";                                                                                            // 44\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 45\n    },                                                                                                                 // 46\n    \"data-required\": function() {                                                                                      // 47\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 48\n    }                                                                                                                  // 49\n  }, function() {                                                                                                      // 50\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 51\n  }), \"\\n    \", Blaze.Unless(function() {                                                                              // 52\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 53\n  }, function() {                                                                                                      // 54\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 55\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 56\n    }), Blaze.If(function() {                                                                                          // 57\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 58\n    }, function() {                                                                                                    // 59\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 60\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 61\n      });                                                                                                              // 62\n    }, function() {                                                                                                    // 63\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 64\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 65\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 66\n        }));                                                                                                           // 67\n      });                                                                                                              // 68\n    })), \"\\n    \" ];                                                                                                   // 69\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 70\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));                                                            // 71\n  }, function() {                                                                                                      // 72\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 73\n  }), \"\\n    \", HTML.SPAN({                                                                                            // 74\n    \"class\": \"help-block\"                                                                                              // 75\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                  // 76\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 77\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 78\n    })));                                                                                                              // 79\n  })), \"\\n  \");                                                                                                        // 80\n}));                                                                                                                   // 81\n                                                                                                                       // 82\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-inline/bootstrap3-inline.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate['quickForm_bootstrap3-inline'].helpers({                                                                      // 3\n  submitButtonAtts: function () {                                                                                      // 4\n    var qfAtts = this.atts;                                                                                            // 5\n    var atts = {};                                                                                                     // 6\n    if (typeof qfAtts.buttonClasses === 'string') {                                                                    // 7\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 8\n    } else {                                                                                                           // 9\n      atts['class'] = 'btn btn-primary autoform-inline-align';                                                         // 10\n    }                                                                                                                  // 11\n    return atts;                                                                                                       // 12\n  },                                                                                                                   // 13\n  qfAutoFormContext: function () {                                                                                     // 14\n    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 15\n    ctx = AutoForm.Utility.addClass(ctx, 'form-inline');                                                               // 16\n                                                                                                                       // 17\n    // label-class attribute is unique to this template so it will                                                     // 18\n    // not have been removed by AutoForm core. We remove it from the autoForm context                                  // 19\n    // because it is an attribute supported only by quickFields, quickField,                                           // 20\n    // afObjectField, afArrayField, and afFormGroup.                                                                   // 21\n    delete ctx['label-class'];                                                                                         // 22\n                                                                                                                       // 23\n    return ctx;                                                                                                        // 24\n  },                                                                                                                   // 25\n  quickFieldsAtts: function () {                                                                                       // 26\n    // These are the quickForm attributes that we want to forward to                                                   // 27\n    // the afQuickFields component.                                                                                    // 28\n    return _.pick(this.atts, 'id-prefix', 'label-class');                                                              // 29\n  }                                                                                                                    // 30\n});                                                                                                                    // 31\n                                                                                                                       // 32\nTemplate['afFormGroup_bootstrap3-inline'].helpers({                                                                    // 33\n  afFieldInputAtts: function () {                                                                                      // 34\n    var atts = _.clone(this.afFieldInputAtts || {});                                                                   // 35\n    // Use the same templates as those defined for bootstrap3 template.                                                // 36\n    atts.template = 'bootstrap3';                                                                                      // 37\n    return atts;                                                                                                       // 38\n  }                                                                                                                    // 39\n});                                                                                                                    // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/quickForm/template.quickForm.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_plain\");                                                                               // 2\nTemplate[\"quickForm_plain\"] = new Template(\"Template.quickForm_plain\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n\\n    \", Spacebars.With(function() {                                                                 // 9\n        return Spacebars.call(view.lookup(\"grouplessFields\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", Blaze._TemplateWith(function() {                                                          // 12\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 13\n        }, function() {                                                                                                // 14\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 15\n        }), \"\\n    \" ];                                                                                                // 16\n      }), \"\\n\\n    \", Blaze.Each(function() {                                                                          // 17\n        return Spacebars.call(view.lookup(\"fieldGroups\"));                                                             // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.FIELDSET({                                                                           // 20\n          \"class\": \"af-fieldGroup\"                                                                                     // 21\n        }, \"\\n        \", Spacebars.With(function() {                                                                   // 22\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));                                                       // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n          \", HTML.LEGEND({                                                                       // 25\n            \"class\": \"af-fieldGroup-heading\"                                                                           // 26\n          }, Blaze.View(\"lookup:.\", function() {                                                                       // 27\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 28\n          })), \"\\n        \" ];                                                                                         // 29\n        }), \"\\n        \", Blaze._TemplateWith(function() {                                                             // 30\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 31\n        }, function() {                                                                                                // 32\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 33\n        }), \"\\n      \"), \"\\n    \" ];                                                                                   // 34\n      }), \"\\n\\n    \", Blaze.If(function() {                                                                            // 35\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 36\n      }, function() {                                                                                                  // 37\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({                                               // 38\n          type: \"submit\"                                                                                               // 39\n        }, function() {                                                                                                // 40\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 41\n        }), \"\\n      \", Spacebars.With(function() {                                                                    // 42\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 43\n        }, function() {                                                                                                // 44\n          return [ \"\\n      \", Blaze.View(\"lookup:.\", function() {                                                     // 45\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 46\n          }), \"\\n      \" ];                                                                                            // 47\n        }, function() {                                                                                                // 48\n          return \"\\n      Submit\\n      \";                                                                             // 49\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 50\n      }), \"\\n\\n  \" ];                                                                                                  // 51\n    });                                                                                                                // 52\n  });                                                                                                                  // 53\n}));                                                                                                                   // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/quickForm/quickForm.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.quickForm_plain.helpers({                                                                                     // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    // These are the quickForm attributes that we want to forward to                                                   // 3\n    // the afQuickFields component.                                                                                    // 4\n    return _.pick(this.atts, 'id-prefix');                                                                             // 5\n  },                                                                                                                   // 6\n  submitButtonAtts: function plQuickFormSubmitButtonAtts() {                                                           // 7\n    var qfAtts = this.atts;                                                                                            // 8\n    var atts = {};                                                                                                     // 9\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 10\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 11\n    }                                                                                                                  // 12\n    return atts;                                                                                                       // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/afArrayField/template.afArrayField.js                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField_plain\");                                                                            // 2\nTemplate[\"afArrayField_plain\"] = new Template(\"Template.afArrayField_plain\", (function() {                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.FIELDSET(\"\\n    \", HTML.LEGEND(Blaze.View(\"lookup:afFieldLabelText\", function() {                        // 5\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 6\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 7\n    }));                                                                                                               // 8\n  })), \"\\n    \", Blaze.If(function() {                                                                                 // 9\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 10\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 11\n    }));                                                                                                               // 12\n  }, function() {                                                                                                      // 13\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 14\n      \"class\": \"autoform-array-field-error\"                                                                            // 15\n    }, \"\\n      \", Blaze.View(\"lookup:afFieldMessage\", function() {                                                    // 16\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 17\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 18\n      })));                                                                                                            // 19\n    }), \"\\n    \"), \"\\n    \" ];                                                                                         // 20\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 21\n    return {                                                                                                           // 22\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 23\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 24\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 25\n    };                                                                                                                 // 26\n  }, function() {                                                                                                      // 27\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 28\n      return [ \"\\n    \", HTML.DIV({                                                                                    // 29\n        \"class\": \"autoform-array-item\"                                                                                 // 30\n      }, \"\\n      \", Blaze._TemplateWith(function() {                                                                  // 31\n        return {                                                                                                       // 32\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 33\n          label: Spacebars.call(false)                                                                                 // 34\n        };                                                                                                             // 35\n      }, function() {                                                                                                  // 36\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 37\n      }), \"\\n      \", Blaze.If(function() {                                                                            // 38\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 39\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 40\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 41\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 42\n        }));                                                                                                           // 43\n      }, function() {                                                                                                  // 44\n        return [ \"\\n      \", HTML.BUTTON({                                                                             // 45\n          type: \"button\",                                                                                              // 46\n          \"class\": \"autoform-remove-item\"                                                                              // 47\n        }, \"Remove\"), \"\\n      \" ];                                                                                    // 48\n      }), \"\\n    \"), \"\\n    \" ];                                                                                       // 49\n    });                                                                                                                // 50\n  }), \"\\n    \", Blaze.If(function() {                                                                                  // 51\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 52\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 53\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 54\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 55\n    }));                                                                                                               // 56\n  }, function() {                                                                                                      // 57\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 58\n      style: \"margin-top: 20px;\"                                                                                       // 59\n    }, \"\\n      \", HTML.BUTTON({                                                                                       // 60\n      type: \"button\",                                                                                                  // 61\n      \"class\": \"autoform-add-item\",                                                                                    // 62\n      \"data-autoform-field\": function() {                                                                              // 63\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 64\n      },                                                                                                               // 65\n      \"data-autoform-mincount\": function() {                                                                           // 66\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 67\n      },                                                                                                               // 68\n      \"data-autoform-maxcount\": function() {                                                                           // 69\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 70\n      }                                                                                                                // 71\n    }, \"Add\"), \"\\n    \"), \"\\n    \" ];                                                                                  // 72\n  }), \"\\n  \");                                                                                                         // 73\n}));                                                                                                                   // 74\n                                                                                                                       // 75\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/afFormGroup/template.afFormGroup.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup_plain\");                                                                             // 2\nTemplate[\"afFormGroup_plain\"] = new Template(\"Template.afFormGroup_plain\", (function() {                               // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": function() {                                                                                              // 6\n      return [ Blaze.If(function() {                                                                                   // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 13\n    },                                                                                                                 // 14\n    \"data-required\": function() {                                                                                      // 15\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 16\n    }                                                                                                                  // 17\n  }, function() {                                                                                                      // 18\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 19\n  }), \"\\n    \", Blaze.Unless(function() {                                                                              // 20\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"skipLabel\"));                                               // 21\n  }, function() {                                                                                                      // 22\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 23\n      return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"afFieldLabelAtts\"));                              // 24\n    }), Blaze.If(function() {                                                                                          // 25\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 26\n    }, function() {                                                                                                    // 27\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 28\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 29\n      });                                                                                                              // 30\n    }, function() {                                                                                                    // 31\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 32\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 33\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 34\n        }));                                                                                                           // 35\n      });                                                                                                              // 36\n    })), \"\\n    \" ];                                                                                                   // 37\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 38\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));                                        // 39\n  }, function() {                                                                                                      // 40\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 41\n  }), \"\\n    \", HTML.SPAN(Blaze.View(\"lookup:afFieldMessage\", function() {                                             // 42\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 43\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 44\n    })));                                                                                                              // 45\n  })), \"\\n  \");                                                                                                        // 46\n}));                                                                                                                   // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/afObjectField/template.afObjectField.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField_plain\");                                                                           // 2\nTemplate[\"afObjectField_plain\"] = new Template(\"Template.afObjectField_plain\", (function() {                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.FIELDSET(\"\\n    \", Spacebars.With(function() {                                                           // 5\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 6\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", HTML.LEGEND(Blaze.View(\"lookup:.\", function() {                                                 // 10\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 11\n    })), \"\\n    \" ];                                                                                                   // 12\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 13\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                             // 14\n  }, function() {                                                                                                      // 15\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 16\n  }), \"\\n  \");                                                                                                         // 17\n}));                                                                                                                   // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/components/afObjectField/afObjectField.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afObjectField_plain.helpers({                                                                                 // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    return _.pick(this, 'name', 'id-prefix');                                                                          // 3\n  }                                                                                                                    // 4\n});                                                                                                                    // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain-fieldset/template.plain-fieldset.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_plain-fieldset\");                                                                      // 2\nTemplate[\"quickForm_plain-fieldset\"] = new Template(\"Template.quickForm_plain-fieldset\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", HTML.FIELDSET(\"\\n      \", Spacebars.With(function() {                                         // 9\n        return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"legend\"));                                     // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", HTML.LEGEND(Blaze.View(\"lookup:.\", function() {                                           // 12\n          return Spacebars.mustache(view.lookup(\".\"));                                                                 // 13\n        })), \"\\n      \" ];                                                                                             // 14\n      }), \"\\n      \", Blaze._TemplateWith(function() {                                                                 // 15\n        return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                         // 16\n      }, function() {                                                                                                  // 17\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                // 18\n      }), \"\\n    \"), \"\\n    \", Blaze.If(function() {                                                                   // 19\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 20\n      }, function() {                                                                                                  // 21\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({                                               // 22\n          type: \"submit\"                                                                                               // 23\n        }, function() {                                                                                                // 24\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 25\n        }), \"\\n        \", Spacebars.With(function() {                                                                  // 26\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 27\n        }, function() {                                                                                                // 28\n          return [ \"\\n        \", Blaze.View(\"lookup:.\", function() {                                                   // 29\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 30\n          }), \"\\n        \" ];                                                                                          // 31\n        }, function() {                                                                                                // 32\n          return \"\\n        Submit\\n        \";                                                                         // 33\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 34\n      }), \"\\n  \" ];                                                                                                    // 35\n    });                                                                                                                // 36\n  });                                                                                                                  // 37\n}));                                                                                                                   // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain-fieldset/plain-fieldset.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate['quickForm_plain-fieldset'].helpers({                                                                         // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    // These are the quickForm attributes that we want to forward to                                                   // 3\n    // the afQuickFields component.                                                                                    // 4\n    return _.pick(this.atts, 'id-prefix');                                                                             // 5\n  },                                                                                                                   // 6\n  submitButtonAtts: function plfsQuickFormSubmitButtonAtts() {                                                         // 7\n    var qfAtts = this.atts;                                                                                            // 8\n    var atts = {};                                                                                                     // 9\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 10\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 11\n    }                                                                                                                  // 12\n    return atts;                                                                                                       // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]
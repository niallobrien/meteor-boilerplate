[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsClient = Package['accounts-base'].AccountsClient;\n\n/* Package-scope variables */\nvar Roles;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/alanning_roles/packages/alanning_roles.js                                                             //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n(function () {                                                                                                    // 1\n                                                                                                                  // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                         //     // 4\n// packages/alanning:roles/roles_common.js                                                                 //     // 5\n//                                                                                                         //     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                           //     // 8\n;(function () {                                                                                            // 1   // 9\n                                                                                                           // 2   // 10\n/**                                                                                                        // 3   // 11\n * Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.    // 4   // 12\n *                                                                                                         // 5   // 13\n * @module Roles                                                                                           // 6   // 14\n */                                                                                                        // 7   // 15\n                                                                                                           // 8   // 16\n/**                                                                                                        // 9   // 17\n * Roles collection documents consist only of an id and a role name.                                       // 10  // 18\n *   ex: { _id:<uuid>, name: \"admin\" }                                                                     // 11  // 19\n */                                                                                                        // 12  // 20\nif (!Meteor.roles) {                                                                                       // 13  // 21\n  Meteor.roles = new Meteor.Collection(\"roles\")                                                            // 14  // 22\n}                                                                                                          // 15  // 23\n                                                                                                           // 16  // 24\n/**                                                                                                        // 17  // 25\n * Role-based authorization compatible with built-in Meteor accounts package.                              // 18  // 26\n *                                                                                                         // 19  // 27\n * Stores user's current roles in a 'roles' field on the user object.                                      // 20  // 28\n *                                                                                                         // 21  // 29\n * @class Roles                                                                                            // 22  // 30\n * @constructor                                                                                            // 23  // 31\n */                                                                                                        // 24  // 32\nif ('undefined' === typeof Roles) {                                                                        // 25  // 33\n  Roles = {}                                                                                               // 26  // 34\n}                                                                                                          // 27  // 35\n                                                                                                           // 28  // 36\n\"use strict\";                                                                                              // 29  // 37\n                                                                                                           // 30  // 38\nvar mixingGroupAndNonGroupErrorMsg = \"Roles error: Can't mix grouped and non-grouped roles for same user\"; // 31  // 39\n                                                                                                           // 32  // 40\n_.extend(Roles, {                                                                                          // 33  // 41\n                                                                                                           // 34  // 42\n  /**                                                                                                      // 35  // 43\n   * Constant used to reference the special 'global' group that                                            // 36  // 44\n   * can be used to apply blanket permissions across all groups.                                           // 37  // 45\n   *                                                                                                       // 38  // 46\n   * @example                                                                                              // 39  // 47\n   *     Roles.addUsersToRoles(user, 'admin', Roles.GLOBAL_GROUP)                                          // 40  // 48\n   *     Roles.userIsInRole(user, 'admin') // => true                                                      // 41  // 49\n   *                                                                                                       // 42  // 50\n   *     Roles.setUserRoles(user, 'support-staff', Roles.GLOBAL_GROUP)                                     // 43  // 51\n   *     Roles.userIsInRole(user, 'support-staff') // => true                                              // 44  // 52\n   *     Roles.userIsInRole(user, 'admin') // => false                                                     // 45  // 53\n   *                                                                                                       // 46  // 54\n   * @property GLOBAL_GROUP                                                                                // 47  // 55\n   * @type String                                                                                          // 48  // 56\n   * @static                                                                                               // 49  // 57\n   * @final                                                                                                // 50  // 58\n   */                                                                                                      // 51  // 59\n  GLOBAL_GROUP: '__global_roles__',                                                                        // 52  // 60\n                                                                                                           // 53  // 61\n                                                                                                           // 54  // 62\n  /**                                                                                                      // 55  // 63\n   * Create a new role. Whitespace will be trimmed.                                                        // 56  // 64\n   *                                                                                                       // 57  // 65\n   * @method createRole                                                                                    // 58  // 66\n   * @param {String} role Name of role                                                                     // 59  // 67\n   * @return {String} id of new role                                                                       // 60  // 68\n   */                                                                                                      // 61  // 69\n  createRole: function (role) {                                                                            // 62  // 70\n    var id,                                                                                                // 63  // 71\n        match                                                                                              // 64  // 72\n                                                                                                           // 65  // 73\n    if (!role                                                                                              // 66  // 74\n        || 'string' !== typeof role                                                                        // 67  // 75\n        || role.trim().length === 0) {                                                                     // 68  // 76\n      return                                                                                               // 69  // 77\n    }                                                                                                      // 70  // 78\n                                                                                                           // 71  // 79\n    try {                                                                                                  // 72  // 80\n      id = Meteor.roles.insert({'name': role.trim()})                                                      // 73  // 81\n      return id                                                                                            // 74  // 82\n    } catch (e) {                                                                                          // 75  // 83\n      // (from Meteor accounts-base package, insertUserDoc func)                                           // 76  // 84\n      // XXX string parsing sucks, maybe                                                                   // 77  // 85\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day                                // 78  // 86\n      if (e.name !== 'MongoError') throw e                                                                 // 79  // 87\n      match = e.err.match(/^E11000 duplicate key error index: ([^ ]+)/)                                    // 80  // 88\n      if (!match) throw e                                                                                  // 81  // 89\n      if (match[1].indexOf('$name') !== -1)                                                                // 82  // 90\n        throw new Meteor.Error(403, \"Role already exists.\")                                                // 83  // 91\n      throw e                                                                                              // 84  // 92\n    }                                                                                                      // 85  // 93\n  },                                                                                                       // 86  // 94\n                                                                                                           // 87  // 95\n  /**                                                                                                      // 88  // 96\n   * Delete an existing role.  Will throw \"Role in use\" error if any users                                 // 89  // 97\n   * are currently assigned to the target role.                                                            // 90  // 98\n   *                                                                                                       // 91  // 99\n   * @method deleteRole                                                                                    // 92  // 100\n   * @param {String} role Name of role                                                                     // 93  // 101\n   */                                                                                                      // 94  // 102\n  deleteRole: function (role) {                                                                            // 95  // 103\n    if (!role) return                                                                                      // 96  // 104\n                                                                                                           // 97  // 105\n    var foundExistingUser = Meteor.users.findOne(                                                          // 98  // 106\n                              {roles: {$in: [role]}},                                                      // 99  // 107\n                              {fields: {_id: 1}})                                                          // 100\n                                                                                                           // 101\n    if (foundExistingUser) {                                                                               // 102\n      throw new Meteor.Error(403, 'Role in use')                                                           // 103\n    }                                                                                                      // 104\n                                                                                                           // 105\n    var thisRole = Meteor.roles.findOne({name: role})                                                      // 106\n    if (thisRole) {                                                                                        // 107\n      Meteor.roles.remove({_id: thisRole._id})                                                             // 108\n    }                                                                                                      // 109\n  },                                                                                                       // 110\n                                                                                                           // 111\n  /**                                                                                                      // 112\n   * Add users to roles. Will create roles as needed.                                                      // 113\n   *                                                                                                       // 114\n   * NOTE: Mixing grouped and non-grouped roles for the same user                                          // 115\n   *       is not supported and will throw an error.                                                       // 116\n   *                                                                                                       // 117\n   * Makes 2 calls to database:                                                                            // 118\n   *  1. retrieve list of all existing roles                                                               // 119\n   *  2. update users' roles                                                                               // 120\n   *                                                                                                       // 121\n   * @example                                                                                              // 122\n   *     Roles.addUsersToRoles(userId, 'admin')                                                            // 123\n   *     Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')                                    // 124\n   *     Roles.addUsersToRoles([user1, user2], ['user','editor'])                                          // 125\n   *     Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')        // 126\n   *     Roles.addUsersToRoles(userId, 'admin', Roles.GLOBAL_GROUP)                                        // 127\n   *                                                                                                       // 128\n   * @method addUsersToRoles                                                                               // 129\n   * @param {Array|String} users User id(s) or object(s) with an _id field                                 // 130\n   * @param {Array|String} roles Name(s) of roles/permissions to add users to                              // 131\n   * @param {String} [group] Optional group name. If supplied, roles will be                               // 132\n   *                         specific to that group.                                                       // 133\n   *                         Group names can not start with '$' or numbers.                                // 134\n   *                         Periods in names '.' are automatically converted                              // 135\n   *                         to underscores.                                                               // 136\n   *                         The special group Roles.GLOBAL_GROUP provides                                 // 137\n   *                         a convenient way to assign blanket roles/permissions                          // 138\n   *                         across all groups.  The roles/permissions in the                              // 139\n   *                         Roles.GLOBAL_GROUP group will be automatically                                // 140\n   *                         included in checks for any group.                                             // 141\n   */                                                                                                      // 142\n  addUsersToRoles: function (users, roles, group) {                                                        // 143\n    // use Template pattern to update user roles                                                           // 144\n    Roles._updateUserRoles(users, roles, group, Roles._update_$addToSet_fn)                                // 145\n  },                                                                                                       // 146\n                                                                                                           // 147\n  /**                                                                                                      // 148\n   * Set a users roles/permissions.                                                                        // 149\n   *                                                                                                       // 150\n   * @example                                                                                              // 151\n   *     Roles.setUserRoles(userId, 'admin')                                                               // 152\n   *     Roles.setUserRoles(userId, ['view-secrets'], 'example.com')                                       // 153\n   *     Roles.setUserRoles([user1, user2], ['user','editor'])                                             // 154\n   *     Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')           // 155\n   *     Roles.setUserRoles(userId, 'admin', Roles.GLOBAL_GROUP)                                           // 156\n   *                                                                                                       // 157\n   * @method setUserRoles                                                                                  // 158\n   * @param {Array|String} users User id(s) or object(s) with an _id field                                 // 159\n   * @param {Array|String} roles Name(s) of roles/permissions to add users to                              // 160\n   * @param {String} [group] Optional group name. If supplied, roles will be                               // 161\n   *                         specific to that group.                                                       // 162\n   *                         Group names can not start with '$'.                                           // 163\n   *                         Periods in names '.' are automatically converted                              // 164\n   *                         to underscores.                                                               // 165\n   *                         The special group Roles.GLOBAL_GROUP provides                                 // 166\n   *                         a convenient way to assign blanket roles/permissions                          // 167\n   *                         across all groups.  The roles/permissions in the                              // 168\n   *                         Roles.GLOBAL_GROUP group will be automatically                                // 169\n   *                         included in checks for any group.                                             // 170\n   */                                                                                                      // 171\n  setUserRoles: function (users, roles, group) {                                                           // 172\n    // use Template pattern to update user roles                                                           // 173\n    Roles._updateUserRoles(users, roles, group, Roles._update_$set_fn)                                     // 174\n  },                                                                                                       // 175\n                                                                                                           // 176\n  /**                                                                                                      // 177\n   * Remove users from roles                                                                               // 178\n   *                                                                                                       // 179\n   * @example                                                                                              // 180\n   *     Roles.removeUsersFromRoles(users.bob, 'admin')                                                    // 181\n   *     Roles.removeUsersFromRoles([users.bob, users.joe], ['editor'])                                    // 182\n   *     Roles.removeUsersFromRoles([users.bob, users.joe], ['editor', 'user'])                            // 183\n   *     Roles.removeUsersFromRoles(users.eve, ['user'], 'group1')                                         // 184\n   *                                                                                                       // 185\n   * @method removeUsersFromRoles                                                                          // 186\n   * @param {Array|String} users User id(s) or object(s) with an _id field                                 // 187\n   * @param {Array|String} roles Name(s) of roles to add users to                                          // 188\n   * @param {String} [group] Optional. Group name. If supplied, only that                                  // 189\n   *                         group will have roles removed.                                                // 190\n   */                                                                                                      // 191\n  removeUsersFromRoles: function (users, roles, group) {                                                   // 192\n    var update                                                                                             // 193\n                                                                                                           // 194\n    if (!users) throw new Error (\"Missing 'users' param\")                                                  // 195\n    if (!roles) throw new Error (\"Missing 'roles' param\")                                                  // 196\n    if (group) {                                                                                           // 197\n      if ('string' !== typeof group)                                                                       // 198\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                 // 199\n      if ('$' === group[0])                                                                                // 200\n        throw new Error (\"Roles error: groups can not start with '$'\")                                     // 201\n                                                                                                           // 202\n      // convert any periods to underscores                                                                // 203\n      group = group.replace(/\\./g, '_')                                                                    // 204\n    }                                                                                                      // 205\n                                                                                                           // 206\n    // ensure arrays                                                                                       // 207\n    if (!_.isArray(users)) users = [users]                                                                 // 208\n    if (!_.isArray(roles)) roles = [roles]                                                                 // 209\n                                                                                                           // 210\n    // ensure users is an array of user ids                                                                // 211\n    users = _.reduce(users, function (memo, user) {                                                        // 212\n      var _id                                                                                              // 213\n      if ('string' === typeof user) {                                                                      // 214\n        memo.push(user)                                                                                    // 215\n      } else if ('object' === typeof user) {                                                               // 216\n        _id = user._id                                                                                     // 217\n        if ('string' === typeof _id) {                                                                     // 218\n          memo.push(_id)                                                                                   // 219\n        }                                                                                                  // 220\n      }                                                                                                    // 221\n      return memo                                                                                          // 222\n    }, [])                                                                                                 // 223\n                                                                                                           // 224\n    // update all users, remove from roles set                                                             // 225\n                                                                                                           // 226\n    if (group) {                                                                                           // 227\n      update = {$pullAll: {}}                                                                              // 228\n      update.$pullAll['roles.'+group] = roles                                                              // 229\n    } else {                                                                                               // 230\n      update = {$pullAll: {roles: roles}}                                                                  // 231\n    }                                                                                                      // 232\n                                                                                                           // 233\n    try {                                                                                                  // 234\n      if (Meteor.isClient) {                                                                               // 235\n        // Iterate over each user to fulfill Meteor's 'one update per ID' policy                           // 236\n        _.each(users, function (user) {                                                                    // 237\n          Meteor.users.update({_id:user}, update)                                                          // 238\n        })                                                                                                 // 239\n      } else {                                                                                             // 240\n        // On the server we can leverage MongoDB's $in operator for performance                            // 241\n        Meteor.users.update({_id:{$in:users}}, update, {multi: true})                                      // 242\n      }                                                                                                    // 243\n    }                                                                                                      // 244\n    catch (ex) {                                                                                           // 245\n      var removeNonGroupedRoleFromGroupMsg = 'Cannot apply $pull/$pullAll modifier to non-array'           // 246\n                                                                                                           // 247\n      if (ex.name === 'MongoError' &&                                                                      // 248\n          ex.err === removeNonGroupedRoleFromGroupMsg) {                                                   // 249\n        throw new Error (mixingGroupAndNonGroupErrorMsg)                                                   // 250\n      }                                                                                                    // 251\n                                                                                                           // 252\n      throw ex                                                                                             // 253\n    }                                                                                                      // 254\n  },                                                                                                       // 255\n                                                                                                           // 256\n  /**                                                                                                      // 257\n   * Check if user has specified permissions/roles                                                         // 258\n   *                                                                                                       // 259\n   * @example                                                                                              // 260\n   *     // non-group usage                                                                                // 261\n   *     Roles.userIsInRole(user, 'admin')                                                                 // 262\n   *     Roles.userIsInRole(user, ['admin','editor'])                                                      // 263\n   *     Roles.userIsInRole(userId, 'admin')                                                               // 264\n   *     Roles.userIsInRole(userId, ['admin','editor'])                                                    // 265\n   *                                                                                                       // 266\n   *     // per-group usage                                                                                // 267\n   *     Roles.userIsInRole(user,   ['admin','editor'], 'group1')                                          // 268\n   *     Roles.userIsInRole(userId, ['admin','editor'], 'group1')                                          // 269\n   *     Roles.userIsInRole(userId, ['admin','editor'], Roles.GLOBAL_GROUP)                                // 270\n   *                                                                                                       // 271\n   *     // this format can also be used as short-hand for Roles.GLOBAL_GROUP                              // 272\n   *     Roles.userIsInRole(user, 'admin')                                                                 // 273\n   *                                                                                                       // 274\n   * @method userIsInRole                                                                                  // 275\n   * @param {String|Object} user User Id or actual user object                                             // 276\n   * @param {String|Array} roles Name of role/permission or Array of                                       // 277\n   *                            roles/permissions to check against.  If array,                             // 278\n   *                            will return true if user is in _any_ role.                                 // 279\n   * @param {String} [group] Optional. Name of group.  If supplied, limits check                           // 280\n   *                         to just that group.                                                           // 281\n   *                         The user's Roles.GLOBAL_GROUP will always be checked                          // 282\n   *                         whether group is specified or not.                                            // 283\n   * @return {Boolean} true if user is in _any_ of the target roles                                        // 284\n   */                                                                                                      // 285\n  userIsInRole: function (user, roles, group) {                                                            // 286\n    var id,                                                                                                // 287\n        userRoles,                                                                                         // 288\n        query,                                                                                             // 289\n        groupQuery,                                                                                        // 290\n        found = false                                                                                      // 291\n                                                                                                           // 292\n    // ensure array to simplify code                                                                       // 293\n    if (!_.isArray(roles)) {                                                                               // 294\n      roles = [roles]                                                                                      // 295\n    }                                                                                                      // 296\n                                                                                                           // 297\n    if (!user) return false                                                                                // 298\n    if (group) {                                                                                           // 299\n      if ('string' !== typeof group) return false                                                          // 300\n      if ('$' === group[0]) return false                                                                   // 301\n                                                                                                           // 302\n      // convert any periods to underscores                                                                // 303\n      group = group.replace(/\\./g, '_')                                                                    // 304\n    }                                                                                                      // 305\n                                                                                                           // 306\n    if ('object' === typeof user) {                                                                        // 307\n      userRoles = user.roles                                                                               // 308\n      if (_.isArray(userRoles)) {                                                                          // 309\n        return _.some(roles, function (role) {                                                             // 310\n          return _.contains(userRoles, role)                                                               // 311\n        })                                                                                                 // 312\n      } else if ('object' === typeof userRoles) {                                                          // 313\n        // roles field is dictionary of groups                                                             // 314\n        found = _.isArray(userRoles[group]) && _.some(roles, function (role) {                             // 315\n          return _.contains(userRoles[group], role)                                                        // 316\n        })                                                                                                 // 317\n        if (!found) {                                                                                      // 318\n          // not found in regular group or group not specified.                                            // 319\n          // check Roles.GLOBAL_GROUP, if it exists                                                        // 320\n          found = _.isArray(userRoles[Roles.GLOBAL_GROUP]) && _.some(roles, function (role) {              // 321\n            return _.contains(userRoles[Roles.GLOBAL_GROUP], role)                                         // 322\n          })                                                                                               // 323\n        }                                                                                                  // 324\n        return found                                                                                       // 325\n      }                                                                                                    // 326\n                                                                                                           // 327\n      // missing roles field, try going direct via id                                                      // 328\n      id = user._id                                                                                        // 329\n    } else if ('string' === typeof user) {                                                                 // 330\n      id = user                                                                                            // 331\n    }                                                                                                      // 332\n                                                                                                           // 333\n    if (!id) return false                                                                                  // 334\n                                                                                                           // 335\n                                                                                                           // 336\n    query = {_id: id, $or: []}                                                                             // 337\n                                                                                                           // 338\n    // always check Roles.GLOBAL_GROUP                                                                     // 339\n    groupQuery = {}                                                                                        // 340\n    groupQuery['roles.'+Roles.GLOBAL_GROUP] = {$in: roles}                                                 // 341\n    query.$or.push(groupQuery)                                                                             // 342\n                                                                                                           // 343\n    if (group) {                                                                                           // 344\n      // structure of query, when group specified including Roles.GLOBAL_GROUP                             // 345\n      //   {_id: id,                                                                                       // 346\n      //    $or: [                                                                                         // 347\n      //      {'roles.group1':{$in: ['admin']}},                                                           // 348\n      //      {'roles.__global_roles__':{$in: ['admin']}}                                                  // 349\n      //    ]}                                                                                             // 350\n      groupQuery = {}                                                                                      // 351\n      groupQuery['roles.'+group] = {$in: roles}                                                            // 352\n      query.$or.push(groupQuery)                                                                           // 353\n    } else {                                                                                               // 354\n      // structure of query, where group not specified. includes                                           // 355\n      // Roles.GLOBAL_GROUP                                                                                // 356\n      //   {_id: id,                                                                                       // 357\n      //    $or: [                                                                                         // 358\n      //      {roles: {$in: ['admin']}},                                                                   // 359\n      //      {'roles.__global_roles__': {$in: ['admin']}}                                                 // 360\n      //    ]}                                                                                             // 361\n      query.$or.push({roles: {$in: roles}})                                                                // 362\n    }                                                                                                      // 363\n                                                                                                           // 364\n    found = Meteor.users.findOne(query, {fields: {_id: 1}})                                                // 365\n    return found ? true : false                                                                            // 366\n  },                                                                                                       // 367\n                                                                                                           // 368\n  /**                                                                                                      // 369\n   * Retrieve users roles                                                                                  // 370\n   *                                                                                                       // 371\n   * @method getRolesForUser                                                                               // 372\n   * @param {String|Object} user User Id or actual user object                                             // 373\n   * @param {String} [group] Optional name of group to restrict roles to.                                  // 374\n   *                         User's Roles.GLOBAL_GROUP will also be included.                              // 375\n   * @return {Array} Array of user's roles, unsorted.                                                      // 376\n   */                                                                                                      // 377\n  getRolesForUser: function (user, group) {                                                                // 378\n    if (!user) return []                                                                                   // 379\n    if (group) {                                                                                           // 380\n      if ('string' !== typeof group) return []                                                             // 381\n      if ('$' === group[0]) return []                                                                      // 382\n                                                                                                           // 383\n      // convert any periods to underscores                                                                // 384\n      group = group.replace(/\\./g, '_')                                                                    // 385\n    }                                                                                                      // 386\n                                                                                                           // 387\n    if ('string' === typeof user) {                                                                        // 388\n      user = Meteor.users.findOne(                                                                         // 389\n               {_id: user},                                                                                // 390\n               {fields: {roles: 1}})                                                                       // 391\n                                                                                                           // 392\n    } else if ('object' !== typeof user) {                                                                 // 393\n      // invalid user object                                                                               // 394\n      return []                                                                                            // 395\n    }                                                                                                      // 396\n                                                                                                           // 397\n    if (!user || !user.roles) return []                                                                    // 398\n                                                                                                           // 399\n    if (group) {                                                                                           // 400\n      return _.union(user.roles[group] || [], user.roles[Roles.GLOBAL_GROUP] || [])                        // 401\n    }                                                                                                      // 402\n                                                                                                           // 403\n    if (_.isArray(user.roles))                                                                             // 404\n      return user.roles                                                                                    // 405\n                                                                                                           // 406\n    // using groups but group not specified. return global group, if exists                                // 407\n    return user.roles[Roles.GLOBAL_GROUP] || []                                                            // 408\n  },                                                                                                       // 409\n                                                                                                           // 410\n  /**                                                                                                      // 411\n   * Retrieve set of all existing roles                                                                    // 412\n   *                                                                                                       // 413\n   * @method getAllRoles                                                                                   // 414\n   * @return {Cursor} cursor of existing roles                                                             // 415\n   */                                                                                                      // 416\n  getAllRoles: function () {                                                                               // 417\n    return Meteor.roles.find({}, {sort: {name: 1}})                                                        // 418\n  },                                                                                                       // 419\n                                                                                                           // 420\n  /**                                                                                                      // 421\n   * Retrieve all users who are in target role.                                                            // 422\n   *                                                                                                       // 423\n   * NOTE: This is an expensive query; it performs a full collection scan                                  // 424\n   * on the users collection since there is no index set on the 'roles' field.                             // 425\n   * This is by design as most queries will specify an _id so the _id index is                             // 426\n   * used automatically.                                                                                   // 427\n   *                                                                                                       // 428\n   * @method getUsersInRole                                                                                // 429\n   * @param {Array|String} role Name of role/permission.  If array, users                                  // 430\n   *                            returned will have at least one of the roles                               // 431\n   *                            specified but need not have _all_ roles.                                   // 432\n   * @param {String} [group] Optional name of group to restrict roles to.                                  // 433\n   *                         User's Roles.GLOBAL_GROUP will also be checked.                               // 434\n   * @return {Cursor} cursor of users in role                                                              // 435\n   */                                                                                                      // 436\n  getUsersInRole: function (role, group) {                                                                 // 437\n    var query,                                                                                             // 438\n        roles = role,                                                                                      // 439\n        groupQuery                                                                                         // 440\n                                                                                                           // 441\n    // ensure array to simplify query logic                                                                // 442\n    if (!_.isArray(roles)) roles = [roles]                                                                 // 443\n                                                                                                           // 444\n    if (group) {                                                                                           // 445\n      if ('string' !== typeof group)                                                                       // 446\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                 // 447\n      if ('$' === group[0])                                                                                // 448\n        throw new Error (\"Roles error: groups can not start with '$'\")                                     // 449\n                                                                                                           // 450\n      // convert any periods to underscores                                                                // 451\n      group = group.replace(/\\./g, '_')                                                                    // 452\n    }                                                                                                      // 453\n                                                                                                           // 454\n    query = {$or: []}                                                                                      // 455\n                                                                                                           // 456\n    // always check Roles.GLOBAL_GROUP                                                                     // 457\n    groupQuery = {}                                                                                        // 458\n    groupQuery['roles.'+Roles.GLOBAL_GROUP] = {$in: roles}                                                 // 459\n    query.$or.push(groupQuery)                                                                             // 460\n                                                                                                           // 461\n    if (group) {                                                                                           // 462\n      // structure of query, when group specified including Roles.GLOBAL_GROUP                             // 463\n      //   {                                                                                               // 464\n      //    $or: [                                                                                         // 465\n      //      {'roles.group1':{$in: ['admin']}},                                                           // 466\n      //      {'roles.__global_roles__':{$in: ['admin']}}                                                  // 467\n      //    ]}                                                                                             // 468\n      groupQuery = {}                                                                                      // 469\n      groupQuery['roles.'+group] = {$in: roles}                                                            // 470\n      query.$or.push(groupQuery)                                                                           // 471\n    } else {                                                                                               // 472\n      // structure of query, where group not specified. includes                                           // 473\n      // Roles.GLOBAL_GROUP                                                                                // 474\n      //   {                                                                                               // 475\n      //    $or: [                                                                                         // 476\n      //      {roles: {$in: ['admin']}},                                                                   // 477\n      //      {'roles.__global_roles__': {$in: ['admin']}}                                                 // 478\n      //    ]}                                                                                             // 479\n      query.$or.push({roles: {$in: roles}})                                                                // 480\n    }                                                                                                      // 481\n                                                                                                           // 482\n    return Meteor.users.find(query)                                                                        // 483\n  },  // end getUsersInRole                                                                                // 484\n                                                                                                           // 485\n  /**                                                                                                      // 486\n   * Retrieve users groups, if any                                                                         // 487\n   *                                                                                                       // 488\n   * @method getGroupsForUser                                                                              // 489\n   * @param {String|Object} user User Id or actual user object                                             // 490\n   * @param {String} [role] Optional name of roles to restrict groups to.                                  // 491\n   *                                                                                                       // 492\n   * @return {Array} Array of user's groups, unsorted. Roles.GLOBAL_GROUP will be omitted                  // 493\n   */                                                                                                      // 494\n  getGroupsForUser: function (user, role) {                                                                // 495\n    var userGroups = [];                                                                                   // 496\n                                                                                                           // 497\n    if (!user) return []                                                                                   // 498\n    if (role) {                                                                                            // 499\n      if ('string' !== typeof role) return []                                                              // 500\n      if ('$' === role[0]) return []                                                                       // 501\n                                                                                                           // 502\n      // convert any periods to underscores                                                                // 503\n      role = role.replace('.', '_')                                                                        // 504\n    }                                                                                                      // 505\n                                                                                                           // 506\n    if ('string' === typeof user) {                                                                        // 507\n      user = Meteor.users.findOne(                                                                         // 508\n               {_id: user},                                                                                // 509\n               {fields: {roles: 1}})                                                                       // 510\n                                                                                                           // 511\n    }else if ('object' !== typeof user) {                                                                  // 512\n      // invalid user object                                                                               // 513\n      return []                                                                                            // 514\n    }                                                                                                      // 515\n                                                                                                           // 516\n    //User has no roles or is not using groups                                                             // 517\n    if (!user || !user.roles || _.isArray(user.roles)) return []                                           // 518\n                                                                                                           // 519\n    if (role) {                                                                                            // 520\n      _.each(user.roles, function(groupRoles, groupName) {                                                 // 521\n        if (_.contains(groupRoles, role) && groupName !== Roles.GLOBAL_GROUP) {                            // 522\n          userGroups.push(groupName);                                                                      // 523\n        }                                                                                                  // 524\n      });                                                                                                  // 525\n      return userGroups;                                                                                   // 526\n    }else {                                                                                                // 527\n      return _.without(_.keys(user.roles), Roles.GLOBAL_GROUP);                                            // 528\n    }                                                                                                      // 529\n                                                                                                           // 530\n  }, //End getGroupsForUser                                                                                // 531\n                                                                                                           // 532\n                                                                                                           // 533\n  /**                                                                                                      // 534\n   * Private function 'template' that uses $set to construct an update object                              // 535\n   * for MongoDB.  Passed to _updateUserRoles                                                              // 536\n   *                                                                                                       // 537\n   * @method _update_$set_fn                                                                               // 538\n   * @protected                                                                                            // 539\n   * @param {Array} roles                                                                                  // 540\n   * @param {String} [group]                                                                               // 541\n   * @return {Object} update object for use in MongoDB update command                                      // 542\n   */                                                                                                      // 543\n  _update_$set_fn: function  (roles, group) {                                                              // 544\n    var update = {}                                                                                        // 545\n                                                                                                           // 546\n    if (group) {                                                                                           // 547\n      // roles is a key/value dict object                                                                  // 548\n      update.$set = {}                                                                                     // 549\n      update.$set['roles.' + group] = roles                                                                // 550\n    } else {                                                                                               // 551\n      // roles is an array of strings                                                                      // 552\n      update.$set = {roles: roles}                                                                         // 553\n    }                                                                                                      // 554\n                                                                                                           // 555\n    return update                                                                                          // 556\n  },  // end _update_$set_fn                                                                               // 557\n                                                                                                           // 558\n  /**                                                                                                      // 559\n   * Private function 'template' that uses $addToSet to construct an update                                // 560\n   * object for MongoDB.  Passed to _updateUserRoles                                                       // 561\n   *                                                                                                       // 562\n   * @method _update_$addToSet_fn                                                                          // 563\n   * @protected                                                                                            // 564\n   * @param {Array} roles                                                                                  // 565\n   * @param {String} [group]                                                                               // 566\n   * @return {Object} update object for use in MongoDB update command                                      // 567\n   */                                                                                                      // 568\n  _update_$addToSet_fn: function (roles, group) {                                                          // 569\n    var update = {}                                                                                        // 570\n                                                                                                           // 571\n    if (group) {                                                                                           // 572\n      // roles is a key/value dict object                                                                  // 573\n      update.$addToSet = {}                                                                                // 574\n      update.$addToSet['roles.' + group] = {$each: roles}                                                  // 575\n    } else {                                                                                               // 576\n      // roles is an array of strings                                                                      // 577\n      update.$addToSet = {roles: {$each: roles}}                                                           // 578\n    }                                                                                                      // 579\n                                                                                                           // 580\n    return update                                                                                          // 581\n  },  // end _update_$addToSet_fn                                                                          // 582\n                                                                                                           // 583\n                                                                                                           // 584\n  /**                                                                                                      // 585\n   * Internal function that users the Template pattern to adds or sets roles                               // 586\n   * for users.                                                                                            // 587\n   *                                                                                                       // 588\n   * @method _updateUserRoles                                                                              // 589\n   * @protected                                                                                            // 590\n   * @param {Array|String} users user id(s) or object(s) with an _id field                                 // 591\n   * @param {Array|String} roles name(s) of roles/permissions to add users to                              // 592\n   * @param {String} group Group name. If not null or undefined, roles will be                             // 593\n   *                         specific to that group.                                                       // 594\n   *                         Group names can not start with '$'.                                           // 595\n   *                         Periods in names '.' are automatically converted                              // 596\n   *                         to underscores.                                                               // 597\n   *                         The special group Roles.GLOBAL_GROUP provides                                 // 598\n   *                         a convenient way to assign blanket roles/permissions                          // 599\n   *                         across all groups.  The roles/permissions in the                              // 600\n   *                         Roles.GLOBAL_GROUP group will be automatically                                // 601\n   *                         included in checks for any group.                                             // 602\n   * @param {Function} updateFactory Func which returns an update object that                              // 603\n   *                         will be passed to Mongo.                                                      // 604\n   *   @param {Array} roles                                                                                // 605\n   *   @param {String} [group]                                                                             // 606\n   */                                                                                                      // 607\n  _updateUserRoles: function (users, roles, group, updateFactory) {                                        // 608\n    if (!users) throw new Error (\"Missing 'users' param\")                                                  // 609\n    if (!roles) throw new Error (\"Missing 'roles' param\")                                                  // 610\n    if (group) {                                                                                           // 611\n      if ('string' !== typeof group)                                                                       // 612\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                 // 613\n      if ('$' === group[0])                                                                                // 614\n        throw new Error (\"Roles error: groups can not start with '$'\")                                     // 615\n                                                                                                           // 616\n      // convert any periods to underscores                                                                // 617\n      group = group.replace(/\\./g, '_')                                                                    // 618\n    }                                                                                                      // 619\n                                                                                                           // 620\n    var existingRoles,                                                                                     // 621\n        query,                                                                                             // 622\n        update                                                                                             // 623\n                                                                                                           // 624\n    // ensure arrays to simplify code                                                                      // 625\n    if (!_.isArray(users)) users = [users]                                                                 // 626\n    if (!_.isArray(roles)) roles = [roles]                                                                 // 627\n                                                                                                           // 628\n    // remove invalid roles                                                                                // 629\n    roles = _.reduce(roles, function (memo, role) {                                                        // 630\n      if (role                                                                                             // 631\n          && 'string' === typeof role                                                                      // 632\n          && role.trim().length > 0) {                                                                     // 633\n        memo.push(role.trim())                                                                             // 634\n      }                                                                                                    // 635\n      return memo                                                                                          // 636\n    }, [])                                                                                                 // 637\n                                                                                                           // 638\n    // empty roles array is ok, since it might be a $set operation to clear roles                          // 639\n    //if (roles.length === 0) return                                                                       // 640\n                                                                                                           // 641\n    // ensure all roles exist in 'roles' collection                                                        // 642\n    existingRoles = _.reduce(Meteor.roles.find({}).fetch(), function (memo, role) {                        // 643\n      memo[role.name] = true                                                                               // 644\n      return memo                                                                                          // 645\n    }, {})                                                                                                 // 646\n    _.each(roles, function (role) {                                                                        // 647\n      if (!existingRoles[role]) {                                                                          // 648\n        Roles.createRole(role)                                                                             // 649\n      }                                                                                                    // 650\n    })                                                                                                     // 651\n                                                                                                           // 652\n    // ensure users is an array of user ids                                                                // 653\n    users = _.reduce(users, function (memo, user) {                                                        // 654\n      var _id                                                                                              // 655\n      if ('string' === typeof user) {                                                                      // 656\n        memo.push(user)                                                                                    // 657\n      } else if ('object' === typeof user) {                                                               // 658\n        _id = user._id                                                                                     // 659\n        if ('string' === typeof _id) {                                                                     // 660\n          memo.push(_id)                                                                                   // 661\n        }                                                                                                  // 662\n      }                                                                                                    // 663\n      return memo                                                                                          // 664\n    }, [])                                                                                                 // 665\n                                                                                                           // 666\n    // update all users                                                                                    // 667\n    update = updateFactory(roles, group)                                                                   // 668\n                                                                                                           // 669\n    try {                                                                                                  // 670\n      if (Meteor.isClient) {                                                                               // 671\n        // On client, iterate over each user to fulfill Meteor's                                           // 672\n        // 'one update per ID' policy                                                                      // 673\n        _.each(users, function (user) {                                                                    // 674\n          Meteor.users.update({_id: user}, update)                                                         // 675\n        })                                                                                                 // 676\n      } else {                                                                                             // 677\n        // On the server we can use MongoDB's $in operator for                                             // 678\n        // better performance                                                                              // 679\n        Meteor.users.update(                                                                               // 680\n          {_id: {$in: users}},                                                                             // 681\n          update,                                                                                          // 682\n          {multi: true})                                                                                   // 683\n      }                                                                                                    // 684\n    }                                                                                                      // 685\n    catch (ex) {                                                                                           // 686\n      var addNonGroupToGroupedRolesMsg = 'Cannot apply $addToSet modifier to non-array',                   // 687\n          addGrouped2NonGroupedMsg = \"can't append to array using string field name\"                       // 688\n                                                                                                           // 689\n      if (ex.name === 'MongoError' &&                                                                      // 690\n          (ex.err === addNonGroupToGroupedRolesMsg ||                                                      // 691\n           ex.err.substring(0, 45) === addGrouped2NonGroupedMsg)) {                                        // 692\n        throw new Error (mixingGroupAndNonGroupErrorMsg)                                                   // 693\n      }                                                                                                    // 694\n                                                                                                           // 695\n      throw ex                                                                                             // 696\n    }                                                                                                      // 697\n  }  // end _updateUserRoles                                                                               // 698\n                                                                                                           // 699\n})  // end _.extend(Roles ...)                                                                             // 700\n                                                                                                           // 701\n}());                                                                                                      // 702\n                                                                                                           // 703\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 712\n                                                                                                                  // 713\n}).call(this);                                                                                                    // 714\n                                                                                                                  // 715\n                                                                                                                  // 716\n                                                                                                                  // 717\n                                                                                                                  // 718\n                                                                                                                  // 719\n                                                                                                                  // 720\n(function () {                                                                                                    // 721\n                                                                                                                  // 722\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 723\n//                                                                                                         //     // 724\n// packages/alanning:roles/roles_client.js                                                                 //     // 725\n//                                                                                                         //     // 726\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 727\n                                                                                                           //     // 728\n;(function () {                                                                                            // 1   // 729\n                                                                                                           // 2   // 730\n/**                                                                                                        // 3   // 731\n * Convenience functions for use on client.                                                                // 4   // 732\n *                                                                                                         // 5   // 733\n * NOTE: You must restrict user actions on the server-side; any                                            // 6   // 734\n * client-side checks are strictly for convenience and must not be                                         // 7   // 735\n * trusted.                                                                                                // 8   // 736\n *                                                                                                         // 9   // 737\n * @module UIHelpers                                                                                       // 10  // 738\n */                                                                                                        // 11  // 739\n                                                                                                           // 12  // 740\nvar _registerHelper                                                                                        // 13  // 741\n                                                                                                           // 14  // 742\n////////////////////////////////////////////////////////////                                               // 15  // 743\n// UI helpers                                                                                              // 16  // 744\n//                                                                                                         // 17  // 745\n// Use a semi-private variable rather than declaring UI                                                    // 18  // 746\n// helpers directly so that we can unit test the helpers.                                                  // 19  // 747\n// XXX For some reason, the UI helpers are not registered                                                  // 20  // 748\n// before the tests run.                                                                                   // 21  // 749\n//                                                                                                         // 22  // 750\nRoles._uiHelpers = {                                                                                       // 23  // 751\n                                                                                                           // 24  // 752\n  /**                                                                                                      // 25  // 753\n   * UI helper to check if current user is in at least one                                                 // 26  // 754\n   * of the target roles.  For use in client-side templates.                                               // 27  // 755\n   *                                                                                                       // 28  // 756\n   * @example                                                                                              // 29  // 757\n   *     {{#if isInRole 'admin'}}                                                                          // 30  // 758\n   *     {{/if}}                                                                                           // 31  // 759\n   *                                                                                                       // 32  // 760\n   *     {{#if isInRole 'editor,user'}}                                                                    // 33  // 761\n   *     {{/if}}                                                                                           // 34  // 762\n   *                                                                                                       // 35  // 763\n   *     {{#if isInRole 'editor,user' 'group1'}}                                                           // 36  // 764\n   *     {{/if}}                                                                                           // 37  // 765\n   *                                                                                                       // 38  // 766\n   * @method isInRole                                                                                      // 39  // 767\n   * @param {String} role Name of role or comma-seperated list of roles                                    // 40  // 768\n   * @param {String} [group] Optional, name of group to check                                              // 41  // 769\n   * @return {Boolean} true if current user is in at least one of the target roles                         // 42  // 770\n   * @static                                                                                               // 43  // 771\n   * @for UIHelpers                                                                                        // 44  // 772\n   */                                                                                                      // 45  // 773\n  isInRole: function (role, group) {                                                                       // 46  // 774\n    var user = Meteor.user(),                                                                              // 47  // 775\n        comma = (role || '').indexOf(','),                                                                 // 48  // 776\n        roles                                                                                              // 49  // 777\n                                                                                                           // 50  // 778\n    if (!user) return false                                                                                // 51  // 779\n    if (!Match.test(role, String)) return false                                                            // 52  // 780\n                                                                                                           // 53  // 781\n    if (comma !== -1) {                                                                                    // 54  // 782\n      roles = _.reduce(role.split(','), function (memo, r) {                                               // 55  // 783\n        if (!r || !r.trim()) {                                                                             // 56  // 784\n          return memo                                                                                      // 57  // 785\n        }                                                                                                  // 58  // 786\n        memo.push(r.trim())                                                                                // 59  // 787\n        return memo                                                                                        // 60  // 788\n      }, [])                                                                                               // 61  // 789\n    } else {                                                                                               // 62  // 790\n      roles = [role]                                                                                       // 63  // 791\n    }                                                                                                      // 64  // 792\n                                                                                                           // 65  // 793\n    if (Match.test(group, String)) {                                                                       // 66  // 794\n      return Roles.userIsInRole(user, roles, group)                                                        // 67  // 795\n    }                                                                                                      // 68  // 796\n                                                                                                           // 69  // 797\n    return Roles.userIsInRole(user, roles)                                                                 // 70  // 798\n  }                                                                                                        // 71  // 799\n}                                                                                                          // 72  // 800\n                                                                                                           // 73  // 801\n                                                                                                           // 74  // 802\n// Attempt to register ui helper                                                                           // 75  // 803\n                                                                                                           // 76  // 804\nif (Package.blaze && Package.blaze.Blaze &&                                                                // 77  // 805\n    Package.blaze.Blaze.registerHelper) {                                                                  // 78  // 806\n  // Meteor 0.9.1                                                                                          // 79  // 807\n  //console.log(' Meteor 0.9.1')                                                                           // 80  // 808\n  _registerHelper = Package.blaze.Blaze.registerHelper                                                     // 81  // 809\n} else if (Package.ui && Package.ui.UI) {                                                                  // 82  // 810\n  // Meteor 0.8 - 0.9.0.1                                                                                  // 83  // 811\n  //console.log(' Meteor 0.8 - 0.9.0.1')                                                                   // 84  // 812\n  _registerHelper = Package.ui.UI.registerHelper                                                           // 85  // 813\n} else if (Package.handlebars && Package.handlebars.Handlebars) {                                          // 86  // 814\n  // Meteor <0.8                                                                                           // 87  // 815\n  //console.log(' Meteor <0.8')                                                                            // 88  // 816\n  _registerHelper = Package.handlebars.Handlebars.registerHelper                                           // 89  // 817\n}                                                                                                          // 90  // 818\n                                                                                                           // 91  // 819\nif (_registerHelper) {                                                                                     // 92  // 820\n  _.each(Roles._uiHelpers, function (func, name) {                                                         // 93  // 821\n    _registerHelper(name, func)                                                                            // 94  // 822\n  })                                                                                                       // 95  // 823\n} else {                                                                                                   // 96  // 824\n  console.log && console.log('WARNING: Roles template helpers not registered. Handlebars, UI, or Blaze packages not found')\n}                                                                                                          // 98  // 826\n                                                                                                           // 99  // 827\n}());                                                                                                      // 100\n                                                                                                           // 101\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 830\n                                                                                                                  // 831\n}).call(this);                                                                                                    // 832\n                                                                                                                  // 833\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['alanning:roles'] = {\n  Roles: Roles\n};\n\n})();\n","servePath":"/packages/alanning_roles.js","sourceMap":{"version":3,"sources":["/packages/alanning_roles/packages/alanning_roles.js"],"names":[],"mappingswH","file":"/packages/alanning_roles.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/alanning:roles/roles_common.js                                                                 //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n;(function () {                                                                                            // 1\n                                                                                                           // 2\n/**                                                                                                        // 3\n * Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.    // 4\n *                                                                                                         // 5\n * @module Roles                                                                                           // 6\n */                                                                                                        // 7\n                                                                                                           // 8\n/**                                                                                                        // 9\n * Roles collection documents consist only of an id and a role name.                                       // 10\n *   ex: { _id:<uuid>, name: \"admin\" }                                                                     // 11\n */                                                                                                        // 12\nif (!Meteor.roles) {                                                                                       // 13\n  Meteor.roles = new Meteor.Collection(\"roles\")                                                            // 14\n}                                                                                                          // 15\n                                                                                                           // 16\n/**                                                                                                        // 17\n * Role-based authorization compatible with built-in Meteor accounts package.                              // 18\n *                                                                                                         // 19\n * Stores user's current roles in a 'roles' field on the user object.                                      // 20\n *                                                                                                         // 21\n * @class Roles                                                                                            // 22\n * @constructor                                                                                            // 23\n */                                                                                                        // 24\nif ('undefined' === typeof Roles) {                                                                        // 25\n  Roles = {}                                                                                               // 26\n}                                                                                                          // 27\n                                                                                                           // 28\n\"use strict\";                                                                                              // 29\n                                                                                                           // 30\nvar mixingGroupAndNonGroupErrorMsg = \"Roles error: Can't mix grouped and non-grouped roles for same user\"; // 31\n                                                                                                           // 32\n_.extend(Roles, {                                                                                          // 33\n                                                                                                           // 34\n  /**                                                                                                      // 35\n   * Constant used to reference the special 'global' group that                                            // 36\n   * can be used to apply blanket permissions across all groups.                                           // 37\n   *                                                                                                       // 38\n   * @example                                                                                              // 39\n   *     Roles.addUsersToRoles(user, 'admin', Roles.GLOBAL_GROUP)                                          // 40\n   *     Roles.userIsInRole(user, 'admin') // => true                                                      // 41\n   *                                                                                                       // 42\n   *     Roles.setUserRoles(user, 'support-staff', Roles.GLOBAL_GROUP)                                     // 43\n   *     Roles.userIsInRole(user, 'support-staff') // => true                                              // 44\n   *     Roles.userIsInRole(user, 'admin') // => false                                                     // 45\n   *                                                                                                       // 46\n   * @property GLOBAL_GROUP                                                                                // 47\n   * @type String                                                                                          // 48\n   * @static                                                                                               // 49\n   * @final                                                                                                // 50\n   */                                                                                                      // 51\n  GLOBAL_GROUP: '__global_roles__',                                                                        // 52\n                                                                                                           // 53\n                                                                                                           // 54\n  /**                                                                                                      // 55\n   * Create a new role. Whitespace will be trimmed.                                                        // 56\n   *                                                                                                       // 57\n   * @method createRole                                                                                    // 58\n   * @param {String} role Name of role                                                                     // 59\n   * @return {String} id of new role                                                                       // 60\n   */                                                                                                      // 61\n  createRole: function (role) {                                                                            // 62\n    var id,                                                                                                // 63\n        match                                                                                              // 64\n                                                                                                           // 65\n    if (!role                                                                                              // 66\n        || 'string' !== typeof role                                                                        // 67\n        || role.trim().length === 0) {                                                                     // 68\n      return                                                                                               // 69\n    }                                                                                                      // 70\n                                                                                                           // 71\n    try {                                                                                                  // 72\n      id = Meteor.roles.insert({'name': role.trim()})                                                      // 73\n      return id                                                                                            // 74\n    } catch (e) {                                                                                          // 75\n      // (from Meteor accounts-base package, insertUserDoc func)                                           // 76\n      // XXX string parsing sucks, maybe                                                                   // 77\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day                                // 78\n      if (e.name !== 'MongoError') throw e                                                                 // 79\n      match = e.err.match(/^E11000 duplicate key error index: ([^ ]+)/)                                    // 80\n      if (!match) throw e                                                                                  // 81\n      if (match[1].indexOf('$name') !== -1)                                                                // 82\n        throw new Meteor.Error(403, \"Role already exists.\")                                                // 83\n      throw e                                                                                              // 84\n    }                                                                                                      // 85\n  },                                                                                                       // 86\n                                                                                                           // 87\n  /**                                                                                                      // 88\n   * Delete an existing role.  Will throw \"Role in use\" error if any users                                 // 89\n   * are currently assigned to the target role.                                                            // 90\n   *                                                                                                       // 91\n   * @method deleteRole                                                                                    // 92\n   * @param {String} role Name of role                                                                     // 93\n   */                                                                                                      // 94\n  deleteRole: function (role) {                                                                            // 95\n    if (!role) return                                                                                      // 96\n                                                                                                           // 97\n    var foundExistingUser = Meteor.users.findOne(                                                          // 98\n                              {roles: {$in: [role]}},                                                      // 99\n                              {fields: {_id: 1}})                                                          // 100\n                                                                                                           // 101\n    if (foundExistingUser) {                                                                               // 102\n      throw new Meteor.Error(403, 'Role in use')                                                           // 103\n    }                                                                                                      // 104\n                                                                                                           // 105\n    var thisRole = Meteor.roles.findOne({name: role})                                                      // 106\n    if (thisRole) {                                                                                        // 107\n      Meteor.roles.remove({_id: thisRole._id})                                                             // 108\n    }                                                                                                      // 109\n  },                                                                                                       // 110\n                                                                                                           // 111\n  /**                                                                                                      // 112\n   * Add users to roles. Will create roles as needed.                                                      // 113\n   *                                                                                                       // 114\n   * NOTE: Mixing grouped and non-grouped roles for the same user                                          // 115\n   *       is not supported and will throw an error.                                                       // 116\n   *                                                                                                       // 117\n   * Makes 2 calls to database:                                                                            // 118\n   *  1. retrieve list of all existing roles                                                               // 119\n   *  2. update users' roles                                                                               // 120\n   *                                                                                                       // 121\n   * @example                                                                                              // 122\n   *     Roles.addUsersToRoles(userId, 'admin')                                                            // 123\n   *     Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')                                    // 124\n   *     Roles.addUsersToRoles([user1, user2], ['user','editor'])                                          // 125\n   *     Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')        // 126\n   *     Roles.addUsersToRoles(userId, 'admin', Roles.GLOBAL_GROUP)                                        // 127\n   *                                                                                                       // 128\n   * @method addUsersToRoles                                                                               // 129\n   * @param {Array|String} users User id(s) or object(s) with an _id field                                 // 130\n   * @param {Array|String} roles Name(s) of roles/permissions to add users to                              // 131\n   * @param {String} [group] Optional group name. If supplied, roles will be                               // 132\n   *                         specific to that group.                                                       // 133\n   *                         Group names can not start with '$' or numbers.                                // 134\n   *                         Periods in names '.' are automatically converted                              // 135\n   *                         to underscores.                                                               // 136\n   *                         The special group Roles.GLOBAL_GROUP provides                                 // 137\n   *                         a convenient way to assign blanket roles/permissions                          // 138\n   *                         across all groups.  The roles/permissions in the                              // 139\n   *                         Roles.GLOBAL_GROUP group will be automatically                                // 140\n   *                         included in checks for any group.                                             // 141\n   */                                                                                                      // 142\n  addUsersToRoles: function (users, roles, group) {                                                        // 143\n    // use Template pattern to update user roles                                                           // 144\n    Roles._updateUserRoles(users, roles, group, Roles._update_$addToSet_fn)                                // 145\n  },                                                                                                       // 146\n                                                                                                           // 147\n  /**                                                                                                      // 148\n   * Set a users roles/permissions.                                                                        // 149\n   *                                                                                                       // 150\n   * @example                                                                                              // 151\n   *     Roles.setUserRoles(userId, 'admin')                                                               // 152\n   *     Roles.setUserRoles(userId, ['view-secrets'], 'example.com')                                       // 153\n   *     Roles.setUserRoles([user1, user2], ['user','editor'])                                             // 154\n   *     Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')           // 155\n   *     Roles.setUserRoles(userId, 'admin', Roles.GLOBAL_GROUP)                                           // 156\n   *                                                                                                       // 157\n   * @method setUserRoles                                                                                  // 158\n   * @param {Array|String} users User id(s) or object(s) with an _id field                                 // 159\n   * @param {Array|String} roles Name(s) of roles/permissions to add users to                              // 160\n   * @param {String} [group] Optional group name. If supplied, roles will be                               // 161\n   *                         specific to that group.                                                       // 162\n   *                         Group names can not start with '$'.                                           // 163\n   *                         Periods in names '.' are automatically converted                              // 164\n   *                         to underscores.                                                               // 165\n   *                         The special group Roles.GLOBAL_GROUP provides                                 // 166\n   *                         a convenient way to assign blanket roles/permissions                          // 167\n   *                         across all groups.  The roles/permissions in the                              // 168\n   *                         Roles.GLOBAL_GROUP group will be automatically                                // 169\n   *                         included in checks for any group.                                             // 170\n   */                                                                                                      // 171\n  setUserRoles: function (users, roles, group) {                                                           // 172\n    // use Template pattern to update user roles                                                           // 173\n    Roles._updateUserRoles(users, roles, group, Roles._update_$set_fn)                                     // 174\n  },                                                                                                       // 175\n                                                                                                           // 176\n  /**                                                                                                      // 177\n   * Remove users from roles                                                                               // 178\n   *                                                                                                       // 179\n   * @example                                                                                              // 180\n   *     Roles.removeUsersFromRoles(users.bob, 'admin')                                                    // 181\n   *     Roles.removeUsersFromRoles([users.bob, users.joe], ['editor'])                                    // 182\n   *     Roles.removeUsersFromRoles([users.bob, users.joe], ['editor', 'user'])                            // 183\n   *     Roles.removeUsersFromRoles(users.eve, ['user'], 'group1')                                         // 184\n   *                                                                                                       // 185\n   * @method removeUsersFromRoles                                                                          // 186\n   * @param {Array|String} users User id(s) or object(s) with an _id field                                 // 187\n   * @param {Array|String} roles Name(s) of roles to add users to                                          // 188\n   * @param {String} [group] Optional. Group name. If supplied, only that                                  // 189\n   *                         group will have roles removed.                                                // 190\n   */                                                                                                      // 191\n  removeUsersFromRoles: function (users, roles, group) {                                                   // 192\n    var update                                                                                             // 193\n                                                                                                           // 194\n    if (!users) throw new Error (\"Missing 'users' param\")                                                  // 195\n    if (!roles) throw new Error (\"Missing 'roles' param\")                                                  // 196\n    if (group) {                                                                                           // 197\n      if ('string' !== typeof group)                                                                       // 198\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                 // 199\n      if ('$' === group[0])                                                                                // 200\n        throw new Error (\"Roles error: groups can not start with '$'\")                                     // 201\n                                                                                                           // 202\n      // convert any periods to underscores                                                                // 203\n      group = group.replace(/\\./g, '_')                                                                    // 204\n    }                                                                                                      // 205\n                                                                                                           // 206\n    // ensure arrays                                                                                       // 207\n    if (!_.isArray(users)) users = [users]                                                                 // 208\n    if (!_.isArray(roles)) roles = [roles]                                                                 // 209\n                                                                                                           // 210\n    // ensure users is an array of user ids                                                                // 211\n    users = _.reduce(users, function (memo, user) {                                                        // 212\n      var _id                                                                                              // 213\n      if ('string' === typeof user) {                                                                      // 214\n        memo.push(user)                                                                                    // 215\n      } else if ('object' === typeof user) {                                                               // 216\n        _id = user._id                                                                                     // 217\n        if ('string' === typeof _id) {                                                                     // 218\n          memo.push(_id)                                                                                   // 219\n        }                                                                                                  // 220\n      }                                                                                                    // 221\n      return memo                                                                                          // 222\n    }, [])                                                                                                 // 223\n                                                                                                           // 224\n    // update all users, remove from roles set                                                             // 225\n                                                                                                           // 226\n    if (group) {                                                                                           // 227\n      update = {$pullAll: {}}                                                                              // 228\n      update.$pullAll['roles.'+group] = roles                                                              // 229\n    } else {                                                                                               // 230\n      update = {$pullAll: {roles: roles}}                                                                  // 231\n    }                                                                                                      // 232\n                                                                                                           // 233\n    try {                                                                                                  // 234\n      if (Meteor.isClient) {                                                                               // 235\n        // Iterate over each user to fulfill Meteor's 'one update per ID' policy                           // 236\n        _.each(users, function (user) {                                                                    // 237\n          Meteor.users.update({_id:user}, update)                                                          // 238\n        })                                                                                                 // 239\n      } else {                                                                                             // 240\n        // On the server we can leverage MongoDB's $in operator for performance                            // 241\n        Meteor.users.update({_id:{$in:users}}, update, {multi: true})                                      // 242\n      }                                                                                                    // 243\n    }                                                                                                      // 244\n    catch (ex) {                                                                                           // 245\n      var removeNonGroupedRoleFromGroupMsg = 'Cannot apply $pull/$pullAll modifier to non-array'           // 246\n                                                                                                           // 247\n      if (ex.name === 'MongoError' &&                                                                      // 248\n          ex.err === removeNonGroupedRoleFromGroupMsg) {                                                   // 249\n        throw new Error (mixingGroupAndNonGroupErrorMsg)                                                   // 250\n      }                                                                                                    // 251\n                                                                                                           // 252\n      throw ex                                                                                             // 253\n    }                                                                                                      // 254\n  },                                                                                                       // 255\n                                                                                                           // 256\n  /**                                                                                                      // 257\n   * Check if user has specified permissions/roles                                                         // 258\n   *                                                                                                       // 259\n   * @example                                                                                              // 260\n   *     // non-group usage                                                                                // 261\n   *     Roles.userIsInRole(user, 'admin')                                                                 // 262\n   *     Roles.userIsInRole(user, ['admin','editor'])                                                      // 263\n   *     Roles.userIsInRole(userId, 'admin')                                                               // 264\n   *     Roles.userIsInRole(userId, ['admin','editor'])                                                    // 265\n   *                                                                                                       // 266\n   *     // per-group usage                                                                                // 267\n   *     Roles.userIsInRole(user,   ['admin','editor'], 'group1')                                          // 268\n   *     Roles.userIsInRole(userId, ['admin','editor'], 'group1')                                          // 269\n   *     Roles.userIsInRole(userId, ['admin','editor'], Roles.GLOBAL_GROUP)                                // 270\n   *                                                                                                       // 271\n   *     // this format can also be used as short-hand for Roles.GLOBAL_GROUP                              // 272\n   *     Roles.userIsInRole(user, 'admin')                                                                 // 273\n   *                                                                                                       // 274\n   * @method userIsInRole                                                                                  // 275\n   * @param {String|Object} user User Id or actual user object                                             // 276\n   * @param {String|Array} roles Name of role/permission or Array of                                       // 277\n   *                            roles/permissions to check against.  If array,                             // 278\n   *                            will return true if user is in _any_ role.                                 // 279\n   * @param {String} [group] Optional. Name of group.  If supplied, limits check                           // 280\n   *                         to just that group.                                                           // 281\n   *                         The user's Roles.GLOBAL_GROUP will always be checked                          // 282\n   *                         whether group is specified or not.                                            // 283\n   * @return {Boolean} true if user is in _any_ of the target roles                                        // 284\n   */                                                                                                      // 285\n  userIsInRole: function (user, roles, group) {                                                            // 286\n    var id,                                                                                                // 287\n        userRoles,                                                                                         // 288\n        query,                                                                                             // 289\n        groupQuery,                                                                                        // 290\n        found = false                                                                                      // 291\n                                                                                                           // 292\n    // ensure array to simplify code                                                                       // 293\n    if (!_.isArray(roles)) {                                                                               // 294\n      roles = [roles]                                                                                      // 295\n    }                                                                                                      // 296\n                                                                                                           // 297\n    if (!user) return false                                                                                // 298\n    if (group) {                                                                                           // 299\n      if ('string' !== typeof group) return false                                                          // 300\n      if ('$' === group[0]) return false                                                                   // 301\n                                                                                                           // 302\n      // convert any periods to underscores                                                                // 303\n      group = group.replace(/\\./g, '_')                                                                    // 304\n    }                                                                                                      // 305\n                                                                                                           // 306\n    if ('object' === typeof user) {                                                                        // 307\n      userRoles = user.roles                                                                               // 308\n      if (_.isArray(userRoles)) {                                                                          // 309\n        return _.some(roles, function (role) {                                                             // 310\n          return _.contains(userRoles, role)                                                               // 311\n        })                                                                                                 // 312\n      } else if ('object' === typeof userRoles) {                                                          // 313\n        // roles field is dictionary of groups                                                             // 314\n        found = _.isArray(userRoles[group]) && _.some(roles, function (role) {                             // 315\n          return _.contains(userRoles[group], role)                                                        // 316\n        })                                                                                                 // 317\n        if (!found) {                                                                                      // 318\n          // not found in regular group or group not specified.                                            // 319\n          // check Roles.GLOBAL_GROUP, if it exists                                                        // 320\n          found = _.isArray(userRoles[Roles.GLOBAL_GROUP]) && _.some(roles, function (role) {              // 321\n            return _.contains(userRoles[Roles.GLOBAL_GROUP], role)                                         // 322\n          })                                                                                               // 323\n        }                                                                                                  // 324\n        return found                                                                                       // 325\n      }                                                                                                    // 326\n                                                                                                           // 327\n      // missing roles field, try going direct via id                                                      // 328\n      id = user._id                                                                                        // 329\n    } else if ('string' === typeof user) {                                                                 // 330\n      id = user                                                                                            // 331\n    }                                                                                                      // 332\n                                                                                                           // 333\n    if (!id) return false                                                                                  // 334\n                                                                                                           // 335\n                                                                                                           // 336\n    query = {_id: id, $or: []}                                                                             // 337\n                                                                                                           // 338\n    // always check Roles.GLOBAL_GROUP                                                                     // 339\n    groupQuery = {}                                                                                        // 340\n    groupQuery['roles.'+Roles.GLOBAL_GROUP] = {$in: roles}                                                 // 341\n    query.$or.push(groupQuery)                                                                             // 342\n                                                                                                           // 343\n    if (group) {                                                                                           // 344\n      // structure of query, when group specified including Roles.GLOBAL_GROUP                             // 345\n      //   {_id: id,                                                                                       // 346\n      //    $or: [                                                                                         // 347\n      //      {'roles.group1':{$in: ['admin']}},                                                           // 348\n      //      {'roles.__global_roles__':{$in: ['admin']}}                                                  // 349\n      //    ]}                                                                                             // 350\n      groupQuery = {}                                                                                      // 351\n      groupQuery['roles.'+group] = {$in: roles}                                                            // 352\n      query.$or.push(groupQuery)                                                                           // 353\n    } else {                                                                                               // 354\n      // structure of query, where group not specified. includes                                           // 355\n      // Roles.GLOBAL_GROUP                                                                                // 356\n      //   {_id: id,                                                                                       // 357\n      //    $or: [                                                                                         // 358\n      //      {roles: {$in: ['admin']}},                                                                   // 359\n      //      {'roles.__global_roles__': {$in: ['admin']}}                                                 // 360\n      //    ]}                                                                                             // 361\n      query.$or.push({roles: {$in: roles}})                                                                // 362\n    }                                                                                                      // 363\n                                                                                                           // 364\n    found = Meteor.users.findOne(query, {fields: {_id: 1}})                                                // 365\n    return found ? true : false                                                                            // 366\n  },                                                                                                       // 367\n                                                                                                           // 368\n  /**                                                                                                      // 369\n   * Retrieve users roles                                                                                  // 370\n   *                                                                                                       // 371\n   * @method getRolesForUser                                                                               // 372\n   * @param {String|Object} user User Id or actual user object                                             // 373\n   * @param {String} [group] Optional name of group to restrict roles to.                                  // 374\n   *                         User's Roles.GLOBAL_GROUP will also be included.                              // 375\n   * @return {Array} Array of user's roles, unsorted.                                                      // 376\n   */                                                                                                      // 377\n  getRolesForUser: function (user, group) {                                                                // 378\n    if (!user) return []                                                                                   // 379\n    if (group) {                                                                                           // 380\n      if ('string' !== typeof group) return []                                                             // 381\n      if ('$' === group[0]) return []                                                                      // 382\n                                                                                                           // 383\n      // convert any periods to underscores                                                                // 384\n      group = group.replace(/\\./g, '_')                                                                    // 385\n    }                                                                                                      // 386\n                                                                                                           // 387\n    if ('string' === typeof user) {                                                                        // 388\n      user = Meteor.users.findOne(                                                                         // 389\n               {_id: user},                                                                                // 390\n               {fields: {roles: 1}})                                                                       // 391\n                                                                                                           // 392\n    } else if ('object' !== typeof user) {                                                                 // 393\n      // invalid user object                                                                               // 394\n      return []                                                                                            // 395\n    }                                                                                                      // 396\n                                                                                                           // 397\n    if (!user || !user.roles) return []                                                                    // 398\n                                                                                                           // 399\n    if (group) {                                                                                           // 400\n      return _.union(user.roles[group] || [], user.roles[Roles.GLOBAL_GROUP] || [])                        // 401\n    }                                                                                                      // 402\n                                                                                                           // 403\n    if (_.isArray(user.roles))                                                                             // 404\n      return user.roles                                                                                    // 405\n                                                                                                           // 406\n    // using groups but group not specified. return global group, if exists                                // 407\n    return user.roles[Roles.GLOBAL_GROUP] || []                                                            // 408\n  },                                                                                                       // 409\n                                                                                                           // 410\n  /**                                                                                                      // 411\n   * Retrieve set of all existing roles                                                                    // 412\n   *                                                                                                       // 413\n   * @method getAllRoles                                                                                   // 414\n   * @return {Cursor} cursor of existing roles                                                             // 415\n   */                                                                                                      // 416\n  getAllRoles: function () {                                                                               // 417\n    return Meteor.roles.find({}, {sort: {name: 1}})                                                        // 418\n  },                                                                                                       // 419\n                                                                                                           // 420\n  /**                                                                                                      // 421\n   * Retrieve all users who are in target role.                                                            // 422\n   *                                                                                                       // 423\n   * NOTE: This is an expensive query; it performs a full collection scan                                  // 424\n   * on the users collection since there is no index set on the 'roles' field.                             // 425\n   * This is by design as most queries will specify an _id so the _id index is                             // 426\n   * used automatically.                                                                                   // 427\n   *                                                                                                       // 428\n   * @method getUsersInRole                                                                                // 429\n   * @param {Array|String} role Name of role/permission.  If array, users                                  // 430\n   *                            returned will have at least one of the roles                               // 431\n   *                            specified but need not have _all_ roles.                                   // 432\n   * @param {String} [group] Optional name of group to restrict roles to.                                  // 433\n   *                         User's Roles.GLOBAL_GROUP will also be checked.                               // 434\n   * @return {Cursor} cursor of users in role                                                              // 435\n   */                                                                                                      // 436\n  getUsersInRole: function (role, group) {                                                                 // 437\n    var query,                                                                                             // 438\n        roles = role,                                                                                      // 439\n        groupQuery                                                                                         // 440\n                                                                                                           // 441\n    // ensure array to simplify query logic                                                                // 442\n    if (!_.isArray(roles)) roles = [roles]                                                                 // 443\n                                                                                                           // 444\n    if (group) {                                                                                           // 445\n      if ('string' !== typeof group)                                                                       // 446\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                 // 447\n      if ('$' === group[0])                                                                                // 448\n        throw new Error (\"Roles error: groups can not start with '$'\")                                     // 449\n                                                                                                           // 450\n      // convert any periods to underscores                                                                // 451\n      group = group.replace(/\\./g, '_')                                                                    // 452\n    }                                                                                                      // 453\n                                                                                                           // 454\n    query = {$or: []}                                                                                      // 455\n                                                                                                           // 456\n    // always check Roles.GLOBAL_GROUP                                                                     // 457\n    groupQuery = {}                                                                                        // 458\n    groupQuery['roles.'+Roles.GLOBAL_GROUP] = {$in: roles}                                                 // 459\n    query.$or.push(groupQuery)                                                                             // 460\n                                                                                                           // 461\n    if (group) {                                                                                           // 462\n      // structure of query, when group specified including Roles.GLOBAL_GROUP                             // 463\n      //   {                                                                                               // 464\n      //    $or: [                                                                                         // 465\n      //      {'roles.group1':{$in: ['admin']}},                                                           // 466\n      //      {'roles.__global_roles__':{$in: ['admin']}}                                                  // 467\n      //    ]}                                                                                             // 468\n      groupQuery = {}                                                                                      // 469\n      groupQuery['roles.'+group] = {$in: roles}                                                            // 470\n      query.$or.push(groupQuery)                                                                           // 471\n    } else {                                                                                               // 472\n      // structure of query, where group not specified. includes                                           // 473\n      // Roles.GLOBAL_GROUP                                                                                // 474\n      //   {                                                                                               // 475\n      //    $or: [                                                                                         // 476\n      //      {roles: {$in: ['admin']}},                                                                   // 477\n      //      {'roles.__global_roles__': {$in: ['admin']}}                                                 // 478\n      //    ]}                                                                                             // 479\n      query.$or.push({roles: {$in: roles}})                                                                // 480\n    }                                                                                                      // 481\n                                                                                                           // 482\n    return Meteor.users.find(query)                                                                        // 483\n  },  // end getUsersInRole                                                                                // 484\n                                                                                                           // 485\n  /**                                                                                                      // 486\n   * Retrieve users groups, if any                                                                         // 487\n   *                                                                                                       // 488\n   * @method getGroupsForUser                                                                              // 489\n   * @param {String|Object} user User Id or actual user object                                             // 490\n   * @param {String} [role] Optional name of roles to restrict groups to.                                  // 491\n   *                                                                                                       // 492\n   * @return {Array} Array of user's groups, unsorted. Roles.GLOBAL_GROUP will be omitted                  // 493\n   */                                                                                                      // 494\n  getGroupsForUser: function (user, role) {                                                                // 495\n    var userGroups = [];                                                                                   // 496\n                                                                                                           // 497\n    if (!user) return []                                                                                   // 498\n    if (role) {                                                                                            // 499\n      if ('string' !== typeof role) return []                                                              // 500\n      if ('$' === role[0]) return []                                                                       // 501\n                                                                                                           // 502\n      // convert any periods to underscores                                                                // 503\n      role = role.replace('.', '_')                                                                        // 504\n    }                                                                                                      // 505\n                                                                                                           // 506\n    if ('string' === typeof user) {                                                                        // 507\n      user = Meteor.users.findOne(                                                                         // 508\n               {_id: user},                                                                                // 509\n               {fields: {roles: 1}})                                                                       // 510\n                                                                                                           // 511\n    }else if ('object' !== typeof user) {                                                                  // 512\n      // invalid user object                                                                               // 513\n      return []                                                                                            // 514\n    }                                                                                                      // 515\n                                                                                                           // 516\n    //User has no roles or is not using groups                                                             // 517\n    if (!user || !user.roles || _.isArray(user.roles)) return []                                           // 518\n                                                                                                           // 519\n    if (role) {                                                                                            // 520\n      _.each(user.roles, function(groupRoles, groupName) {                                                 // 521\n        if (_.contains(groupRoles, role) && groupName !== Roles.GLOBAL_GROUP) {                            // 522\n          userGroups.push(groupName);                                                                      // 523\n        }                                                                                                  // 524\n      });                                                                                                  // 525\n      return userGroups;                                                                                   // 526\n    }else {                                                                                                // 527\n      return _.without(_.keys(user.roles), Roles.GLOBAL_GROUP);                                            // 528\n    }                                                                                                      // 529\n                                                                                                           // 530\n  }, //End getGroupsForUser                                                                                // 531\n                                                                                                           // 532\n                                                                                                           // 533\n  /**                                                                                                      // 534\n   * Private function 'template' that uses $set to construct an update object                              // 535\n   * for MongoDB.  Passed to _updateUserRoles                                                              // 536\n   *                                                                                                       // 537\n   * @method _update_$set_fn                                                                               // 538\n   * @protected                                                                                            // 539\n   * @param {Array} roles                                                                                  // 540\n   * @param {String} [group]                                                                               // 541\n   * @return {Object} update object for use in MongoDB update command                                      // 542\n   */                                                                                                      // 543\n  _update_$set_fn: function  (roles, group) {                                                              // 544\n    var update = {}                                                                                        // 545\n                                                                                                           // 546\n    if (group) {                                                                                           // 547\n      // roles is a key/value dict object                                                                  // 548\n      update.$set = {}                                                                                     // 549\n      update.$set['roles.' + group] = roles                                                                // 550\n    } else {                                                                                               // 551\n      // roles is an array of strings                                                                      // 552\n      update.$set = {roles: roles}                                                                         // 553\n    }                                                                                                      // 554\n                                                                                                           // 555\n    return update                                                                                          // 556\n  },  // end _update_$set_fn                                                                               // 557\n                                                                                                           // 558\n  /**                                                                                                      // 559\n   * Private function 'template' that uses $addToSet to construct an update                                // 560\n   * object for MongoDB.  Passed to _updateUserRoles                                                       // 561\n   *                                                                                                       // 562\n   * @method _update_$addToSet_fn                                                                          // 563\n   * @protected                                                                                            // 564\n   * @param {Array} roles                                                                                  // 565\n   * @param {String} [group]                                                                               // 566\n   * @return {Object} update object for use in MongoDB update command                                      // 567\n   */                                                                                                      // 568\n  _update_$addToSet_fn: function (roles, group) {                                                          // 569\n    var update = {}                                                                                        // 570\n                                                                                                           // 571\n    if (group) {                                                                                           // 572\n      // roles is a key/value dict object                                                                  // 573\n      update.$addToSet = {}                                                                                // 574\n      update.$addToSet['roles.' + group] = {$each: roles}                                                  // 575\n    } else {                                                                                               // 576\n      // roles is an array of strings                                                                      // 577\n      update.$addToSet = {roles: {$each: roles}}                                                           // 578\n    }                                                                                                      // 579\n                                                                                                           // 580\n    return update                                                                                          // 581\n  },  // end _update_$addToSet_fn                                                                          // 582\n                                                                                                           // 583\n                                                                                                           // 584\n  /**                                                                                                      // 585\n   * Internal function that users the Template pattern to adds or sets roles                               // 586\n   * for users.                                                                                            // 587\n   *                                                                                                       // 588\n   * @method _updateUserRoles                                                                              // 589\n   * @protected                                                                                            // 590\n   * @param {Array|String} users user id(s) or object(s) with an _id field                                 // 591\n   * @param {Array|String} roles name(s) of roles/permissions to add users to                              // 592\n   * @param {String} group Group name. If not null or undefined, roles will be                             // 593\n   *                         specific to that group.                                                       // 594\n   *                         Group names can not start with '$'.                                           // 595\n   *                         Periods in names '.' are automatically converted                              // 596\n   *                         to underscores.                                                               // 597\n   *                         The special group Roles.GLOBAL_GROUP provides                                 // 598\n   *                         a convenient way to assign blanket roles/permissions                          // 599\n   *                         across all groups.  The roles/permissions in the                              // 600\n   *                         Roles.GLOBAL_GROUP group will be automatically                                // 601\n   *                         included in checks for any group.                                             // 602\n   * @param {Function} updateFactory Func which returns an update object that                              // 603\n   *                         will be passed to Mongo.                                                      // 604\n   *   @param {Array} roles                                                                                // 605\n   *   @param {String} [group]                                                                             // 606\n   */                                                                                                      // 607\n  _updateUserRoles: function (users, roles, group, updateFactory) {                                        // 608\n    if (!users) throw new Error (\"Missing 'users' param\")                                                  // 609\n    if (!roles) throw new Error (\"Missing 'roles' param\")                                                  // 610\n    if (group) {                                                                                           // 611\n      if ('string' !== typeof group)                                                                       // 612\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                 // 613\n      if ('$' === group[0])                                                                                // 614\n        throw new Error (\"Roles error: groups can not start with '$'\")                                     // 615\n                                                                                                           // 616\n      // convert any periods to underscores                                                                // 617\n      group = group.replace(/\\./g, '_')                                                                    // 618\n    }                                                                                                      // 619\n                                                                                                           // 620\n    var existingRoles,                                                                                     // 621\n        query,                                                                                             // 622\n        update                                                                                             // 623\n                                                                                                           // 624\n    // ensure arrays to simplify code                                                                      // 625\n    if (!_.isArray(users)) users = [users]                                                                 // 626\n    if (!_.isArray(roles)) roles = [roles]                                                                 // 627\n                                                                                                           // 628\n    // remove invalid roles                                                                                // 629\n    roles = _.reduce(roles, function (memo, role) {                                                        // 630\n      if (role                                                                                             // 631\n          && 'string' === typeof role                                                                      // 632\n          && role.trim().length > 0) {                                                                     // 633\n        memo.push(role.trim())                                                                             // 634\n      }                                                                                                    // 635\n      return memo                                                                                          // 636\n    }, [])                                                                                                 // 637\n                                                                                                           // 638\n    // empty roles array is ok, since it might be a $set operation to clear roles                          // 639\n    //if (roles.length === 0) return                                                                       // 640\n                                                                                                           // 641\n    // ensure all roles exist in 'roles' collection                                                        // 642\n    existingRoles = _.reduce(Meteor.roles.find({}).fetch(), function (memo, role) {                        // 643\n      memo[role.name] = true                                                                               // 644\n      return memo                                                                                          // 645\n    }, {})                                                                                                 // 646\n    _.each(roles, function (role) {                                                                        // 647\n      if (!existingRoles[role]) {                                                                          // 648\n        Roles.createRole(role)                                                                             // 649\n      }                                                                                                    // 650\n    })                                                                                                     // 651\n                                                                                                           // 652\n    // ensure users is an array of user ids                                                                // 653\n    users = _.reduce(users, function (memo, user) {                                                        // 654\n      var _id                                                                                              // 655\n      if ('string' === typeof user) {                                                                      // 656\n        memo.push(user)                                                                                    // 657\n      } else if ('object' === typeof user) {                                                               // 658\n        _id = user._id                                                                                     // 659\n        if ('string' === typeof _id) {                                                                     // 660\n          memo.push(_id)                                                                                   // 661\n        }                                                                                                  // 662\n      }                                                                                                    // 663\n      return memo                                                                                          // 664\n    }, [])                                                                                                 // 665\n                                                                                                           // 666\n    // update all users                                                                                    // 667\n    update = updateFactory(roles, group)                                                                   // 668\n                                                                                                           // 669\n    try {                                                                                                  // 670\n      if (Meteor.isClient) {                                                                               // 671\n        // On client, iterate over each user to fulfill Meteor's                                           // 672\n        // 'one update per ID' policy                                                                      // 673\n        _.each(users, function (user) {                                                                    // 674\n          Meteor.users.update({_id: user}, update)                                                         // 675\n        })                                                                                                 // 676\n      } else {                                                                                             // 677\n        // On the server we can use MongoDB's $in operator for                                             // 678\n        // better performance                                                                              // 679\n        Meteor.users.update(                                                                               // 680\n          {_id: {$in: users}},                                                                             // 681\n          update,                                                                                          // 682\n          {multi: true})                                                                                   // 683\n      }                                                                                                    // 684\n    }                                                                                                      // 685\n    catch (ex) {                                                                                           // 686\n      var addNonGroupToGroupedRolesMsg = 'Cannot apply $addToSet modifier to non-array',                   // 687\n          addGrouped2NonGroupedMsg = \"can't append to array using string field name\"                       // 688\n                                                                                                           // 689\n      if (ex.name === 'MongoError' &&                                                                      // 690\n          (ex.err === addNonGroupToGroupedRolesMsg ||                                                      // 691\n           ex.err.substring(0, 45) === addGrouped2NonGroupedMsg)) {                                        // 692\n        throw new Error (mixingGroupAndNonGroupErrorMsg)                                                   // 693\n      }                                                                                                    // 694\n                                                                                                           // 695\n      throw ex                                                                                             // 696\n    }                                                                                                      // 697\n  }  // end _updateUserRoles                                                                               // 698\n                                                                                                           // 699\n})  // end _.extend(Roles ...)                                                                             // 700\n                                                                                                           // 701\n}());                                                                                                      // 702\n                                                                                                           // 703\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/alanning:roles/roles_client.js                                                                 //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n;(function () {                                                                                            // 1\n                                                                                                           // 2\n/**                                                                                                        // 3\n * Convenience functions for use on client.                                                                // 4\n *                                                                                                         // 5\n * NOTE: You must restrict user actions on the server-side; any                                            // 6\n * client-side checks are strictly for convenience and must not be                                         // 7\n * trusted.                                                                                                // 8\n *                                                                                                         // 9\n * @module UIHelpers                                                                                       // 10\n */                                                                                                        // 11\n                                                                                                           // 12\nvar _registerHelper                                                                                        // 13\n                                                                                                           // 14\n////////////////////////////////////////////////////////////                                               // 15\n// UI helpers                                                                                              // 16\n//                                                                                                         // 17\n// Use a semi-private variable rather than declaring UI                                                    // 18\n// helpers directly so that we can unit test the helpers.                                                  // 19\n// XXX For some reason, the UI helpers are not registered                                                  // 20\n// before the tests run.                                                                                   // 21\n//                                                                                                         // 22\nRoles._uiHelpers = {                                                                                       // 23\n                                                                                                           // 24\n  /**                                                                                                      // 25\n   * UI helper to check if current user is in at least one                                                 // 26\n   * of the target roles.  For use in client-side templates.                                               // 27\n   *                                                                                                       // 28\n   * @example                                                                                              // 29\n   *     {{#if isInRole 'admin'}}                                                                          // 30\n   *     {{/if}}                                                                                           // 31\n   *                                                                                                       // 32\n   *     {{#if isInRole 'editor,user'}}                                                                    // 33\n   *     {{/if}}                                                                                           // 34\n   *                                                                                                       // 35\n   *     {{#if isInRole 'editor,user' 'group1'}}                                                           // 36\n   *     {{/if}}                                                                                           // 37\n   *                                                                                                       // 38\n   * @method isInRole                                                                                      // 39\n   * @param {String} role Name of role or comma-seperated list of roles                                    // 40\n   * @param {String} [group] Optional, name of group to check                                              // 41\n   * @return {Boolean} true if current user is in at least one of the target roles                         // 42\n   * @static                                                                                               // 43\n   * @for UIHelpers                                                                                        // 44\n   */                                                                                                      // 45\n  isInRole: function (role, group) {                                                                       // 46\n    var user = Meteor.user(),                                                                              // 47\n        comma = (role || '').indexOf(','),                                                                 // 48\n        roles                                                                                              // 49\n                                                                                                           // 50\n    if (!user) return false                                                                                // 51\n    if (!Match.test(role, String)) return false                                                            // 52\n                                                                                                           // 53\n    if (comma !== -1) {                                                                                    // 54\n      roles = _.reduce(role.split(','), function (memo, r) {                                               // 55\n        if (!r || !r.trim()) {                                                                             // 56\n          return memo                                                                                      // 57\n        }                                                                                                  // 58\n        memo.push(r.trim())                                                                                // 59\n        return memo                                                                                        // 60\n      }, [])                                                                                               // 61\n    } else {                                                                                               // 62\n      roles = [role]                                                                                       // 63\n    }                                                                                                      // 64\n                                                                                                           // 65\n    if (Match.test(group, String)) {                                                                       // 66\n      return Roles.userIsInRole(user, roles, group)                                                        // 67\n    }                                                                                                      // 68\n                                                                                                           // 69\n    return Roles.userIsInRole(user, roles)                                                                 // 70\n  }                                                                                                        // 71\n}                                                                                                          // 72\n                                                                                                           // 73\n                                                                                                           // 74\n// Attempt to register ui helper                                                                           // 75\n                                                                                                           // 76\nif (Package.blaze && Package.blaze.Blaze &&                                                                // 77\n    Package.blaze.Blaze.registerHelper) {                                                                  // 78\n  // Meteor 0.9.1                                                                                          // 79\n  //console.log(' Meteor 0.9.1')                                                                           // 80\n  _registerHelper = Package.blaze.Blaze.registerHelper                                                     // 81\n} else if (Package.ui && Package.ui.UI) {                                                                  // 82\n  // Meteor 0.8 - 0.9.0.1                                                                                  // 83\n  //console.log(' Meteor 0.8 - 0.9.0.1')                                                                   // 84\n  _registerHelper = Package.ui.UI.registerHelper                                                           // 85\n} else if (Package.handlebars && Package.handlebars.Handlebars) {                                          // 86\n  // Meteor <0.8                                                                                           // 87\n  //console.log(' Meteor <0.8')                                                                            // 88\n  _registerHelper = Package.handlebars.Handlebars.registerHelper                                           // 89\n}                                                                                                          // 90\n                                                                                                           // 91\nif (_registerHelper) {                                                                                     // 92\n  _.each(Roles._uiHelpers, function (func, name) {                                                         // 93\n    _registerHelper(name, func)                                                                            // 94\n  })                                                                                                       // 95\n} else {                                                                                                   // 96\n  console.log && console.log('WARNING: Roles template helpers not registered. Handlebars, UI, or Blaze packages not found')\n}                                                                                                          // 98\n                                                                                                           // 99\n}());                                                                                                      // 100\n                                                                                                           // 101\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]
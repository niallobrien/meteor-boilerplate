[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\n\n/* Package-scope variables */\nvar value;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/gwendall_session-json/packages/gwendall_session-json.js                             //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\n(function () {                                                                                  // 1\n                                                                                                // 2\n////////////////////////////////////////////////////////////////////////////////////////////    // 3\n//                                                                                        //    // 4\n// packages/gwendall:session-json/export.js                                               //    // 5\n//                                                                                        //    // 6\n////////////////////////////////////////////////////////////////////////////////////////////    // 7\n                                                                                          //    // 8\nvar deep = function (obj, key, value) {                                                   // 1  // 9\n\t                                                                                         // 2  // 10\n\tvar keys = key.replace(/\\[([\"']?)([^\\1]+?)\\1?\\]/g, '.$2').replace(/^\\./, '').split('.'), // 3  // 11\n\t\t\troot,                                                                                  // 4  // 12\n\t\t\ti = 0,                                                                                 // 5  // 13\n\t\t\tn = keys.length;                                                                       // 6  // 14\n                                                                                          // 7  // 15\n\t// Set deep value                                                                        // 8  // 16\n\tif (arguments.length > 2) {                                                              // 9  // 17\n                                                                                          // 10\n\t\troot = obj;                                                                             // 11\n\t\tn--;                                                                                    // 12\n                                                                                          // 13\n\t\twhile (i < n) {                                                                         // 14\n\t\t\tkey = keys[i++];                                                                       // 15\n\t\t\tobj = obj[key] = _.isObject(obj[key]) ? obj[key] : {};                                 // 16\n\t\t}                                                                                       // 17\n                                                                                          // 18\n\t\tobj[keys[i]] = value;                                                                   // 19\n                                                                                          // 20\n\t\tvalue = root;                                                                           // 21\n                                                                                          // 22\n\t// Get deep value                                                                        // 23\n\t} else {                                                                                 // 24\n\t\twhile ((obj = obj[keys[i++]]) != null && i < n) {};                                     // 25\n\t\tvalue = i < n ? void 0 : obj;                                                           // 26\n\t}                                                                                        // 27\n                                                                                          // 28\n\treturn value;                                                                            // 29\n                                                                                          // 30\n}                                                                                         // 31\n                                                                                          // 32\n_.extend(ReactiveDict.prototype, {                                                        // 33\n\t                                                                                         // 34\n\tgetJSON: function(selector) {                                                            // 35\n\t\t                                                                                        // 36\n\t\tvar self = this,                                                                        // 37\n\t\t\tpathKeys = selector.split('.');                                                        // 38\n                                                                                          // 39\n\t\tif (pathKeys.length == 1) {                                                             // 40\n                                                                                          // 41\n\t\t\treturn self.get(selector);                                                             // 42\n                                                                                          // 43\n\t\t} else {                                                                                // 44\n                                                                                          // 45\n\t\t\tvar key = pathKeys[0],                                                                 // 46\n\t\t\t\tjsonValue = self.get(key);                                                            // 47\n                                                                                          // 48\n\t\t\tpathKeys.shift();                                                                      // 49\n                                                                                          // 50\n\t\t\tvar jsonPath = pathKeys.join('.');                                                     // 51\n                                                                                          // 52\n\t\t\ttry {                                                                                  // 53\n\t\t\t\tvalue = deep(jsonValue, jsonPath);\t\t\t\t                                                // 54\n\t\t\t} catch(e) {                                                                           // 55\n\t\t\t\tvalue = null;\t\t\t\t                                                                     // 56\n\t\t\t}                                                                                      // 57\n                                                                                          // 58\n\t\t\treturn value;                                                                          // 59\n                                                                                          // 60\n\t\t}                                                                                       // 61\n\t\t                                                                                        // 62\n\t}                                                                                        // 63\n                                                                                          // 64\n});                                                                                       // 65\n                                                                                          // 66\n_.extend(ReactiveDict.prototype, {                                                        // 67\n\t                                                                                         // 68\n\tsetJSON: function(selector, value) {                                                     // 69\n\t\t                                                                                        // 70\n\t\tvar self = this,                                                                        // 71\n\t\t\tpathKeys = selector.split('.'),                                                        // 72\n\t\t\tkey = pathKeys[0];                                                                     // 73\n                                                                                          // 74\n\t\tif (pathKeys.length == 1) {                                                             // 75\n\t\t\t                                                                                       // 76\n\t\t\tself.set(selector, value);                                                             // 77\n                                                                                          // 78\n\t\t} else {                                                                                // 79\n                                                                                          // 80\n\t\t\tvar jsonValue = self.getJSON(key);                                                     // 81\n                                                                                          // 82\n\t\t\tif (!jsonValue) {                                                                      // 83\n\t\t\t\tjsonValue = {};                                                                       // 84\n\t\t\t\tself.set(key, jsonValue);                                                             // 85\n\t\t\t};                                                                                     // 86\n\t\t\t                                                                                       // 87\n\t\t\tpathKeys.shift();                                                                      // 88\n\t\t\tvar jsonPath = pathKeys.join('.');                                                     // 89\n\t\t\t                                                                                       // 90\n\t\t\tvalue = deep(jsonValue, jsonPath, value);                                              // 91\n\t\t\tself.set(key, value);                                                                  // 92\n\t\t\t                                                                                       // 93\n\t\t}                                                                                       // 94\n\t\t                                                                                        // 95\n\t}                                                                                        // 96\n                                                                                          // 97\n});                                                                                       // 98\n////////////////////////////////////////////////////////////////////////////////////////////    // 107\n                                                                                                // 108\n}).call(this);                                                                                  // 109\n                                                                                                // 110\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['gwendall:session-json'] = {};\n\n})();\n","servePath":"/packages/gwendall_session-json.js","sourceMap":{"version":3,"sources":["/packages/gwendall_session-json/packages/gwendall_session-json.js"],"names":[],"mappingssG","file":"/packages/gwendall_session-json.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// packages/gwendall:session-json/export.js                                               //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\nvar deep = function (obj, key, value) {                                                   // 1\n\t                                                                                         // 2\n\tvar keys = key.replace(/\\[([\"']?)([^\\1]+?)\\1?\\]/g, '.$2').replace(/^\\./, '').split('.'), // 3\n\t\t\troot,                                                                                  // 4\n\t\t\ti = 0,                                                                                 // 5\n\t\t\tn = keys.length;                                                                       // 6\n                                                                                          // 7\n\t// Set deep value                                                                        // 8\n\tif (arguments.length > 2) {                                                              // 9\n                                                                                          // 10\n\t\troot = obj;                                                                             // 11\n\t\tn--;                                                                                    // 12\n                                                                                          // 13\n\t\twhile (i < n) {                                                                         // 14\n\t\t\tkey = keys[i++];                                                                       // 15\n\t\t\tobj = obj[key] = _.isObject(obj[key]) ? obj[key] : {};                                 // 16\n\t\t}                                                                                       // 17\n                                                                                          // 18\n\t\tobj[keys[i]] = value;                                                                   // 19\n                                                                                          // 20\n\t\tvalue = root;                                                                           // 21\n                                                                                          // 22\n\t// Get deep value                                                                        // 23\n\t} else {                                                                                 // 24\n\t\twhile ((obj = obj[keys[i++]]) != null && i < n) {};                                     // 25\n\t\tvalue = i < n ? void 0 : obj;                                                           // 26\n\t}                                                                                        // 27\n                                                                                          // 28\n\treturn value;                                                                            // 29\n                                                                                          // 30\n}                                                                                         // 31\n                                                                                          // 32\n_.extend(ReactiveDict.prototype, {                                                        // 33\n\t                                                                                         // 34\n\tgetJSON: function(selector) {                                                            // 35\n\t\t                                                                                        // 36\n\t\tvar self = this,                                                                        // 37\n\t\t\tpathKeys = selector.split('.');                                                        // 38\n                                                                                          // 39\n\t\tif (pathKeys.length == 1) {                                                             // 40\n                                                                                          // 41\n\t\t\treturn self.get(selector);                                                             // 42\n                                                                                          // 43\n\t\t} else {                                                                                // 44\n                                                                                          // 45\n\t\t\tvar key = pathKeys[0],                                                                 // 46\n\t\t\t\tjsonValue = self.get(key);                                                            // 47\n                                                                                          // 48\n\t\t\tpathKeys.shift();                                                                      // 49\n                                                                                          // 50\n\t\t\tvar jsonPath = pathKeys.join('.');                                                     // 51\n                                                                                          // 52\n\t\t\ttry {                                                                                  // 53\n\t\t\t\tvalue = deep(jsonValue, jsonPath);\t\t\t\t                                                // 54\n\t\t\t} catch(e) {                                                                           // 55\n\t\t\t\tvalue = null;\t\t\t\t                                                                     // 56\n\t\t\t}                                                                                      // 57\n                                                                                          // 58\n\t\t\treturn value;                                                                          // 59\n                                                                                          // 60\n\t\t}                                                                                       // 61\n\t\t                                                                                        // 62\n\t}                                                                                        // 63\n                                                                                          // 64\n});                                                                                       // 65\n                                                                                          // 66\n_.extend(ReactiveDict.prototype, {                                                        // 67\n\t                                                                                         // 68\n\tsetJSON: function(selector, value) {                                                     // 69\n\t\t                                                                                        // 70\n\t\tvar self = this,                                                                        // 71\n\t\t\tpathKeys = selector.split('.'),                                                        // 72\n\t\t\tkey = pathKeys[0];                                                                     // 73\n                                                                                          // 74\n\t\tif (pathKeys.length == 1) {                                                             // 75\n\t\t\t                                                                                       // 76\n\t\t\tself.set(selector, value);                                                             // 77\n                                                                                          // 78\n\t\t} else {                                                                                // 79\n                                                                                          // 80\n\t\t\tvar jsonValue = self.getJSON(key);                                                     // 81\n                                                                                          // 82\n\t\t\tif (!jsonValue) {                                                                      // 83\n\t\t\t\tjsonValue = {};                                                                       // 84\n\t\t\t\tself.set(key, jsonValue);                                                             // 85\n\t\t\t};                                                                                     // 86\n\t\t\t                                                                                       // 87\n\t\t\tpathKeys.shift();                                                                      // 88\n\t\t\tvar jsonPath = pathKeys.join('.');                                                     // 89\n\t\t\t                                                                                       // 90\n\t\t\tvalue = deep(jsonValue, jsonPath, value);                                              // 91\n\t\t\tself.set(key, value);                                                                  // 92\n\t\t\t                                                                                       // 93\n\t\t}                                                                                       // 94\n\t\t                                                                                        // 95\n\t}                                                                                        // 96\n                                                                                          // 97\n});                                                                                       // 98\n////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]
{"version":3,"sources":["meteor://ðŸ’»app/packages/jagi_astronomy/packages/jagi_astronomy.js"],"names":[],"mappingskG","file":"/packages/jagi_astronomy.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/core/global.js                                       //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstronomy = {};                                                                     // 1\nAstro = Astronomy;                                                                  // 2\n                                                                                    // 3\nAstro.modules = {};                                                                 // 4\nAstro.classes = {};                                                                 // 5\n                                                                                    // 6\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/core/config.js                                       //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.config = {                                                                    // 1\n  supportLegacyBrowsers: true                                                       // 2\n};                                                                                  // 3\n                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/core/utils.js                                        //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.utils = {};                                                                   // 1\n                                                                                    // 2\nAstro.utils.class = {};                                                             // 3\n                                                                                    // 4\nAstro.utils.class.eachClass = function(Class, predicate, context) {                 // 5\n  do {                                                                              // 6\n    if (context) {                                                                  // 7\n      predicate.call(context, Class);                                               // 8\n    } else {                                                                        // 9\n      predicate(Class);                                                             // 10\n    }                                                                               // 11\n  } while (Class = Class.getParent());                                              // 12\n};                                                                                  // 13\n                                                                                    // 14\nAstro.utils.class.everyClass = function(Class, predicate, context) {                // 15\n  do {                                                                              // 16\n    if (context) {                                                                  // 17\n      if (!predicate.call(context, Class)) {                                        // 18\n        return false;                                                               // 19\n      }                                                                             // 20\n    } else {                                                                        // 21\n      if (!predicate(Class)) {                                                      // 22\n        return false;                                                               // 23\n      }                                                                             // 24\n    }                                                                               // 25\n  } while (Class = Class.getParent());                                              // 26\n                                                                                    // 27\n  return true;                                                                      // 28\n};                                                                                  // 29\n                                                                                    // 30\nAstro.utils.class.findClass = function(Class, predicate, context) {                 // 31\n  do {                                                                              // 32\n    if (context) {                                                                  // 33\n      if (predicate.call(context, Class)) {                                         // 34\n        return Class;                                                               // 35\n      }                                                                             // 36\n    } else {                                                                        // 37\n      if (predicate(Class)) {                                                       // 38\n        return Class;                                                               // 39\n      }                                                                             // 40\n    }                                                                               // 41\n  } while (Class = Class.getParent());                                              // 42\n};                                                                                  // 43\n                                                                                    // 44\nAstro.utils.class.findInClass = function(Class, predicate, context) {               // 45\n  do {                                                                              // 46\n    var value;                                                                      // 47\n    if (context) {                                                                  // 48\n      value = predicate.call(context, Class);                                       // 49\n    } else {                                                                        // 50\n      value = predicate(Class);                                                     // 51\n    }                                                                               // 52\n    if (value) {                                                                    // 53\n      return value;                                                                 // 54\n    }                                                                               // 55\n  } while (Class = Class.getParent());                                              // 56\n};                                                                                  // 57\n                                                                                    // 58\nAstro.utils.class.transform = function(className) {                                 // 59\n  return function(doc) {                                                            // 60\n    var transformClassName = className;                                             // 61\n    // If there is \"_type\" attribute in the document, then look for class with      // 62\n    // name equal to this attribute value. The \"_type\" attribute is the name        // 63\n    // of the child class. Stored document is instance of this class.               // 64\n    if (doc._type && _.has(Astro.classes, doc._type)) {                             // 65\n      // Child class exists, so we will use this class for creating instance.       // 66\n      transformClassName = doc._type;                                               // 67\n    }                                                                               // 68\n    // If document has \"_type\" attribute and we haven't found class for that        // 69\n    // name we will use parent class name stored in the \"transformClassName\" param. // 70\n                                                                                    // 71\n    // Get class from classes list, create instance and return.                     // 72\n    var Class = Astro.classes[transformClassName];                                  // 73\n    if (Class) {                                                                    // 74\n      doc = new Class(doc);                                                         // 75\n      doc._isNew = false;                                                           // 76\n    }                                                                               // 77\n                                                                                    // 78\n    // Return plain object, if class does have not been defined.                    // 79\n    return doc;                                                                     // 80\n  };                                                                                // 81\n};                                                                                  // 82\n                                                                                    // 83\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/core/events.js                                       //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.Events = function() {};                                                       // 1\n                                                                                    // 2\n_.extend(Astro.Events.prototype, {                                                  // 3\n  on: function(eventName, eventHandler) {                                           // 4\n    this._events = this._events || {};                                              // 5\n                                                                                    // 6\n    eventName = eventName.toLowerCase();                                            // 7\n                                                                                    // 8\n    this._events[eventName] = this._events[eventName] || [];                        // 9\n                                                                                    // 10\n    // Add event only if it's not already on the events list.                       // 11\n    if (!_.contains(this._events[eventName], eventHandler)) {                       // 12\n      this._events[eventName].push(eventHandler);                                   // 13\n    }                                                                               // 14\n  },                                                                                // 15\n                                                                                    // 16\n  off: function(eventName, eventHandler) {                                          // 17\n    this._events = this._events || {};                                              // 18\n                                                                                    // 19\n    eventName = eventName.toLowerCase();                                            // 20\n                                                                                    // 21\n    if (arguments.length === 1) {                                                   // 22\n      // Remove all event handlers for given event name.                            // 23\n      delete this._events[eventName];                                               // 24\n    } else if (arguments.length === 2) {                                            // 25\n      // Remove only one event handler (the passed one) from the events list.       // 26\n      var index = _.indexOf(this._events[eventName], eventHandler);                 // 27\n      if (index >= 0) {                                                             // 28\n        this._events[eventName].splice(index, 1);                                   // 29\n      }                                                                             // 30\n    }                                                                               // 31\n  },                                                                                // 32\n                                                                                    // 33\n  emit: function(event) {                                                           // 34\n    this._events = this._events || {};                                              // 35\n                                                                                    // 36\n    var eventName = event.type;                                                     // 37\n    var target = event.target;                                                      // 38\n                                                                                    // 39\n    return _.every(this._events[eventName], function(eventHandler) {                // 40\n      if (target) {                                                                 // 41\n        eventHandler.call(target, event);                                           // 42\n      } else {                                                                      // 43\n        eventHandler(event);                                                        // 44\n      }                                                                             // 45\n      return !event.stopped;                                                        // 46\n    });                                                                             // 47\n  },                                                                                // 48\n                                                                                    // 49\n  each: function(eventName, callback, target) {                                     // 50\n    _.each(this._events[eventName], function(eventHandler) {                        // 51\n      if (target) {                                                                 // 52\n        callback.call(target, eventHandler);                                        // 53\n      } else {                                                                      // 54\n        callback(eventHandler);                                                     // 55\n      }                                                                             // 56\n    });                                                                             // 57\n  },                                                                                // 58\n                                                                                    // 59\n  every: function(eventName, callback, target) {                                    // 60\n    _.every(this._events[eventName], function(eventHandler) {                       // 61\n      if (target) {                                                                 // 62\n        return callback.call(target, eventHandler);                                 // 63\n      } else {                                                                      // 64\n        return callback(eventHandler);                                              // 65\n      }                                                                             // 66\n    });                                                                             // 67\n  }                                                                                 // 68\n});                                                                                 // 69\n                                                                                    // 70\nAstro.Events.mixin = function(obj) {                                                // 71\n  if (_.isFunction(obj)) {                                                          // 72\n    _.each(Astro.Events.prototype, function(method, methodName) {                   // 73\n      obj.prototype[methodName] = method;                                           // 74\n    });                                                                             // 75\n  } else {                                                                          // 76\n    _.each(Astro.Events.prototype, function(method, methodName) {                   // 77\n      obj[methodName] = method;                                                     // 78\n    });                                                                             // 79\n  }                                                                                 // 80\n};                                                                                  // 81\n                                                                                    // 82\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/core/event.js                                        //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.Event = function(type, data) {                                                // 1\n  this.type = type;                                                                 // 2\n  this.data = data;                                                                 // 3\n};                                                                                  // 4\n                                                                                    // 5\n_.extend(Astro.Event.prototype, {                                                   // 6\n  type: null,                                                                       // 7\n  data: null,                                                                       // 8\n  stopped: false,                                                                   // 9\n  defaultPrevented: false,                                                          // 10\n                                                                                    // 11\n  stopPropagation: function() {                                                     // 12\n    this.stopped = true;                                                            // 13\n  },                                                                                // 14\n                                                                                    // 15\n  preventDefault: function() {                                                      // 16\n    this.defaultPrevented = true;                                                   // 17\n  }                                                                                 // 18\n});                                                                                 // 19\n                                                                                    // 20\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/core/base_class.js                                   //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.BaseClass = function() {};                                                    // 1\n                                                                                    // 2\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/core/schema.js                                       //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nvar checks = {                                                                      // 1\n  schemaDefinition: function(schemaDefinition) {                                    // 2\n    // Check whether definition is object.                                          // 3\n    if (!_.isObject(schemaDefinition)) {                                            // 4\n      throw new Error('The class definition has to be an object');                  // 5\n    }                                                                               // 6\n                                                                                    // 7\n    // Check if class name is provided.                                             // 8\n    if (!_.has(schemaDefinition, 'name')) {                                         // 9\n      throw new Error('The class name has to be provided');                         // 10\n    }                                                                               // 11\n                                                                                    // 12\n    // Check if class name is a string.                                             // 13\n    if (!_.isString(schemaDefinition.name)) {                                       // 14\n      throw new Error('The class name has to be a string');                         // 15\n    }                                                                               // 16\n                                                                                    // 17\n    // Check if a class with the given name already exists.                         // 18\n    if (_.has(Astro.classes, schemaDefinition.name)) {                              // 19\n      throw new Error(                                                              // 20\n        'The class with the name \"' + schemaDefinition.name +                       // 21\n        '\" is already defined'                                                      // 22\n      );                                                                            // 23\n    }                                                                               // 24\n                                                                                    // 25\n    // If collection is provided, then check its validity.                          // 26\n    if (                                                                            // 27\n      _.has(schemaDefinition, 'collection') &&                                      // 28\n      !(schemaDefinition.collection instanceof Mongo.Collection)                    // 29\n    ) {                                                                             // 30\n      throw new Error(                                                              // 31\n        'The collection has to be an instance of the \"Mongo.Collection\"'            // 32\n      );                                                                            // 33\n    }                                                                               // 34\n                                                                                    // 35\n    // If a class to extend from is provided than check if its prototype is         // 36\n    // an instance of the \"Astro.BaseClass\" class.                                  // 37\n    if (_.has(schemaDefinition, 'parentClassName')) {                               // 38\n      var Class = Astro.classes[schemaDefinition.parentClassName];                  // 39\n      if (!Class) {                                                                 // 40\n        throw new Error('The class to extend from does not exist');                 // 41\n      }                                                                             // 42\n      if (!(Class.prototype instanceof Astro.BaseClass)) {                          // 43\n        throw new Error('The class to extend from is not valid');                   // 44\n      }                                                                             // 45\n    }                                                                               // 46\n                                                                                    // 47\n    // If class constructor is provided, then check its validity.                   // 48\n    if (                                                                            // 49\n      _.has(schemaDefinition, 'init') &&                                            // 50\n      !_.isFunction(schemaDefinition.init)                                          // 51\n    ) {                                                                             // 52\n      throw new Error('The class constructor has to be a function');                // 53\n    }                                                                               // 54\n  }                                                                                 // 55\n};                                                                                  // 56\n                                                                                    // 57\nAstro.Schema = function(schemaDefinition) {                                         // 58\n  checks.schemaDefinition(schemaDefinition);                                        // 59\n                                                                                    // 60\n  this.className = schemaDefinition.name;                                           // 61\n                                                                                    // 62\n  // Set collection for schema.                                                     // 63\n  if (_.has(schemaDefinition, 'collection')) {                                      // 64\n    this.collection = schemaDefinition.collection;                                  // 65\n                                                                                    // 66\n    // If there is not \"transform\" property then set it to true by default.         // 67\n    if (!_.has(schemaDefinition, 'transform')) {                                    // 68\n      schemaDefinition.transform = true;                                            // 69\n    }                                                                               // 70\n                                                                                    // 71\n    // Set document transformation, if \"transform\" flag is set.                     // 72\n    if (schemaDefinition.transform) {                                               // 73\n      this.collection._transform = LocalCollection.wrapTransform(                   // 74\n        Astro.utils.class.transform(this.className)                                 // 75\n      );                                                                            // 76\n    }                                                                               // 77\n  }                                                                                 // 78\n                                                                                    // 79\n  // Set the class to extend from.                                                  // 80\n  if (_.has(schemaDefinition, 'parentClassName')) {                                 // 81\n    this.parentClassName = schemaDefinition.parentClassName;                        // 82\n  }                                                                                 // 83\n                                                                                    // 84\n  // Set class constructor.                                                         // 85\n  this.init = function() {                                                          // 86\n    // Call init (constructor) method if provided by user.                          // 87\n    if (_.isFunction(schemaDefinition.init)) {                                      // 88\n      schemaDefinition.init.apply(this, arguments);                                 // 89\n    }                                                                               // 90\n  };                                                                                // 91\n};                                                                                  // 92\n                                                                                    // 93\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/core/module.js                                       //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nvar checks = {                                                                      // 1\n  moduleDefinition: function(moduleDefinition) {                                    // 2\n    // Check parameters validity.                                                   // 3\n    if (!_.isObject(moduleDefinition)) {                                            // 4\n      throw new Error('The module definition has to be an object');                 // 5\n    }                                                                               // 6\n                                                                                    // 7\n    // Check if module name is provided.                                            // 8\n    if (!_.has(moduleDefinition, 'name')) {                                         // 9\n      throw new Error('The module name has to be provided');                        // 10\n    }                                                                               // 11\n                                                                                    // 12\n    // Check if module name is a string.                                            // 13\n    if (!_.isString(moduleDefinition.name)) {                                       // 14\n      throw new Error('The module name has to be a string');                        // 15\n    }                                                                               // 16\n                                                                                    // 17\n    // Check if module with given name already exists.                              // 18\n    if (_.has(Astro.modules, moduleDefinition.name)) {                              // 19\n      throw new Error(                                                              // 20\n        'The module with the name \"' + moduleDefinition.name +                      // 21\n        '\" is already defined'                                                      // 22\n      );                                                                            // 23\n    }                                                                               // 24\n  }                                                                                 // 25\n};                                                                                  // 26\n                                                                                    // 27\nAstro.createModule = function(moduleDefinition) {                                   // 28\n  // Check validity of the module definition.                                       // 29\n  checks.moduleDefinition(moduleDefinition);                                        // 30\n                                                                                    // 31\n  // Initialize a module if the \"init\" method had been defined.                     // 32\n  if (_.isFunction(moduleDefinition.init)) {                                        // 33\n    moduleDefinition.init();                                                        // 34\n  }                                                                                 // 35\n                                                                                    // 36\n  // Add module events to global events list.                                       // 37\n  if (_.has(moduleDefinition, 'events')) {                                          // 38\n    _.each(moduleDefinition.events, function(eventHandler, eventName) {             // 39\n      Astro.eventManager.on(eventName, eventHandler);                               // 40\n    });                                                                             // 41\n  }                                                                                 // 42\n                                                                                    // 43\n  // Add the module definition to the global list of modules.                       // 44\n  return Astro.modules[moduleDefinition.name] = moduleDefinition;                   // 45\n};                                                                                  // 46\n                                                                                    // 47\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/core/constructor.js                                  //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\ndefaultConstructor = function(attrs) {                                              // 1\n  var doc = this;                                                                   // 2\n  var Class = doc.constructor;                                                      // 3\n  attrs = attrs || {};                                                              // 4\n                                                                                    // 5\n  // Create \"_values\" property when legacy browsers support is turned on.           // 6\n  if (!Astro.config.supportLegacyBrowsers) {                                        // 7\n    doc._values = {};                                                               // 8\n  }                                                                                 // 9\n                                                                                    // 10\n  // Set values of all fields.                                                      // 11\n  Astro.utils.fields.setAllValues(doc, attrs);                                      // 12\n                                                                                    // 13\n  // Create the \"_original\" property inside the document for storing original       // 14\n  // object's values (before any modifications). Thanks to it, we can compare       // 15\n  // \"_original\" values with the current values and decide what fields have been    // 16\n  // modified. Now, let's copy current values to the original property but only     // 17\n  // if there is the \"_id\" property. Otherwise we only copy the \"_id\" property.     // 18\n  // Thanks to that, if there is no \"_id\" property, then we can set fields of       // 19\n  // the new document on the initiation stage. If there is the \"_id\" property       // 20\n  // it means that we are fetching document from the collection.                    // 21\n  if (_.isString(attrs._id)) {                                                      // 22\n    doc._original = EJSON.clone(Astro.utils.fields.getAllValues(doc));              // 23\n  } else {                                                                          // 24\n    doc._original = {                                                               // 25\n      _id: attrs._id                                                                // 26\n    };                                                                              // 27\n  }                                                                                 // 28\n                                                                                    // 29\n  // Set the \"_isNew\" flag indicating if an object had been persisted in the        // 30\n  // collection.                                                                    // 31\n  doc._isNew = true;                                                                // 32\n};                                                                                  // 33\n                                                                                    // 34\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/core/class.js                                        //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nvar methods = {                                                                     // 1\n  extend: function(schemaDefinition) {                                              // 2\n    // Remove the \"transform\" attribute if it's provided. We don't want to          // 3\n    // override already set the collection's transform function.                    // 4\n    delete schemaDefinition.transform;                                              // 5\n                                                                                    // 6\n    // Add the class from which we want to extend.                                  // 7\n    schemaDefinition.parentClassName = this.getName();                              // 8\n                                                                                    // 9\n    // If a collection in the parent class was provided, then we want to use this   // 10\n    // collection in the child class.                                               // 11\n    var Collection = this.getCollection();                                          // 12\n    if (Collection) {                                                               // 13\n      schemaDefinition.collection = Collection;                                     // 14\n    }                                                                               // 15\n                                                                                    // 16\n    return Astro.Class(schemaDefinition);                                           // 17\n  },                                                                                // 18\n                                                                                    // 19\n  getParent: function() {                                                           // 20\n    return Astro.classes[this.schema.parentClassName];                              // 21\n  },                                                                                // 22\n                                                                                    // 23\n  getName: function() {                                                             // 24\n    return this.schema.className;                                                   // 25\n  },                                                                                // 26\n                                                                                    // 27\n  getCollection: function() {                                                       // 28\n    return this.schema.collection;                                                  // 29\n  },                                                                                // 30\n                                                                                    // 31\n  getConstructor: function() {                                                      // 32\n    return this.schema.init;                                                        // 33\n  }                                                                                 // 34\n};                                                                                  // 35\n                                                                                    // 36\nAstro.createClass = Astro.Class = function(schemaDefinition) {                      // 37\n  var Class = function Class() {                                                    // 38\n    if (!(this instanceof Class)) {                                                 // 39\n      throw new Error('Use \"new\" keyword to create an instance');                   // 40\n    }                                                                               // 41\n                                                                                    // 42\n    var self = this;                                                                // 43\n    var args = arguments;                                                           // 44\n                                                                                    // 45\n    // Call default constructor.                                                    // 46\n    defaultConstructor.apply(self, args);                                           // 47\n                                                                                    // 48\n    // Call global constructors by triggering the \"initinstance\" event. These       // 49\n    // constructors are mainly defined by modules and behaviors.                    // 50\n    Astro.eventManager.each('initinstance', function(eventHandler) {                // 51\n      eventHandler.apply(self, args);                                               // 52\n    });                                                                             // 53\n                                                                                    // 54\n    // Call user defined constructor.                                               // 55\n    self.constructor.getConstructor().apply(self, args);                            // 56\n  };                                                                                // 57\n                                                                                    // 58\n  // Extend class object with some helper methods.                                  // 59\n  _.extend(Class, methods);                                                         // 60\n                                                                                    // 61\n  // Initialize a schema and store it in the class object.                          // 62\n  Class.schema = new Astro.Schema(schemaDefinition);                                // 63\n                                                                                    // 64\n  // Add given class to list of all defined classes.                                // 65\n  Astro.classes[Class.getName()] = Class;                                           // 66\n                                                                                    // 67\n  // Extend.                                                                        // 68\n  var ParentClass = Class.getParent();                                              // 69\n  // Extend another model class if provided.                                        // 70\n  if (ParentClass) {                                                                // 71\n    Class.prototype = Object.create(ParentClass.prototype);                         // 72\n  } else {                                                                          // 73\n    // Class.prototype = Object.create(Astro.BaseClass.prototype);                  // 74\n    Class.prototype = Object.create(Astro.BaseClass.prototype);                     // 75\n  }                                                                                 // 76\n  Class.prototype.constructor = Class;                                              // 77\n                                                                                    // 78\n  // Setup class using \"initclass\" event handlers.                                  // 79\n  Astro.eventManager.each('initclass', function(eventHandler) {                     // 80\n    eventHandler.call(Class, schemaDefinition);                                     // 81\n  });                                                                               // 82\n                                                                                    // 83\n  return Class;                                                                     // 84\n};                                                                                  // 85\n                                                                                    // 86\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/events/init_module.js                        //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\neventsOnInitModule = function() {                                                   // 1\n  // Allow storing events in the global \"Astronomy.eventManager\" object.            // 2\n  Astro.eventManager = {};                                                          // 3\n  Astro.Events.mixin(Astro.eventManager);                                           // 4\n                                                                                    // 5\n  // Allow storing events in every schema.                                          // 6\n  Astro.Events.mixin(Astro.Schema);                                                 // 7\n};                                                                                  // 8\n                                                                                    // 9\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/events/init_class.js                         //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nvar checks = {                                                                      // 1\n  eventName: function(eventName) {                                                  // 2\n    if (!_.isString(eventName)) {                                                   // 3\n      throw new Error(                                                              // 4\n        'The event name in the \"' + this.getName() +                                // 5\n        '\" class schema has to be a string'                                         // 6\n      );                                                                            // 7\n    }                                                                               // 8\n  },                                                                                // 9\n                                                                                    // 10\n  eventHandler: function(eventName, eventHandler) {                                 // 11\n    if (!_.isFunction(eventHandler)) {                                              // 12\n      throw new Error(                                                              // 13\n        'The event handler for the \"' + eventName + '\" event in the \"' +            // 14\n        this.getName() + '\" class schema has to be a function'                      // 15\n      );                                                                            // 16\n    }                                                                               // 17\n  },                                                                                // 18\n                                                                                    // 19\n  events: function(events) {                                                        // 20\n    if (!_.isObject(events)) {                                                      // 21\n      throw new Error(                                                              // 22\n        'The list of events in the \"' + this.getName() +                            // 23\n        '\" class schema has to be an object'                                        // 24\n      );                                                                            // 25\n    }                                                                               // 26\n  }                                                                                 // 27\n};                                                                                  // 28\n                                                                                    // 29\nvar methods = {                                                                     // 30\n  addEvent: function(eventName, eventHandler) {                                     // 31\n    // Check if event name is a string.                                             // 32\n    checks.eventName.call(this, eventName);                                         // 33\n    // Check if event handler is a function.                                        // 34\n    checks.eventHandler.call(this, eventName, eventHandler);                        // 35\n                                                                                    // 36\n    this.schema.on(eventName, eventHandler);                                        // 37\n  },                                                                                // 38\n                                                                                    // 39\n  addEvents: function(events) {                                                     // 40\n    // Check if events definition.                                                  // 41\n    checks.events.call(this, events);                                               // 42\n                                                                                    // 43\n    _.each(events, function(eventHandler, eventName) {                              // 44\n      this.addEvent(eventName, eventHandler);                                       // 45\n    }, this);                                                                       // 46\n  },                                                                                // 47\n                                                                                    // 48\n  removeEvent: function(eventName, eventHandler) {                                  // 49\n    // Check if event name is a string.                                             // 50\n    checks.eventName.call(this, eventName);                                         // 51\n                                                                                    // 52\n    if (arguments.length === 1) {                                                   // 53\n                                                                                    // 54\n      this.schema.off(eventName);                                                   // 55\n                                                                                    // 56\n      // When the event handler is provided.                                        // 57\n    } else if (arguments.length === 2) {                                            // 58\n                                                                                    // 59\n      // Check if event handler is a function.                                      // 60\n      checks.eventHandler.call(this, eventName, eventHandler);                      // 61\n                                                                                    // 62\n      this.schema.off(eventName, eventHandler);                                     // 63\n                                                                                    // 64\n    }                                                                               // 65\n  },                                                                                // 66\n                                                                                    // 67\n  emitEvent: function(event) {                                                      // 68\n    if (!event) {                                                                   // 69\n      return;                                                                       // 70\n    }                                                                               // 71\n                                                                                    // 72\n    var Class = this;                                                               // 73\n    var eventName = event.type;                                                     // 74\n    var target = event.target;                                                      // 75\n                                                                                    // 76\n    Astro.utils.class.everyClass(Class, function(Class) {                           // 77\n      if (Class.schema._events && _.has(Class.schema._events, eventName)) {         // 78\n        return Class.schema.emit(event);                                            // 79\n      } else {                                                                      // 80\n        return true;                                                                // 81\n      }                                                                             // 82\n    });                                                                             // 83\n                                                                                    // 84\n    if (!event.stopped) {                                                           // 85\n      return Astro.eventManager.emit(event);                                        // 86\n    }                                                                               // 87\n                                                                                    // 88\n    return !event.stopped;                                                          // 89\n  }                                                                                 // 90\n};                                                                                  // 91\n                                                                                    // 92\neventsOnInitClass = function(schemaDefinition) {                                    // 93\n  var Class = this;                                                                 // 94\n                                                                                    // 95\n  _.extend(Class, methods);                                                         // 96\n                                                                                    // 97\n  // Add events from the schema definition.                                         // 98\n  if (_.has(schemaDefinition, 'events')) {                                          // 99\n    Class.addEvents(schemaDefinition.events);                                       // 100\n  }                                                                                 // 101\n};                                                                                  // 102\n                                                                                    // 103\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/events/module.js                             //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.createModule({                                                                // 1\n  name: 'events',                                                                   // 2\n  init: eventsOnInitModule,                                                         // 3\n  events: {                                                                         // 4\n    initclass: eventsOnInitClass                                                    // 5\n  }                                                                                 // 6\n});                                                                                 // 7\n                                                                                    // 8\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/types/global.js                              //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.types = {};                                                                   // 1\n                                                                                    // 2\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/types/utils.js                               //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.utils.types = {};                                                             // 1\n                                                                                    // 2\nAstro.utils.types.castValue = function(type, value) {                               // 3\n  // We only cast value if the type was provided.                                   // 4\n  if (!_.isNull(type) && !_.isUndefined(value) && !_.isNull(value)) {               // 5\n    value = Astro.types[type](value);                                               // 6\n  }                                                                                 // 7\n                                                                                    // 8\n  return value;                                                                     // 9\n};                                                                                  // 10\n                                                                                    // 11\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/types/type.js                                //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.createType = function(typeDefinition) {                                       // 1\n  // Check if the type definition is an object.                                     // 2\n  if (!_.isObject(typeDefinition)) {                                                // 3\n    throw new Error('Provide a type definition');                                   // 4\n  }                                                                                 // 5\n  // Check if the type name is provided.                                            // 6\n  if (!_.has(typeDefinition, 'name')) {                                             // 7\n    throw new Error('Provide a type name');                                         // 8\n  }                                                                                 // 9\n  // Check if the type name is a string.                                            // 10\n  if (!_.isString(typeDefinition.name)) {                                           // 11\n    throw new Error('The type name has to be a string');                            // 12\n  }                                                                                 // 13\n  // Check if the type with the given name already exists.                          // 14\n  if (_.has(Astro.types, typeDefinition.name)) {                                    // 15\n    throw new Error('Type with the name \"' + typeDefinition.name +                  // 16\n      '\" is already defined');                                                      // 17\n  }                                                                                 // 18\n  // Check if the casting function is provided.                                     // 19\n  if (!_.has(typeDefinition, 'cast')) {                                             // 20\n    throw new Error('Provide the \"cast\" function');                                 // 21\n  }                                                                                 // 22\n  // Check if the \"cast\" attribute is function.                                     // 23\n  if (!_.isFunction(typeDefinition.cast)) {                                         // 24\n    throw new Error('The \"cast\" attribute has to be a function');                   // 25\n  }                                                                                 // 26\n                                                                                    // 27\n  Astro.types[typeDefinition.name] = typeDefinition.cast;                           // 28\n};                                                                                  // 29\n                                                                                    // 30\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/types/init_module.js                         //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\ntypesOnInitModule = function() {                                                    // 1\n  Astro.createType({                                                                // 2\n    name: 'string',                                                                 // 3\n    cast: function(value) {                                                         // 4\n      return String(value);                                                         // 5\n    }                                                                               // 6\n  });                                                                               // 7\n                                                                                    // 8\n  Astro.createType({                                                                // 9\n    name: 'number',                                                                 // 10\n    cast: function(value) {                                                         // 11\n      return Number(value);                                                         // 12\n    }                                                                               // 13\n  });                                                                               // 14\n                                                                                    // 15\n  Astro.createType({                                                                // 16\n    name: 'boolean',                                                                // 17\n    cast: function(value) {                                                         // 18\n      return Boolean(value);                                                        // 19\n    }                                                                               // 20\n  });                                                                               // 21\n                                                                                    // 22\n  Astro.createType({                                                                // 23\n    name: 'object',                                                                 // 24\n    cast: function(value) {                                                         // 25\n      return new value.constructor(value);                                          // 26\n    }                                                                               // 27\n  });                                                                               // 28\n                                                                                    // 29\n  Astro.createType({                                                                // 30\n    name: 'array',                                                                  // 31\n    cast: function(value) {                                                         // 32\n      if (_.isArray(value)) {                                                       // 33\n        return value;                                                               // 34\n      }                                                                             // 35\n                                                                                    // 36\n      return [value];                                                               // 37\n    }                                                                               // 38\n  });                                                                               // 39\n                                                                                    // 40\n  Astro.createType({                                                                // 41\n    name: 'date',                                                                   // 42\n    cast: function(value) {                                                         // 43\n      if (_.isString(value)) {                                                      // 44\n        var date = Date.parse(value);                                               // 45\n        if (!_.isNaN(date)) {                                                       // 46\n          return new Date(date);                                                    // 47\n        } else {                                                                    // 48\n          return null;                                                              // 49\n        }                                                                           // 50\n      } else if (_.isNumber(value)) {                                               // 51\n        return new Date(value);                                                     // 52\n      } else {                                                                      // 53\n        return value;                                                               // 54\n      }                                                                             // 55\n    }                                                                               // 56\n  });                                                                               // 57\n};                                                                                  // 58\n                                                                                    // 59\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/types/module.js                              //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.createModule({                                                                // 1\n  name: 'types',                                                                    // 2\n  init: typesOnInitModule                                                           // 3\n});                                                                                 // 4\n                                                                                    // 5\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/indexes/init_class.js                        //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nvar checks = {                                                                      // 1\n  indexName: function(indexName) {                                                  // 2\n    if (!_.isString(indexName)) {                                                   // 3\n      throw new Error(                                                              // 4\n        'The index name in the \"' + this.getName() +                                // 5\n        '\" class schema has to be a string'                                         // 6\n      );                                                                            // 7\n    }                                                                               // 8\n  },                                                                                // 9\n};                                                                                  // 10\n                                                                                    // 11\nvar methods = {                                                                     // 12\n  addIndex: function(indexName, indexDefinition) {                                  // 13\n    if (!Meteor.isServer) {                                                         // 14\n      return;                                                                       // 15\n    }                                                                               // 16\n                                                                                    // 17\n    // Check if the index name is a string.                                         // 18\n    checks.indexName.call(this, indexName);                                         // 19\n                                                                                    // 20\n    var Collection = this.getCollection();                                          // 21\n                                                                                    // 22\n    // Add index definition to the schema.                                          // 23\n    this.schema.indexes[indexName] = indexDefinition;                               // 24\n                                                                                    // 25\n    // Set the index name.                                                          // 26\n    var options = _.extend({}, indexDefinition.options);                            // 27\n    options.name = indexName;                                                       // 28\n                                                                                    // 29\n    Collection._ensureIndex(indexDefinition.fields, options);                       // 30\n  },                                                                                // 31\n                                                                                    // 32\n  addIndexes: function(indexesDefinition) {                                         // 33\n    if (!Meteor.isServer) {                                                         // 34\n      return;                                                                       // 35\n    }                                                                               // 36\n                                                                                    // 37\n    _.each(                                                                         // 38\n      indexesDefinition,                                                            // 39\n      function(indexDefinition, indexName) {                                        // 40\n        this.addIndex(                                                              // 41\n          indexName,                                                                // 42\n          indexDefinition                                                           // 43\n        );                                                                          // 44\n      },                                                                            // 45\n      this                                                                          // 46\n    );                                                                              // 47\n  },                                                                                // 48\n                                                                                    // 49\n  removeIndex: function(indexName) {                                                // 50\n    if (!Meteor.isServer) {                                                         // 51\n      return;                                                                       // 52\n    }                                                                               // 53\n                                                                                    // 54\n    // Check if the index name is a string.                                         // 55\n    checks.indexName.call(this, indexName);                                         // 56\n                                                                                    // 57\n    var Collection = this.getCollection();                                          // 58\n                                                                                    // 59\n    // Remove an index definition from the schema.                                  // 60\n    delete this.schema.indexes[indexName];                                          // 61\n                                                                                    // 62\n    Collection._dropIndex(indexName);                                               // 63\n  }                                                                                 // 64\n};                                                                                  // 65\n                                                                                    // 66\nindexesOnInitClass = function(schemaDefinition) {                                   // 67\n  // checks.schemaDefinition.call(this, schemaDefinition);                          // 68\n                                                                                    // 69\n  var Class = this;                                                                 // 70\n                                                                                    // 71\n  // Add index methods to the class.                                                // 72\n  _.extend(Class, methods);                                                         // 73\n                                                                                    // 74\n  // Add the \"indexes\" attribute to the schema.                                     // 75\n  Class.schema.indexes = {};                                                        // 76\n                                                                                    // 77\n  // Add indexes from the schema definition.                                        // 78\n  if (_.has(schemaDefinition, 'indexes') && Meteor.isServer) {                      // 79\n    Class.addIndexes(schemaDefinition.indexes);                                     // 80\n  }                                                                                 // 81\n                                                                                    // 82\n  // Add indexes that are defined next to the field definition.                     // 83\n  _.each(                                                                           // 84\n    schemaDefinition.fields,                                                        // 85\n    function(fieldDefinition, patternOrFieldName) {                                 // 86\n      if (_.has(fieldDefinition, 'index')) {                                        // 87\n        var indexDefinition = {                                                     // 88\n          fields: {}                                                                // 89\n        };                                                                          // 90\n        indexDefinition.fields[patternOrFieldName] = fieldDefinition.index;         // 91\n        Class.addIndex(patternOrFieldName, indexDefinition);                        // 92\n      }                                                                             // 93\n    }                                                                               // 94\n  );                                                                                // 95\n};                                                                                  // 96\n                                                                                    // 97\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/indexes/module.js                            //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.createModule({                                                                // 1\n  name: 'indexes',                                                                  // 2\n  events: {                                                                         // 3\n    initclass: indexesOnInitClass                                                   // 4\n  }                                                                                 // 5\n});                                                                                 // 6\n                                                                                    // 7\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/fields/utils.js                              //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.utils.fields = {                                                              // 1\n  isPattern: function(name) {                                                       // 2\n    return name.indexOf('.') !== -1;                                                // 3\n  },                                                                                // 4\n                                                                                    // 5\n  getDefinition: function(Class, fieldNameOrPattern) {                              // 6\n    // If there is no parent class, then we look for a definition in this class     // 7\n    // only.                                                                        // 8\n    if (!Class.getParent()) {                                                       // 9\n      return Class.schema.fields[fieldNameOrPattern];                               // 10\n    }                                                                               // 11\n                                                                                    // 12\n    // Find field definition for the \"fieldNameOrPattern\" in this and parent        // 13\n    // classes.                                                                     // 14\n    return Astro.utils.class.findInClass(Class, function(Class) {                   // 15\n      return Class.schema.fields[fieldNameOrPattern];                               // 16\n    });                                                                             // 17\n  },                                                                                // 18\n                                                                                    // 19\n  getDefaultValue: function(Class, fieldNameOrPattern) {                            // 20\n    var self = this;                                                                // 21\n                                                                                    // 22\n    // Prepare variable for storing a default value.                                // 23\n    var value;                                                                      // 24\n                                                                                    // 25\n    // Look for a field's definition.                                               // 26\n    var fieldDefinition = self.getDefinition(Class, fieldNameOrPattern);            // 27\n                                                                                    // 28\n    // We look for the default value only if there is a field definition.           // 29\n    if (fieldDefinition) {                                                          // 30\n      value = EJSON.clone(fieldDefinition.default);                                 // 31\n    } else if (self.isPattern(fieldNameOrPattern)) {                                // 32\n      var segments = fieldNameOrPattern.split('.');                                 // 33\n      var replaced = false;                                                         // 34\n      _.each(segments, function(segment, index) {                                   // 35\n        if (/^\\d+$/.test(segment)) {                                                // 36\n          segments[index] = '$';                                                    // 37\n          replaced = true;                                                          // 38\n        }                                                                           // 39\n      });                                                                           // 40\n      if (replaced) {                                                               // 41\n        fieldDefinition = self.getDefinition(Class, segments.join('.'));            // 42\n        if (fieldDefinition) {                                                      // 43\n          value = EJSON.clone(fieldDefinition.default);                             // 44\n        }                                                                           // 45\n      }                                                                             // 46\n    }                                                                               // 47\n                                                                                    // 48\n    return value;                                                                   // 49\n  },                                                                                // 50\n                                                                                    // 51\n  castValue: function(Class, fieldNameOrPattern, value) {                           // 52\n    var self = this;                                                                // 53\n                                                                                    // 54\n    var fieldDefinition = self.getDefinition(Class, fieldNameOrPattern);            // 55\n                                                                                    // 56\n    if (fieldDefinition) {                                                          // 57\n      value = Astro.utils.types.castValue(fieldDefinition.type, value);             // 58\n    } else if (self.isPattern(fieldNameOrPattern)) {                                // 59\n      var segments = fieldNameOrPattern.split('.');                                 // 60\n      var replaced = false;                                                         // 61\n      _.each(segments, function(segment, index) {                                   // 62\n        if (/^\\d+$/.test(segment)) {                                                // 63\n          segments[index] = '$';                                                    // 64\n          replaced = true;                                                          // 65\n        }                                                                           // 66\n      });                                                                           // 67\n      if (replaced) {                                                               // 68\n        fieldDefinition = self.getDefinition(Class, segments.join('.'));            // 69\n        if (fieldDefinition) {                                                      // 70\n          value = Astro.utils.types.castValue(fieldDefinition.type, value);         // 71\n        }                                                                           // 72\n      }                                                                             // 73\n    }                                                                               // 74\n                                                                                    // 75\n    return value;                                                                   // 76\n  },                                                                                // 77\n                                                                                    // 78\n  getAllFieldsNames: function(Class) {                                              // 79\n    // If there is no parent class, then we only look for a fields names in this    // 80\n    // class only.                                                                  // 81\n    if (!Class.getParent()) {                                                       // 82\n      return Class.schema.fieldsNames;                                              // 83\n    }                                                                               // 84\n                                                                                    // 85\n    // Get list of all fields defined in this and parent classes.                   // 86\n    var fieldsNames = [];                                                           // 87\n    Astro.utils.class.eachClass(Class, function(Class) {                            // 88\n      fieldsNames = fieldsNames.concat(Class.schema.fieldsNames);                   // 89\n    });                                                                             // 90\n    return _.uniq(fieldsNames);                                                     // 91\n  },                                                                                // 92\n                                                                                    // 93\n  getFieldsNamesFromPattern: function(doc, pattern) {                               // 94\n    var values = Astro.config.supportLegacyBrowsers ? doc : doc._values;            // 95\n                                                                                    // 96\n    // If it isn't nested pattern so it has to be regular field name. In that       // 97\n    // case we just return this field name as an array with a single element.       // 98\n    if (!this.isPattern(pattern)) {                                                 // 99\n      return [pattern];                                                             // 100\n    }                                                                               // 101\n                                                                                    // 102\n    // Variable for storing fields' names that match the pattern.                   // 103\n    var fieldsNames = [];                                                           // 104\n                                                                                    // 105\n    // First split pattern by the \".\" sign.                                         // 106\n    var segments = pattern.split('.');                                              // 107\n                                                                                    // 108\n    // Recursive function for finding fields names.                                 // 109\n    var find = function(value, segmentIndex, fieldName) {                           // 110\n      // If we reached the end of a nested data, then we don't try to find the      // 111\n      // field name.                                                                // 112\n      if (_.isUndefined(value)) {                                                   // 113\n        return;                                                                     // 114\n      }                                                                             // 115\n                                                                                    // 116\n      // Check if we haven't reached the last segment.                              // 117\n      if (segmentIndex < segments.length) {                                         // 118\n        var segment = segments[segmentIndex];                                       // 119\n                                                                                    // 120\n        // We reached a segment indicating that we are dealing with array.          // 121\n        if (segment === '$') {                                                      // 122\n          // We have to make sure that value is an array, if it's not then we       // 123\n          // stop looking for this field name.                                      // 124\n          if (!_.isArray(value)) {                                                  // 125\n            return;                                                                 // 126\n          }                                                                         // 127\n                                                                                    // 128\n          // Recursively look for fields names in the array.                        // 129\n          _.each(value, function(arrayElement, arrayIndex) {                        // 130\n            find(arrayElement, segmentIndex + 1, fieldName + '.' +                  // 131\n              arrayIndex);                                                          // 132\n          });                                                                       // 133\n        } else {                                                                    // 134\n          // Concatenate segment to compose field name.                             // 135\n          fieldName = fieldName + '.' + segment;                                    // 136\n          // Recursively try to compose field name with the next segment.           // 137\n          find(value[segment], segmentIndex + 1, fieldName);                        // 138\n        }                                                                           // 139\n      } else {                                                                      // 140\n        // If we reached the last segment then we can add composed field name.      // 141\n        fieldsNames.push(fieldName.slice(1));                                       // 142\n      }                                                                             // 143\n    };                                                                              // 144\n                                                                                    // 145\n    find(values, 0, '');                                                            // 146\n                                                                                    // 147\n    return fieldsNames;                                                             // 148\n  },                                                                                // 149\n                                                                                    // 150\n  resolvePattern: function(doc, pattern, callback) {                                // 151\n    var self = this;                                                                // 152\n    var Class = doc.constructor;                                                    // 153\n    var values = Astro.config.supportLegacyBrowsers ? doc : doc._values;            // 154\n                                                                                    // 155\n    // First split the pattern by the \".\" sign.                                     // 156\n    var segments = pattern.split('.');                                              // 157\n    var lastIndex = segments.length - 1;                                            // 158\n                                                                                    // 159\n    // Recursive function for setting value of the nested field.                    // 160\n    var next = function(object, segmentIndex) {                                     // 161\n      // Get a segment under the given index.                                       // 162\n      var segment = segments[segmentIndex];                                         // 163\n                                                                                    // 164\n      // We don't support the \"$\" segment here. If you want to set or get           // 165\n      // multiple fields in (from) the array, you have to use the                   // 166\n      // \"getFieldsNamesFromPattern\" function and then call the \"resolvePattern\"    // 167\n      // function on each field.                                                    // 168\n      if (segment === '$') {                                                        // 169\n        return;                                                                     // 170\n      }                                                                             // 171\n                                                                                    // 172\n      // Compose pattern from the segments up to the current one.                   // 173\n      var nextPattern = segments.slice(0, segmentIndex + 1).join('.');              // 174\n                                                                                    // 175\n      // Check if there is a field definition for the given segment. We do this     // 176\n      // check only for the first segments. Any subobject can have structure,       // 177\n      // types that don't have to be defined.                                       // 178\n      if (segmentIndex === 0) {                                                     // 179\n        var fieldDefinition = self.getDefinition(Class, segment);                   // 180\n        // If there is no field definition for the first segment, then we stop      // 181\n        // execution.                                                               // 182\n        if (!fieldDefinition) {                                                     // 183\n          return;                                                                   // 184\n        }                                                                           // 185\n      }                                                                             // 186\n                                                                                    // 187\n      // Set the value, if we reached a one before the last segment.                // 188\n      if (segmentIndex === lastIndex) {                                             // 189\n        callback(object, segment, nextPattern);                                     // 190\n      } else {                                                                      // 191\n        // Check one more time if a value of the current segment is object, so      // 192\n        // we can get deeper.                                                       // 193\n        if (_.isObject(object[segment])) {                                          // 194\n          next(object[segment], segmentIndex + 1);                                  // 195\n        } else {                                                                    // 196\n          return;                                                                   // 197\n        }                                                                           // 198\n      }                                                                             // 199\n    };                                                                              // 200\n                                                                                    // 201\n    // Set the value on the field(s) using recursion.                               // 202\n    next(values, 0);                                                                // 203\n  },                                                                                // 204\n                                                                                    // 205\n  getAllValues: function(doc, options) {                                            // 206\n    var self = this;                                                                // 207\n    var Class = doc.constructor;                                                    // 208\n                                                                                    // 209\n    return self.getValues(                                                          // 210\n      doc,                                                                          // 211\n      self.getAllFieldsNames(Class),                                                // 212\n      options                                                                       // 213\n    );                                                                              // 214\n  },                                                                                // 215\n                                                                                    // 216\n  getValues: function(doc, fieldsNamesOrPatterns, options) {                        // 217\n    var self = this;                                                                // 218\n    var values = {};                                                                // 219\n                                                                                    // 220\n    _.each(fieldsNamesOrPatterns, function(fieldNameOrPattern) {                    // 221\n      values[fieldNameOrPattern] = self.getValue(                                   // 222\n        doc,                                                                        // 223\n        fieldNameOrPattern,                                                         // 224\n        options                                                                     // 225\n      );                                                                            // 226\n    });                                                                             // 227\n                                                                                    // 228\n    return values;                                                                  // 229\n  },                                                                                // 230\n                                                                                    // 231\n  getValue: function(doc, fieldNameOrPattern, options) {                            // 232\n    var self = this;                                                                // 233\n    var Class = doc.constructor;                                                    // 234\n                                                                                    // 235\n    // Set default options of the function. By default, we cast value being get     // 236\n    // and get default value is none had been provided.                             // 237\n    options = _.extend({                                                            // 238\n      cast: true,                                                                   // 239\n      default: true                                                                 // 240\n    }, options);                                                                    // 241\n                                                                                    // 242\n    var value;                                                                      // 243\n                                                                                    // 244\n    self.resolvePattern(                                                            // 245\n      doc,                                                                          // 246\n      fieldNameOrPattern,                                                           // 247\n      function(object, segment) {                                                   // 248\n        // Get value.                                                               // 249\n        value = object[segment];                                                    // 250\n                                                                                    // 251\n        if (_.isUndefined(value) && options.default) {                              // 252\n          // If the value is undefined, then try getting a default value.           // 253\n          value = self.getDefaultValue(Class, fieldNameOrPattern);                  // 254\n          // Assign default value.                                                  // 255\n          if (!_.isUndefined(value)) {                                              // 256\n            object[segment] = value;                                                // 257\n          }                                                                         // 258\n        } else if (options.cast) {                                                  // 259\n          // Try casting the value to the proper type.                              // 260\n          value = self.castValue(Class, fieldNameOrPattern, value);                 // 261\n        }                                                                           // 262\n      }                                                                             // 263\n    );                                                                              // 264\n                                                                                    // 265\n    return value;                                                                   // 266\n  },                                                                                // 267\n                                                                                    // 268\n  setAllValues: function(doc, values, options) {                                    // 269\n    var self = this;                                                                // 270\n    var Class = doc.constructor;                                                    // 271\n                                                                                    // 272\n    var names = self.getAllFieldsNames(Class);                                      // 273\n    _.each(names, function(name) {                                                  // 274\n      if (!_.has(values, name)) {                                                   // 275\n        values[name] = self.getDefaultValue(Class, name);                           // 276\n      }                                                                             // 277\n    });                                                                             // 278\n                                                                                    // 279\n    self.setValues(doc, values, options);                                           // 280\n  },                                                                                // 281\n                                                                                    // 282\n  setValues: function(doc, values, options) {                                       // 283\n    var self = this;                                                                // 284\n                                                                                    // 285\n    _.each(values, function(value, name) {                                          // 286\n      self.setValue(doc, name, value, options);                                     // 287\n    });                                                                             // 288\n  },                                                                                // 289\n                                                                                    // 290\n  setValue: function(doc, fieldNameOrPattern, value, options) {                     // 291\n    var self = this;                                                                // 292\n    var Class = doc.constructor;                                                    // 293\n                                                                                    // 294\n    // Set default options of the function. By default, we cast value being set     // 295\n    // and set default value is none had been provided.                             // 296\n    options = _.extend({                                                            // 297\n      cast: true,                                                                   // 298\n      default: true                                                                 // 299\n    }, options);                                                                    // 300\n                                                                                    // 301\n    self.resolvePattern(                                                            // 302\n      doc,                                                                          // 303\n      fieldNameOrPattern,                                                           // 304\n      function(object, segment) {                                                   // 305\n        if (_.isUndefined(value) && options.default) {                              // 306\n          // If the value is undefined, then try getting a default value.           // 307\n          value = self.getDefaultValue(Class, fieldNameOrPattern);                  // 308\n        } else if (options.cast) {                                                  // 309\n          // Try casting the value to the proper type.                              // 310\n          value = self.castValue(Class, fieldNameOrPattern, value);                 // 311\n        }                                                                           // 312\n                                                                                    // 313\n        // Assign value.                                                            // 314\n        if (!_.isUndefined(value)) {                                                // 315\n          object[segment] = value;                                                  // 316\n        }                                                                           // 317\n      }                                                                             // 318\n    );                                                                              // 319\n  }                                                                                 // 320\n};                                                                                  // 321\n                                                                                    // 322\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/fields/init_module.js                        //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nvar setOne = function(name, value) {                                                // 1\n  var doc = this;                                                                   // 2\n  var Class = doc.constructor;                                                      // 3\n                                                                                    // 4\n  // Deny changing the \"_id\" property.                                              // 5\n  if (name === '_id' && Astro.utils.fields.getValue(doc, '_id')) {                  // 6\n    return;                                                                         // 7\n  }                                                                                 // 8\n                                                                                    // 9\n  // Trigger the \"beforeset\" event handlers for every schema.                       // 10\n  var event = new Astro.Event('beforeset', {                                        // 11\n    field: name,                                                                    // 12\n    value: value                                                                    // 13\n  });                                                                               // 14\n  event.target = doc;                                                               // 15\n  doc.constructor.emitEvent(event);                                                 // 16\n                                                                                    // 17\n  // Cast the value to the proper type and set it on the document.                  // 18\n  Astro.utils.fields.setValue(doc, name, value);                                    // 19\n                                                                                    // 20\n  // Trigger the \"afterset\" event handlers for every schema.                        // 21\n  var event = new Astro.Event('afterset', {                                         // 22\n    field: name,                                                                    // 23\n    value: value                                                                    // 24\n  });                                                                               // 25\n  event.target = doc;                                                               // 26\n  doc.constructor.emitEvent(event);                                                 // 27\n};                                                                                  // 28\n                                                                                    // 29\nvar setMany = function(values) {                                                    // 30\n  var doc = this;                                                                   // 31\n                                                                                    // 32\n  // Set multiple fields.                                                           // 33\n  _.each(values, function(value, name) {                                            // 34\n    setOne.call(doc, name, value);                                                  // 35\n  });                                                                               // 36\n};                                                                                  // 37\n                                                                                    // 38\nvar getOne = function(name) {                                                       // 39\n  var doc = this;                                                                   // 40\n  var Class = doc.constructor;                                                      // 41\n                                                                                    // 42\n  // Trigger the \"beforeget\" event handlers for every schema.                       // 43\n  var event = new Astro.Event('beforeget', {                                        // 44\n    field: name                                                                     // 45\n  });                                                                               // 46\n  event.target = doc;                                                               // 47\n  Class.emitEvent(event);                                                           // 48\n                                                                                    // 49\n  // Get current or default field's value.                                          // 50\n  var value = Astro.utils.fields.getValue(doc, name);                               // 51\n                                                                                    // 52\n  // Trigger the \"afterget\" event handlers for every schema.                        // 53\n  var event = new Astro.Event('afterget', {                                         // 54\n    field: name                                                                     // 55\n  });                                                                               // 56\n  event.target = doc;                                                               // 57\n  Class.emitEvent(event);                                                           // 58\n                                                                                    // 59\n  return value;                                                                     // 60\n};                                                                                  // 61\n                                                                                    // 62\nvar getMany = function(names) {                                                     // 63\n  var doc = this;                                                                   // 64\n  var values = {};                                                                  // 65\n                                                                                    // 66\n  _.each(names, function(name) {                                                    // 67\n    var value = doc.get(name);                                                      // 68\n    values[name] = value;                                                           // 69\n  });                                                                               // 70\n                                                                                    // 71\n  return values;                                                                    // 72\n};                                                                                  // 73\n                                                                                    // 74\nvar getAll = function() {                                                           // 75\n  var doc = this;                                                                   // 76\n  var Class = doc.constructor;                                                      // 77\n                                                                                    // 78\n  // Get list of fields and their values.                                           // 79\n  return doc.get(Astro.utils.fields.getAllFieldsNames(Class));                      // 80\n};                                                                                  // 81\n                                                                                    // 82\nvar methods = {                                                                     // 83\n  set: function(fieldNameOrPattern, fieldValue) {                                   // 84\n    var doc = this;                                                                 // 85\n                                                                                    // 86\n    if (arguments.length === 1 && _.isObject(fieldNameOrPattern)) {                 // 87\n                                                                                    // 88\n      setMany.call(doc, fieldNameOrPattern);                                        // 89\n                                                                                    // 90\n    } else if (arguments.length === 2 && _.isString(fieldNameOrPattern)) {          // 91\n                                                                                    // 92\n      if (fieldNameOrPattern.indexOf('$') === -1) {                                 // 93\n                                                                                    // 94\n        setOne.call(doc, fieldNameOrPattern, fieldValue);                           // 95\n                                                                                    // 96\n      } else {                                                                      // 97\n                                                                                    // 98\n        var fieldsNames = Astro.utils.fields.getFieldsNamesFromPattern(             // 99\n          doc,                                                                      // 100\n          fieldNameOrPattern                                                        // 101\n        );                                                                          // 102\n        var fieldsValues = {};                                                      // 103\n        _.each(fieldsNames, function(fieldNameOrPattern) {                          // 104\n          fieldsValues[fieldNameOrPattern] = fieldValue;                            // 105\n        });                                                                         // 106\n        return setMany.call(doc, fieldsValues);                                     // 107\n                                                                                    // 108\n      }                                                                             // 109\n                                                                                    // 110\n    }                                                                               // 111\n  },                                                                                // 112\n                                                                                    // 113\n  get: function(fieldNameOrPattern) {                                               // 114\n    var doc = this;                                                                 // 115\n                                                                                    // 116\n    if (arguments.length === 0) {                                                   // 117\n                                                                                    // 118\n      return getAll.call(doc);                                                      // 119\n                                                                                    // 120\n    } else if (arguments.length === 1) {                                            // 121\n                                                                                    // 122\n      if (_.isArray(fieldNameOrPattern)) {                                          // 123\n                                                                                    // 124\n        return getMany.call(doc, fieldNameOrPattern);                               // 125\n                                                                                    // 126\n      } else if (_.isString(fieldNameOrPattern)) {                                  // 127\n                                                                                    // 128\n        if (fieldNameOrPattern.indexOf('$') === -1) {                               // 129\n          return getOne.call(doc, fieldNameOrPattern);                              // 130\n        } else {                                                                    // 131\n          var fieldsNames = Astro.utils.fields.getFieldsNamesFromPattern(           // 132\n            doc,                                                                    // 133\n            fieldNameOrPattern                                                      // 134\n          );                                                                        // 135\n          return getMany.call(doc, fieldsNames);                                    // 136\n        }                                                                           // 137\n                                                                                    // 138\n      }                                                                             // 139\n                                                                                    // 140\n    }                                                                               // 141\n  },                                                                                // 142\n                                                                                    // 143\n  getModified: function(old) {                                                      // 144\n    old = old || false;                                                             // 145\n    var doc = this;                                                                 // 146\n    var Class = doc.constructor;                                                    // 147\n                                                                                    // 148\n    var modified = {};                                                              // 149\n                                                                                    // 150\n    // Get the current values of all fields but \"_id\" (we can't change id).         // 151\n    var fieldsValues = _.omit(Astro.utils.fields.getAllValues(doc), '_id');         // 152\n                                                                                    // 153\n    _.each(fieldsValues, function(fieldValue, fieldName) {                          // 154\n      // If a value differs from the value in the \"_original\" object then it means  // 155\n      // that fields was modified from the last save.                               // 156\n      if (!EJSON.equals(doc._original[fieldName], fieldValue)) {                    // 157\n        // Decide if we want to take new or old value.                              // 158\n        if (old) {                                                                  // 159\n          modified[fieldName] = doc._original[fieldName];                           // 160\n        } else {                                                                    // 161\n          modified[fieldName] = fieldValue;                                         // 162\n        }                                                                           // 163\n      }                                                                             // 164\n    });                                                                             // 165\n                                                                                    // 166\n    return modified;                                                                // 167\n  },                                                                                // 168\n                                                                                    // 169\n  save: function(callback) {                                                        // 170\n    var doc = this;                                                                 // 171\n    // Get collection for given class or parent class.                              // 172\n    var Collection = doc.constructor.getCollection();                               // 173\n    if (!Collection) {                                                              // 174\n      throw new Error('There is no collection to save to');                         // 175\n    }                                                                               // 176\n                                                                                    // 177\n    // Trigger \"beforesave\" event handlers on the current and parent classes.       // 178\n    var event = new Astro.Event('beforesave');                                      // 179\n    event.target = doc;                                                             // 180\n    doc.constructor.emitEvent(event);                                               // 181\n    // If user prevented default operation, then we have to stop here.              // 182\n    if (event.defaultPrevented) {                                                   // 183\n      return;                                                                       // 184\n    }                                                                               // 185\n                                                                                    // 186\n    // Trigger \"beforeinsert\" or \"beforeupdate\" event handlers on the current       // 187\n    // and parent classes.                                                          // 188\n    event = new Astro.Event(doc._isNew ? 'beforeinsert' : 'beforeupdate');          // 189\n    event.target = doc;                                                             // 190\n    doc.constructor.emitEvent(event);                                               // 191\n    // If user prevented default operation, then we have to stop here.              // 192\n    if (event.defaultPrevented) {                                                   // 193\n      return;                                                                       // 194\n    }                                                                               // 195\n                                                                                    // 196\n    // Get values to update or insert.                                              // 197\n    var values;                                                                     // 198\n    if (doc._isNew) {                                                               // 199\n      values = Astro.utils.fields.getAllValues(doc);                                // 200\n    } else {                                                                        // 201\n      values = doc.getModified();                                                   // 202\n    }                                                                               // 203\n                                                                                    // 204\n    // Get the \"_id\" field's value.                                                 // 205\n    var id = Astro.utils.fields.getValue(doc, '_id');                               // 206\n    // Remove the \"_id\" field, if its value is empty (null) or a document is        // 207\n    // already stored in the collection (we can't change id).                       // 208\n    if (!values._id || !doc._isNew) {                                               // 209\n      values = _.omit(values, '_id');                                               // 210\n    }                                                                               // 211\n                                                                                    // 212\n    // Check if there are any values to update or insert. If there are no modified  // 213\n    // fields, we shouldn't do anything.                                            // 214\n    if (_.size(values) === 0) {                                                     // 215\n      return;                                                                       // 216\n    }                                                                               // 217\n                                                                                    // 218\n    // Add callback to arguments list if provided.                                  // 219\n    var args = [];                                                                  // 220\n    if (callback) {                                                                 // 221\n      args.push(callback);                                                          // 222\n    }                                                                               // 223\n                                                                                    // 224\n    var result;                                                                     // 225\n    if (doc._isNew) {                                                               // 226\n      // Add values to insert into the list of arguments passed to the \"insert\"     // 227\n      // method.                                                                    // 228\n      args.unshift(values);                                                         // 229\n      // Insert document.                                                           // 230\n      result = Collection.insert.apply(Collection, args);                           // 231\n      Astro.utils.fields.setValue(doc, '_id', result);                              // 232\n    } else {                                                                        // 233\n      // Add selector and modifier at the beginning of the arguments list. Right    // 234\n      // now in the array is a callback function (if provided).                     // 235\n      args.unshift({ // Selector.                                                   // 236\n        _id: id                                                                     // 237\n      }, { // Modifier.                                                             // 238\n        $set: values                                                                // 239\n      });                                                                           // 240\n      // Update document.                                                           // 241\n      result = Collection.update.apply(Collection, args);                           // 242\n    }                                                                               // 243\n                                                                                    // 244\n    // Copy all values to the \"_original\" property so that we are starting with     // 245\n    // the clean object without modifications (there is no diff between current     // 246\n    // values and \"_original\").                                                     // 247\n    doc._original = EJSON.clone(Astro.utils.fields.getAllValues(doc));              // 248\n                                                                                    // 249\n    // Trigger \"afterinsert\" or \"afterupdate\" event handlers on the current and     // 250\n    // parent classes.                                                              // 251\n    var event = new Astro.Event(doc._isNew ? 'afterinsert' : 'afterupdate');        // 252\n    event.target = doc;                                                             // 253\n    doc.constructor.emitEvent(event);                                               // 254\n    // Trigger \"aftersave\" event handlers on the current and parent classes.        // 255\n    var event = new Astro.Event('aftersave');                                       // 256\n    event.target = doc;                                                             // 257\n    doc.constructor.emitEvent(event);                                               // 258\n                                                                                    // 259\n    // Change the \"_isNew\" flag to \"false\". Now the document is not new, it has     // 260\n    // just been saved.                                                             // 261\n    doc._isNew = false;                                                             // 262\n                                                                                    // 263\n    // Return result of executing Mongo query.                                      // 264\n    return result;                                                                  // 265\n  },                                                                                // 266\n                                                                                    // 267\n  remove: function(callback) {                                                      // 268\n    var doc = this;                                                                 // 269\n    // Get collection for given class or parent class.                              // 270\n    var Collection = doc.constructor.getCollection();                               // 271\n    if (!Collection) {                                                              // 272\n      throw new Error('There is no collection to remove from');                     // 273\n    }                                                                               // 274\n                                                                                    // 275\n    // Remove only when document has the \"_id\" field (it's persisted).              // 276\n    var id = Astro.utils.fields.getValue(doc, '_id');                               // 277\n    if (!id) {                                                                      // 278\n      return;                                                                       // 279\n    }                                                                               // 280\n                                                                                    // 281\n    // Trigger \"beforeremove\" event handlers on the current and parent classes.     // 282\n    var event = new Astro.Event('beforeremove');                                    // 283\n    event.target = doc;                                                             // 284\n    doc.constructor.emitEvent(event);                                               // 285\n                                                                                    // 286\n    // If user prevented default operation, then we have to stop here.              // 287\n    if (event.defaultPrevented) {                                                   // 288\n      return;                                                                       // 289\n    }                                                                               // 290\n                                                                                    // 291\n    // Add selector to arguments list.                                              // 292\n    var args = [];                                                                  // 293\n    args.push({                                                                     // 294\n      _id: id                                                                       // 295\n    });                                                                             // 296\n    // Add callback to arguments list if provided.                                  // 297\n    if (callback) {                                                                 // 298\n      args.push(callback);                                                          // 299\n    }                                                                               // 300\n                                                                                    // 301\n    // Remove document and save result.                                             // 302\n    var result = Collection.remove.apply(Collection, args);                         // 303\n                                                                                    // 304\n    // Trigger \"afterremove\" event handlers on the current and parent classes.      // 305\n    var event = new Astro.Event('afterremove');                                     // 306\n    event.target = doc;                                                             // 307\n    doc.constructor.emitEvent(event);                                               // 308\n                                                                                    // 309\n    // Clear \"_id\" attribute and \"_original\" object, so that user can save          // 310\n    // document one more time.                                                      // 311\n    Astro.utils.fields.setValue(doc, '_id', null);                                  // 312\n    doc._original = {};                                                             // 313\n                                                                                    // 314\n    // Return result of removing document.                                          // 315\n    return result;                                                                  // 316\n  },                                                                                // 317\n                                                                                    // 318\n  reload: function() {                                                              // 319\n    var doc = this;                                                                 // 320\n    // Get collection for given class or parent class.                              // 321\n    var Collection = doc.constructor.getCollection();                               // 322\n    if (!Collection) {                                                              // 323\n      throw new Error('There is no collection to reload the document from');        // 324\n    }                                                                               // 325\n                                                                                    // 326\n    // The document has to be already saved in the collection.                      // 327\n    var id = Astro.utils.fields.getValue(doc, '_id');                               // 328\n    if (id) {                                                                       // 329\n      // Get new values from collection without the transformation.                 // 330\n      var attrs = Collection.findOne(id, {                                          // 331\n        transform: null                                                             // 332\n      });                                                                           // 333\n                                                                                    // 334\n      // Init instance with the new values from the collection.                     // 335\n      defaultConstructor.call(doc, attrs);                                          // 336\n                                                                                    // 337\n      // Set the \"_isNew\" flag back to false.                                       // 338\n      doc._isNew = false;                                                           // 339\n    }                                                                               // 340\n  },                                                                                // 341\n                                                                                    // 342\n  copy: function(save) {                                                            // 343\n    var doc = this;                                                                 // 344\n    save = save || false;                                                           // 345\n                                                                                    // 346\n    // Use EJSON to clone object.                                                   // 347\n    var copy = EJSON.clone(doc);                                                    // 348\n                                                                                    // 349\n    // Remove the \"_id\" value and set the \"_isNew\" flag to false so that it will    // 350\n    // save the object as a new document instead updating the old one.              // 351\n    Astro.utils.fields.setValue(copy, '_id', null);                                 // 352\n    copy._original._id = null;                                                      // 353\n    copy._isNew = true;                                                             // 354\n                                                                                    // 355\n    if (save) {                                                                     // 356\n      copy.save();                                                                  // 357\n    }                                                                               // 358\n                                                                                    // 359\n    return copy;                                                                    // 360\n  }                                                                                 // 361\n};                                                                                  // 362\n                                                                                    // 363\nfieldsOnInitModule = function() {                                                   // 364\n  _.extend(Astro.BaseClass.prototype, methods);                                     // 365\n};                                                                                  // 366\n                                                                                    // 367\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/fields/init_class.js                         //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nvar checks = {                                                                      // 1\n  schemaDefinition: function(schemaDefinition) {                                    // 2\n    // Check if fields definition is provided.                                      // 3\n    if (!_.has(schemaDefinition, 'fields')) {                                       // 4\n      throw new Error('The fields definition has to be provided');                  // 5\n    }                                                                               // 6\n                                                                                    // 7\n    // Check if the amount of fields is at least 1.                                 // 8\n    if (_.size(schemaDefinition.fields) === 0 && !this.getParent()) {               // 9\n      throw new Error('At least one field has to be defined');                      // 10\n    }                                                                               // 11\n  },                                                                                // 12\n                                                                                    // 13\n  fieldNameOrPattern: function(fieldNameOrPattern) {                                // 14\n    if (!_.isString(fieldNameOrPattern)) {                                          // 15\n      throw new Error(                                                              // 16\n        'The field name or pattern in the \"' + this.getName() +                     // 17\n        '\" class schema has to be a string'                                         // 18\n      );                                                                            // 19\n    }                                                                               // 20\n  },                                                                                // 21\n                                                                                    // 22\n  exists: function(fieldNameOrPattern) {                                            // 23\n    if (_.has(this.schema.fields, fieldNameOrPattern)) {                            // 24\n      throw new Error(                                                              // 25\n        'The \"' + fieldNameOrPattern +                                              // 26\n        '\" field name or pattern had already been defined in the \"' +               // 27\n        this.getName() + '\" class schema'                                           // 28\n      );                                                                            // 29\n    }                                                                               // 30\n  }                                                                                 // 31\n};                                                                                  // 32\n                                                                                    // 33\nvar methods = {                                                                     // 34\n  hasField: function(fieldNameOrPattern) {                                          // 35\n    // Check if the field name had been provided and is a string.                   // 36\n    checks.fieldNameOrPattern.call(this, fieldNameOrPattern);                       // 37\n                                                                                    // 38\n    return _.has(this.schema.fields, fieldNameOrPattern);                           // 39\n  },                                                                                // 40\n                                                                                    // 41\n  getField: function(fieldNameOrPattern) {                                          // 42\n    // Check if the field name had been provided and is a string.                   // 43\n    checks.fieldNameOrPattern.call(this, fieldNameOrPattern);                       // 44\n                                                                                    // 45\n    return this.schema.fields[fieldNameOrPattern];                                  // 46\n  },                                                                                // 47\n                                                                                    // 48\n  getFields: function() {                                                           // 49\n    return this.schema.fields;                                                      // 50\n  },                                                                                // 51\n                                                                                    // 52\n  addField: function(fieldNameOrPattern, fieldDefinition) {                         // 53\n    // Check if the field name had been provided and is a string.                   // 54\n    checks.fieldNameOrPattern.call(this, fieldNameOrPattern);                       // 55\n    // Check if the field with the given name had already been defined.             // 56\n    checks.exists.call(this, fieldNameOrPattern);                                   // 57\n                                                                                    // 58\n    var destFieldDefinition = {                                                     // 59\n      type: null,                                                                   // 60\n      default: null                                                                 // 61\n    };                                                                              // 62\n                                                                                    // 63\n    if (_.isUndefined(fieldDefinition) || _.isNull(fieldDefinition)) {              // 64\n                                                                                    // 65\n      // If \"fieldDefinition\" is an \"undefined\" or \"null\" then take default         // 66\n      // field's definition.                                                        // 67\n                                                                                    // 68\n    } else if (_.isString(fieldDefinition)) {                                       // 69\n                                                                                    // 70\n      // If \"fieldDefinition\" is a \"string\" then set it as a type if given type     // 71\n      // exists.                                                                    // 72\n      destFieldDefinition.type = fieldDefinition;                                   // 73\n                                                                                    // 74\n    } else if (_.isObject(fieldDefinition)) {                                       // 75\n                                                                                    // 76\n      // If \"fieldDefinition\" is an \"object\" then pick the \"type\" and \"default\"     // 77\n      // attributes.                                                                // 78\n      destFieldDefinition.type = fieldDefinition.type || null;                      // 79\n      if (!_.isUndefined(fieldDefinition.default)) {                                // 80\n        destFieldDefinition.default = fieldDefinition.default                       // 81\n      }                                                                             // 82\n                                                                                    // 83\n    } else {                                                                        // 84\n      throw new Error(                                                              // 85\n        'The field definition in the \"' + this.getName() +                          // 86\n        '\" class schema has to be a string, an object or left empty'                // 87\n      );                                                                            // 88\n    }                                                                               // 89\n                                                                                    // 90\n    // Check whether given field type exists.                                       // 91\n    if (                                                                            // 92\n      destFieldDefinition.type !== null &&                                          // 93\n      !_.has(Astro.types, destFieldDefinition.type)                                 // 94\n    ) {                                                                             // 95\n      throw new Error(                                                              // 96\n        'The \"' + destFieldDefinition.type +                                        // 97\n        '\" field type for \"' + fieldNameOrPattern +                                 // 98\n        '\" field in the \"' + this.getName() +                                       // 99\n        '\" class schema does not exist'                                             // 100\n      );                                                                            // 101\n    }                                                                               // 102\n                                                                                    // 103\n    // Add field definition to the schema.                                          // 104\n    this.schema.fields[fieldNameOrPattern] = destFieldDefinition;                   // 105\n                                                                                    // 106\n    // Add name to the appropriate group.                                           // 107\n    if (Astro.utils.fields.isPattern(fieldNameOrPattern)) {                         // 108\n      this.schema.fieldsPatterns.push(fieldNameOrPattern);                          // 109\n    } else {                                                                        // 110\n      this.schema.fieldsNames.push(fieldNameOrPattern);                             // 111\n                                                                                    // 112\n      // If we don't support legacy browsers, then define getter and setter.        // 113\n      if (!Astro.config.supportLegacyBrowsers) {                                    // 114\n        Object.defineProperty(this.prototype, fieldNameOrPattern, {                 // 115\n          get: function() {                                                         // 116\n            return this.get(fieldNameOrPattern);                                    // 117\n          },                                                                        // 118\n          set: function(value) {                                                    // 119\n            this.set(fieldNameOrPattern, value);                                    // 120\n          }                                                                         // 121\n        });                                                                         // 122\n      }                                                                             // 123\n    }                                                                               // 124\n  },                                                                                // 125\n                                                                                    // 126\n  addFields: function(fieldsNamesOrPatterns) {                                      // 127\n    if (_.isArray(fieldsNamesOrPatterns)) {                                         // 128\n                                                                                    // 129\n      _.each(fieldsNamesOrPatterns, function(fieldNameOrPattern) {                  // 130\n        this.addField(fieldNameOrPattern);                                          // 131\n      }, this);                                                                     // 132\n                                                                                    // 133\n    } else if (_.isObject(fieldsNamesOrPatterns)) {                                 // 134\n                                                                                    // 135\n      _.each(                                                                       // 136\n        fieldsNamesOrPatterns,                                                      // 137\n        function(fieldDefinition, fieldNameOrPattern) {                             // 138\n          this.addField(                                                            // 139\n            fieldNameOrPattern,                                                     // 140\n            fieldsNamesOrPatterns[fieldNameOrPattern]                               // 141\n          );                                                                        // 142\n        },                                                                          // 143\n        this                                                                        // 144\n      );                                                                            // 145\n                                                                                    // 146\n    } else {                                                                        // 147\n                                                                                    // 148\n      // Fields definition has to be an object or an array.                         // 149\n      throw new Error(                                                              // 150\n        'The fields definition in the \"' + this.getName() +                         // 151\n        '\" class schema has to be an array or an object'                            // 152\n      );                                                                            // 153\n                                                                                    // 154\n    }                                                                               // 155\n  }                                                                                 // 156\n};                                                                                  // 157\n                                                                                    // 158\nfieldsOnInitClass = function(schemaDefinition) {                                    // 159\n  checks.schemaDefinition.call(this, schemaDefinition);                             // 160\n                                                                                    // 161\n  var Class = this;                                                                 // 162\n                                                                                    // 163\n  // Add fields methods to the class.                                               // 164\n  _.extend(Class, methods);                                                         // 165\n                                                                                    // 166\n  // Add the \"fields\" attribute to the schema.                                      // 167\n  Class.schema.fields = {};                                                         // 168\n  // Add the \"fieldsNames\" attribute to the schema.                                 // 169\n  Class.schema.fieldsNames = [];                                                    // 170\n  // Add the \"fieldsPatterns\" attribute to the schema.                              // 171\n  Class.schema.fieldsPatterns = [];                                                 // 172\n                                                                                    // 173\n  // Add mandatory \"_id\" field.                                                     // 174\n  Class.addField('_id', {                                                           // 175\n    type: 'string',                                                                 // 176\n    default: undefined                                                              // 177\n  });                                                                               // 178\n                                                                                    // 179\n  // Add field for storing child class name.                                        // 180\n  if (Class.getParent()) {                                                          // 181\n    Class.addField('_type', {                                                       // 182\n      type: 'string',                                                               // 183\n      default: Class.getName()                                                      // 184\n    });                                                                             // 185\n  }                                                                                 // 186\n                                                                                    // 187\n  // Add fields from the schema definition.                                         // 188\n  Class.addFields(schemaDefinition.fields);                                         // 189\n};                                                                                  // 190\n                                                                                    // 191\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/fields/module.js                             //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.createModule({                                                                // 1\n  name: 'fields',                                                                   // 2\n  init: fieldsOnInitModule,                                                         // 3\n  events: {                                                                         // 4\n    initclass: fieldsOnInitClass                                                    // 5\n  }                                                                                 // 6\n});                                                                                 // 7\n                                                                                    // 8\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/methods/init_class.js                        //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nvar checks = {};                                                                    // 1\n                                                                                    // 2\nchecks.methodName = function(methodName) {                                          // 3\n  if (!_.isString(methodName)) {                                                    // 4\n    throw new Error(                                                                // 5\n      'The method name in the \"' + this.getName() +                                 // 6\n      '\" class schema has to be a string'                                           // 7\n    );                                                                              // 8\n  }                                                                                 // 9\n};                                                                                  // 10\n                                                                                    // 11\nchecks.method = function(methodName, method) {                                      // 12\n  if (!_.isFunction(method)) {                                                      // 13\n    throw new Error(                                                                // 14\n      'The \"' + methodName + '\" method in the \"' + this.getName() +                 // 15\n      '\" class schema has to be a function'                                         // 16\n    );                                                                              // 17\n  }                                                                                 // 18\n};                                                                                  // 19\n                                                                                    // 20\nchecks.methods = function(methods) {                                                // 21\n  if (!_.isObject(methods)) {                                                       // 22\n    throw new Error(                                                                // 23\n      'The methods definition in the \"' + this.getName() +                          // 24\n      '\" class schema has to be an object'                                          // 25\n    );                                                                              // 26\n  }                                                                                 // 27\n};                                                                                  // 28\n                                                                                    // 29\nvar methods = {};                                                                   // 30\n                                                                                    // 31\nmethods.hasMethod = function(methodName) {                                          // 32\n  // Check if the method name is a string.                                          // 33\n  checks.methodName.call(this, methodName);                                         // 34\n                                                                                    // 35\n  return _.has(this.schema.methods, methodName);                                    // 36\n};                                                                                  // 37\n                                                                                    // 38\nmethods.getMethod = function(methodName) {                                          // 39\n  // Check if the method name is a string.                                          // 40\n  checks.methodName.call(this, methodName);                                         // 41\n                                                                                    // 42\n  return this.schema.methods[methodName];                                           // 43\n};                                                                                  // 44\n                                                                                    // 45\nmethods.getMethods = function() {                                                   // 46\n  return this.schema.methods;                                                       // 47\n};                                                                                  // 48\n                                                                                    // 49\nmethods.addMethod = function(methodName, method) {                                  // 50\n  // Check if the method name is a string.                                          // 51\n  checks.methodName.call(this, methodName);                                         // 52\n  // Check if method is a function.                                                 // 53\n  checks.method.call(this, methodName, method);                                     // 54\n                                                                                    // 55\n  this.schema.methods[methodName] = method;                                         // 56\n  this.prototype[methodName] = method;                                              // 57\n};                                                                                  // 58\n                                                                                    // 59\nmethods.addMethods = function(methods) {                                            // 60\n  checks.methods.call(this, methods);                                               // 61\n                                                                                    // 62\n  _.each(methods, function(method, methodName) {                                    // 63\n    this.addMethod(methodName, method);                                             // 64\n  }, this);                                                                         // 65\n};                                                                                  // 66\n                                                                                    // 67\nmethodsOnInitClass = function(schemaDefinition) {                                   // 68\n  var Class = this;                                                                 // 69\n                                                                                    // 70\n  _.extend(Class, methods);                                                         // 71\n                                                                                    // 72\n  // Add the \"methods\" attribute to the schema.                                     // 73\n  Class.schema.methods = {};                                                        // 74\n                                                                                    // 75\n  if (_.has(schemaDefinition, 'methods')) {                                         // 76\n    Class.addMethods(schemaDefinition.methods);                                     // 77\n  }                                                                                 // 78\n};                                                                                  // 79\n                                                                                    // 80\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/methods/module.js                            //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.createModule({                                                                // 1\n  name: 'methods',                                                                  // 2\n  events: {                                                                         // 3\n    initclass: methodsOnInitClass                                                   // 4\n  }                                                                                 // 5\n});                                                                                 // 6\n                                                                                    // 7\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/ejson/init_module.js                         //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nvar methods = {                                                                     // 1\n  typeName: function() {                                                            // 2\n    return 'Astronomy';                                                             // 3\n  },                                                                                // 4\n                                                                                    // 5\n  toJSONValue: function(args) {                                                     // 6\n    var doc = this;                                                                 // 7\n    var Class = doc.constructor;                                                    // 8\n                                                                                    // 9\n    var json = {                                                                    // 10\n      class: Class.getName(),                                                       // 11\n      original: EJSON.stringify(doc._original),                                     // 12\n      values: EJSON.stringify(                                                      // 13\n        Astro.utils.fields.getAllValues(doc, {                                      // 14\n          cast: false,                                                              // 15\n          default: false                                                            // 16\n        })                                                                          // 17\n      ),                                                                            // 18\n      isNew: doc._isNew                                                             // 19\n    };                                                                              // 20\n                                                                                    // 21\n    var event = new Astro.Event('tojsonvalue', json);                               // 22\n    event.target = doc;                                                             // 23\n    Astro.eventManager.emit(event);                                                 // 24\n                                                                                    // 25\n    return json;                                                                    // 26\n  }                                                                                 // 27\n};                                                                                  // 28\n                                                                                    // 29\nejsonOnInitModule = function() {                                                    // 30\n  EJSON.addType('Astronomy', function(json) {                                       // 31\n    var Class = Astro.classes[json.class];                                          // 32\n    var doc = new Class();                                                          // 33\n    doc._original = EJSON.parse(json.original);                                     // 34\n    _.extend(doc, EJSON.parse(json.values));                                        // 35\n    doc._isNew = json.isNew;                                                        // 36\n                                                                                    // 37\n    var event = new Astro.Event('fromjsonvalue', json);                             // 38\n    event.target = doc;                                                             // 39\n    Astro.eventManager.emit(event);                                                 // 40\n                                                                                    // 41\n    return doc;                                                                     // 42\n  });                                                                               // 43\n                                                                                    // 44\n  _.extend(Astro.BaseClass.prototype, methods);                                     // 45\n};                                                                                  // 46\n                                                                                    // 47\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/jagi:astronomy/lib/modules/ejson/module.js                              //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nAstro.createModule({                                                                // 1\n  name: 'ejson',                                                                    // 2\n  init: ejsonOnInitModule                                                           // 3\n});                                                                                 // 4\n                                                                                    // 5\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
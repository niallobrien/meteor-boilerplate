{"version":3,"sources":["meteor://ðŸ’»app/packages/meteorhacks_subs-manager/packages/meteorhacks_subs-manager.js"],"names":[],"mappingsyG","file":"/packages/meteorhacks_subs-manager.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/meteorhacks:subs-manager/lib/sub_manager.js                                     //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nvar FastRender = null;                                                                      // 1\nif(Package['meteorhacks:fast-render']) {                                                    // 2\n  FastRender = Package['meteorhacks:fast-render'].FastRender;                               // 3\n}                                                                                           // 4\n                                                                                            // 5\nSubsManager = function (options) {                                                          // 6\n  var self = this;                                                                          // 7\n  self.options = options || {};                                                             // 8\n  // maxiumum number of subscriptions are cached                                            // 9\n  self.options.cacheLimit = self.options.cacheLimit || 10;                                  // 10\n  // maximum time, subscription stay in the cache                                           // 11\n  self.options.expireIn = self.options.expireIn || 5;                                       // 12\n                                                                                            // 13\n  self._cacheMap = {};                                                                      // 14\n  self._cacheList = [];                                                                     // 15\n  self._ready = false;                                                                      // 16\n  self.dep = new Deps.Dependency();                                                         // 17\n                                                                                            // 18\n  self.computation = self._registerComputation();                                           // 19\n};                                                                                          // 20\n                                                                                            // 21\nSubsManager.prototype.subscribe = function() {                                              // 22\n  var self = this;                                                                          // 23\n  if(Meteor.isClient) {                                                                     // 24\n    var args = _.toArray(arguments);                                                        // 25\n    this._addSub(args);                                                                     // 26\n                                                                                            // 27\n    return {                                                                                // 28\n      ready: function() {                                                                   // 29\n        self.dep.depend();                                                                  // 30\n        return self._ready;                                                                 // 31\n      }                                                                                     // 32\n    };                                                                                      // 33\n  } else {                                                                                  // 34\n    // to support fast-render                                                               // 35\n    if(Meteor.subscribe) {                                                                  // 36\n      return Meteor.subscribe.apply(Meteor, arguments);                                     // 37\n    }                                                                                       // 38\n  }                                                                                         // 39\n};                                                                                          // 40\n                                                                                            // 41\nSubsManager.prototype._addSub = function(args) {                                            // 42\n  var self = this;                                                                          // 43\n  var hash = EJSON.stringify(args);                                                         // 44\n  var subName = args[0];                                                                    // 45\n  var paramsKey = EJSON.stringify(args.slice(1));                                           // 46\n                                                                                            // 47\n  if(!self._cacheMap[hash]) {                                                               // 48\n    var sub = {                                                                             // 49\n      args: args,                                                                           // 50\n      hash: hash                                                                            // 51\n    };                                                                                      // 52\n                                                                                            // 53\n    this._handleError(sub);                                                                 // 54\n                                                                                            // 55\n    self._cacheMap[hash] = sub;                                                             // 56\n    self._cacheList.push(sub);                                                              // 57\n                                                                                            // 58\n    // if fast-render comes with this subscription                                          // 59\n    // we need to fake the ready message at first                                           // 60\n    // This is because we are delaying the actual subscription evaluation                   // 61\n    // May be FastRender needs to send full list of subscription args to the client         // 62\n    // But, for now this is something working                                               // 63\n    if(FastRender && FastRender._subscriptions && FastRender._subscriptions[subName]) {     // 64\n      self._ready = self._ready && FastRender._subscriptions[subName][paramsKey];           // 65\n    } else {                                                                                // 66\n      self._ready = false;                                                                  // 67\n    }                                                                                       // 68\n                                                                                            // 69\n    // to notify the global ready()                                                         // 70\n    self._notifyChanged();                                                                  // 71\n                                                                                            // 72\n    // no need to interfere with the current computation                                    // 73\n    self._reRunSubs();                                                                      // 74\n  }                                                                                         // 75\n                                                                                            // 76\n  // add the current sub to the top of the list                                             // 77\n  var sub = self._cacheMap[hash];                                                           // 78\n  sub.updated = (new Date).getTime();                                                       // 79\n                                                                                            // 80\n  var index = _.indexOf(self._cacheList, sub);                                              // 81\n  self._cacheList.splice(index, 1);                                                         // 82\n  self._cacheList.push(sub);                                                                // 83\n};                                                                                          // 84\n                                                                                            // 85\nSubsManager.prototype._reRunSubs = function() {                                             // 86\n  var self = this;                                                                          // 87\n                                                                                            // 88\n  if(Deps.currentComputation) {                                                             // 89\n    Deps.afterFlush(function() {                                                            // 90\n      self.computation.invalidate();                                                        // 91\n    });                                                                                     // 92\n  } else {                                                                                  // 93\n    self.computation.invalidate();                                                          // 94\n  }                                                                                         // 95\n};                                                                                          // 96\n                                                                                            // 97\nSubsManager.prototype._notifyChanged = function() {                                         // 98\n  var self = this;                                                                          // 99\n  if(Deps.currentComputation) {                                                             // 100\n    setTimeout(function() {                                                                 // 101\n      self.dep.changed();                                                                   // 102\n    }, 0);                                                                                  // 103\n  } else {                                                                                  // 104\n    self.dep.changed();                                                                     // 105\n  }                                                                                         // 106\n};                                                                                          // 107\n                                                                                            // 108\nSubsManager.prototype._applyCacheLimit = function () {                                      // 109\n  var self = this;                                                                          // 110\n  var overflow = self._cacheList.length - self.options.cacheLimit;                          // 111\n  if(overflow > 0) {                                                                        // 112\n    var removedSubs = self._cacheList.splice(0, overflow);                                  // 113\n    _.each(removedSubs, function(sub) {                                                     // 114\n      delete self._cacheMap[sub.hash];                                                      // 115\n    });                                                                                     // 116\n  }                                                                                         // 117\n};                                                                                          // 118\n                                                                                            // 119\nSubsManager.prototype._applyExpirations = function() {                                      // 120\n  var self = this;                                                                          // 121\n  var newCacheList = [];                                                                    // 122\n                                                                                            // 123\n  var expirationTime = (new Date).getTime() - self.options.expireIn * 60 * 1000;            // 124\n  _.each(self._cacheList, function(sub) {                                                   // 125\n    if(sub.updated >= expirationTime) {                                                     // 126\n      newCacheList.push(sub);                                                               // 127\n    } else {                                                                                // 128\n      delete self._cacheMap[sub.hash];                                                      // 129\n    }                                                                                       // 130\n  });                                                                                       // 131\n                                                                                            // 132\n  self._cacheList = newCacheList;                                                           // 133\n};                                                                                          // 134\n                                                                                            // 135\nSubsManager.prototype._registerComputation = function() {                                   // 136\n  var self = this;                                                                          // 137\n  var computation = Deps.autorun(function() {                                               // 138\n    self._applyExpirations();                                                               // 139\n    self._applyCacheLimit();                                                                // 140\n                                                                                            // 141\n    var ready = true;                                                                       // 142\n    _.each(self._cacheList, function(sub) {                                                 // 143\n      sub.ready = Meteor.subscribe.apply(Meteor, sub.args).ready();                         // 144\n      ready = ready && sub.ready;                                                           // 145\n    });                                                                                     // 146\n                                                                                            // 147\n    if(ready) {                                                                             // 148\n      self._ready = true;                                                                   // 149\n      self._notifyChanged();                                                                // 150\n    }                                                                                       // 151\n  });                                                                                       // 152\n                                                                                            // 153\n  return computation;                                                                       // 154\n};                                                                                          // 155\n                                                                                            // 156\nSubsManager.prototype._createIdentifier = function(args) {                                  // 157\n  var tmpArgs = _.map(args, function(value) {                                               // 158\n    if(typeof value == \"string\") {                                                          // 159\n      return '\"' + value + '\"';                                                             // 160\n    } else {                                                                                // 161\n      return value;                                                                         // 162\n    }                                                                                       // 163\n  });                                                                                       // 164\n                                                                                            // 165\n  return tmpArgs.join(', ');                                                                // 166\n};                                                                                          // 167\n                                                                                            // 168\nSubsManager.prototype._handleError = function(sub) {                                        // 169\n  var args = sub.args;                                                                      // 170\n  var lastElement = _.last(args);                                                           // 171\n  sub.identifier = this._createIdentifier(args);                                            // 172\n                                                                                            // 173\n  if(!lastElement) {                                                                        // 174\n    args.push({onError: errorHandlingLogic});                                               // 175\n  } else if(typeof lastElement == \"function\") {                                             // 176\n    args.pop();                                                                             // 177\n    args.push({onReady: lastElement, onError: errorHandlingLogic});                         // 178\n  } else if(typeof lastElement.onError == \"function\") {                                     // 179\n    var originalOnError = lastElement.onError;                                              // 180\n    lastElement.onError = function(err) {                                                   // 181\n      errorHandlingLogic(err);                                                              // 182\n      originalOnError(err);                                                                 // 183\n    };                                                                                      // 184\n  } else if(typeof lastElement.onReady == \"function\") {                                     // 185\n    lastElement.onError = errorHandlingLogic;                                               // 186\n  } else {                                                                                  // 187\n    args.push({onError: errorHandlingLogic});                                               // 188\n  }                                                                                         // 189\n                                                                                            // 190\n  function errorHandlingLogic (err) {                                                       // 191\n    console.log(\"Error invoking SubsManager.subscribe(%s): \", sub.identifier , err.reason); // 192\n    // expire this sub right away.                                                          // 193\n    // Then expiration machanism will take care of the sub removal                          // 194\n    sub.updated = new Date(1);                                                              // 195\n  }                                                                                         // 196\n};                                                                                          // 197\n                                                                                            // 198\nSubsManager.prototype.reset = function() {                                                  // 199\n  var self = this;                                                                          // 200\n  var oldComputation = self.computation;                                                    // 201\n  self.computation = self._registerComputation();                                           // 202\n                                                                                            // 203\n  // invalidate the new compuation and it will fire new subscriptions                       // 204\n  self.computation.invalidate();                                                            // 205\n                                                                                            // 206\n  // after above invalidation completed, fire stop the old computation                      // 207\n  // which then send unsub messages                                                         // 208\n  // mergeBox will correct send changed data and there'll be no flicker                     // 209\n  Deps.afterFlush(function() {                                                              // 210\n    oldComputation.stop();                                                                  // 211\n  });                                                                                       // 212\n};                                                                                          // 213\n                                                                                            // 214\nSubsManager.prototype.clear = function() {                                                  // 215\n  this._cacheList = [];                                                                     // 216\n  this._cacheMap = [];                                                                      // 217\n  this._reRunSubs();                                                                        // 218\n};                                                                                          // 219\n                                                                                            // 220\nSubsManager.prototype.ready = function() {                                                  // 221\n  this.dep.depend();                                                                        // 222\n                                                                                            // 223\n  // if there are no items in the cacheList we are not ready yet.                           // 224\n  if(this._cacheList.length === 0) {                                                        // 225\n    return false;                                                                           // 226\n  }                                                                                         // 227\n  return this._ready;                                                                       // 228\n};                                                                                          // 229\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
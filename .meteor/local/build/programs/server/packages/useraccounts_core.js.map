{"version":3,"sources":["meteor://ðŸ’»app/packages/useraccounts_core/packages/useraccounts_core.js"],"names":[],"mappingsfile":"/packages/useraccounts_core.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts:core/lib/field.js                                                                     //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n// ---------------------------------------------------------------------------------                           // 1\n// Field object                                                                                                // 2\n// ---------------------------------------------------------------------------------                           // 3\n                                                                                                               // 4\nField = function(field) {                                                                                      // 5\n  check(field, FIELD_PAT);                                                                                     // 6\n  _.defaults(this, field);                                                                                     // 7\n                                                                                                               // 8\n  this.validating = new ReactiveVar(false);                                                                    // 9\n  this.status = new ReactiveVar(null);                                                                         // 10\n};                                                                                                             // 11\n                                                                                                               // 12\nif (Meteor.isClient) {                                                                                         // 13\n  Field.prototype.clearStatus = function() {                                                                   // 14\n    return this.status.set(null);                                                                              // 15\n  };                                                                                                           // 16\n}                                                                                                              // 17\n                                                                                                               // 18\nif (Meteor.isServer) {                                                                                         // 19\n  Field.prototype.clearStatus = function() {                                                                   // 20\n    // Nothing to do server-side                                                                               // 21\n    return;                                                                                                    // 22\n  };                                                                                                           // 23\n}                                                                                                              // 24\n                                                                                                               // 25\nField.prototype.fixValue = function(value) {                                                                   // 26\n  if (this.type === \"checkbox\") {                                                                              // 27\n    return !!value;                                                                                            // 28\n  }                                                                                                            // 29\n                                                                                                               // 30\n  if (this.type === \"select\") {                                                                                // 31\n    // TODO: something working...                                                                              // 32\n    return value;                                                                                              // 33\n  }                                                                                                            // 34\n                                                                                                               // 35\n  if (this.type === \"radio\") {                                                                                 // 36\n    // TODO: something working...                                                                              // 37\n    return value;                                                                                              // 38\n  }                                                                                                            // 39\n                                                                                                               // 40\n  // Possibly applies required transformations to the input value                                              // 41\n  if (this.trim) {                                                                                             // 42\n    value = value.trim();                                                                                      // 43\n  }                                                                                                            // 44\n                                                                                                               // 45\n  if (this.lowercase) {                                                                                        // 46\n    value = value.toLowerCase();                                                                               // 47\n  }                                                                                                            // 48\n                                                                                                               // 49\n  if (this.uppercase) {                                                                                        // 50\n    value = value.toUpperCase();                                                                               // 51\n  }                                                                                                            // 52\n                                                                                                               // 53\n  if (!!this.transform) {                                                                                      // 54\n    value = this.transform(value);                                                                             // 55\n  }                                                                                                            // 56\n                                                                                                               // 57\n  return value;                                                                                                // 58\n};                                                                                                             // 59\n                                                                                                               // 60\nif (Meteor.isClient) {                                                                                         // 61\n  Field.prototype.getDisplayName = function(state) {                                                           // 62\n    var displayName = this.displayName;                                                                        // 63\n                                                                                                               // 64\n    if (_.isFunction(displayName)) {                                                                           // 65\n      displayName = displayName();                                                                             // 66\n    } else if (_.isObject(displayName)) {                                                                      // 67\n      displayName = displayName[state] || displayName[\"default\"];                                              // 68\n    }                                                                                                          // 69\n                                                                                                               // 70\n    if (!displayName) {                                                                                        // 71\n      displayName = capitalize(this._id);                                                                      // 72\n    }                                                                                                          // 73\n                                                                                                               // 74\n    return displayName;                                                                                        // 75\n  };                                                                                                           // 76\n}                                                                                                              // 77\n                                                                                                               // 78\nif (Meteor.isClient) {                                                                                         // 79\n  Field.prototype.getPlaceholder = function(state) {                                                           // 80\n    var placeholder = this.placeholder;                                                                        // 81\n                                                                                                               // 82\n    if (_.isObject(placeholder)) {                                                                             // 83\n      placeholder = placeholder[state] || placeholder[\"default\"];                                              // 84\n    }                                                                                                          // 85\n                                                                                                               // 86\n    if (!placeholder) {                                                                                        // 87\n      placeholder = capitalize(this._id);                                                                      // 88\n    }                                                                                                          // 89\n                                                                                                               // 90\n    return placeholder;                                                                                        // 91\n  };                                                                                                           // 92\n}                                                                                                              // 93\n                                                                                                               // 94\nField.prototype.getStatus = function() {                                                                       // 95\n  return this.status.get();                                                                                    // 96\n};                                                                                                             // 97\n                                                                                                               // 98\nif (Meteor.isClient) {                                                                                         // 99\n  Field.prototype.getValue = function(tempalteInstance) {                                                      // 100\n    if (this.type === \"checkbox\") {                                                                            // 101\n      return !!(tempalteInstance.$(\"#at-field-\" + this._id + \":checked\").val());                               // 102\n    }                                                                                                          // 103\n                                                                                                               // 104\n    if (this.type === \"radio\") {                                                                               // 105\n      return tempalteInstance.$(\"[name=at-field-\"+ this._id + \"]:checked\").val();                              // 106\n    }                                                                                                          // 107\n                                                                                                               // 108\n    return tempalteInstance.$(\"#at-field-\" + this._id).val();                                                  // 109\n  };                                                                                                           // 110\n}                                                                                                              // 111\n                                                                                                               // 112\nif (Meteor.isClient) {                                                                                         // 113\n  Field.prototype.hasError = function() {                                                                      // 114\n    return this.negativeValidation && this.status.get();                                                       // 115\n  };                                                                                                           // 116\n}                                                                                                              // 117\n                                                                                                               // 118\nif (Meteor.isClient) {                                                                                         // 119\n  Field.prototype.hasIcon = function() {                                                                       // 120\n    if (this.showValidating && this.isValidating()) {                                                          // 121\n      return true;                                                                                             // 122\n    }                                                                                                          // 123\n                                                                                                               // 124\n    if (this.negativeFeedback && this.hasError()) {                                                            // 125\n      return true;                                                                                             // 126\n    }                                                                                                          // 127\n                                                                                                               // 128\n    if (this.positiveFeedback && this.hasSuccess()) {                                                          // 129\n      return true;                                                                                             // 130\n    }                                                                                                          // 131\n  };                                                                                                           // 132\n}                                                                                                              // 133\n                                                                                                               // 134\nif (Meteor.isClient) {                                                                                         // 135\n  Field.prototype.hasSuccess = function() {                                                                    // 136\n    return this.positiveValidation && this.status.get() === false;                                             // 137\n  };                                                                                                           // 138\n}                                                                                                              // 139\n                                                                                                               // 140\nif (Meteor.isClient)                                                                                           // 141\n  Field.prototype.iconClass = function() {                                                                     // 142\n    if (this.isValidating()) {                                                                                 // 143\n      return AccountsTemplates.texts.inputIcons[\"isValidating\"];                                               // 144\n    }                                                                                                          // 145\n                                                                                                               // 146\n    if (this.hasError()) {                                                                                     // 147\n      return AccountsTemplates.texts.inputIcons[\"hasError\"];                                                   // 148\n    }                                                                                                          // 149\n                                                                                                               // 150\n    if (this.hasSuccess()) {                                                                                   // 151\n      return AccountsTemplates.texts.inputIcons[\"hasSuccess\"];                                                 // 152\n    }                                                                                                          // 153\n  };                                                                                                           // 154\n                                                                                                               // 155\nif (Meteor.isClient) {                                                                                         // 156\n  Field.prototype.isValidating = function() {                                                                  // 157\n    return this.validating.get();                                                                              // 158\n  };                                                                                                           // 159\n}                                                                                                              // 160\n                                                                                                               // 161\nif (Meteor.isClient) {                                                                                         // 162\n  Field.prototype.setError = function(err) {                                                                   // 163\n    check(err, Match.OneOf(String, undefined, Boolean));                                                       // 164\n                                                                                                               // 165\n    if (err === false) {                                                                                       // 166\n      return this.status.set(false);                                                                           // 167\n    }                                                                                                          // 168\n                                                                                                               // 169\n    return this.status.set(err || true);                                                                       // 170\n  };                                                                                                           // 171\n}                                                                                                              // 172\n                                                                                                               // 173\nif (Meteor.isServer) {                                                                                         // 174\n  Field.prototype.setError = function(err) {                                                                   // 175\n    // Nothing to do server-side                                                                               // 176\n    return;                                                                                                    // 177\n  };                                                                                                           // 178\n}                                                                                                              // 179\n                                                                                                               // 180\nif (Meteor.isClient) {                                                                                         // 181\n  Field.prototype.setSuccess = function() {                                                                    // 182\n    return this.status.set(false);                                                                             // 183\n  };                                                                                                           // 184\n}                                                                                                              // 185\n                                                                                                               // 186\nif (Meteor.isServer) {                                                                                         // 187\n  Field.prototype.setSuccess = function() {                                                                    // 188\n    // Nothing to do server-side                                                                               // 189\n    return;                                                                                                    // 190\n  };                                                                                                           // 191\n}                                                                                                              // 192\n                                                                                                               // 193\nif (Meteor.isClient) {                                                                                         // 194\n  Field.prototype.setValidating = function(state) {                                                            // 195\n    check(state, Boolean);                                                                                     // 196\n    return this.validating.set(state);                                                                         // 197\n  };                                                                                                           // 198\n}                                                                                                              // 199\n                                                                                                               // 200\nif (Meteor.isServer) {                                                                                         // 201\n  Field.prototype.setValidating = function(state) {                                                            // 202\n    // Nothing to do server-side                                                                               // 203\n    return;                                                                                                    // 204\n  };                                                                                                           // 205\n}                                                                                                              // 206\n                                                                                                               // 207\nif (Meteor.isClient) {                                                                                         // 208\n  Field.prototype.setValue = function(tempalteInstance, value) {                                               // 209\n    if (this.type === \"checkbox\") {                                                                            // 210\n      tempalteInstance.$(\"#at-field-\" + this._id).prop('checked', true);                                       // 211\n      return;                                                                                                  // 212\n    }                                                                                                          // 213\n                                                                                                               // 214\n    if (this.type === \"radio\") {                                                                               // 215\n      tempalteInstance.$(\"[name=at-field-\"+ this._id + \"]\").prop('checked', true);                             // 216\n      return;                                                                                                  // 217\n    }                                                                                                          // 218\n                                                                                                               // 219\n    tempalteInstance.$(\"#at-field-\" + this._id).val(value);                                                    // 220\n  };                                                                                                           // 221\n}                                                                                                              // 222\n                                                                                                               // 223\nField.prototype.validate = function(value, strict) {                                                           // 224\n  check(value, Match.OneOf(undefined, String, Boolean));                                                       // 225\n  this.setValidating(true);                                                                                    // 226\n  this.clearStatus();                                                                                          // 227\n                                                                                                               // 228\n  if (_.isUndefined(value) || value === '') {                                                                  // 229\n    if (!!strict) {                                                                                            // 230\n      if (this.required) {                                                                                     // 231\n        this.setError(AccountsTemplates.texts.requiredField);                                                  // 232\n        this.setValidating(false);                                                                             // 233\n                                                                                                               // 234\n        return AccountsTemplates.texts.requiredField;                                                          // 235\n      } else {                                                                                                 // 236\n        this.setSuccess();                                                                                     // 237\n        this.setValidating(false);                                                                             // 238\n                                                                                                               // 239\n        return false;                                                                                          // 240\n      }                                                                                                        // 241\n    } else {                                                                                                   // 242\n      this.clearStatus();                                                                                      // 243\n      this.setValidating(false);                                                                               // 244\n                                                                                                               // 245\n      return null;                                                                                             // 246\n    }                                                                                                          // 247\n  }                                                                                                            // 248\n                                                                                                               // 249\n  var valueLength = value.length;                                                                              // 250\n  var minLength = this.minLength;                                                                              // 251\n  if (minLength && valueLength < minLength) {                                                                  // 252\n    this.setError(AccountsTemplates.texts.minRequiredLength + \": \" + minLength);                               // 253\n    this.setValidating(false);                                                                                 // 254\n                                                                                                               // 255\n    return AccountsTemplates.texts.minRequiredLength + \": \" + minLength;                                       // 256\n  }                                                                                                            // 257\n                                                                                                               // 258\n  var maxLength = this.maxLength;                                                                              // 259\n  if (maxLength && valueLength > maxLength) {                                                                  // 260\n    this.setError(AccountsTemplates.texts.maxAllowedLength + \": \" + maxLength);                                // 261\n    this.setValidating(false);                                                                                 // 262\n                                                                                                               // 263\n    return AccountsTemplates.texts.maxAllowedLength + \": \" + maxLength;                                        // 264\n  }                                                                                                            // 265\n                                                                                                               // 266\n  if (this.re && valueLength && !value.match(this.re)) {                                                       // 267\n    this.setError(this.errStr);                                                                                // 268\n    this.setValidating(false);                                                                                 // 269\n                                                                                                               // 270\n    return this.errStr;                                                                                        // 271\n  }                                                                                                            // 272\n                                                                                                               // 273\n  if (this.func) {                                                                                             // 274\n    var result = this.func(value);                                                                             // 275\n    var err = result === true ? this.errStr || true : result;                                                  // 276\n                                                                                                               // 277\n    if (_.isUndefined(result)) {                                                                               // 278\n      return err;                                                                                              // 279\n    }                                                                                                          // 280\n                                                                                                               // 281\n    this.status.set(err);                                                                                      // 282\n    this.setValidating(false);                                                                                 // 283\n                                                                                                               // 284\n    return err;                                                                                                // 285\n  }                                                                                                            // 286\n                                                                                                               // 287\n  this.setSuccess();                                                                                           // 288\n  this.setValidating(false);                                                                                   // 289\n                                                                                                               // 290\n  return false;                                                                                                // 291\n};                                                                                                             // 292\n                                                                                                               // 293\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts:core/lib/core.js                                                                      //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n// ---------------------------------------------------------------------------------                           // 1\n// Patterns for methods\" parameters                                                                            // 2\n// ---------------------------------------------------------------------------------                           // 3\n                                                                                                               // 4\nSTATE_PAT = {                                                                                                  // 5\n  changePwd: Match.Optional(String),                                                                           // 6\n  enrollAccount: Match.Optional(String),                                                                       // 7\n  forgotPwd: Match.Optional(String),                                                                           // 8\n  resetPwd: Match.Optional(String),                                                                            // 9\n  signIn: Match.Optional(String),                                                                              // 10\n  signUp: Match.Optional(String),                                                                              // 11\n  verifyEmail: Match.Optional(String),                                                                         // 12\n  resendVerificationEmail: Match.Optional(String),                                                             // 13\n};                                                                                                             // 14\n                                                                                                               // 15\nERRORS_PAT = {                                                                                                 // 16\n  accountsCreationDisabled: Match.Optional(String),                                                            // 17\n  cannotRemoveService: Match.Optional(String),                                                                 // 18\n  captchaVerification: Match.Optional(String),                                                                 // 19\n  loginForbidden: Match.Optional(String),                                                                      // 20\n  mustBeLoggedIn: Match.Optional(String),                                                                      // 21\n  pwdMismatch: Match.Optional(String),                                                                         // 22\n  validationErrors: Match.Optional(String),                                                                    // 23\n  verifyEmailFirst: Match.Optional(String),                                                                    // 24\n};                                                                                                             // 25\n                                                                                                               // 26\nINFO_PAT = {                                                                                                   // 27\n  emailSent: Match.Optional(String),                                                                           // 28\n  emailVerified: Match.Optional(String),                                                                       // 29\n  pwdChanged: Match.Optional(String),                                                                          // 30\n  pwdReset: Match.Optional(String),                                                                            // 31\n  pwdSet: Match.Optional(String),                                                                              // 32\n  signUpVerifyEmail: Match.Optional(String),                                                                   // 33\n  verificationEmailSent: Match.Optional(String),                                                               // 34\n};                                                                                                             // 35\n                                                                                                               // 36\nINPUT_ICONS_PAT = {                                                                                            // 37\n  hasError: Match.Optional(String),                                                                            // 38\n  hasSuccess: Match.Optional(String),                                                                          // 39\n  isValidating: Match.Optional(String),                                                                        // 40\n};                                                                                                             // 41\n                                                                                                               // 42\nObjWithStringValues = Match.Where(function (x) {                                                               // 43\n  check(x, Object);                                                                                            // 44\n  _.each(_.values(x), function(value) {                                                                        // 45\n      check(value, String);                                                                                    // 46\n  });                                                                                                          // 47\n  return true;                                                                                                 // 48\n});                                                                                                            // 49\n                                                                                                               // 50\nTEXTS_PAT = {                                                                                                  // 51\n  button: Match.Optional(STATE_PAT),                                                                           // 52\n  errors: Match.Optional(ERRORS_PAT),                                                                          // 53\n  info: Match.Optional(INFO_PAT),                                                                              // 54\n  inputIcons: Match.Optional(INPUT_ICONS_PAT),                                                                 // 55\n  maxAllowedLength: Match.Optional(String),                                                                    // 56\n  minRequiredLength: Match.Optional(String),                                                                   // 57\n  navSignIn: Match.Optional(String),                                                                           // 58\n  navSignOut: Match.Optional(String),                                                                          // 59\n  optionalField: Match.Optional(String),                                                                       // 60\n  pwdLink_link: Match.Optional(String),                                                                        // 61\n  pwdLink_pre: Match.Optional(String),                                                                         // 62\n  pwdLink_suff: Match.Optional(String),                                                                        // 63\n  requiredField: Match.Optional(String),                                                                       // 64\n  resendVerificationEmailLink_pre: Match.Optional(String),                                                     // 65\n  resendVerificationEmailLink_link: Match.Optional(String),                                                    // 66\n  resendVerificationEmailLink_suff: Match.Optional(String),                                                    // 67\n  sep: Match.Optional(String),                                                                                 // 68\n  signInLink_link: Match.Optional(String),                                                                     // 69\n  signInLink_pre: Match.Optional(String),                                                                      // 70\n  signInLink_suff: Match.Optional(String),                                                                     // 71\n  signUpLink_link: Match.Optional(String),                                                                     // 72\n  signUpLink_pre: Match.Optional(String),                                                                      // 73\n  signUpLink_suff: Match.Optional(String),                                                                     // 74\n  socialAdd: Match.Optional(String),                                                                           // 75\n  socialConfigure: Match.Optional(String),                                                                     // 76\n  socialIcons: Match.Optional(ObjWithStringValues),                                                            // 77\n  socialRemove: Match.Optional(String),                                                                        // 78\n  socialSignIn: Match.Optional(String),                                                                        // 79\n  socialSignUp: Match.Optional(String),                                                                        // 80\n  socialWith: Match.Optional(String),                                                                          // 81\n  termsAnd: Match.Optional(String),                                                                            // 82\n  termsPreamble: Match.Optional(String),                                                                       // 83\n  termsPrivacy: Match.Optional(String),                                                                        // 84\n  termsTerms: Match.Optional(String),                                                                          // 85\n  title: Match.Optional(STATE_PAT),                                                                            // 86\n};                                                                                                             // 87\n                                                                                                               // 88\n// Configuration pattern to be checked with check                                                              // 89\nCONFIG_PAT = {                                                                                                 // 90\n  // Behaviour                                                                                                 // 91\n  confirmPassword: Match.Optional(Boolean),                                                                    // 92\n  defaultState: Match.Optional(String),                                                                        // 93\n  enablePasswordChange: Match.Optional(Boolean),                                                               // 94\n  enforceEmailVerification: Match.Optional(Boolean),                                                           // 95\n  focusFirstInput: Match.Optional(Boolean),                                                                    // 96\n  forbidClientAccountCreation: Match.Optional(Boolean),                                                        // 97\n  lowercaseUsername: Match.Optional(Boolean),                                                                  // 98\n  overrideLoginErrors: Match.Optional(Boolean),                                                                // 99\n  sendVerificationEmail: Match.Optional(Boolean),                                                              // 100\n  socialLoginStyle: Match.Optional(Match.OneOf(\"popup\", \"redirect\")),                                          // 101\n                                                                                                               // 102\n  // Appearance                                                                                                // 103\n  defaultLayout: Match.Optional(String),                                                                       // 104\n  hideSignInLink: Match.Optional(Boolean),                                                                     // 105\n  hideSignUpLink: Match.Optional(Boolean),                                                                     // 106\n  showAddRemoveServices: Match.Optional(Boolean),                                                              // 107\n  showForgotPasswordLink: Match.Optional(Boolean),                                                             // 108\n  showResendVerificationEmailLink: Match.Optional(Boolean),                                                    // 109\n  showLabels: Match.Optional(Boolean),                                                                         // 110\n  showPlaceholders: Match.Optional(Boolean),                                                                   // 111\n                                                                                                               // 112\n  // Client-side Validation                                                                                    // 113\n  continuousValidation: Match.Optional(Boolean),                                                               // 114\n  negativeFeedback: Match.Optional(Boolean),                                                                   // 115\n  negativeValidation: Match.Optional(Boolean),                                                                 // 116\n  positiveFeedback: Match.Optional(Boolean),                                                                   // 117\n  positiveValidation: Match.Optional(Boolean),                                                                 // 118\n  showValidating: Match.Optional(Boolean),                                                                     // 119\n                                                                                                               // 120\n  // Privacy Policy and Terms of Use                                                                           // 121\n  privacyUrl: Match.Optional(String),                                                                          // 122\n  termsUrl: Match.Optional(String),                                                                            // 123\n                                                                                                               // 124\n  // Redirects                                                                                                 // 125\n  homeRoutePath: Match.Optional(String),                                                                       // 126\n  redirectTimeout: Match.Optional(Number),                                                                     // 127\n                                                                                                               // 128\n  // Hooks                                                                                                     // 129\n  onLogoutHook: Match.Optional(Function),                                                                      // 130\n  onSubmitHook: Match.Optional(Function),                                                                      // 131\n  preSignUpHook: Match.Optional(Function),                                                                     // 132\n                                                                                                               // 133\n  texts: Match.Optional(TEXTS_PAT),                                                                            // 134\n                                                                                                               // 135\n  //reCaptcha config                                                                                           // 136\n  reCaptcha: Match.Optional({                                                                                  // 137\n    data_type: Match.Optional(Match.OneOf(\"audio\", \"image\")),                                                  // 138\n    secretKey: Match.Optional(String),                                                                         // 139\n    siteKey: Match.Optional(String),                                                                           // 140\n    theme: Match.Optional(Match.OneOf(\"dark\", \"light\")),                                                       // 141\n  }),                                                                                                          // 142\n                                                                                                               // 143\n  showReCaptcha: Match.Optional(Boolean),                                                                      // 144\n};                                                                                                             // 145\n                                                                                                               // 146\n                                                                                                               // 147\nFIELD_SUB_PAT = {                                                                                              // 148\n  \"default\": Match.Optional(String),                                                                           // 149\n  changePwd: Match.Optional(String),                                                                           // 150\n  enrollAccount: Match.Optional(String),                                                                       // 151\n  forgotPwd: Match.Optional(String),                                                                           // 152\n  resetPwd: Match.Optional(String),                                                                            // 153\n  signIn: Match.Optional(String),                                                                              // 154\n  signUp: Match.Optional(String),                                                                              // 155\n};                                                                                                             // 156\n                                                                                                               // 157\n                                                                                                               // 158\n// Field pattern                                                                                               // 159\nFIELD_PAT = {                                                                                                  // 160\n  _id: String,                                                                                                 // 161\n  type: String,                                                                                                // 162\n  required: Match.Optional(Boolean),                                                                           // 163\n  displayName: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction), FIELD_SUB_PAT)),                  // 164\n  placeholder: Match.Optional(Match.OneOf(String, FIELD_SUB_PAT)),                                             // 165\n  select: Match.Optional([{text: String, value: Match.Any}]),                                                  // 166\n  minLength: Match.Optional(Match.Integer),                                                                    // 167\n  maxLength: Match.Optional(Match.Integer),                                                                    // 168\n  re: Match.Optional(RegExp),                                                                                  // 169\n  func: Match.Optional(Match.Where(_.isFunction)),                                                             // 170\n  errStr: Match.Optional(String),                                                                              // 171\n                                                                                                               // 172\n  // Client-side Validation                                                                                    // 173\n  continuousValidation: Match.Optional(Boolean),                                                               // 174\n  negativeFeedback: Match.Optional(Boolean),                                                                   // 175\n  negativeValidation: Match.Optional(Boolean),                                                                 // 176\n  positiveValidation: Match.Optional(Boolean),                                                                 // 177\n  positiveFeedback: Match.Optional(Boolean),                                                                   // 178\n                                                                                                               // 179\n  // Transforms                                                                                                // 180\n  trim: Match.Optional(Boolean),                                                                               // 181\n  lowercase: Match.Optional(Boolean),                                                                          // 182\n  uppercase: Match.Optional(Boolean),                                                                          // 183\n  transform: Match.Optional(Match.Where(_.isFunction)),                                                        // 184\n                                                                                                               // 185\n  // Custom options                                                                                            // 186\n  options: Match.Optional(Object),                                                                             // 187\n  template: Match.Optional(String),                                                                            // 188\n};                                                                                                             // 189\n                                                                                                               // 190\n// -----------------------------------------------------------------------------                               // 191\n// AccountsTemplates object                                                                                    // 192\n// -----------------------------------------------------------------------------                               // 193\n                                                                                                               // 194\n// -------------------                                                                                         // 195\n// Client/Server stuff                                                                                         // 196\n// -------------------                                                                                         // 197\n                                                                                                               // 198\n// Constructor                                                                                                 // 199\nAT = function() {                                                                                              // 200\n                                                                                                               // 201\n};                                                                                                             // 202\n                                                                                                               // 203\nAT.prototype.CONFIG_PAT = CONFIG_PAT;                                                                          // 204\n                                                                                                               // 205\n/*                                                                                                             // 206\n  Each field object is represented by the following properties:                                                // 207\n    _id:         String   (required)  // A unique field\"s id / name                                            // 208\n    type:        String   (required)  // Displayed input type                                                  // 209\n    required:    Boolean  (optional)  // Specifies Whether to fail or not when field is left empty             // 210\n    displayName: String   (optional)  // The field\"s name to be displayed as a label above the input element   // 211\n    placeholder: String   (optional)  // The placeholder text to be displayed inside the input element         // 212\n    minLength:   Integer  (optional)  // Possibly specifies the minimum allowed length                         // 213\n    maxLength:   Integer  (optional)  // Possibly specifies the maximum allowed length                         // 214\n    re:          RegExp   (optional)  // Regular expression for validation                                     // 215\n    func:        Function (optional)  // Custom function for validation                                        // 216\n    errStr:      String   (optional)  // Error message to be displayed in case re validation fails             // 217\n*/                                                                                                             // 218\n                                                                                                               // 219\n                                                                                                               // 220\n// Allowed input types                                                                                         // 221\nAT.prototype.INPUT_TYPES = [                                                                                   // 222\n  \"checkbox\",                                                                                                  // 223\n  \"email\",                                                                                                     // 224\n  \"hidden\",                                                                                                    // 225\n  \"password\",                                                                                                  // 226\n  \"radio\",                                                                                                     // 227\n  \"select\",                                                                                                    // 228\n  \"tel\",                                                                                                       // 229\n  \"text\",                                                                                                      // 230\n  \"url\",                                                                                                       // 231\n];                                                                                                             // 232\n                                                                                                               // 233\n// Current configuration values                                                                                // 234\nAT.prototype.options = {                                                                                       // 235\n  // Appearance                                                                                                // 236\n  //defaultLayout: undefined,                                                                                  // 237\n  showAddRemoveServices: false,                                                                                // 238\n  showForgotPasswordLink: false,                                                                               // 239\n  showResendVerificationEmailLink: false,                                                                      // 240\n  showLabels: true,                                                                                            // 241\n  showPlaceholders: true,                                                                                      // 242\n                                                                                                               // 243\n  // Behaviour                                                                                                 // 244\n  confirmPassword: true,                                                                                       // 245\n  defaultState: \"signIn\",                                                                                      // 246\n  enablePasswordChange: false,                                                                                 // 247\n  focusFirstInput: true,                                                                                       // 248\n  forbidClientAccountCreation: false,                                                                          // 249\n  lowercaseUsername: false,                                                                                    // 250\n  overrideLoginErrors: true,                                                                                   // 251\n  sendVerificationEmail: false,                                                                                // 252\n  socialLoginStyle: \"popup\",                                                                                   // 253\n                                                                                                               // 254\n  // Client-side Validation                                                                                    // 255\n  //continuousValidation: false,                                                                               // 256\n  //negativeFeedback: false,                                                                                   // 257\n  //negativeValidation: false,                                                                                 // 258\n  //positiveValidation: false,                                                                                 // 259\n  //positiveFeedback: false,                                                                                   // 260\n  //showValidating: false,                                                                                     // 261\n                                                                                                               // 262\n  // Privacy Policy and Terms of Use                                                                           // 263\n  privacyUrl: undefined,                                                                                       // 264\n  termsUrl: undefined,                                                                                         // 265\n                                                                                                               // 266\n  // Hooks                                                                                                     // 267\n  onSubmitHook: undefined,                                                                                     // 268\n};                                                                                                             // 269\n                                                                                                               // 270\nAT.prototype.texts = {                                                                                         // 271\n  button: {                                                                                                    // 272\n    changePwd: \"updateYourPassword\",                                                                           // 273\n    //enrollAccount: \"createAccount\",                                                                          // 274\n    enrollAccount: \"signUp\",                                                                                   // 275\n    forgotPwd: \"emailResetLink\",                                                                               // 276\n    resetPwd: \"setPassword\",                                                                                   // 277\n    signIn: \"signIn\",                                                                                          // 278\n    signUp: \"signUp\",                                                                                          // 279\n    resendVerificationEmail: \"Send email again\",                                                               // 280\n  },                                                                                                           // 281\n  errors: {                                                                                                    // 282\n    accountsCreationDisabled: \"Client side accounts creation is disabled!!!\",                                  // 283\n    cannotRemoveService: \"Cannot remove the only active service!\",                                             // 284\n    captchaVerification: \"Captcha verification failed!\",                                                       // 285\n    loginForbidden: \"error.accounts.Login forbidden\",                                                          // 286\n    mustBeLoggedIn: \"error.accounts.Must be logged in\",                                                        // 287\n    pwdMismatch: \"error.pwdsDontMatch\",                                                                        // 288\n    validationErrors: \"Validation Errors\",                                                                     // 289\n    verifyEmailFirst: \"Please verify your email first. Check the email and follow the link!\",                  // 290\n  },                                                                                                           // 291\n  navSignIn: 'signIn',                                                                                         // 292\n  navSignOut: 'signOut',                                                                                       // 293\n  info: {                                                                                                      // 294\n    emailSent: \"info.emailSent\",                                                                               // 295\n    emailVerified: \"info.emailVerified\",                                                                       // 296\n    pwdChanged: \"info.passwordChanged\",                                                                        // 297\n    pwdReset: \"info.passwordReset\",                                                                            // 298\n    pwdSet: \"Password Set\",                                                                                    // 299\n    signUpVerifyEmail: \"Successful Registration! Please check your email and follow the instructions.\",        // 300\n    verificationEmailSent: \"A new email has been sent to you. If the email doesn't show up in your inbox, be sure to check your spam folder.\",\n  },                                                                                                           // 302\n  inputIcons: {                                                                                                // 303\n    isValidating: \"fa fa-spinner fa-spin\",                                                                     // 304\n    hasSuccess: \"fa fa-check\",                                                                                 // 305\n    hasError: \"fa fa-times\",                                                                                   // 306\n  },                                                                                                           // 307\n  maxAllowedLength: \"Maximum allowed length\",                                                                  // 308\n  minRequiredLength: \"Minimum required length\",                                                                // 309\n  optionalField: \"optional\",                                                                                   // 310\n  pwdLink_pre: \"\",                                                                                             // 311\n  pwdLink_link: \"forgotPassword\",                                                                              // 312\n  pwdLink_suff: \"\",                                                                                            // 313\n  requiredField: \"Required Field\",                                                                             // 314\n  resendVerificationEmailLink_pre: \"Verification email lost?\",                                                 // 315\n  resendVerificationEmailLink_link: \"Send again\",                                                              // 316\n  resendVerificationEmailLink_suff: \"\",                                                                        // 317\n  sep: \"OR\",                                                                                                   // 318\n  signInLink_pre: \"ifYouAlreadyHaveAnAccount\",                                                                 // 319\n  signInLink_link: \"signin\",                                                                                   // 320\n  signInLink_suff: \"\",                                                                                         // 321\n  signUpLink_pre: \"dontHaveAnAccount\",                                                                         // 322\n  signUpLink_link: \"signUp\",                                                                                   // 323\n  signUpLink_suff: \"\",                                                                                         // 324\n  socialAdd: \"add\",                                                                                            // 325\n  socialConfigure: \"configure\",                                                                                // 326\n  socialIcons: {                                                                                               // 327\n      \"meteor-developer\": \"fa fa-rocket\"                                                                       // 328\n  },                                                                                                           // 329\n  socialRemove: \"remove\",                                                                                      // 330\n  socialSignIn: \"signIn\",                                                                                      // 331\n  socialSignUp: \"signUp\",                                                                                      // 332\n  socialWith: \"with\",                                                                                          // 333\n  termsPreamble: \"clickAgree\",                                                                                 // 334\n  termsPrivacy: \"privacyPolicy\",                                                                               // 335\n  termsAnd: \"and\",                                                                                             // 336\n  termsTerms: \"terms\",                                                                                         // 337\n  title: {                                                                                                     // 338\n    changePwd: \"changePassword\",                                                                               // 339\n    enrollAccount: \"createAccount\",                                                                            // 340\n    forgotPwd: \"resetYourPassword\",                                                                            // 341\n    resetPwd: \"resetYourPassword\",                                                                             // 342\n    signIn: \"signIn\",                                                                                          // 343\n    signUp: \"createAccount\",                                                                                   // 344\n    verifyEmail: \"\",                                                                                           // 345\n    resendVerificationEmail: \"Send the verification email again\",                                              // 346\n  },                                                                                                           // 347\n};                                                                                                             // 348\n                                                                                                               // 349\nAT.prototype.SPECIAL_FIELDS = [                                                                                // 350\n  \"password_again\",                                                                                            // 351\n  \"username_and_email\",                                                                                        // 352\n];                                                                                                             // 353\n                                                                                                               // 354\n// SignIn / SignUp fields                                                                                      // 355\nAT.prototype._fields = [                                                                                       // 356\n  new Field({                                                                                                  // 357\n    _id: \"email\",                                                                                              // 358\n    type: \"email\",                                                                                             // 359\n    required: true,                                                                                            // 360\n    lowercase: true,                                                                                           // 361\n    trim: true,                                                                                                // 362\n    func: function(email) {                                                                                    // 363\n        return !_.contains(email, '@');                                                                        // 364\n    },                                                                                                         // 365\n    errStr: 'Invalid email',                                                                                   // 366\n  }),                                                                                                          // 367\n  new Field({                                                                                                  // 368\n    _id: \"password\",                                                                                           // 369\n    type: \"password\",                                                                                          // 370\n    required: true,                                                                                            // 371\n    minLength: 6,                                                                                              // 372\n    displayName: {                                                                                             // 373\n        \"default\": \"password\",                                                                                 // 374\n        changePwd: \"newPassword\",                                                                              // 375\n        resetPwd: \"newPassword\",                                                                               // 376\n    },                                                                                                         // 377\n    placeholder: {                                                                                             // 378\n        \"default\": \"password\",                                                                                 // 379\n        changePwd: \"newPassword\",                                                                              // 380\n        resetPwd: \"newPassword\",                                                                               // 381\n    },                                                                                                         // 382\n  }),                                                                                                          // 383\n];                                                                                                             // 384\n                                                                                                               // 385\n                                                                                                               // 386\nAT.prototype._initialized = false;                                                                             // 387\n                                                                                                               // 388\n// Input type validation                                                                                       // 389\nAT.prototype._isValidInputType = function(value) {                                                             // 390\n    return _.indexOf(this.INPUT_TYPES, value) !== -1;                                                          // 391\n};                                                                                                             // 392\n                                                                                                               // 393\nAT.prototype.addField = function(field) {                                                                      // 394\n    // Fields can be added only before initialization                                                          // 395\n    if (this._initialized) {                                                                                   // 396\n      throw new Error(\"AccountsTemplates.addField should strictly be called before AccountsTemplates.init!\");  // 397\n    }                                                                                                          // 398\n                                                                                                               // 399\n    field = _.pick(field, _.keys(FIELD_PAT));                                                                  // 400\n    check(field, FIELD_PAT);                                                                                   // 401\n    // Checks there\"s currently no field called field._id                                                      // 402\n    if (_.indexOf(_.pluck(this._fields, \"_id\"), field._id) !== -1) {                                           // 403\n      throw new Error(\"A field called \" + field._id + \" already exists!\");                                     // 404\n    }                                                                                                          // 405\n    // Validates field.type                                                                                    // 406\n    if (!this._isValidInputType(field.type)) {                                                                 // 407\n      throw new Error(\"field.type is not valid!\");                                                             // 408\n    }                                                                                                          // 409\n    // Checks field.minLength is strictly positive                                                             // 410\n    if (typeof field.minLength !== \"undefined\" && field.minLength <= 0) {                                      // 411\n      throw new Error(\"field.minLength should be greater than zero!\");                                         // 412\n    }                                                                                                          // 413\n    // Checks field.maxLength is strictly positive                                                             // 414\n    if (typeof field.maxLength !== \"undefined\" && field.maxLength <= 0) {                                      // 415\n      throw new Error(\"field.maxLength should be greater than zero!\");                                         // 416\n    }                                                                                                          // 417\n    // Checks field.maxLength is greater than field.minLength                                                  // 418\n    if (typeof field.minLength !== \"undefined\" && typeof field.minLength !== \"undefined\" && field.maxLength < field.minLength) {\n      throw new Error(\"field.maxLength should be greater than field.maxLength!\");                              // 420\n    }                                                                                                          // 421\n                                                                                                               // 422\n    if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, field._id))) {                                    // 423\n      this._fields.push(new Field(field));                                                                     // 424\n    }                                                                                                          // 425\n                                                                                                               // 426\n    return this._fields;                                                                                       // 427\n};                                                                                                             // 428\n                                                                                                               // 429\nAT.prototype.addFields = function(fields) {                                                                    // 430\n  var ok;                                                                                                      // 431\n                                                                                                               // 432\n  try { // don\"t bother with `typeof` - just access `length` and `catch`                                       // 433\n    ok = fields.length > 0 && \"0\" in Object(fields);                                                           // 434\n  } catch (e) {                                                                                                // 435\n    throw new Error(\"field argument should be an array of valid field objects!\");                              // 436\n  }                                                                                                            // 437\n  if (ok) {                                                                                                    // 438\n    _.map(fields, function(field) {                                                                            // 439\n      this.addField(field);                                                                                    // 440\n    }, this);                                                                                                  // 441\n  } else {                                                                                                     // 442\n    throw new Error(\"field argument should be an array of valid field objects!\");                              // 443\n  }                                                                                                            // 444\n                                                                                                               // 445\n  return this._fields;                                                                                         // 446\n};                                                                                                             // 447\n                                                                                                               // 448\nAT.prototype.configure = function(config) {                                                                    // 449\n  // Configuration options can be set only before initialization                                               // 450\n  if (this._initialized) {                                                                                     // 451\n    throw new Error(\"Configuration options must be set before AccountsTemplates.init!\");                       // 452\n  }                                                                                                            // 453\n                                                                                                               // 454\n  // Updates the current configuration                                                                         // 455\n  check(config, CONFIG_PAT);                                                                                   // 456\n  var options = _.omit(config, \"texts\", \"reCaptcha\");                                                          // 457\n  this.options = _.defaults(options, this.options);                                                            // 458\n                                                                                                               // 459\n  // Possibly sets up reCaptcha options                                                                        // 460\n  var reCaptcha = config.reCaptcha;                                                                            // 461\n  if (reCaptcha) {                                                                                             // 462\n    // Updates the current button object                                                                       // 463\n    this.options.reCaptcha = _.defaults(reCaptcha, this.options.reCaptcha || {});                              // 464\n  }                                                                                                            // 465\n                                                                                                               // 466\n  // Possibly sets up texts...                                                                                 // 467\n  if (config.texts) {                                                                                          // 468\n    var texts = config.texts;                                                                                  // 469\n    var simpleTexts = _.omit(texts, \"button\", \"errors\", \"info\", \"inputIcons\", \"socialIcons\", \"title\");         // 470\n                                                                                                               // 471\n    this.texts = _.defaults(simpleTexts, this.texts);                                                          // 472\n                                                                                                               // 473\n    if (texts.button) {                                                                                        // 474\n      // Updates the current button object                                                                     // 475\n      this.texts.button = _.defaults(texts.button, this.texts.button);                                         // 476\n    }                                                                                                          // 477\n                                                                                                               // 478\n    if (texts.errors) {                                                                                        // 479\n      // Updates the current errors object                                                                     // 480\n      this.texts.errors = _.defaults(texts.errors, this.texts.errors);                                         // 481\n    }                                                                                                          // 482\n                                                                                                               // 483\n    if (texts.info) {                                                                                          // 484\n      // Updates the current info object                                                                       // 485\n      this.texts.info = _.defaults(texts.info, this.texts.info);                                               // 486\n    }                                                                                                          // 487\n                                                                                                               // 488\n    if (texts.inputIcons) {                                                                                    // 489\n      // Updates the current inputIcons object                                                                 // 490\n      this.texts.inputIcons = _.defaults(texts.inputIcons, this.texts.inputIcons);                             // 491\n    }                                                                                                          // 492\n                                                                                                               // 493\n    if (texts.socialIcons) {                                                                                   // 494\n      // Updates the current socialIcons object                                                                // 495\n      this.texts.socialIcons = _.defaults(texts.socialIcons, this.texts.socialIcons);                          // 496\n    }                                                                                                          // 497\n                                                                                                               // 498\n    if (texts.title) {                                                                                         // 499\n      // Updates the current title object                                                                      // 500\n      this.texts.title = _.defaults(texts.title, this.texts.title);                                            // 501\n    }                                                                                                          // 502\n  }                                                                                                            // 503\n};                                                                                                             // 504\n                                                                                                               // 505\n                                                                                                               // 506\nAT.prototype.configureRoute = function(route, options) {                                                       // 507\n  console.warn('You now need a routing package like useraccounts:iron-routing or useraccounts:flow-routing to be able to configure routes!');\n};                                                                                                             // 509\n                                                                                                               // 510\n                                                                                                               // 511\nAT.prototype.hasField = function(fieldId) {                                                                    // 512\n  return !!this.getField(fieldId);                                                                             // 513\n};                                                                                                             // 514\n                                                                                                               // 515\nAT.prototype.getField = function(fieldId) {                                                                    // 516\n  var field = _.filter(this._fields, function(field) {                                                         // 517\n    return field._id === fieldId;                                                                              // 518\n  });                                                                                                          // 519\n                                                                                                               // 520\n  return (field.length === 1) ? field[0] : undefined;                                                          // 521\n};                                                                                                             // 522\n                                                                                                               // 523\nAT.prototype.getFields = function() {                                                                          // 524\n    return this._fields;                                                                                       // 525\n};                                                                                                             // 526\n                                                                                                               // 527\nAT.prototype.getFieldIds = function() {                                                                        // 528\n    return _.pluck(this._fields, \"_id\");                                                                       // 529\n};                                                                                                             // 530\n                                                                                                               // 531\nAT.prototype.getRoutePath = function(route) {                                                                  // 532\n    return \"#\";                                                                                                // 533\n};                                                                                                             // 534\n                                                                                                               // 535\nAT.prototype.oauthServices = function() {                                                                      // 536\n  // Extracts names of available services                                                                      // 537\n  var names;                                                                                                   // 538\n                                                                                                               // 539\n  if (Meteor.isServer) {                                                                                       // 540\n    names = (Accounts.oauth && Accounts.oauth.serviceNames()) || [];                                           // 541\n  } else {                                                                                                     // 542\n    names = (Accounts.oauth && Accounts.loginServicesConfigured() && Accounts.oauth.serviceNames()) || [];     // 543\n  }                                                                                                            // 544\n  // Extracts names of configured services                                                                     // 545\n  var configuredServices = [];                                                                                 // 546\n                                                                                                               // 547\n  if (Accounts.loginServiceConfiguration) {                                                                    // 548\n    configuredServices = _.pluck(Accounts.loginServiceConfiguration.find().fetch(), \"service\");                // 549\n  }                                                                                                            // 550\n                                                                                                               // 551\n  // Builds a list of objects containing service name as _id and its configuration status                      // 552\n  var services = _.map(names, function(name) {                                                                 // 553\n    return {                                                                                                   // 554\n      _id : name,                                                                                              // 555\n      configured: _.contains(configuredServices, name),                                                        // 556\n    };                                                                                                         // 557\n  });                                                                                                          // 558\n                                                                                                               // 559\n  // Checks whether there is a UI to configure services...                                                     // 560\n  // XXX: this only works with the accounts-ui package                                                         // 561\n  var showUnconfigured = typeof Accounts._loginButtonsSession !== \"undefined\";                                 // 562\n                                                                                                               // 563\n  // Filters out unconfigured services in case they\"re not to be displayed                                     // 564\n  if (!showUnconfigured) {                                                                                     // 565\n    services = _.filter(services, function(service) {                                                          // 566\n      return service.configured;                                                                               // 567\n    });                                                                                                        // 568\n  }                                                                                                            // 569\n                                                                                                               // 570\n  // Sorts services by name                                                                                    // 571\n  services = _.sortBy(services, function(service) {                                                            // 572\n    return service._id;                                                                                        // 573\n  });                                                                                                          // 574\n                                                                                                               // 575\n  return services;                                                                                             // 576\n};                                                                                                             // 577\n                                                                                                               // 578\nAT.prototype.removeField = function(fieldId) {                                                                 // 579\n  // Fields can be removed only before initialization                                                          // 580\n  if (this._initialized) {                                                                                     // 581\n    throw new Error(\"AccountsTemplates.removeField should strictly be called before AccountsTemplates.init!\"); // 582\n  }                                                                                                            // 583\n  // Tries to look up the field with given _id                                                                 // 584\n  var index = _.indexOf(_.pluck(this._fields, \"_id\"), fieldId);                                                // 585\n                                                                                                               // 586\n  if (index !== -1) {                                                                                          // 587\n    return this._fields.splice(index, 1)[0];                                                                   // 588\n  } else if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, fieldId))) {                                 // 589\n    throw new Error(\"A field called \" + fieldId + \" does not exist!\");                                         // 590\n  }                                                                                                            // 591\n};                                                                                                             // 592\n                                                                                                               // 593\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts:core/lib/server.js                                                                    //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/* global                                                                                                      // 1\n  AT: false,                                                                                                   // 2\n  AccountsTemplates: false                                                                                     // 3\n*/                                                                                                             // 4\n\"use strict\";                                                                                                  // 5\n                                                                                                               // 6\n// Initialization                                                                                              // 7\nAT.prototype.init = function() {                                                                               // 8\n  console.warn(\"[AccountsTemplates] There is no more need to call AccountsTemplates.init()! Simply remove the call ;-)\");\n};                                                                                                             // 10\n                                                                                                               // 11\nAT.prototype._init = function() {                                                                              // 12\n  if (this._initialized) {                                                                                     // 13\n    return;                                                                                                    // 14\n  }                                                                                                            // 15\n                                                                                                               // 16\n  // Checks there is at least one account service installed                                                    // 17\n  if (!Package[\"accounts-password\"] && (!Accounts.oauth || Accounts.oauth.serviceNames().length === 0)) {      // 18\n    throw Error(\"AccountsTemplates: You must add at least one account service!\");                              // 19\n  }                                                                                                            // 20\n                                                                                                               // 21\n  // A password field is strictly required                                                                     // 22\n  var password = this.getField(\"password\");                                                                    // 23\n  if (!password) {                                                                                             // 24\n    throw Error(\"A password field is strictly required!\");                                                     // 25\n  }                                                                                                            // 26\n                                                                                                               // 27\n  if (password.type !== \"password\") {                                                                          // 28\n    throw Error(\"The type of password field should be password!\");                                             // 29\n  }                                                                                                            // 30\n                                                                                                               // 31\n  // Then we can have \"username\" or \"email\" or even both of them                                               // 32\n  // but at least one of the two is strictly required                                                          // 33\n  var username = this.getField(\"username\");                                                                    // 34\n  var email = this.getField(\"email\");                                                                          // 35\n                                                                                                               // 36\n  if (!username && !email) {                                                                                   // 37\n    throw Error(\"At least one field out of username and email is strictly required!\");                         // 38\n  }                                                                                                            // 39\n                                                                                                               // 40\n  if (username && !username.required) {                                                                        // 41\n    throw Error(\"The username field should be required!\");                                                     // 42\n  }                                                                                                            // 43\n                                                                                                               // 44\n  if (email) {                                                                                                 // 45\n    if (email.type !== \"email\") {                                                                              // 46\n      throw Error(\"The type of email field should be email!\");                                                 // 47\n    }                                                                                                          // 48\n                                                                                                               // 49\n    if (username) {                                                                                            // 50\n      // username and email                                                                                    // 51\n      if (username.type !== \"text\") {                                                                          // 52\n        throw Error(\"The type of username field should be text when email field is present!\");                 // 53\n      }                                                                                                        // 54\n    } else {                                                                                                   // 55\n      // email only                                                                                            // 56\n      if (!email.required) {                                                                                   // 57\n        throw Error(\"The email field should be required when username is not present!\");                       // 58\n      }                                                                                                        // 59\n    }                                                                                                          // 60\n  } else {                                                                                                     // 61\n    // username only                                                                                           // 62\n    if (username.type !== \"text\" && username.type !== \"tel\") {                                                 // 63\n      throw Error(\"The type of username field should be text or tel!\");                                        // 64\n    }                                                                                                          // 65\n  }                                                                                                            // 66\n                                                                                                               // 67\n  // Possibly publish more user data in order to be able to show add/remove                                    // 68\n  // buttons for 3rd-party services                                                                            // 69\n  if (this.options.showAddRemoveServices) {                                                                    // 70\n    // Publish additional current user info to get the list of registered services                             // 71\n    // XXX TODO: use                                                                                           // 72\n    // Accounts.addAutopublishFields({                                                                         // 73\n    //   forLoggedInUser: ['services.facebook'],                                                               // 74\n    //   forOtherUsers: [],                                                                                    // 75\n    // })                                                                                                      // 76\n    // ...adds only user.services.*.id                                                                         // 77\n    Meteor.publish(\"userRegisteredServices\", function() {                                                      // 78\n      var userId = this.userId;                                                                                // 79\n      return Meteor.users.find(userId, {fields: {services: 1}});                                               // 80\n      /*                                                                                                       // 81\n      if (userId) {                                                                                            // 82\n        var user = Meteor.users.findOne(userId);                                                               // 83\n        var services_id = _.chain(user.services)                                                               // 84\n          .keys()                                                                                              // 85\n          .reject(function(service) {return service === \"resume\";})                                            // 86\n          .map(function(service) {return \"services.\" + service + \".id\";})                                      // 87\n          .value();                                                                                            // 88\n        var projection = {};                                                                                   // 89\n        _.each(services_id, function(key) {projection[key] = 1;});                                             // 90\n        return Meteor.users.find(userId, {fields: projection});                                                // 91\n      }                                                                                                        // 92\n      */                                                                                                       // 93\n    });                                                                                                        // 94\n  }                                                                                                            // 95\n                                                                                                               // 96\n  // Security stuff                                                                                            // 97\n  if (this.options.overrideLoginErrors) {                                                                      // 98\n    Accounts.validateLoginAttempt(function(attempt) {                                                          // 99\n      if (attempt.error) {                                                                                     // 100\n        var reason = attempt.error.reason;                                                                     // 101\n        if (reason === \"User not found\" || reason === \"Incorrect password\") {                                  // 102\n          throw new Meteor.Error(403, AccountsTemplates.texts.errors.loginForbidden);                          // 103\n        }                                                                                                      // 104\n      }                                                                                                        // 105\n      return attempt.allowed;                                                                                  // 106\n    });                                                                                                        // 107\n  }                                                                                                            // 108\n                                                                                                               // 109\n  if (this.options.sendVerificationEmail && this.options.enforceEmailVerification) {                           // 110\n    Accounts.validateLoginAttempt(function(attempt) {                                                          // 111\n      if (!attempt.allowed) {                                                                                  // 112\n        return false;                                                                                          // 113\n      }                                                                                                        // 114\n                                                                                                               // 115\n      if (attempt.type !== \"password\" || attempt.methodName !== \"login\") {                                     // 116\n        return attempt.allowed;                                                                                // 117\n      }                                                                                                        // 118\n                                                                                                               // 119\n      var user = attempt.user;                                                                                 // 120\n      if (!user) {                                                                                             // 121\n        return attempt.allowed;                                                                                // 122\n      }                                                                                                        // 123\n                                                                                                               // 124\n      var ok = true;                                                                                           // 125\n      var loginEmail = attempt.methodArguments[0].user.email;                                                  // 126\n      if (loginEmail) {                                                                                        // 127\n        var email = _.filter(user.emails, function(obj) {                                                      // 128\n          return obj.address === loginEmail;                                                                   // 129\n        });                                                                                                    // 130\n        if (!email.length || !email[0].verified) {                                                             // 131\n          ok = false;                                                                                          // 132\n        }                                                                                                      // 133\n      } else {                                                                                                 // 134\n        // we got the username, lets check there's at lease one verified email                                 // 135\n        var emailVerified = _.chain(user.emails)                                                               // 136\n        .pluck('verified')                                                                                     // 137\n        .any()                                                                                                 // 138\n        .value();                                                                                              // 139\n                                                                                                               // 140\n        if (!emailVerified) {                                                                                  // 141\n          ok = false;                                                                                          // 142\n        }                                                                                                      // 143\n      }                                                                                                        // 144\n      if (!ok) {                                                                                               // 145\n        throw new Meteor.Error(401, AccountsTemplates.texts.errors.verifyEmailFirst);                          // 146\n      }                                                                                                        // 147\n                                                                                                               // 148\n      return attempt.allowed;                                                                                  // 149\n    });                                                                                                        // 150\n  }                                                                                                            // 151\n                                                                                                               // 152\n  //Check that reCaptcha secret keys are available                                                             // 153\n  if (this.options.showReCaptcha) {                                                                            // 154\n    var atSecretKey = AccountsTemplates.options.reCaptcha && AccountsTemplates.options.reCaptcha.secretKey;    // 155\n    var settingsSecretKey = Meteor.settings.reCaptcha && Meteor.settings.reCaptcha.secretKey;                  // 156\n                                                                                                               // 157\n    if (!atSecretKey && !settingsSecretKey) {                                                                  // 158\n      throw new Meteor.Error(401, \"User Accounts: reCaptcha secret key not found! Please provide it or set showReCaptcha to false.\" );\n    }                                                                                                          // 160\n  }                                                                                                            // 161\n                                                                                                               // 162\n  // Marks AccountsTemplates as initialized                                                                    // 163\n  this._initialized = true;                                                                                    // 164\n};                                                                                                             // 165\n                                                                                                               // 166\nAccountsTemplates = new AT();                                                                                  // 167\n                                                                                                               // 168\n// Client side account creation is disabled by default:                                                        // 169\n// the methos ATCreateUserServer is used instead!                                                              // 170\n// to actually disable client side account creation use:                                                       // 171\n//                                                                                                             // 172\n//    AccountsTemplates.config({                                                                               // 173\n//        forbidClientAccountCreation: true                                                                    // 174\n//    });                                                                                                      // 175\n                                                                                                               // 176\nAccounts.config({                                                                                              // 177\n  forbidClientAccountCreation: true                                                                            // 178\n});                                                                                                            // 179\n                                                                                                               // 180\n// Initialization                                                                                              // 181\nMeteor.startup(function() {                                                                                    // 182\n  AccountsTemplates._init();                                                                                   // 183\n});                                                                                                            // 184\n                                                                                                               // 185\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts:core/lib/methods.js                                                                   //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/* global                                                                                                      // 1\n  AccountsTemplates: false                                                                                     // 2\n*/                                                                                                             // 3\n\"use strict\";                                                                                                  // 4\n                                                                                                               // 5\nMeteor.methods({                                                                                               // 6\n  ATRemoveService: function(serviceName) {                                                                     // 7\n    check(serviceName, String);                                                                                // 8\n                                                                                                               // 9\n    var userId = this.userId;                                                                                  // 10\n                                                                                                               // 11\n    if (userId) {                                                                                              // 12\n      var user = Meteor.users.findOne(userId);                                                                 // 13\n      var numServices = _.keys(user.services).length; // including \"resume\"                                    // 14\n      var unset = {};                                                                                          // 15\n                                                                                                               // 16\n      if (numServices === 2) {                                                                                 // 17\n        throw new Meteor.Error(403, AccountsTemplates.texts.errors.cannotRemoveService, {});                   // 18\n      }                                                                                                        // 19\n                                                                                                               // 20\n      unset[\"services.\" + serviceName] = \"\";                                                                   // 21\n      Meteor.users.update(userId, {$unset: unset});                                                            // 22\n    }                                                                                                          // 23\n  },                                                                                                           // 24\n});                                                                                                            // 25\n                                                                                                               // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts:core/lib/server_methods.js                                                            //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/* global                                                                                                      // 1\n  AccountsTemplates                                                                                            // 2\n*/                                                                                                             // 3\n\"use strict\";                                                                                                  // 4\n                                                                                                               // 5\nMeteor.methods({                                                                                               // 6\n  ATCreateUserServer: function(options) {                                                                      // 7\n    if (AccountsTemplates.options.forbidClientAccountCreation) {                                               // 8\n      throw new Meteor.Error(403, AccountsTemplates.texts.errors.accountsCreationDisabled);                    // 9\n    }                                                                                                          // 10\n                                                                                                               // 11\n    // createUser() does more checking.                                                                        // 12\n    check(options, Object);                                                                                    // 13\n    var allFieldIds = AccountsTemplates.getFieldIds();                                                         // 14\n                                                                                                               // 15\n    // Picks-up whitelisted fields for profile                                                                 // 16\n    var profile = options.profile;                                                                             // 17\n    profile = _.pick(profile, allFieldIds);                                                                    // 18\n    profile = _.omit(profile, \"username\", \"email\", \"password\");                                                // 19\n                                                                                                               // 20\n    // Validates fields\" value                                                                                 // 21\n    var signupInfo = _.clone(profile);                                                                         // 22\n    if (options.username) {                                                                                    // 23\n      signupInfo.username = options.username;                                                                  // 24\n                                                                                                               // 25\n      if (AccountsTemplates.options.lowercaseUsername) {                                                       // 26\n        signupInfo.username = signupInfo.username.trim().replace(/\\s+/gm, ' ');                                // 27\n        options.profile.name = signupInfo.username;                                                            // 28\n        signupInfo.username = signupInfo.username.toLowerCase().replace(/\\s+/gm, '');                          // 29\n        options.username = signupInfo.username;                                                                // 30\n      }                                                                                                        // 31\n    }                                                                                                          // 32\n                                                                                                               // 33\n    if (options.email) {                                                                                       // 34\n      signupInfo.email = options.email;                                                                        // 35\n                                                                                                               // 36\n      if (AccountsTemplates.options.lowercaseUsername) {                                                       // 37\n        signupInfo.email = signupInfo.email.toLowerCase().replace(/\\s+/gm, '');                                // 38\n        options.email = signupInfo.email;                                                                      // 39\n      }                                                                                                        // 40\n    }                                                                                                          // 41\n                                                                                                               // 42\n    if (options.password) {                                                                                    // 43\n      signupInfo.password = options.password;                                                                  // 44\n    }                                                                                                          // 45\n                                                                                                               // 46\n    var validationErrors = {};                                                                                 // 47\n    var someError = false;                                                                                     // 48\n                                                                                                               // 49\n    // Validates fields values                                                                                 // 50\n    _.each(AccountsTemplates.getFields(), function(field) {                                                    // 51\n      var fieldId = field._id;                                                                                 // 52\n      var value = signupInfo[fieldId];                                                                         // 53\n                                                                                                               // 54\n      if (fieldId === \"password\") {                                                                            // 55\n        // Can\"t Pick-up password here                                                                         // 56\n        // NOTE: at this stage the password is already encripted,                                              // 57\n        //       so there is no way to validate it!!!                                                          // 58\n        check(value, Object);                                                                                  // 59\n        return;                                                                                                // 60\n      }                                                                                                        // 61\n                                                                                                               // 62\n      var validationErr = field.validate(value, \"strict\");                                                     // 63\n      if (validationErr) {                                                                                     // 64\n        validationErrors[fieldId] = validationErr;                                                             // 65\n        someError = true;                                                                                      // 66\n      }                                                                                                        // 67\n    });                                                                                                        // 68\n                                                                                                               // 69\n    if (AccountsTemplates.options.showReCaptcha) {                                                             // 70\n      var secretKey = null;                                                                                    // 71\n                                                                                                               // 72\n      if (AccountsTemplates.options.reCaptcha && AccountsTemplates.options.reCaptcha.secretKey) {              // 73\n        secretKey = AccountsTemplates.options.reCaptcha.secretKey;                                             // 74\n      } else {                                                                                                 // 75\n        secretKey = Meteor.settings.reCaptcha.secretKey;                                                       // 76\n      }                                                                                                        // 77\n                                                                                                               // 78\n      var apiResponse = HTTP.post(\"https://www.google.com/recaptcha/api/siteverify\", {                         // 79\n        params: {                                                                                              // 80\n          secret: secretKey,                                                                                   // 81\n          response: options.profile.reCaptchaResponse,                                                         // 82\n          remoteip: this.connection.clientAddress,                                                             // 83\n        }                                                                                                      // 84\n      }).data;                                                                                                 // 85\n                                                                                                               // 86\n      if (!apiResponse.success) {                                                                              // 87\n        throw new Meteor.Error(403, AccountsTemplates.texts.errors.captchaVerification,                        // 88\n          apiResponse['error-codes'] ? apiResponse['error-codes'].join(\", \") : \"Unknown Error.\");              // 89\n      }                                                                                                        // 90\n    }                                                                                                          // 91\n                                                                                                               // 92\n    if (someError) {                                                                                           // 93\n      throw new Meteor.Error(403, AccountsTemplates.texts.errors.validationErrors, validationErrors);          // 94\n    }                                                                                                          // 95\n                                                                                                               // 96\n    // Possibly removes the profile field                                                                      // 97\n    if (_.isEmpty(options.profile)) {                                                                          // 98\n      delete options.profile;                                                                                  // 99\n    }                                                                                                          // 100\n                                                                                                               // 101\n    // Create user. result contains id and token.                                                              // 102\n    var userId = Accounts.createUser(options);                                                                 // 103\n    // safety belt. createUser is supposed to throw on error. send 500 error                                   // 104\n    // instead of sending a verification email with empty userid.                                              // 105\n    if (! userId) {                                                                                            // 106\n      throw new Error(\"createUser failed to insert new user\");                                                 // 107\n    }                                                                                                          // 108\n                                                                                                               // 109\n    // Send a email address verification email in case the context permits it                                  // 110\n    // and the specific configuration flag was set to true                                                     // 111\n    if (options.email && AccountsTemplates.options.sendVerificationEmail) {                                    // 112\n      Accounts.sendVerificationEmail(userId, options.email);                                                   // 113\n    }                                                                                                          // 114\n  },                                                                                                           // 115\n                                                                                                               // 116\n  // Resend a user's verification e-mail                                                                       // 117\n  ATResendVerificationEmail: function (email) {                                                                // 118\n    check(email, String);                                                                                      // 119\n                                                                                                               // 120\n    var user = Meteor.users.findOne({ \"emails.address\": email });                                              // 121\n                                                                                                               // 122\n    // Send the standard error back to the client if no user exist with this e-mail                            // 123\n    if (!user) {                                                                                               // 124\n      throw new Meteor.Error(403, \"User not found\");                                                           // 125\n    }                                                                                                          // 126\n                                                                                                               // 127\n    try {                                                                                                      // 128\n      Accounts.sendVerificationEmail(user._id);                                                                // 129\n    } catch (error) {                                                                                          // 130\n      // Handle error when email already verified                                                              // 131\n      // https://github.com/dwinston/send-verification-email-bug                                               // 132\n      throw new Meteor.Error(403, \"Already verified\");                                                         // 133\n    }                                                                                                          // 134\n  },                                                                                                           // 135\n});                                                                                                            // 136\n                                                                                                               // 137\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
{"version":3,"sources":["meteor://ðŸ’»app/packages/msavin_mongol/packages/msavin_mongol.js"],"names":[],"mappingsfile":"/packages/msavin_mongol.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/msavin:mongol/lib/common.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nMeteorToysDict = Package[\"meteortoys:toykit\"].MeteorToysDict;                                                          // 1\n                                                                                                                       // 2\nif (Mongol === undefined) {                                                                                            // 3\n                                                                                                                       // 4\n  // Create object and reserve name across the package                                                                 // 5\n  Mongol = {};                                                                                                         // 6\n                                                                                                                       // 7\n}                                                                                                                      // 8\n                                                                                                                       // 9\nMongol = {                                                                                                             // 10\n  'colorize': function (json) {                                                                                        // 11\n    // colorized the JSON objects                                                                                      // 12\n    if (typeof json != 'string') {                                                                                     // 13\n      json = JSON.stringify(json, undefined, 2);                                                                       // 14\n    }                                                                                                                  // 15\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');                                    // 16\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function(match) {\n      var cls = 'Mongol_number';                                                                                       // 18\n      if (/^\"/.test(match)) {                                                                                          // 19\n        if (/:$/.test(match)) {                                                                                        // 20\n          cls = 'Mongol_key';                                                                                          // 21\n        } else {                                                                                                       // 22\n          cls = 'Mongol_string';                                                                                       // 23\n        }                                                                                                              // 24\n      } else if (/true|false/.test(match)) {                                                                           // 25\n        cls = 'Mongol_boolean';                                                                                        // 26\n      } else if (/null/.test(match)) {                                                                                 // 27\n        cls = 'Mongol_null';                                                                                           // 28\n      }                                                                                                                // 29\n      return '<span class=\"' + cls + '\">' + match + '</span>';                                                         // 30\n    });                                                                                                                // 31\n  },                                                                                                                   // 32\n  'getDocumentUpdate': function (data) {                                                                               // 33\n                                                                                                                       // 34\n    var elementID = 'MongolDoc_' + data,                                                                               // 35\n      newData = document.getElementById(elementID).textContent;                                                        // 36\n                                                                                                                       // 37\n    return newData;                                                                                                    // 38\n                                                                                                                       // 39\n  },                                                                                                                   // 40\n  'error': function (data) {                                                                                           // 41\n                                                                                                                       // 42\n    switch (data) {                                                                                                    // 43\n      case \"json.parse\":                                                                                               // 44\n        alert(\"There is an error with your JSON syntax.\\n\\nNote: keys and string values need double quotes.\");         // 45\n        break;                                                                                                         // 46\n      case \"duplicate\":                                                                                                // 47\n        alert(\"Strange, there was an error duplicating your document.\");                                               // 48\n        break;                                                                                                         // 49\n      case \"remove\":                                                                                                   // 50\n        alert(\"Strange, there was an error removing your document.\");                                                  // 51\n        break;                                                                                                         // 52\n      case \"insert\":                                                                                                   // 53\n        alert(\"Strange, there was an error inserting your document.\");                                                 // 54\n        break;                                                                                                         // 55\n      case \"update\":                                                                                                   // 56\n        alert(\"There was an error updating your document. Please review your changes and try again.\");                 // 57\n        break;                                                                                                         // 58\n      default:                                                                                                         // 59\n        return \"Unknown Error\";                                                                                        // 60\n        break;                                                                                                         // 61\n    }                                                                                                                  // 62\n                                                                                                                       // 63\n  },                                                                                                                   // 64\n  'parse': function (data) {                                                                                           // 65\n    var newObject = false;                                                                                             // 66\n                                                                                                                       // 67\n    try {                                                                                                              // 68\n      newObject = JSON.parse(data);                                                                                    // 69\n    }                                                                                                                  // 70\n                                                                                                                       // 71\n    catch (error) {                                                                                                    // 72\n      Mongol.error(\"json.parse\");                                                                                      // 73\n    }                                                                                                                  // 74\n                                                                                                                       // 75\n    return newObject;                                                                                                  // 76\n                                                                                                                       // 77\n  },                                                                                                                   // 78\n  'setSubscriptionKeys': function () {                                                                                 // 79\n                                                                                                                       // 80\n      // var subscriptions  = Meteor.default_connection._subscriptions,                                                // 81\n          // subKeys        = Object.keys(subscriptions);                                                              // 82\n                                                                                                                       // 83\n          // MeteorToysDict.set(\"MeteorToys_PubSub\", subKeys)                                                          // 84\n                                                                                                                       // 85\n  },                                                                                                                   // 86\n  'detectCollections': function () {                                                                                   // 87\n    if (MeteorToysDict.get('Mongol') === undefined) {                                                                  // 88\n        // Note: this returns the actual mongo collection name                                                         // 89\n        var collections = _.map(Mongo.Collection.getAll(), function (collection) {                                     // 90\n        return collection.name;                                                                                        // 91\n      });                                                                                                              // 92\n                                                                                                                       // 93\n      var defaults = {                                                                                                 // 94\n        'collections': collections,                                                                                    // 95\n      };                                                                                                               // 96\n                                                                                                                       // 97\n      MeteorToysDict.set(\"Mongol\", defaults);                                                                          // 98\n                                                                                                                       // 99\n    }                                                                                                                  // 100\n  },                                                                                                                   // 101\n  'hideCollection': function (collectionName) {                                                                        // 102\n                                                                                                                       // 103\n    var MongolConfig = MeteorToysDict.get(\"Mongol\"),                                                                   // 104\n        collections  = MongolConfig.collections;                                                                       // 105\n                                                                                                                       // 106\n    collections = _.without(collections, collectionName);                                                              // 107\n    MongolConfig.collections = collections;                                                                            // 108\n    MeteorToysDict.set(\"Mongol\", MongolConfig);                                                                        // 109\n                                                                                                                       // 110\n  },                                                                                                                   // 111\n  'hideVelocity': function () {                                                                                        // 112\n    this.hideCollection('velocityTestFiles');                                                                          // 113\n    this.hideCollection('velocityFixtureFiles');                                                                       // 114\n    this.hideCollection('velocityTestReports');                                                                        // 115\n    this.hideCollection('velocityAggregateReports');                                                                   // 116\n    this.hideCollection('velocityLogs');                                                                               // 117\n    this.hideCollection('velocityMirrors');                                                                            // 118\n    this.hideCollection('velocityOptions');                                                                            // 119\n  },                                                                                                                   // 120\n  'hideMeteorToys': function () {                                                                                      // 121\n    this.hideCollection(\"MeteorToys_Impersonate\");                                                                     // 122\n    this.hideCollection(\"MeteorToys_JetSetter\");                                                                       // 123\n    this.hideCollection(\"MeteorToys_Mongol\");                                                                          // 124\n    this.hideCollection(\"MeteorToys_AutoPub\");                                                                         // 125\n  },                                                                                                                   // 126\n  'showCollection': function (collectionName) {                                                                        // 127\n                                                                                                                       // 128\n    // In case a collection does not get detected, like a local one                                                    // 129\n    var MongolConfig = MeteorToysDict.get(\"Mongol\"),                                                                   // 130\n        collections  = MongolConfig.collections;                                                                       // 131\n                                                                                                                       // 132\n    collections.push(collectionName);                                                                                  // 133\n                                                                                                                       // 134\n    MeteorToysDict.set(\"Mongol\", MongolConfig);                                                                        // 135\n                                                                                                                       // 136\n  },                                                                                                                   // 137\n  'Collection': function (collectionName) {                                                                            // 138\n                                                                                                                       // 139\n                                                                                                                       // 140\n    // Go through a variety of means of trying to return the correct collection                                        // 141\n    return Mongo.Collection.get(collectionName)                                                                        // 142\n      // This should automatically match all collections by default                                                    // 143\n      // including namespaced collections                                                                              // 144\n                                                                                                                       // 145\n    || ((Meteor.isServer) ? eval(collectionName) : Meteor._get.apply(null,[window].concat(collectionName.split('.')))) // 146\n    // For user defined collection names                                                                               // 147\n    // in the form of Meteor's Mongo.Collection names as strings                                                       // 148\n                                                                                                                       // 149\n    || ((Meteor.isServer) ? eval(firstToUpper(collectionName)) : Meteor._get.apply(null,[window].concat(firstToUpper(collectionName).split('.'))))\n    // For user defined collections where the user has typical upper-case collection names                             // 151\n    // but they've put actual mongodb collection names into the Mongol config instead of Meteor's Mongo.Collection names as strings\n                                                                                                                       // 153\n    || null;                                                                                                           // 154\n    // If the user has gone for unconventional casing of collection names,                                             // 155\n    // they'll have to get them right (i.e. Meteor's Mongo.Collection names as string) in the Mongol config manually   // 156\n                                                                                                                       // 157\n    // Changes the first character of a string to upper case                                                           // 158\n                                                                                                                       // 159\n      function firstToUpper(text) {                                                                                    // 160\n                                                                                                                       // 161\n        return text.charAt(0).toUpperCase() + text.substr(1);                                                          // 162\n                                                                                                                       // 163\n      }                                                                                                                // 164\n                                                                                                                       // 165\n  },                                                                                                                   // 166\n  'register': function(spec) {                                                                                         // 167\n    originalSet = MeteorToysDict.get(\"Mongol_Extensions\");                                                             // 168\n    if (originalSet) {                                                                                                 // 169\n      originalSet = [spec];                                                                                            // 170\n    } else {                                                                                                           // 171\n      originalSet.push(spec);                                                                                          // 172\n    }                                                                                                                  // 173\n                                                                                                                       // 174\n  }                                                                                                                    // 175\n}                                                                                                                      // 176\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/msavin:mongol/server/methods.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// // // // // // // // // // // // // // // // // // // // // //                                                      // 1\n//                                                                                                                     // 2\n// TODO:                                                                                                               // 3\n// - For update, diff document changes and use $set for changes                                                        // 4\n//   to control date fields from database level                                                                        // 5\n// - For duplicate, use actual MongoDB duplicate function                                                              // 6\n//                                                                                                                     // 7\n// Pull request welcome here!                                                                                          // 8\n//                                                                                                                     // 9\n// // // // // // // // // // // // // // // // // // // // // //                                                      // 10\n                                                                                                                       // 11\nvar dateParser = function (updatedDocumentData) {                                                                      // 12\n                                                                                                                       // 13\n  // Purpose: Convert date strings to Date()                                                                           // 14\n  // This is hacky but works in most cases                                                                             // 15\n  // Won't merge into Mongol namespace until its good                                                                  // 16\n                                                                                                                       // 17\n  currentDocument = updatedDocumentData;                                                                               // 18\n  revisedDocument = currentDocument;                                                                                   // 19\n                                                                                                                       // 20\n  // Loop over object                                                                                                  // 21\n  // Replace date strings with dates                                                                                   // 22\n  for (var key in currentDocument) {                                                                                   // 23\n    if (currentDocument.hasOwnProperty(key)) {                                                                         // 24\n                                                                                                                       // 25\n      var t_self = currentDocument[key],                                                                               // 26\n          t_date;                                                                                                      // 27\n                                                                                                                       // 28\n                                                                                                                       // 29\n      if (t_self) {                                                                                                    // 30\n        // check its a string to avoid hooking t/f values                                                              // 31\n        if (typeof t_self === 'string') {                                                                              // 32\n        // ensure its not just a number                                                                                // 33\n        // need a stronger test here                                                                                   // 34\n          if (/\\s/g.test(t_self)) {                                                                                    // 35\n            // attempt to convert to date                                                                              // 36\n            t_date = new Date(t_self);                                                                                 // 37\n          }                                                                                                            // 38\n        }                                                                                                              // 39\n      }                                                                                                                // 40\n                                                                                                                       // 41\n      if (Object.prototype.toString.call(t_date) === '[object Date]') {                                                // 42\n        if ( isNaN( t_date.getTime() ) ) {                                                                             // 43\n           // do nothing                                                                                               // 44\n         }                                                                                                             // 45\n         else {                                                                                                        // 46\n           revisedDocument[key] = t_date;                                                                              // 47\n         }                                                                                                             // 48\n      }                                                                                                                // 49\n                                                                                                                       // 50\n    }                                                                                                                  // 51\n  }                                                                                                                    // 52\n                                                                                                                       // 53\n  // return the processed document                                                                                     // 54\n  return revisedDocument;                                                                                              // 55\n                                                                                                                       // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\nvar insertDoc = function (MongolCollection, documentData) {                                                            // 59\n                                                                                                                       // 60\n  check(MongolCollection, Match.Any);                                                                                  // 61\n  check(documentData, Match.Any);                                                                                      // 62\n                                                                                                                       // 63\n  if (!!Package['aldeed:simple-schema'] && !!Package['aldeed:collection2'] && _.isFunction(MongolCollection.simpleSchema) && MongolCollection._c2) {\n    // This is to nullify the effects of SimpleSchema/Collection2                                                      // 65\n    newId = MongolCollection.insert(documentData, {                                                                    // 66\n      filter: false,                                                                                                   // 67\n      autoConvert: false,                                                                                              // 68\n      removeEmptyStrings: false,                                                                                       // 69\n      validate: false                                                                                                  // 70\n    });                                                                                                                // 71\n  }                                                                                                                    // 72\n  else {                                                                                                               // 73\n    newId = MongolCollection.insert(documentData);                                                                     // 74\n  }                                                                                                                    // 75\n  return newId;                                                                                                        // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nMeteor.methods({                                                                                                       // 79\n  Mongol_update: function (collectionName, documentData, originalDocumentData) {                                       // 80\n                                                                                                                       // 81\n    check(collectionName, String);                                                                                     // 82\n    check(documentData, Object);                                                                                       // 83\n    check(originalDocumentData, Object);                                                                               // 84\n                                                                                                                       // 85\n    var MongolCollection = Mongol.Collection(collectionName),                                                          // 86\n      documentID = documentData._id;                                                                                   // 87\n                                                                                                                       // 88\n    var currentDbDoc = MongolCollection.findOne({                                                                      // 89\n      _id: documentID                                                                                                  // 90\n    }, {                                                                                                               // 91\n      transform: null                                                                                                  // 92\n    });                                                                                                                // 93\n                                                                                                                       // 94\n    if (!currentDbDoc) {                                                                                               // 95\n      // A document with this _id value is not in the db                                                               // 96\n      // Do an insert instead                                                                                          // 97\n      Meteor.call(\"Mongol_insert\", collectionName, documentData);                                                      // 98\n      return;                                                                                                          // 99\n    }                                                                                                                  // 100\n                                                                                                                       // 101\n    delete documentData._id;                                                                                           // 102\n    delete originalDocumentData._id;                                                                                   // 103\n    delete currentDbDoc._id;                                                                                           // 104\n                                                                                                                       // 105\n    var updatedDocumentData = Mongol.diffDocumentData(currentDbDoc, documentData, originalDocumentData),               // 106\n        revisedDocument     = dateParser(updatedDocumentData);                                                         // 107\n                                                                                                                       // 108\n                                                                                                                       // 109\n    // Check for packages                                                                                              // 110\n                                                                                                                       // 111\n    if (!!Package['aldeed:simple-schema'] && !!Package['aldeed:collection2'] && _.isFunction(MongolCollection.simpleSchema) && MongolCollection._c2) {\n                                                                                                                       // 113\n      // This is to nullify the effects of SimpleSchema/Collection2                                                    // 114\n      // Using `upsert` means that a user can change the _id value in the JSON                                         // 115\n      // and then press the 'Update' button to create a duplicate (published keys/values only) with a different _id    // 116\n                                                                                                                       // 117\n      MongolCollection.update({                                                                                        // 118\n        _id: documentID                                                                                                // 119\n      }, {$set: revisedDocument}, {                                                                                    // 120\n        filter: false,                                                                                                 // 121\n        autoConvert: false,                                                                                            // 122\n        removeEmptyStrings: false,                                                                                     // 123\n        validate: false                                                                                                // 124\n      });                                                                                                              // 125\n                                                                                                                       // 126\n      return;                                                                                                          // 127\n    }                                                                                                                  // 128\n                                                                                                                       // 129\n    // Run the magic                                                                                                   // 130\n    MongolCollection.update({                                                                                          // 131\n        _id: documentID                                                                                                // 132\n      },                                                                                                               // 133\n      revisedDocument                                                                                                  // 134\n    );                                                                                                                 // 135\n                                                                                                                       // 136\n  },                                                                                                                   // 137\n  Mongol_remove: function (collectionName, documentID, doNotTrash) {                                                   // 138\n                                                                                                                       // 139\n    check(collectionName, String);                                                                                     // 140\n    check(documentID, String);                                                                                         // 141\n    check(doNotTrash, Match.Any);                                                                                      // 142\n                                                                                                                       // 143\n                                                                                                                       // 144\n    var MongolCollection = Mongol.Collection(collectionName);                                                          // 145\n    var docToBeRemoved = MongolCollection.findOne(documentID, {transform: null});                                      // 146\n    MongolCollection.remove(documentID);                                                                               // 147\n                                                                                                                       // 148\n    // Start Trash Can                                                                                                 // 149\n    if(typeof doNotTrash === 'undefined') {                                                                            // 150\n      if (Package[\"meteortoys:toypro\"]) {                                                                              // 151\n        targetCollection        = Mongol.Collection(\"MeteorToys_Mongol\");                                              // 152\n        trashDocument           = docToBeRemoved;                                                                      // 153\n        trashDocument[\"Mongol_origin\"] = String(collectionName);                                                       // 154\n        trashDocument[\"Mongol_date\"]   = new Date();                                                                   // 155\n        targetCollection.insert(trashDocument);                                                                        // 156\n      }                                                                                                                // 157\n    }                                                                                                                  // 158\n    // End Trash Can                                                                                                   // 159\n                                                                                                                       // 160\n    return docToBeRemoved;                                                                                             // 161\n                                                                                                                       // 162\n  },                                                                                                                   // 163\n  Mongol_duplicate: function (collectionName, documentID) {                                                            // 164\n                                                                                                                       // 165\n    check(collectionName, String);                                                                                     // 166\n    check(documentID, String);                                                                                         // 167\n                                                                                                                       // 168\n    var MongolCollection = Mongol.Collection(collectionName),                                                          // 169\n        OriginalDoc      = MongolCollection.findOne(documentID, {transform: null});                                    // 170\n                                                                                                                       // 171\n    if (OriginalDoc) {                                                                                                 // 172\n                                                                                                                       // 173\n      delete OriginalDoc._id;                                                                                          // 174\n                                                                                                                       // 175\n      // Convert date strings to Date()                                                                                // 176\n      var revisedDocument = dateParser(OriginalDoc);;                                                                  // 177\n                                                                                                                       // 178\n      var NewDocumentId = insertDoc(MongolCollection, revisedDocument);                                                // 179\n                                                                                                                       // 180\n      return NewDocumentId;                                                                                            // 181\n                                                                                                                       // 182\n    }                                                                                                                  // 183\n                                                                                                                       // 184\n  },                                                                                                                   // 185\n  Mongol_insert: function(collectionName, documentData) {                                                              // 186\n                                                                                                                       // 187\n    check(collectionName, String);                                                                                     // 188\n    check(documentData, Object);                                                                                       // 189\n                                                                                                                       // 190\n    var MongolCollection = Mongol.Collection(collectionName),                                                          // 191\n        newId = null;                                                                                                  // 192\n                                                                                                                       // 193\n    if (documentData._id && MongolCollection.findOne({_id: documentData._id}, {transform: null})) {                    // 194\n      console.log('Duplicate _id found');                                                                              // 195\n      return null;                                                                                                     // 196\n    }                                                                                                                  // 197\n                                                                                                                       // 198\n    revisedDocument = dateParser(documentData);                                                                        // 199\n                                                                                                                       // 200\n                                                                                                                       // 201\n    // Insert it                                                                                                       // 202\n                                                                                                                       // 203\n    var newId = insertDoc(MongolCollection, revisedDocument);                                                          // 204\n                                                                                                                       // 205\n    return newId;                                                                                                      // 206\n                                                                                                                       // 207\n  },                                                                                                                   // 208\n});                                                                                                                    // 209\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/msavin:mongol/server/utility_functions.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This function takes three data points into account:                                                                 // 1\n                                                                                                                       // 2\n// 1) the actual document as it stands on the server, prior to being updated                                           // 3\n// 2) the oldData that was on the client before the user pressed save                                                  // 4\n// 3) the newData that the client is trying to save                                                                    // 5\n                                                                                                                       // 6\n// This function decides which fields it is going to make writes to on this basis:                                     // 7\n// 1) The field(s) being overwritten must appear in the db doc and on the client oldData                               // 8\n//    (if they only appear in the oldData these must have been added dynamically on the client                         // 9\n//     and we don't want to save these fields to the db)                                                               // 10\n//    -- this includes fields that are being removed (i.e. they must appear in the db doc and the oldData)             // 11\n// 2) Only fields that appear in the newData, but not the oldData or db doc can be added                               // 12\n//    (if it appears in the db doc, throw an error that says:                                                          // 13\n//     \"There is an unpublished field in the database with that name. Update cannot be made.\")                         // 14\n                                                                                                                       // 15\n// The ramifications of all this:                                                                                      // 16\n// You can only update/remove fields that are published                                                                // 17\n// You can only add new fields if they don't exist in the db already                                                   // 18\n                                                                                                                       // 19\n                                                                                                                       // 20\nMongol.diffDocumentData = function (dbDoc, newData, oldData) {                                                         // 21\n                                                                                                                       // 22\n  // TODO -- recurse into subdocuments, performing checks                                                              // 23\n  // using the Meteor._get function (as seen in /common/common.js)                                                     // 24\n                                                                                                                       // 25\n  var finalData = {};                                                                                                  // 26\n                                                                                                                       // 27\n  var dbDocFields = _.keys(dbDoc),                                                                                     // 28\n    newDataFields = _.keys(newData),                                                                                   // 29\n    oldDataFields = _.keys(oldData); // console.log(\"dbDocFields\",dbDocFields); console.log(\"newDataFields\",newDataFields); console.log(\"oldDataFields\",oldDataFields);\n                                                                                                                       // 31\n  // First get the set of fields that we won't be saving because they were dynamically added on the client             // 32\n                                                                                                                       // 33\n  var dynamicallyAddedFields = _.difference(oldDataFields, dbDocFields);                                               // 34\n                                                                                                                       // 35\n  // The get the fields that must retain their dbDoc field value, because they we'ren't published                      // 36\n                                                                                                                       // 37\n  var unpublishedFields = _.difference(dbDocFields, oldDataFields); // console.log(\"unpublishedFields\",unpublishedFields);\n                                                                                                                       // 39\n  // iterate over all fields, old and new, and ascertain the field value that must be added to the final data object   // 40\n                                                                                                                       // 41\n  var oldAndNewFields = _.union(dbDocFields, newDataFields);                                                           // 42\n                                                                                                                       // 43\n  _.each(oldAndNewFields, function(field) {                                                                            // 44\n                                                                                                                       // 45\n    if (_.contains(dynamicallyAddedFields, field)) {                                                                   // 46\n                                                                                                                       // 47\n      // We don't want to add this field to the actual mongodb document                                                // 48\n      console.log(\"'\" + field + \"' appears to be a dynamically added field. This field was not updated.\");             // 49\n      return;                                                                                                          // 50\n                                                                                                                       // 51\n    }                                                                                                                  // 52\n                                                                                                                       // 53\n    if (_.contains(unpublishedFields, field)) {                                                                        // 54\n                                                                                                                       // 55\n      // We don't want to overwrite the existing mondodb document value                                                // 56\n      if (newData[field]) {                                                                                            // 57\n        // Give a message to user as to why that field wasn't updated                                                  // 58\n        console.log(\"'\" + field + \"' is an unpublished field. This field's value was not overwritten.\");               // 59\n      }                                                                                                                // 60\n      // Make sure the old value is retained                                                                           // 61\n      finalData[field] = dbDoc[field];                                                                                 // 62\n      return;                                                                                                          // 63\n                                                                                                                       // 64\n    }                                                                                                                  // 65\n                                                                                                                       // 66\n    finalData[field] = newData[field];                                                                                 // 67\n                                                                                                                       // 68\n    // This will let unpublished fields into the database,                                                             // 69\n    // so the user may be confused by the lack of an update in the client                                              // 70\n    // simply because the added field isn't published                                                                  // 71\n    // The following solves that problem, but doesn't allow new fields to be published at all:                         // 72\n    //     finalData[field] = oldData[field] && newData[field];                                                        // 73\n    // We actually need to know the set of fields published by the publication that the client side doc came from      // 74\n    // but how do we get that?                                                                                         // 75\n                                                                                                                       // 76\n  });                                                                                                                  // 77\n                                                                                                                       // 78\n  return finalData;                                                                                                    // 79\n                                                                                                                       // 80\n};                                                                                                                     // 81\n                                                                                                                       // 82\n// Test code for Mongol.diffDocumentData                                                                               // 83\n                                                                                                                       // 84\n/*Meteor.startup(function() {                                                                                          // 85\n                                                                                                                       // 86\n  // Take a user document                                                                                              // 87\n  var sampleDbDoc = { \"_id\" : \"exampleuser1\", \"createdAt\" : 1375253926213, \"defaultPrograms\" : { \"514d75dc97d9562095578800\" : \"MYP\", \"515be9e6a57068c708000000\" : \"PYP\" }, \"department_id\" : [  \"GMsv9YzaCuL6dFBYL\" ], \"emails\" : [  {  \"address\" : \"babrahams@wab.edu\",  \"verified\" : true } ], \"myCourses\" : [  \"QqofG3XyEtQPgFb72\",  \"fvTxhAyfMxFbhzwK7\",  \"jcPtgwN2t6pTMQDEp\" ], \"organization_id\" : [  \"51f76bcb45623dfb1e0d3100\" ], \"permContexts\" : [ \t{ \t\"department_id\" : \"GMsv9YzaCuL6dFBYL\", \"perms\" : [ \t\"editRoles\", \t\"editCourses\", \t\"editUnits\", \t\"editAssessments\", \t\"editDepartments\" ] } ], \"roleContexts\" : [ \t{ \t\"organization_id\" : \"51f76bcb45623dfb1e0d3100\", \t\"school_id\" : \"514d75dc97d9562095578800\", \t\"department_id\" : \"GMsv9YzaCuL6dFBYL\", \t\"roles\" : [ \t\"iQD4BhnB8PFWwHCcg\" ] }, \t{ \t\"organization_id\" : \"2BjJbMyRLWa4iofQm\" } ], \"school_id\" : [  \"514d75dc97d9562095578800\" ], \"services\" : { \"password\" : { \"bcrypt\" : \"$2a$10$M55xiZA6rX0EwZ6xBk3Rre6/J5s3XUunre5.5ijyU3.ilpYZQFmtO\" }, \"resume\" : { \"loginTokens\" : [ \t{ \t\"when\" : \"2014-12-24T12:00:06.725Z\", \t\"hashedToken\" : \"not/telling=\" }, \t{ \t\"when\" : \"2015-01-16T04:45:10.574Z\", \t\"hashedToken\" : \"bigbadhashedtoken=\" }, \t{ \t\"when\" : \"2015-01-22T02:01:57.671Z\", \t\"hashedToken\" : \"9HSCRUygOiPYgmUsmWA5jcYutqKnjT9OByHPA6LbBB8=\" } ] } }, \"superuser\" : [  \"51f76bcb45623dfb1e0d3100\",  \"2BjJbMyRLWa4iofQm\",  \"ZkeRkDEEcp72bAFQY\" ], \"transaction_id\" : \"shQ9fzcZYSgLLnptC\" };\n                                                                                                                       // 89\n  // Simulate the oldData getting sent back from the client (the fields should be a subset of the db fields)           // 90\n  var sampleOldData = _.extend(_.clone(sampleDbDoc),{dynamicallyAddedField:true, secondDynamicallyAddedField: \"Dynamically added value\"}); // Simulate two dynamically added fields\n  delete sampleOldData.services; // Simulate an unpublished field                                                      // 92\n                                                                                                                       // 93\n  // Simulate the newData getting sent back from the client                                                            // 94\n  // e.g. user adds a new field                                                                                        // 95\n  var sampleNewData = _.extend(_.clone(sampleOldData),{brandNewField: true});                                          // 96\n  // brandNewField should be added                                                                                     // 97\n  delete sampleNewData.createdAt; // This should be gone                                                               // 98\n  sampleNewData.secondDynamicallyAddedField = \"Dynamically added value overwritten by user\"; // seconddynamicallyAddedField should be gone\n  sampleNewData.transaction_id = \"overwritten transaction id\"; // This field should be changed                         // 100\n                                                                                                                       // 101\n  // Run the test                                                                                                      // 102\n                                                                                                                       // 103\n  console.log(Mongol.diffDocumentData(sampleDbDoc, sampleNewData, sampleOldData));                                     // 104\n                                                                                                                       // 105\n});*/                                                                                                                  // 106\n                                                                                                                       // 107\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
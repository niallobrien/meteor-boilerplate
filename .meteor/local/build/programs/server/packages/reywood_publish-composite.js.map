{"version":3,"sources":["meteor://ðŸ’»app/packages/reywood_publish-composite/packages/reywood_publish-composite.js"],"names":[],"mappingsfile":"/packages/reywood_publish-composite.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reywood:publish-composite/lib/doc_ref_counter.js                                                        //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nDocumentRefCounter = function(observer) {                                                                           // 1\n    this.heap = {};                                                                                                 // 2\n    this.observer = observer;                                                                                       // 3\n};                                                                                                                  // 4\n                                                                                                                    // 5\nDocumentRefCounter.prototype.increment = function(collectionName, docId) {                                          // 6\n    var key = collectionName + \":\" + docId.valueOf();                                                               // 7\n    if (!this.heap[key]) {                                                                                          // 8\n        this.heap[key] = 0;                                                                                         // 9\n    }                                                                                                               // 10\n    this.heap[key]++;                                                                                               // 11\n};                                                                                                                  // 12\n                                                                                                                    // 13\nDocumentRefCounter.prototype.decrement = function(collectionName, docId) {                                          // 14\n    var key = collectionName + \":\" + docId.valueOf();                                                               // 15\n    if (this.heap[key]) {                                                                                           // 16\n        this.heap[key]--;                                                                                           // 17\n                                                                                                                    // 18\n        this.observer.onChange(collectionName, docId, this.heap[key]);                                              // 19\n    }                                                                                                               // 20\n};                                                                                                                  // 21\n                                                                                                                    // 22\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reywood:publish-composite/lib/publication.js                                                            //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nPublication = function Publication(subscription, options, args) {                                                   // 1\n    this.subscription = subscription;                                                                               // 2\n    this.options = options;                                                                                         // 3\n    this.args = args || [];                                                                                         // 4\n    this.childrenOptions = options.children || [];                                                                  // 5\n    this.publishedDocs = new PublishedDocumentList();                                                               // 6\n    this.collectionName = options.collectionName;                                                                   // 7\n};                                                                                                                  // 8\n                                                                                                                    // 9\nPublication.prototype.publish = function publish() {                                                                // 10\n    this.cursor = this._getCursor();                                                                                // 11\n                                                                                                                    // 12\n    if (!this.cursor) { return; }                                                                                   // 13\n                                                                                                                    // 14\n    var collectionName = this._getCollectionName();                                                                 // 15\n    var self = this;                                                                                                // 16\n                                                                                                                    // 17\n    this.observeHandle = this.cursor.observe({                                                                      // 18\n        added: function added(doc) {                                                                                // 19\n            var alreadyPublished = self.publishedDocs.has(doc._id);                                                 // 20\n                                                                                                                    // 21\n            if (alreadyPublished) {                                                                                 // 22\n                debugLog('Publication.observeHandle.added', collectionName + ':' + doc._id + ' already published'); // 23\n                self.publishedDocs.unflagForRemoval(doc._id);                                                       // 24\n                self.subscription.changed(collectionName, doc._id, doc);                                            // 25\n                self._republishChildrenOf(doc);                                                                     // 26\n            } else {                                                                                                // 27\n                self.publishedDocs.add(collectionName, doc._id);                                                    // 28\n                self.subscription.added(collectionName, doc);                                                       // 29\n                self._publishChildrenOf(doc);                                                                       // 30\n            }                                                                                                       // 31\n        },                                                                                                          // 32\n        changed: function changed(newDoc) {                                                                         // 33\n            debugLog('Publication.observeHandle.changed', collectionName + ':' + newDoc._id);                       // 34\n            self._republishChildrenOf(newDoc);                                                                      // 35\n        },                                                                                                          // 36\n        removed: function removed(doc) {                                                                            // 37\n            debugLog('Publication.observeHandle.removed', collectionName + ':' + doc._id);                          // 38\n            self._removeDoc(collectionName, doc._id);                                                               // 39\n        }                                                                                                           // 40\n    });                                                                                                             // 41\n                                                                                                                    // 42\n    this.observeChangesHandle = this.cursor.observeChanges({                                                        // 43\n        changed: function changed(id, fields) {                                                                     // 44\n            debugLog('Publication.observeChangesHandle.changed', collectionName + ':' + id);                        // 45\n            self.subscription.changed(collectionName, id, fields);                                                  // 46\n        }                                                                                                           // 47\n    });                                                                                                             // 48\n};                                                                                                                  // 49\n                                                                                                                    // 50\nPublication.prototype.unpublish = function unpublish() {                                                            // 51\n    debugLog('Publication.unpublish', this._getCollectionName());                                                   // 52\n    this._stopObservingCursor();                                                                                    // 53\n    this._unpublishAllDocuments();                                                                                  // 54\n};                                                                                                                  // 55\n                                                                                                                    // 56\nPublication.prototype._republish = function _republish() {                                                          // 57\n    this._stopObservingCursor();                                                                                    // 58\n                                                                                                                    // 59\n    this.publishedDocs.flagAllForRemoval();                                                                         // 60\n                                                                                                                    // 61\n    debugLog('Publication._republish', 'run .publish again');                                                       // 62\n    this.publish();                                                                                                 // 63\n                                                                                                                    // 64\n    debugLog('Publication._republish', 'unpublish docs from old cursor');                                           // 65\n    this._removeFlaggedDocs();                                                                                      // 66\n};                                                                                                                  // 67\n                                                                                                                    // 68\nPublication.prototype._getCursor = function _getCursor() {                                                          // 69\n    return this.options.find.apply(this.subscription.meteorSub, this.args);                                         // 70\n};                                                                                                                  // 71\n                                                                                                                    // 72\nPublication.prototype._getCollectionName = function _getCollectionName() {                                          // 73\n    return this.collectionName || (this.cursor && this.cursor._getCollectionName());                                // 74\n};                                                                                                                  // 75\n                                                                                                                    // 76\nPublication.prototype._publishChildrenOf = function _publishChildrenOf(doc) {                                       // 77\n    _.each(this.childrenOptions, function createChildPublication(options) {                                         // 78\n        var pub = new Publication(this.subscription, options, [ doc ].concat(this.args));                           // 79\n        this.publishedDocs.addChildPub(doc._id, pub);                                                               // 80\n        pub.publish();                                                                                              // 81\n    }, this);                                                                                                       // 82\n};                                                                                                                  // 83\n                                                                                                                    // 84\nPublication.prototype._republishChildrenOf = function _republishChildrenOf(doc) {                                   // 85\n    this.publishedDocs.eachChildPub(doc._id, function(publication) {                                                // 86\n        publication.args[0] = doc;                                                                                  // 87\n        publication._republish();                                                                                   // 88\n    });                                                                                                             // 89\n};                                                                                                                  // 90\n                                                                                                                    // 91\nPublication.prototype._unpublishAllDocuments = function _unpublishAllDocuments() {                                  // 92\n    this.publishedDocs.eachDocument(function(doc) {                                                                 // 93\n        this._removeDoc(doc.collectionName, doc.docId);                                                             // 94\n    }, this);                                                                                                       // 95\n};                                                                                                                  // 96\n                                                                                                                    // 97\nPublication.prototype._stopObservingCursor = function _stopObservingCursor() {                                      // 98\n    debugLog('Publication._stopObservingCursor', 'stop observing cursor');                                          // 99\n                                                                                                                    // 100\n    if (this.observeHandle) {                                                                                       // 101\n        this.observeHandle.stop();                                                                                  // 102\n        delete this.observeHandle;                                                                                  // 103\n    }                                                                                                               // 104\n                                                                                                                    // 105\n    if (this.observeChangesHandle) {                                                                                // 106\n        this.observeChangesHandle.stop();                                                                           // 107\n        delete this.observeChangesHandle;                                                                           // 108\n    }                                                                                                               // 109\n};                                                                                                                  // 110\n                                                                                                                    // 111\nPublication.prototype._removeFlaggedDocs = function _removeFlaggedDocs() {                                          // 112\n    this.publishedDocs.eachDocument(function(doc) {                                                                 // 113\n        if (doc.isFlaggedForRemoval()) {                                                                            // 114\n            this._removeDoc(doc.collectionName, doc.docId);                                                         // 115\n        }                                                                                                           // 116\n    }, this);                                                                                                       // 117\n};                                                                                                                  // 118\n                                                                                                                    // 119\nPublication.prototype._removeDoc = function _removeDoc(collectionName, docId) {                                     // 120\n    this.subscription.removed(collectionName, docId);                                                               // 121\n    this._unpublishChildrenOf(docId);                                                                               // 122\n    this.publishedDocs.remove(docId);                                                                               // 123\n};                                                                                                                  // 124\n                                                                                                                    // 125\nPublication.prototype._unpublishChildrenOf = function _unpublishChildrenOf(docId) {                                 // 126\n    debugLog('Publication._unpublishChildrenOf', 'unpublishing children of ' + this._getCollectionName() + ':' + docId);\n                                                                                                                    // 128\n    this.publishedDocs.eachChildPub(docId, function(publication) {                                                  // 129\n        publication.unpublish();                                                                                    // 130\n    });                                                                                                             // 131\n};                                                                                                                  // 132\n                                                                                                                    // 133\n                                                                                                                    // 134\nvar PublishedDocumentList = function() {                                                                            // 135\n    this.documents = {};                                                                                            // 136\n};                                                                                                                  // 137\n                                                                                                                    // 138\nPublishedDocumentList.prototype.add = function add(collectionName, docId) {                                         // 139\n    var key = docId.valueOf();                                                                                      // 140\n                                                                                                                    // 141\n    if (!this.documents[key]) {                                                                                     // 142\n        this.documents[key] = new PublishedDocument(collectionName, docId);                                         // 143\n    }                                                                                                               // 144\n};                                                                                                                  // 145\n                                                                                                                    // 146\nPublishedDocumentList.prototype.addChildPub = function addChildPub(docId, publication) {                            // 147\n    if (!publication) { return; }                                                                                   // 148\n                                                                                                                    // 149\n    var key = docId.valueOf();                                                                                      // 150\n    var doc = this.documents[key];                                                                                  // 151\n                                                                                                                    // 152\n    if (typeof doc === 'undefined') {                                                                               // 153\n        throw new Error('Doc not found in list: ' + key);                                                           // 154\n    }                                                                                                               // 155\n                                                                                                                    // 156\n    this.documents[key].addChildPub(publication);                                                                   // 157\n};                                                                                                                  // 158\n                                                                                                                    // 159\nPublishedDocumentList.prototype.get = function get(docId) {                                                         // 160\n    var key = docId.valueOf();                                                                                      // 161\n    return this.documents[key];                                                                                     // 162\n};                                                                                                                  // 163\n                                                                                                                    // 164\nPublishedDocumentList.prototype.remove = function remove(docId) {                                                   // 165\n    var key = docId.valueOf();                                                                                      // 166\n    delete this.documents[key];                                                                                     // 167\n};                                                                                                                  // 168\n                                                                                                                    // 169\nPublishedDocumentList.prototype.has = function has(docId) {                                                         // 170\n    return !!this.get(docId);                                                                                       // 171\n};                                                                                                                  // 172\n                                                                                                                    // 173\nPublishedDocumentList.prototype.eachDocument = function eachDocument(callback, context) {                           // 174\n    _.each(this.documents, function execCallbackOnDoc(doc) {                                                        // 175\n        callback.call(this, doc);                                                                                   // 176\n    }, context || this);                                                                                            // 177\n};                                                                                                                  // 178\n                                                                                                                    // 179\nPublishedDocumentList.prototype.eachChildPub = function eachChildPub(docId, callback) {                             // 180\n    var doc = this.get(docId);                                                                                      // 181\n                                                                                                                    // 182\n    if (doc) {                                                                                                      // 183\n        doc.eachChildPub(callback);                                                                                 // 184\n    }                                                                                                               // 185\n};                                                                                                                  // 186\n                                                                                                                    // 187\nPublishedDocumentList.prototype.getIds = function getIds() {                                                        // 188\n    var docIds = [];                                                                                                // 189\n                                                                                                                    // 190\n    this.eachDocument(function(doc) {                                                                               // 191\n        docIds.push(doc.docId);                                                                                     // 192\n    });                                                                                                             // 193\n                                                                                                                    // 194\n    return docIds;                                                                                                  // 195\n};                                                                                                                  // 196\n                                                                                                                    // 197\nPublishedDocumentList.prototype.unflagForRemoval = function unflagForRemoval(docId) {                               // 198\n    var doc = this.get(docId);                                                                                      // 199\n                                                                                                                    // 200\n    if (doc) {                                                                                                      // 201\n        doc.unflagForRemoval();                                                                                     // 202\n    }                                                                                                               // 203\n};                                                                                                                  // 204\n                                                                                                                    // 205\nPublishedDocumentList.prototype.flagAllForRemoval = function flagAllForRemoval() {                                  // 206\n    this.eachDocument(function flag(doc) {                                                                          // 207\n        doc.flagForRemoval();                                                                                       // 208\n    });                                                                                                             // 209\n};                                                                                                                  // 210\n                                                                                                                    // 211\n                                                                                                                    // 212\nvar PublishedDocument = function(collectionName, docId) {                                                           // 213\n    this.collectionName = collectionName;                                                                           // 214\n    this.docId = docId;                                                                                             // 215\n    this.childPublications = [];                                                                                    // 216\n    this._isFlaggedForRemoval = false;                                                                              // 217\n};                                                                                                                  // 218\n                                                                                                                    // 219\nPublishedDocument.prototype.addChildPub = function addChildPub(childPublication) {                                  // 220\n    this.childPublications.push(childPublication);                                                                  // 221\n};                                                                                                                  // 222\n                                                                                                                    // 223\nPublishedDocument.prototype.eachChildPub = function eachChildPub(callback) {                                        // 224\n    for (var i = 0; i < this.childPublications.length; i++) {                                                       // 225\n        callback(this.childPublications[i]);                                                                        // 226\n    }                                                                                                               // 227\n};                                                                                                                  // 228\n                                                                                                                    // 229\nPublishedDocument.prototype.isFlaggedForRemoval = function isFlaggedForRemoval() {                                  // 230\n    return this._isFlaggedForRemoval;                                                                               // 231\n};                                                                                                                  // 232\n                                                                                                                    // 233\nPublishedDocument.prototype.unflagForRemoval = function unflagForRemoval() {                                        // 234\n    this._isFlaggedForRemoval = false;                                                                              // 235\n};                                                                                                                  // 236\n                                                                                                                    // 237\nPublishedDocument.prototype.flagForRemoval = function flagForRemoval() {                                            // 238\n    this._isFlaggedForRemoval = true;                                                                               // 239\n};                                                                                                                  // 240\n                                                                                                                    // 241\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reywood:publish-composite/lib/subscription.js                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nSubscription = function(meteorSub) {                                                                                // 1\n    var self = this;                                                                                                // 2\n    this.meteorSub = meteorSub;                                                                                     // 3\n    this.docHash = {};                                                                                              // 4\n    this.refCounter = new DocumentRefCounter({                                                                      // 5\n        onChange: function(collectionName, docId, refCount) {                                                       // 6\n            debugLog(\"Subscription.refCounter.onChange\", collectionName + \":\" + docId.valueOf() + \" \" + refCount);  // 7\n            if (refCount <= 0) {                                                                                    // 8\n                meteorSub.removed(collectionName, docId);                                                           // 9\n                self._removeDocHash(collectionName, docId);                                                         // 10\n            }                                                                                                       // 11\n        }                                                                                                           // 12\n    });                                                                                                             // 13\n};                                                                                                                  // 14\n                                                                                                                    // 15\nSubscription.prototype.added = function(collectionName, doc) {                                                      // 16\n    this.refCounter.increment(collectionName, doc._id);                                                             // 17\n                                                                                                                    // 18\n    if (this._hasDocChanged(collectionName, doc._id, doc)) {                                                        // 19\n        debugLog(\"Subscription.added\", collectionName + \":\" + doc._id);                                             // 20\n        this.meteorSub.added(collectionName, doc._id, doc);                                                         // 21\n        this._addDocHash(collectionName, doc);                                                                      // 22\n    }                                                                                                               // 23\n};                                                                                                                  // 24\n                                                                                                                    // 25\nSubscription.prototype.changed = function(collectionName, id, changes) {                                            // 26\n    if (this._shouldSendChanges(collectionName, id, changes)) {                                                     // 27\n        debugLog(\"Subscription.changed\", collectionName + \":\" + id);                                                // 28\n        this.meteorSub.changed(collectionName, id, changes);                                                        // 29\n        this._updateDocHash(collectionName, id, changes);                                                           // 30\n    }                                                                                                               // 31\n};                                                                                                                  // 32\n                                                                                                                    // 33\nSubscription.prototype.removed = function(collectionName, id) {                                                     // 34\n    debugLog(\"Subscription.removed\", collectionName + \":\" + id.valueOf());                                          // 35\n    this.refCounter.decrement(collectionName, id);                                                                  // 36\n};                                                                                                                  // 37\n                                                                                                                    // 38\nSubscription.prototype._addDocHash = function(collectionName, doc) {                                                // 39\n    this.docHash[this._buildHashKey(collectionName, doc._id)] = doc;                                                // 40\n};                                                                                                                  // 41\n                                                                                                                    // 42\nSubscription.prototype._updateDocHash = function(collectionName, id, changes) {                                     // 43\n    var key = this._buildHashKey(collectionName, id);                                                               // 44\n    var existingDoc = this.docHash[key] || {};                                                                      // 45\n    this.docHash[key] = _.extend(existingDoc, changes);                                                             // 46\n};                                                                                                                  // 47\n                                                                                                                    // 48\nSubscription.prototype._shouldSendChanges = function(collectionName, id, changes) {                                 // 49\n    return this._isDocPublished(collectionName, id) &&                                                              // 50\n        this._hasDocChanged(collectionName, id, changes);                                                           // 51\n};                                                                                                                  // 52\n                                                                                                                    // 53\nSubscription.prototype._isDocPublished = function(collectionName, id) {                                             // 54\n    var key = this._buildHashKey(collectionName, id);                                                               // 55\n    return !!this.docHash[key];                                                                                     // 56\n};                                                                                                                  // 57\n                                                                                                                    // 58\nSubscription.prototype._hasDocChanged = function(collectionName, id, doc) {                                         // 59\n    var existingDoc = this.docHash[this._buildHashKey(collectionName, id)];                                         // 60\n                                                                                                                    // 61\n    if (!existingDoc) { return true; }                                                                              // 62\n                                                                                                                    // 63\n    for (var i in doc) {                                                                                            // 64\n        if (doc.hasOwnProperty(i) && !_.isEqual(doc[i], existingDoc[i])) {                                          // 65\n            return true;                                                                                            // 66\n        }                                                                                                           // 67\n    }                                                                                                               // 68\n                                                                                                                    // 69\n    return false;                                                                                                   // 70\n};                                                                                                                  // 71\n                                                                                                                    // 72\nSubscription.prototype._removeDocHash = function(collectionName, id) {                                              // 73\n    var key = this._buildHashKey(collectionName, id);                                                               // 74\n    delete this.docHash[key];                                                                                       // 75\n};                                                                                                                  // 76\n                                                                                                                    // 77\nSubscription.prototype._buildHashKey = function(collectionName, id) {                                               // 78\n    return collectionName + \"::\" + id.valueOf();                                                                    // 79\n};                                                                                                                  // 80\n                                                                                                                    // 81\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reywood:publish-composite/lib/publish_composite.js                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nMeteor.publishComposite = function(name, options) {                                                                 // 1\n    return Meteor.publish(name, function() {                                                                        // 2\n        var subscription = new Subscription(this);                                                                  // 3\n        var args = Array.prototype.slice.apply(arguments);                                                          // 4\n        var instanceOptions = prepareOptions.call(this, options, args);                                             // 5\n        var pubs = [];                                                                                              // 6\n                                                                                                                    // 7\n        _.each(instanceOptions, function(opt) {                                                                     // 8\n            var pub = new Publication(subscription, opt);                                                           // 9\n            pub.publish();                                                                                          // 10\n            pubs.push(pub);                                                                                         // 11\n        });                                                                                                         // 12\n                                                                                                                    // 13\n        this.onStop(function() {                                                                                    // 14\n            _.each(pubs, function(pub) {                                                                            // 15\n                pub.unpublish();                                                                                    // 16\n            });                                                                                                     // 17\n        });                                                                                                         // 18\n                                                                                                                    // 19\n        this.ready();                                                                                               // 20\n    });                                                                                                             // 21\n};                                                                                                                  // 22\n                                                                                                                    // 23\ndebugLog = function() { };                                                                                          // 24\n                                                                                                                    // 25\nMeteor.publishComposite.enableDebugLogging = function() {                                                           // 26\n    debugLog = function(source, message) {                                                                          // 27\n        while (source.length < 35) { source += ' '; }                                                               // 28\n        console.log('[' + source + '] ' + message);                                                                 // 29\n    };                                                                                                              // 30\n};                                                                                                                  // 31\n                                                                                                                    // 32\nvar prepareOptions = function(options, args) {                                                                      // 33\n    var preparedOptions = options;                                                                                  // 34\n                                                                                                                    // 35\n    if (typeof preparedOptions === 'function') {                                                                    // 36\n        preparedOptions = preparedOptions.apply(this, args);                                                        // 37\n    }                                                                                                               // 38\n                                                                                                                    // 39\n    if (!preparedOptions) {                                                                                         // 40\n        return [];                                                                                                  // 41\n    }                                                                                                               // 42\n                                                                                                                    // 43\n    if (!_.isArray(preparedOptions)) {                                                                              // 44\n        preparedOptions = [ preparedOptions ];                                                                      // 45\n    }                                                                                                               // 46\n                                                                                                                    // 47\n    return preparedOptions;                                                                                         // 48\n};                                                                                                                  // 49\n                                                                                                                    // 50\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
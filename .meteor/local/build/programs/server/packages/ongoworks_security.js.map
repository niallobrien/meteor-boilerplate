{"version":3,"sources":["meteor://ðŸ’»app/packages/ongoworks_security/packages/ongoworks_security.js"],"names":[],"mappingswH","file":"/packages/ongoworks_security.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/ongoworks:security/security-util.js                                                            //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n/* global _, rulesByCollection:true, addFuncForAll:true, ensureCreated:true, ensureDefaultAllow:true */    // 1\n                                                                                                           // 2\nrulesByCollection = {};                                                                                    // 3\n                                                                                                           // 4\nvar created = {                                                                                            // 5\n  allow: {                                                                                                 // 6\n    insert: {},                                                                                            // 7\n    update: {},                                                                                            // 8\n    remove: {},                                                                                            // 9\n    download: {} // for use with CollectionFS packages                                                     // 10\n  },                                                                                                       // 11\n  deny: {                                                                                                  // 12\n    insert: {},                                                                                            // 13\n    update: {},                                                                                            // 14\n    remove: {},                                                                                            // 15\n    download: {} // for use with CollectionFS packages                                                     // 16\n  }                                                                                                        // 17\n};                                                                                                         // 18\n                                                                                                           // 19\n/**                                                                                                        // 20\n * Adds the given function as an allow or deny function for all specified collections and types.           // 21\n * @param {Array(Mongo.Collection)} collections Array of Mongo.Collection instances                        // 22\n * @param {String}                  allowOrDeny \"allow\" or \"deny\"                                          // 23\n * @param {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")              // 24\n * @param {Array(String)|null}      fetch       `fetch` property to use                                    // 25\n * @param {Function}                func        The function                                               // 26\n */                                                                                                        // 27\naddFuncForAll = function addFuncForAll(collections, allowOrDeny, types, fetch, func) {                     // 28\n  // We always disable transformation, but we transform for specific                                       // 29\n  // rules upon running our deny function if requested.                                                    // 30\n  var rules = {transform: null};                                                                           // 31\n  if (_.isArray(fetch)) {                                                                                  // 32\n    rules.fetch = fetch;                                                                                   // 33\n  }                                                                                                        // 34\n  _.each(types, function (t) {                                                                             // 35\n    rules[t] = func;                                                                                       // 36\n  });                                                                                                      // 37\n  _.each(collections, function (c) {                                                                       // 38\n    c[allowOrDeny](rules);                                                                                 // 39\n  });                                                                                                      // 40\n};                                                                                                         // 41\n                                                                                                           // 42\n/**                                                                                                        // 43\n * Creates the allow or deny function for the given collections if not already created. This ensures that this package only ever creates up to one allow and one deny per collection.\n * @param   {String}                  allowOrDeny \"allow\" or \"deny\"                                        // 45\n * @param   {Array(Mongo.Collection)} collections An array of collections                                  // 46\n * @param   {Array(String)}           types       An array of types (\"insert\", \"update\", \"remove\")         // 47\n * @param   {Array(String)|null}      fetch       `fetch` property to use                                  // 48\n * @param   {Function}                func        The function                                             // 49\n */                                                                                                        // 50\nensureCreated = function ensureCreated(allowOrDeny, collections, types, fetch, func) {                     // 51\n  _.each(types, function (t) {                                                                             // 52\n    collections = _.reject(collections, function (c) {                                                     // 53\n      return _.has(created[allowOrDeny][t], c._name);                                                      // 54\n    });                                                                                                    // 55\n    addFuncForAll(collections, allowOrDeny, [t], null, func);                                              // 56\n    // mark that we've defined function for collection-type combo                                          // 57\n    _.each(collections, function (c) {                                                                     // 58\n      created[allowOrDeny][t][c._name] = true;                                                             // 59\n    });                                                                                                    // 60\n  });                                                                                                      // 61\n};                                                                                                         // 62\n                                                                                                           // 63\n/**                                                                                                        // 64\n * Sets up default allow functions for the collections and types.                                          // 65\n * @param   {Array(Mongo.Collection)} collections Array of Mongo.Collection instances                      // 66\n * @param   {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")            // 67\n */                                                                                                        // 68\nensureDefaultAllow = function ensureDefaultAllow(collections, types) {                                     // 69\n  ensureCreated(\"allow\", collections, types, [], function () {                                             // 70\n    return true;                                                                                           // 71\n  });                                                                                                      // 72\n};                                                                                                         // 73\n                                                                                                           // 74\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/ongoworks:security/security-deny.js                                                            //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n/*                                                                                                         // 1\n * A single deny function runs all the deny functions registered by this package, allowing us to have      // 2\n * an OR relationship among multiple security rule chains.                                                 // 3\n */                                                                                                        // 4\n                                                                                                           // 5\nensureSecureDeny = function ensureSecureDeny(collections, types) {                                         // 6\n  _.each(types, function (t) {                                                                             // 7\n    _.each(collections, function (collection) {                                                            // 8\n      var collectionName = collection._name;                                                               // 9\n      ensureCreated(\"deny\", [collection], [t], null, function () {                                         // 10\n        var args = _.toArray(arguments);                                                                   // 11\n        var rules = rulesByCollection[collectionName] || [];                                               // 12\n                                                                                                           // 13\n        // select only those rules that apply to this operation type                                       // 14\n        rules = _.select(rules, function (rule) {                                                          // 15\n          return _.contains(rule._types, t);                                                               // 16\n        });                                                                                                // 17\n                                                                                                           // 18\n        // Loop through all defined rules for this collection. There is an OR relationship among           // 19\n        // all rules for the collection, so if any do NOT return true, we allow.                           // 20\n        return _.every(rules, function (rule) {                                                            // 21\n          return rule.deny(t, collection, args);                                                           // 22\n        });                                                                                                // 23\n      });                                                                                                  // 24\n    });                                                                                                    // 25\n  });                                                                                                      // 26\n};                                                                                                         // 27\n                                                                                                           // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/ongoworks:security/security-api.js                                                             //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n// The `Security` object is exported and provides the package API                                          // 1\nSecurity = {                                                                                               // 2\n  Rule: function SecurityRuleConstructor(types) {                                                          // 3\n    var self = this;                                                                                       // 4\n                                                                                                           // 5\n    if (!_.isArray(types)) {                                                                               // 6\n      types = [types];                                                                                     // 7\n    }                                                                                                      // 8\n    self._types = types;                                                                                   // 9\n    self._restrictions = [];                                                                               // 10\n  },                                                                                                       // 11\n  // the starting point of the chain                                                                       // 12\n  permit: function permit(types) {                                                                         // 13\n    return new Security.Rule(types);                                                                       // 14\n  },                                                                                                       // 15\n  defineMethod: function securityDefineMethod(name, definition) {                                          // 16\n    // Check whether a rule with the given name already exists; can't overwrite                            // 17\n    if (Security.Rule.prototype[name]) {                                                                   // 18\n      throw new Error('A security method with the name \"' + name + '\" has already been defined');          // 19\n    }                                                                                                      // 20\n    // Make sure the definition argument is an object that has a `deny` property                           // 21\n    if (!definition || !definition.deny) {                                                                 // 22\n      throw new Error('Security.defineMethod requires a \"deny\" function');                                 // 23\n    }                                                                                                      // 24\n    // Wrap transform, if provided                                                                         // 25\n    if (definition.transform) {                                                                            // 26\n      definition.transform = LocalCollection.wrapTransform(definition.transform);                          // 27\n    }                                                                                                      // 28\n    Security.Rule.prototype[name] = function (arg) {                                                       // 29\n      var self = this;                                                                                     // 30\n      self._restrictions.push({                                                                            // 31\n        definition: definition,                                                                            // 32\n        arg: arg                                                                                           // 33\n      });                                                                                                  // 34\n      return self;                                                                                         // 35\n    };                                                                                                     // 36\n  }                                                                                                        // 37\n};                                                                                                         // 38\n                                                                                                           // 39\n// Security.Rule prototypes                                                                                // 40\nSecurity.Rule.prototype.collections = function (collections) {                                             // 41\n  var self = this;                                                                                         // 42\n  // Make sure the `collections` argument is either a `Mongo.Collection` instance or                       // 43\n  // an array of them. If it's a single collection, convert it to a one-item array.                        // 44\n  if (!_.isArray(collections)) {                                                                           // 45\n    if (collections instanceof Mongo.Collection) {                                                         // 46\n      collections = [collections];                                                                         // 47\n    } else {                                                                                               // 48\n      throw new Error(\"The collections argument must be a Mongo.Collection instance or an array of them\"); // 49\n    }                                                                                                      // 50\n  }                                                                                                        // 51\n                                                                                                           // 52\n  self._collections = collections;                                                                         // 53\n                                                                                                           // 54\n  // Keep list keyed by collection name                                                                    // 55\n  _.each(collections, function (collection) {                                                              // 56\n    var n = collection._name;                                                                              // 57\n    rulesByCollection[n] = rulesByCollection[n] || [];                                                     // 58\n    rulesByCollection[n].push(self);                                                                       // 59\n  });                                                                                                      // 60\n                                                                                                           // 61\n  return self;                                                                                             // 62\n};                                                                                                         // 63\n                                                                                                           // 64\nSecurity.Rule.prototype.apply = function () {                                                              // 65\n  var self = this;                                                                                         // 66\n                                                                                                           // 67\n  if (!self._collections || !self._types) {                                                                // 68\n    throw new Error(\"At a minimum, you must call permit and collections methods for a security rule.\");    // 69\n  }                                                                                                        // 70\n                                                                                                           // 71\n  // If we haven't yet done so, set up a default, permissive `allow` function for all of                   // 72\n  // the given collections and types. We control all security through `deny` functions only, but           // 73\n  // there must first be at least one `allow` function for each collection or all writes                   // 74\n  // will be denied.                                                                                       // 75\n  ensureDefaultAllow(self._collections, self._types);                                                      // 76\n                                                                                                           // 77\n  // We need a combined `fetch` array. The `fetch` is optional and can be either an array                  // 78\n  // or a function that takes the argument passed to the restriction method and returns an array.          // 79\n  // TODO for now we can't set fetch accurately; maybe need to adjust API so that we \"apply\" only          // 80\n  // after we've defined all rules                                                                         // 81\n  //var fetch = [];                                                                                        // 82\n  //_.each(self._restrictions, function (restriction) {                                                    // 83\n  //  if (_.isArray(restriction.definition.fetch)) {                                                       // 84\n  //    fetch = fetch.concat(restriction.definition.fetch);                                                // 85\n  //  } else if (typeof restriction.definition.fetch === \"function\") {                                     // 86\n  //    fetch = fetch.concat(restriction.definition.fetch(restriction.arg));                               // 87\n  //  }                                                                                                    // 88\n  //});                                                                                                    // 89\n                                                                                                           // 90\n  ensureSecureDeny(self._collections, self._types);                                                        // 91\n                                                                                                           // 92\n};                                                                                                         // 93\n                                                                                                           // 94\nSecurity.Rule.prototype.deny = function (type, collection, args) {                                         // 95\n  var self = this;                                                                                         // 96\n  // Loop through all defined restrictions. Restrictions are additive for this chained                     // 97\n  // rule, so if any deny function returns true, this function should return true.                         // 98\n  return _.any(self._restrictions, function (restriction) {                                                // 99\n    var doc, transform = restriction.definition.transform;                                                 // 100\n                                                                                                           // 101\n    // If transform is a function, apply that                                                              // 102\n    if (typeof transform === 'function') {                                                                 // 103\n      if (type === 'insert') {                                                                             // 104\n        doc = EJSON.clone(args[1]);                                                                        // 105\n        // The wrapped transform requires an _id, but we                                                   // 106\n        // don't have access to the generatedId from Meteor API,                                           // 107\n        // so we'll fudge one and then remove it.                                                          // 108\n        doc._id = Random.id();                                                                             // 109\n      } else {                                                                                             // 110\n        doc = args[1];                                                                                     // 111\n      }                                                                                                    // 112\n      args[1] = transform(doc);                                                                            // 113\n      if (type === 'insert') {                                                                             // 114\n        delete args[1]._id;                                                                                // 115\n      }                                                                                                    // 116\n    }                                                                                                      // 117\n                                                                                                           // 118\n    // If not transform: null, apply the collection transform                                              // 119\n    else if (transform !== null && typeof collection._transform === 'function') {                          // 120\n      if (type === 'insert') {                                                                             // 121\n        doc = EJSON.clone(args[1]);                                                                        // 122\n        // The wrapped transform requires an _id, but we                                                   // 123\n        // don't have access to the generatedId from Meteor API,                                           // 124\n        // so we'll fudge one and then remove it.                                                          // 125\n        doc._id = Random.id();                                                                             // 126\n      } else {                                                                                             // 127\n        doc = args[1];                                                                                     // 128\n      }                                                                                                    // 129\n      args[1] = collection._transform(doc);                                                                // 130\n      if (type === 'insert') {                                                                             // 131\n        delete args[1]._id;                                                                                // 132\n      }                                                                                                    // 133\n    }                                                                                                      // 134\n                                                                                                           // 135\n    return restriction.definition.deny.apply(this, [type, restriction.arg].concat(args));                  // 136\n  });                                                                                                      // 137\n};                                                                                                         // 138\n                                                                                                           // 139\nMongo.Collection.prototype.permit = function (types) {                                                     // 140\n  return Security.permit(types).collections(this);                                                         // 141\n};                                                                                                         // 142\n                                                                                                           // 143\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/ongoworks:security/security-rules.js                                                           //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n/*                                                                                                         // 1\n * This file defines built-in restriction methods                                                          // 2\n */                                                                                                        // 3\n                                                                                                           // 4\n/*                                                                                                         // 5\n * No one                                                                                                  // 6\n */                                                                                                        // 7\n                                                                                                           // 8\nSecurity.defineMethod(\"never\", {                                                                           // 9\n  fetch: [],                                                                                               // 10\n  transform: null,                                                                                         // 11\n  deny: function () {                                                                                      // 12\n    return true;                                                                                           // 13\n  }                                                                                                        // 14\n});                                                                                                        // 15\n                                                                                                           // 16\n/*                                                                                                         // 17\n * Logged In                                                                                               // 18\n */                                                                                                        // 19\n                                                                                                           // 20\nSecurity.defineMethod(\"ifLoggedIn\", {                                                                      // 21\n  fetch: [],                                                                                               // 22\n  transform: null,                                                                                         // 23\n  deny: function (type, arg, userId) {                                                                     // 24\n    return !userId;                                                                                        // 25\n  }                                                                                                        // 26\n});                                                                                                        // 27\n                                                                                                           // 28\n/*                                                                                                         // 29\n * Specific User ID                                                                                        // 30\n */                                                                                                        // 31\n                                                                                                           // 32\nSecurity.defineMethod(\"ifHasUserId\", {                                                                     // 33\n  fetch: [],                                                                                               // 34\n  transform: null,                                                                                         // 35\n  deny: function (type, arg, userId) {                                                                     // 36\n    return userId !== arg;                                                                                 // 37\n  }                                                                                                        // 38\n});                                                                                                        // 39\n                                                                                                           // 40\n/*                                                                                                         // 41\n * Specific Roles                                                                                          // 42\n */                                                                                                        // 43\n                                                                                                           // 44\n/*                                                                                                         // 45\n * alanning:roles support                                                                                  // 46\n */                                                                                                        // 47\nif (Package && Package[\"alanning:roles\"]) {                                                                // 48\n                                                                                                           // 49\n  var Roles = Package[\"alanning:roles\"].Roles;                                                             // 50\n                                                                                                           // 51\n  Security.defineMethod(\"ifHasRole\", {                                                                     // 52\n    fetch: [],                                                                                             // 53\n    transform: null,                                                                                       // 54\n    deny: function (type, arg, userId) {                                                                   // 55\n      if (!arg) {                                                                                          // 56\n        throw new Error('ifHasRole security rule method requires an argument');                            // 57\n      }                                                                                                    // 58\n      if (arg.role) {                                                                                      // 59\n        return !Roles.userIsInRole(userId, arg.role, arg.group);                                           // 60\n      } else {                                                                                             // 61\n        return !Roles.userIsInRole(userId, arg);                                                           // 62\n      }                                                                                                    // 63\n    }                                                                                                      // 64\n  });                                                                                                      // 65\n                                                                                                           // 66\n}                                                                                                          // 67\n                                                                                                           // 68\n/*                                                                                                         // 69\n * nicolaslopezj:roles support                                                                             // 70\n * Note: doesn't support groups                                                                            // 71\n */                                                                                                        // 72\nif (Package && Package[\"nicolaslopezj:roles\"]) {                                                           // 73\n                                                                                                           // 74\n  var Roles = Package[\"nicolaslopezj:roles\"].Roles;                                                        // 75\n                                                                                                           // 76\n  Security.defineMethod(\"ifHasRole\", {                                                                     // 77\n    fetch: [],                                                                                             // 78\n    transform: null,                                                                                       // 79\n    deny: function (type, arg, userId) {                                                                   // 80\n      if (!arg) {                                                                                          // 81\n        throw new Error('ifHasRole security rule method requires an argument');                            // 82\n      }                                                                                                    // 83\n      return !Roles.userHasRole(userId, arg);                                                              // 84\n    }                                                                                                      // 85\n  });                                                                                                      // 86\n                                                                                                           // 87\n}                                                                                                          // 88\n                                                                                                           // 89\n/*                                                                                                         // 90\n * Specific Properties                                                                                     // 91\n */                                                                                                        // 92\n                                                                                                           // 93\nSecurity.defineMethod(\"onlyProps\", {                                                                       // 94\n  fetch: [],                                                                                               // 95\n  transform: null,                                                                                         // 96\n  deny: function (type, arg, userId, doc, fieldNames) {                                                    // 97\n    if (!_.isArray(arg)) {                                                                                 // 98\n      arg = [arg];                                                                                         // 99\n    }                                                                                                      // 100\n                                                                                                           // 101\n    fieldNames = fieldNames || _.keys(doc);                                                                // 102\n                                                                                                           // 103\n    return !_.every(fieldNames, function (fieldName) {                                                     // 104\n      return _.contains(arg, fieldName);                                                                   // 105\n    });                                                                                                    // 106\n  }                                                                                                        // 107\n});                                                                                                        // 108\n                                                                                                           // 109\nSecurity.defineMethod(\"exceptProps\", {                                                                     // 110\n  fetch: [],                                                                                               // 111\n  transform: null,                                                                                         // 112\n  deny: function (type, arg, userId, doc, fieldNames) {                                                    // 113\n    if (!_.isArray(arg)) {                                                                                 // 114\n      arg = [arg];                                                                                         // 115\n    }                                                                                                      // 116\n                                                                                                           // 117\n    fieldNames = fieldNames || _.keys(doc);                                                                // 118\n                                                                                                           // 119\n    return _.any(fieldNames, function (fieldName) {                                                        // 120\n      return _.contains(arg, fieldName);                                                                   // 121\n    });                                                                                                    // 122\n  }                                                                                                        // 123\n});                                                                                                        // 124\n                                                                                                           // 125\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
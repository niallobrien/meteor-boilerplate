{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed_template-extension/packages/aldeed_template-extension.js"],"names":[],"mappingsfile":"/packages/aldeed_template-extension.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed:template-extension/template-extension.js                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/* global Meteor, Template, _, Blaze, $, Tracker */                                                                 // 1\n                                                                                                                    // 2\nvar hookTypes = [\"created\", \"rendered\", \"destroyed\"];                                                               // 3\nvar globalHooks = {created: [], rendered: [], destroyed: []};                                                       // 4\nvar templateHooks = {created: {}, rendered: {}, destroyed: {}};                                                     // 5\n                                                                                                                    // 6\n// Setup for multiple hooks support                                                                                 // 7\n// We assume that no other code will be directly defining                                                           // 8\n// a hook once the client has started.                                                                              // 9\nMeteor.startup(function () {                                                                                        // 10\n  Template.forEach(function (template) {                                                                            // 11\n    defineAllHooks(template);                                                                                       // 12\n  });                                                                                                               // 13\n});                                                                                                                 // 14\n                                                                                                                    // 15\nTemplate.forEach = function (callback) {                                                                            // 16\n  // for some reason we get the \"body\" template twice when looping, so                                              // 17\n  // we track that and only call the callback once.                                                                 // 18\n  var alreadyDidBody = false;                                                                                       // 19\n  for (var t in Template) {                                                                                         // 20\n    if (Template.hasOwnProperty(t)) {                                                                               // 21\n      var tmpl = Template[t];                                                                                       // 22\n      if (Blaze.isTemplate(tmpl)) {                                                                                 // 23\n        if (tmpl.viewName === \"body\") {                                                                             // 24\n          if (!alreadyDidBody) {                                                                                    // 25\n            alreadyDidBody = true;                                                                                  // 26\n            callback(tmpl);                                                                                         // 27\n          }                                                                                                         // 28\n        } else {                                                                                                    // 29\n          callback(tmpl);                                                                                           // 30\n        }                                                                                                           // 31\n      }                                                                                                             // 32\n    }                                                                                                               // 33\n  }                                                                                                                 // 34\n};                                                                                                                  // 35\n                                                                                                                    // 36\nTemplate.onCreated = function (callback) {                                                                          // 37\n  globalHooks.created.push(callback);                                                                               // 38\n};                                                                                                                  // 39\n                                                                                                                    // 40\nTemplate.onRendered = function (callback) {                                                                         // 41\n  globalHooks.rendered.push(callback);                                                                              // 42\n};                                                                                                                  // 43\n                                                                                                                    // 44\nTemplate.onDestroyed = function (callback) {                                                                        // 45\n  globalHooks.destroyed.push(callback);                                                                             // 46\n};                                                                                                                  // 47\n                                                                                                                    // 48\nTemplate.prototype.hooks = function (hooks) {                                                                       // 49\n  var self = this;                                                                                                  // 50\n                                                                                                                    // 51\n  if (typeof hooks !== \"object\") {                                                                                  // 52\n    throw new Error(\"hooks argument must be an object with created, rendered, and/or destroyed properties, each set to a function\");\n  }                                                                                                                 // 54\n                                                                                                                    // 55\n  var name = parseName(self.viewName);                                                                              // 56\n                                                                                                                    // 57\n  // Store a reference to the hooks so they can be called by our own                                                // 58\n  // already defined callbacks                                                                                      // 59\n  var i, type;                                                                                                      // 60\n  for (i = hookTypes.length - 1; i >= 0; i--) {                                                                     // 61\n    type = hookTypes[i];                                                                                            // 62\n    if (typeof hooks[type] === \"function\") {                                                                        // 63\n      templateHooks[type][name] = templateHooks[type][name] || [];                                                  // 64\n      templateHooks[type][name].push(hooks[type]);                                                                  // 65\n    }                                                                                                               // 66\n  }                                                                                                                 // 67\n};                                                                                                                  // 68\n                                                                                                                    // 69\nTemplate.prototype.replaces = function (replacedTemplateName) {                                                     // 70\n  var self = this;                                                                                                  // 71\n  var name = parseName(self.viewName);                                                                              // 72\n                                                                                                                    // 73\n  var replaceRender = function (templateName) {                                                                     // 74\n    var replacedTemplate = Template[templateName];                                                                  // 75\n                                                                                                                    // 76\n    if (!replacedTemplate) {                                                                                        // 77\n      console.warn(\"Can't replace template \" + templateName + \" because it hasn't been defined yet.\");              // 78\n      return;                                                                                                       // 79\n    }                                                                                                               // 80\n                                                                                                                    // 81\n    replacedTemplate.renderFunction = Template[name].renderFunction;                                                // 82\n  };                                                                                                                // 83\n                                                                                                                    // 84\n  // Allow this method to be called with an array or a string                                                       // 85\n  if (_.isArray(replacedTemplateName)) {                                                                            // 86\n    // If called with array, iterate over the template names                                                        // 87\n    _.each(replacedTemplateName, function (templateName) {                                                          // 88\n      replaceRender(templateName);                                                                                  // 89\n    });                                                                                                             // 90\n  } else {                                                                                                          // 91\n    replaceRender(replacedTemplateName);                                                                            // 92\n  }                                                                                                                 // 93\n};                                                                                                                  // 94\n                                                                                                                    // 95\nTemplate.prototype.inheritsHelpersFrom = function (otherTemplateName) {                                             // 96\n  var self = this;                                                                                                  // 97\n  var name = parseName(self.viewName);                                                                              // 98\n  var thisTemplate = Template[name];                                                                                // 99\n                                                                                                                    // 100\n  var inheritHelpers = function (templateName) {                                                                    // 101\n    var otherTemplate = Template[templateName];                                                                     // 102\n    if (!otherTemplate) {                                                                                           // 103\n      console.warn(\"Can't inherit helpers from template \" + templateName + \" because it hasn't been defined yet.\"); // 104\n      return;                                                                                                       // 105\n    }                                                                                                               // 106\n                                                                                                                    // 107\n    if (otherTemplate.__helpers) {                                                                                  // 108\n      thisTemplate.__helpers = $.extend({}, thisTemplate.__helpers, otherTemplate.__helpers);                       // 109\n    }                                                                                                               // 110\n                                                                                                                    // 111\n    else {                                                                                                          // 112\n      // backwards compatibility; pre-0.9.4 Meteor                                                                  // 113\n      for (var h in otherTemplate) {                                                                                // 114\n        if (otherTemplate.hasOwnProperty(h) && (h.slice(0, 2) !== \"__\") && h !== \"viewName\" && h !== \"renderFunction\") {\n          thisTemplate[h] = otherTemplate[h];                                                                       // 116\n        }                                                                                                           // 117\n      }                                                                                                             // 118\n    }                                                                                                               // 119\n  };                                                                                                                // 120\n                                                                                                                    // 121\n  //Accept an array as otherTemplateName argument                                                                   // 122\n  if (_.isArray(otherTemplateName)) {                                                                               // 123\n    _.each(otherTemplateName, function (name) {                                                                     // 124\n      inheritHelpers(name);                                                                                         // 125\n    });                                                                                                             // 126\n  } else { //otherTemplateName is a string                                                                          // 127\n    inheritHelpers(otherTemplateName);                                                                              // 128\n  }                                                                                                                 // 129\n};                                                                                                                  // 130\n                                                                                                                    // 131\nTemplate.prototype.inheritsEventsFrom = function (otherTemplateName) {                                              // 132\n  var self = this;                                                                                                  // 133\n                                                                                                                    // 134\n  var name = parseName(self.viewName);                                                                              // 135\n                                                                                                                    // 136\n  var inheritEvents = function (templateName) {                                                                     // 137\n    // Check for existence of templateName template                                                                 // 138\n    var otherTemplate = Template[templateName];                                                                     // 139\n    if (!otherTemplate) {                                                                                           // 140\n      console.warn(\"Can't inherit events from template \" + templateName + \" because it hasn't been defined yet.\");  // 141\n      return;                                                                                                       // 142\n    }                                                                                                               // 143\n    // Inherit events                                                                                               // 144\n    _.each(otherTemplate.__eventMaps, function (event) {                                                            // 145\n      Template[name].__eventMaps.push(event);                                                                       // 146\n    });                                                                                                             // 147\n  };                                                                                                                // 148\n                                                                                                                    // 149\n  //Accept an array as otherTemplateName argument                                                                   // 150\n  if (_.isArray(otherTemplateName)) {                                                                               // 151\n    _.each(otherTemplateName, function (name) {                                                                     // 152\n      inheritEvents(name);                                                                                          // 153\n    });                                                                                                             // 154\n  } else { //otherTemplateName is a string                                                                          // 155\n    inheritEvents(otherTemplateName);                                                                               // 156\n  }                                                                                                                 // 157\n};                                                                                                                  // 158\n                                                                                                                    // 159\nTemplate.prototype.inheritsHooksFrom = function (otherTemplateName) {                                               // 160\n  var self = this;                                                                                                  // 161\n  var name = parseName(self.viewName);                                                                              // 162\n                                                                                                                    // 163\n  var inheritHooks = function(templateName) {                                                                       // 164\n    // Check for existence of templateName template                                                                 // 165\n    var otherTemplate = Template[templateName];                                                                     // 166\n    if (!otherTemplate) {                                                                                           // 167\n      console.warn(\"Can't inherit hooks from template \" + templateName + \" because it hasn't been defined yet.\");   // 168\n      return;                                                                                                       // 169\n    }                                                                                                               // 170\n    // For this to work properly, need to ensure that we've run                                                     // 171\n    // defineAllHooks for both templates already                                                                    // 172\n    defineAllHooks(otherTemplate);                                                                                  // 173\n    defineAllHooks(self);                                                                                           // 174\n                                                                                                                    // 175\n    // For each hookType check if there are existing templateHooks for templateName                                 // 176\n    _.each(hookTypes, function (type) {                                                                             // 177\n      var hooks = templateHooks[type][templateName];                                                                // 178\n      // For each existing hook for templateName                                                                    // 179\n      _.each(hooks, function (hook) {                                                                               // 180\n        // Initialize the target template's templateHooks array                                                     // 181\n        templateHooks[type][name] = templateHooks[type][name] || [];                                                // 182\n        // Add hook                                                                                                 // 183\n        templateHooks[type][name].push(hook);                                                                       // 184\n      });                                                                                                           // 185\n    });                                                                                                             // 186\n  };                                                                                                                // 187\n                                                                                                                    // 188\n  //Accept an array as otherTemplateName argument                                                                   // 189\n  if (_.isArray(otherTemplateName)) {                                                                               // 190\n    _.each(otherTemplateName, function (name) {                                                                     // 191\n      inheritHooks(name);                                                                                           // 192\n    });                                                                                                             // 193\n  } else { //otherTemplateName is a string                                                                          // 194\n    inheritHooks(otherTemplateName);                                                                                // 195\n  }                                                                                                                 // 196\n};                                                                                                                  // 197\n                                                                                                                    // 198\nTemplate.prototype.copyAs = function (newTemplateName) {                                                            // 199\n  var self = this, result = [];                                                                                     // 200\n                                                                                                                    // 201\n  var createNewTemplate = function (templateName) {                                                                 // 202\n    var newTemplate =                                                                                               // 203\n    Template[templateName] = new Template('Template.' + templateName, self.renderFunction);                         // 204\n                                                                                                                    // 205\n    var name = parseName(self.viewName);                                                                            // 206\n    newTemplate.inheritsHelpersFrom(name);                                                                          // 207\n    newTemplate.inheritsEventsFrom(name);                                                                           // 208\n    newTemplate.inheritsHooksFrom(name);                                                                            // 209\n                                                                                                                    // 210\n    return newTemplate;                                                                                             // 211\n  };                                                                                                                // 212\n                                                                                                                    // 213\n  //Check if newTemplateName is an array                                                                            // 214\n  if (_.isArray(newTemplateName)) {                                                                                 // 215\n    _.each(newTemplateName, function (name) {                                                                       // 216\n      var template = createNewTemplate(name);                                                                       // 217\n      //Push newly created template into array that we'll return                                                    // 218\n      result.push(template);                                                                                        // 219\n    });                                                                                                             // 220\n    return result;                                                                                                  // 221\n  } else { //newTemplateName is a string                                                                            // 222\n    var template = createNewTemplate(newTemplateName);                                                              // 223\n    //return newly created array                                                                                    // 224\n    return template;                                                                                                // 225\n  }                                                                                                                 // 226\n};                                                                                                                  // 227\n                                                                                                                    // 228\n// Allow easy access to a template instance field when you do not know exactly                                      // 229\n// on which instance (this, or parent, or parent's parent, ...) a field is defined.                                 // 230\n// This allows easy restructuring of templates in HTML, moving things to included                                   // 231\n// templates without having to change everywhere in the code instance levels.                                       // 232\n// It also allows different structures of templates, when once template is included                                 // 233\n// at one level, and some other time at another. Levels do not matter anymore, just                                 // 234\n// that the field exists somewhere.                                                                                 // 235\nBlaze.TemplateInstance.prototype.get = function (fieldName) {                                                       // 236\n  var template = this;                                                                                              // 237\n                                                                                                                    // 238\n  while (template) {                                                                                                // 239\n    if (fieldName in template) {                                                                                    // 240\n      return template[fieldName];                                                                                   // 241\n    }                                                                                                               // 242\n    template = template.parent(1, true);                                                                            // 243\n  }                                                                                                                 // 244\n};                                                                                                                  // 245\n                                                                                                                    // 246\n// Access parent template instance. \"height\" is the number of levels beyond the                                     // 247\n// current template instance to look. By default block helper template instances                                    // 248\n// are skipped, but if \"includeBlockHelpers\" is set to true, they are not.                                          // 249\n// See https://github.com/meteor/meteor/issues/3071                                                                 // 250\nBlaze.TemplateInstance.prototype.parent = function(height, includeBlockHelpers) {                                   // 251\n  // If height is null or undefined, we default to 1, the first parent.                                             // 252\n  if (height == null) {                                                                                             // 253\n    height = 1;                                                                                                     // 254\n  }                                                                                                                 // 255\n                                                                                                                    // 256\n  var i = 0;                                                                                                        // 257\n  var template = this;                                                                                              // 258\n  while (i < height && template) {                                                                                  // 259\n    var view = parentView(template.view, includeBlockHelpers);                                                      // 260\n    // We skip contentBlock views which are injected by Meteor when using                                           // 261\n    // block helpers (in addition to block helper view). This matches more                                          // 262\n    // the visual structure of templates and not the internal implementation.                                       // 263\n    while (view && (!view.template || view.name === '(contentBlock)')) {                                            // 264\n      view = parentView(view, includeBlockHelpers);                                                                 // 265\n    }                                                                                                               // 266\n    if (!view) {                                                                                                    // 267\n      return null;                                                                                                  // 268\n    }                                                                                                               // 269\n    // Body view has template field, but not templateInstance,                                                      // 270\n    // which more or less signals that we reached the top.                                                          // 271\n    template = typeof view.templateInstance === 'function' ? view.templateInstance() : null;                        // 272\n    i++;                                                                                                            // 273\n  }                                                                                                                 // 274\n  return template;                                                                                                  // 275\n};                                                                                                                  // 276\n                                                                                                                    // 277\n// Allow to specify a function to test parent data for at various                                                   // 278\n// levels, instead of specifying a fixed number of levels to traverse.                                              // 279\nvar originalParentData = Blaze._parentData;                                                                         // 280\nBlaze._parentData = function (height, _functionWrapped) {                                                           // 281\n  // If height is not a function, simply call original implementation.                                              // 282\n  if (typeof height !== 'function') {                                                                               // 283\n    return originalParentData(height, _functionWrapped);                                                            // 284\n  }                                                                                                                 // 285\n                                                                                                                    // 286\n  var theWith = Blaze.getView('with');                                                                              // 287\n  var test = function () {                                                                                          // 288\n    return height(theWith.dataVar.get());                                                                           // 289\n  };                                                                                                                // 290\n  while (theWith) {                                                                                                 // 291\n    if (Tracker.nonreactive(test)) break;                                                                           // 292\n    theWith = Blaze.getView(theWith, 'with');                                                                       // 293\n  }                                                                                                                 // 294\n                                                                                                                    // 295\n  // _functionWrapped is internal and will not be                                                                   // 296\n  // specified with non numeric height, so we ignore it.                                                            // 297\n  if (!theWith) return null;                                                                                        // 298\n  // This registers a Tracker dependency.                                                                           // 299\n  return theWith.dataVar.get();                                                                                     // 300\n};                                                                                                                  // 301\n                                                                                                                    // 302\nTemplate.parentData = Blaze._parentData;                                                                            // 303\n                                                                                                                    // 304\n/* PRIVATE */                                                                                                       // 305\n                                                                                                                    // 306\nfunction defineHook(template, type) {                                                                               // 307\n  // see if there's an existing callback set directly on the template instance                                      // 308\n  var orig = template[type];                                                                                        // 309\n                                                                                                                    // 310\n  // Basically scraping callbacks set directly on instance and saving                                               // 311\n  // in templateHooks                                                                                               // 312\n  if (typeof orig === 'function') {                                                                                 // 313\n    var name = parseName(template.viewName);                                                                        // 314\n    templateHooks[type][name] = templateHooks[type][name] || [];                                                    // 315\n    templateHooks[type][name].push(orig);                                                                           // 316\n  }                                                                                                                 // 317\n                                                                                                                    // 318\n  // set our own callback directly on the template instance                                                         // 319\n  template[type] = function templateExtensionMasterHook() {                                                         // 320\n    // call all defined global hooks                                                                                // 321\n    runGlobalHooks(type, this, arguments);                                                                          // 322\n    // call all defined hooks for this template instance                                                            // 323\n    runTemplateHooks(type, this, arguments);                                                                        // 324\n  };                                                                                                                // 325\n                                                                                                                    // 326\n  template._hasTemplateExtensionMasterHook = true;                                                                  // 327\n}                                                                                                                   // 328\n                                                                                                                    // 329\nfunction defineAllHooks(template) {                                                                                 // 330\n  // For each hookType, define the hooks for this template.                                                         // 331\n  // Since we might call this multiple times from startup code                                                      // 332\n  // and other functions, make sure we do it only once.                                                             // 333\n  // Doing it twice would create an infinite loop of self-calling                                                   // 334\n  // hooks.                                                                                                         // 335\n  if (!template._hasTemplateExtensionMasterHook) {                                                                  // 336\n    _.each(hookTypes, function (type) {                                                                             // 337\n      defineHook(template, type);                                                                                   // 338\n    });                                                                                                             // 339\n  }                                                                                                                 // 340\n}                                                                                                                   // 341\n                                                                                                                    // 342\nfunction parentView(view, includeBlockHelpers) {                                                                    // 343\n  if (includeBlockHelpers) {                                                                                        // 344\n    return view.originalParentView || view.parentView;                                                              // 345\n  }                                                                                                                 // 346\n  else {                                                                                                            // 347\n    return view.parentView;                                                                                         // 348\n  }                                                                                                                 // 349\n}                                                                                                                   // 350\n                                                                                                                    // 351\nfunction parseName(name) {                                                                                          // 352\n  if (!name) {                                                                                                      // 353\n    return;                                                                                                         // 354\n  }                                                                                                                 // 355\n  // post 0.9.1 kludge to get template name from viewName                                                           // 356\n  var prefix = 'Template.';                                                                                         // 357\n  if (name.indexOf(prefix) === 0) {                                                                                 // 358\n    return name.slice(prefix.length);                                                                               // 359\n  }                                                                                                                 // 360\n  return name;                                                                                                      // 361\n}                                                                                                                   // 362\n                                                                                                                    // 363\nfunction runGlobalHooks(type, template, args) {                                                                     // 364\n  var i, h = globalHooks[type], hl = h.length;                                                                      // 365\n  for (i = 0; i < hl; i++) {                                                                                        // 366\n    h[i].apply(template, args);                                                                                     // 367\n  }                                                                                                                 // 368\n}                                                                                                                   // 369\n                                                                                                                    // 370\nfunction runTemplateHooks(type, template, args) {                                                                   // 371\n  var i, name = parseName(template.viewName) || parseName(template.view.name), h = templateHooks[type][name];       // 372\n  var hl = h ? h.length : 0;                                                                                        // 373\n  for (i = 0; i < hl; i++) {                                                                                        // 374\n    h[i].apply(template, args);                                                                                     // 375\n  }                                                                                                                 // 376\n}                                                                                                                   // 377\n                                                                                                                    // 378\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
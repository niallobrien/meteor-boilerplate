//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;
var MongoObject = Package['aldeed:simple-schema'].MongoObject;
var check = Package.check.check;
var Match = Package.check.Match;
var DDP = Package['ddp-client'].DDP;
var _ = Package.underscore._;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Template = Package.templating.Template;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var EJSON = Package.ejson.EJSON;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var ReactiveDict = Package['reactive-dict'].ReactiveDict;
var Random = Package.random.Random;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;
var moment = Package['momentjs:moment'].moment;
var Spacebars = Package.spacebars.Spacebars;
var HTML = Package.htmljs.HTML;

/* Package-scope variables */
var Utility, FormPreserve, res, Hooks, FormData, ArrayTracker, AutoForm, arrayTracker, globalDefaultTemplate, defaultTypeTemplates, deps, validateField, getFlatDocOfFieldValues, getInputValue, getInputData, updateTrackedFieldValue, updateAllTrackedFieldValues, getAllFieldsInForm, setDefaults;

(function(){

///////////////////////////////////////////////////////////////////////
//                                                                   //
// packages/aldeed_autoform/packages/aldeed_autoform.js              //
//                                                                   //
///////////////////////////////////////////////////////////////////////
                                                                     //
(function () {                                                       // 1
                                                                     // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-common.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// This is the only file that is run on the server, too                                                                // 1
                                                                                                                       // 2
// Extend the schema options allowed by SimpleSchema                                                                   // 3
SimpleSchema.extendOptions({                                                                                           // 4
  autoform: Match.Optional(Object)                                                                                     // 5
});                                                                                                                    // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 16
}).call(this);                                                       // 17
                                                                     // 18
                                                                     // 19
                                                                     // 20
                                                                     // 21
                                                                     // 22
                                                                     // 23
(function () {                                                       // 24
                                                                     // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/utility.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global Utility:true, MongoObject, AutoForm, moment, SimpleSchema */                                                 // 1
                                                                                                                       // 2
Utility = {                                                                                                            // 3
  componentTypeList: ['afArrayField', 'afEachArrayItem', 'afFieldInput', 'afFormGroup', 'afObjectField', 'afQuickField', 'afQuickFields', 'autoForm', 'quickForm'],
  /**                                                                                                                  // 5
   * @method Utility.cleanNulls                                                                                        // 6
   * @private                                                                                                          // 7
   * @param {Object} doc - Source object                                                                               // 8
   * @returns {Object}                                                                                                 // 9
   *                                                                                                                   // 10
   * Returns an object in which all properties with null, undefined, or empty                                          // 11
   * string values have been removed, recursively.                                                                     // 12
   */                                                                                                                  // 13
  cleanNulls: function cleanNulls(doc, isArray, keepEmptyStrings) {                                                    // 14
    var newDoc = isArray ? [] : {};                                                                                    // 15
    _.each(doc, function(val, key) {                                                                                   // 16
      if (!_.isArray(val) && isBasicObject(val)) {                                                                     // 17
        val = cleanNulls(val, false, keepEmptyStrings); //recurse into plain objects                                   // 18
        if (!_.isEmpty(val)) {                                                                                         // 19
          newDoc[key] = val;                                                                                           // 20
        }                                                                                                              // 21
      } else if (_.isArray(val)) {                                                                                     // 22
        val = cleanNulls(val, true, keepEmptyStrings); //recurse into non-typed arrays                                 // 23
        if (!_.isEmpty(val)) {                                                                                         // 24
          newDoc[key] = val;                                                                                           // 25
        }                                                                                                              // 26
      } else if (!Utility.isNullUndefinedOrEmptyString(val)) {                                                         // 27
        newDoc[key] = val;                                                                                             // 28
      } else if (keepEmptyStrings && typeof val === "string" && val.length === 0) {                                    // 29
        newDoc[key] = val;                                                                                             // 30
      }                                                                                                                // 31
    });                                                                                                                // 32
    return newDoc;                                                                                                     // 33
  },                                                                                                                   // 34
  /**                                                                                                                  // 35
   * @method Utility.reportNulls                                                                                       // 36
   * @private                                                                                                          // 37
   * @param {Object} flatDoc - An object with no properties that are also objects.                                     // 38
   * @returns {Object} An object in which the keys represent the keys in the                                           // 39
   * original object that were null, undefined, or empty strings, and the value                                        // 40
   * of each key is "".                                                                                                // 41
   */                                                                                                                  // 42
  reportNulls: function reportNulls(flatDoc, keepEmptyStrings) {                                                       // 43
    var nulls = {};                                                                                                    // 44
    // Loop through the flat doc                                                                                       // 45
    _.each(flatDoc, function(val, key) {                                                                               // 46
      // If value is undefined, null, or an empty string, report this as null so it will be unset                      // 47
      if (val === null) {                                                                                              // 48
        nulls[key] = "";                                                                                               // 49
      } else if (val === void 0) {                                                                                     // 50
        nulls[key] = "";                                                                                               // 51
      } else if (!keepEmptyStrings && typeof val === "string" && val.length === 0) {                                   // 52
        nulls[key] = "";                                                                                               // 53
      }                                                                                                                // 54
      // If value is an array in which all the values recursively are undefined, null, or an empty string, report this as null so it will be unset
      else if (_.isArray(val) && Utility.cleanNulls(val, true, keepEmptyStrings).length === 0) {                       // 56
        nulls[key] = "";                                                                                               // 57
      }                                                                                                                // 58
    });                                                                                                                // 59
    return nulls;                                                                                                      // 60
  },                                                                                                                   // 61
  /**                                                                                                                  // 62
   * @method Utility.docToModifier                                                                                     // 63
   * @private                                                                                                          // 64
   * @param {Object} doc - An object to be converted into a MongoDB modifier                                           // 65
   * @param {Object} [options] - Options                                                                               // 66
   * @param {Boolean} [options.keepEmptyStrings] - Pass `true` to keep empty strings in the $set. Otherwise $unset them.
   * @param {Boolean} [options.keepArrays] - Pass `true` to $set entire arrays. Otherwise the modifier will $set individual array items.
   * @returns {Object} A MongoDB modifier.                                                                             // 69
   *                                                                                                                   // 70
   * Converts an object into a modifier by flattening it, putting keys with                                            // 71
   * null, undefined, and empty string values into `modifier.$unset`, and                                              // 72
   * putting the rest of the keys into `modifier.$set`.                                                                // 73
   */                                                                                                                  // 74
  docToModifier: function docToModifier(doc, options) {                                                                // 75
    var modifier = {}, mDoc, flatDoc, nulls;                                                                           // 76
    options = options || {};                                                                                           // 77
                                                                                                                       // 78
    // Flatten doc                                                                                                     // 79
    mDoc = new MongoObject(doc);                                                                                       // 80
    flatDoc = mDoc.getFlatObject({keepArrays: !!options.keepArrays});                                                  // 81
    // Get a list of null, undefined, and empty string values so we can unset them instead                             // 82
    nulls = Utility.reportNulls(flatDoc, !!options.keepEmptyStrings);                                                  // 83
    flatDoc = Utility.cleanNulls(flatDoc, false, !!options.keepEmptyStrings);                                          // 84
                                                                                                                       // 85
    if (!_.isEmpty(flatDoc)) {                                                                                         // 86
      modifier.$set = flatDoc;                                                                                         // 87
    }                                                                                                                  // 88
    if (!_.isEmpty(nulls)) {                                                                                           // 89
      modifier.$unset = nulls;                                                                                         // 90
    }                                                                                                                  // 91
    return modifier;                                                                                                   // 92
  },                                                                                                                   // 93
  /**                                                                                                                  // 94
   * @method Utility.getSelectValues                                                                                   // 95
   * @private                                                                                                          // 96
   * @param {Element} select - DOM Element from which to get current values                                            // 97
   * @returns {string[]}                                                                                               // 98
   *                                                                                                                   // 99
   * Gets a string array of all the selected values in a given `select` DOM element.                                   // 100
   */                                                                                                                  // 101
  getSelectValues: function getSelectValues(select) {                                                                  // 102
    var result = [];                                                                                                   // 103
    var options = select && select.options || [];                                                                      // 104
    var opt;                                                                                                           // 105
                                                                                                                       // 106
    for (var i = 0, ln = options.length; i < ln; i++) {                                                                // 107
      opt = options[i];                                                                                                // 108
                                                                                                                       // 109
      if (opt.selected) {                                                                                              // 110
        result.push(opt.value || opt.text);                                                                            // 111
      }                                                                                                                // 112
    }                                                                                                                  // 113
    return result;                                                                                                     // 114
  },                                                                                                                   // 115
  /*                                                                                                                   // 116
   * Get select options                                                                                                // 117
   */                                                                                                                  // 118
  getSelectOptions: function getSelectOptions(defs, hash) {                                                            // 119
    var schemaType = defs.type;                                                                                        // 120
    var selectOptions = hash.options;                                                                                  // 121
                                                                                                                       // 122
    // Handle options="allowed"                                                                                        // 123
    if (selectOptions === "allowed") {                                                                                 // 124
      selectOptions = _.map(defs.allowedValues, function(v) {                                                          // 125
        var label = v;                                                                                                 // 126
        if (hash.capitalize && v.length > 0 && schemaType === String) {                                                // 127
          label = v.charAt(0).toUpperCase() + v.slice(1).toLowerCase();                                                // 128
        }                                                                                                              // 129
                                                                                                                       // 130
        return {label: label, value: v};                                                                               // 131
      });                                                                                                              // 132
    }                                                                                                                  // 133
                                                                                                                       // 134
    // Hashtable                                                                                                       // 135
    else if (_.isObject(selectOptions) && !_.isArray(selectOptions)) {                                                 // 136
      selectOptions = _.map(selectOptions, function(v, k) {                                                            // 137
        return {label: v, value: schemaType(k)};                                                                       // 138
      });                                                                                                              // 139
    }                                                                                                                  // 140
                                                                                                                       // 141
    return selectOptions;                                                                                              // 142
  },                                                                                                                   // 143
  /**                                                                                                                  // 144
   * @method Utility.lookup                                                                                            // 145
   * @private                                                                                                          // 146
   * @param {Any} obj                                                                                                  // 147
   * @returns {Any}                                                                                                    // 148
   *                                                                                                                   // 149
   * If `obj` is a string, returns the value of the property with that                                                 // 150
   * name on the `window` object. Otherwise returns `obj`.                                                             // 151
   */                                                                                                                  // 152
  lookup: function lookup(obj) {                                                                                       // 153
    var ref = window, arr;                                                                                             // 154
    if (typeof obj === "string") {                                                                                     // 155
      arr = obj.split(".");                                                                                            // 156
      while(arr.length && (ref = ref[arr.shift()]));                                                                   // 157
      if (!ref) {                                                                                                      // 158
        throw new Error(obj + " is not in the window scope");                                                          // 159
      }                                                                                                                // 160
      return ref;                                                                                                      // 161
    }                                                                                                                  // 162
    return obj;                                                                                                        // 163
  },                                                                                                                   // 164
  /**                                                                                                                  // 165
   * @method Utility.getDefs                                                                                           // 166
   * @private                                                                                                          // 167
   * @param {SimpleSchema} ss                                                                                          // 168
   * @param {String} name                                                                                              // 169
   * @return {Object} Schema definitions object                                                                        // 170
   *                                                                                                                   // 171
   * Returns the schema definitions object from a SimpleSchema instance. Equivalent to calling                         // 172
   * `ss.schema(name)` but handles throwing errors if `name` is not a string or is not a valid                         // 173
   * field name for this SimpleSchema instance.                                                                        // 174
   */                                                                                                                  // 175
  getDefs: function getDefs(ss, name) {                                                                                // 176
    if (typeof name !== "string") {                                                                                    // 177
      throw new Error("Invalid field name: (not a string)");                                                           // 178
    }                                                                                                                  // 179
                                                                                                                       // 180
    var defs = ss.schema(name);                                                                                        // 181
    if (!defs) {                                                                                                       // 182
      throw new Error("Invalid field name: " + name);                                                                  // 183
    }                                                                                                                  // 184
    return defs;                                                                                                       // 185
  },                                                                                                                   // 186
  /**                                                                                                                  // 187
   * @method Utility.objAffectsKey                                                                                     // 188
   * @private                                                                                                          // 189
   * @param  {Object} obj                                                                                              // 190
   * @param  {String} key                                                                                              // 191
   * @return {Boolean}                                                                                                 // 192
   * @todo should make this a static method in MongoObject                                                             // 193
   */                                                                                                                  // 194
  objAffectsKey: function objAffectsKey(obj, key) {                                                                    // 195
    var mDoc = new MongoObject(obj);                                                                                   // 196
    return mDoc.affectsKey(key);                                                                                       // 197
  },                                                                                                                   // 198
  /**                                                                                                                  // 199
   * @method Utility.expandObj                                                                                         // 200
   * @private                                                                                                          // 201
   * @param  {Object} doc                                                                                              // 202
   * @return {Object}                                                                                                  // 203
   *                                                                                                                   // 204
   * Takes a flat object and returns an expanded version of it.                                                        // 205
   */                                                                                                                  // 206
  expandObj: function expandObj(doc) {                                                                                 // 207
    var newDoc = {}, subkeys, subkey, subkeylen, nextPiece, current;                                                   // 208
    _.each(doc, function(val, key) {                                                                                   // 209
      subkeys = key.split(".");                                                                                        // 210
      subkeylen = subkeys.length;                                                                                      // 211
      current = newDoc;                                                                                                // 212
      for (var i = 0; i < subkeylen; i++) {                                                                            // 213
        subkey = subkeys[i];                                                                                           // 214
        if (typeof current[subkey] !== "undefined" && !_.isObject(current[subkey])) {                                  // 215
          break; //already set for some reason; leave it alone                                                         // 216
        }                                                                                                              // 217
        if (i === subkeylen - 1) {                                                                                     // 218
          //last iteration; time to set the value                                                                      // 219
          current[subkey] = val;                                                                                       // 220
        } else {                                                                                                       // 221
          //see if the next piece is a number                                                                          // 222
          nextPiece = subkeys[i + 1];                                                                                  // 223
          nextPiece = parseInt(nextPiece, 10);                                                                         // 224
          if (isNaN(nextPiece) && !_.isObject(current[subkey])) {                                                      // 225
            current[subkey] = {};                                                                                      // 226
          } else if (!isNaN(nextPiece) && !_.isArray(current[subkey])) {                                               // 227
            current[subkey] = [];                                                                                      // 228
          }                                                                                                            // 229
        }                                                                                                              // 230
        current = current[subkey];                                                                                     // 231
      }                                                                                                                // 232
    });                                                                                                                // 233
    return newDoc;                                                                                                     // 234
  },                                                                                                                   // 235
  /**                                                                                                                  // 236
   * @method Utility.compactArrays                                                                                     // 237
   * @private                                                                                                          // 238
   * @param  {Object} obj                                                                                              // 239
   * @return {undefined}                                                                                               // 240
   *                                                                                                                   // 241
   * Edits the object by reference, compacting any arrays at any level recursively.                                    // 242
   */                                                                                                                  // 243
  compactArrays: function compactArrays(obj) {                                                                         // 244
    if (_.isObject(obj)) {                                                                                             // 245
      _.each(obj, function (val, key) {                                                                                // 246
        if (_.isArray(val)) {                                                                                          // 247
          obj[key] = _.without(val, void 0, null);                                                                     // 248
          _.each(obj[key], function (arrayItem) {                                                                      // 249
            compactArrays(arrayItem);                                                                                  // 250
          });                                                                                                          // 251
        } else if (!(val instanceof Date) && _.isObject(val)) {                                                        // 252
          //recurse into objects                                                                                       // 253
          compactArrays(val);                                                                                          // 254
        }                                                                                                              // 255
      });                                                                                                              // 256
    }                                                                                                                  // 257
  },                                                                                                                   // 258
  /**                                                                                                                  // 259
   * @method Utility.bubbleEmpty                                                                                       // 260
   * @private                                                                                                          // 261
   * @param  {Object} obj                                                                                              // 262
   * @return {undefined}                                                                                               // 263
   *                                                                                                                   // 264
   * Edits the object by reference.                                                                                    // 265
   */                                                                                                                  // 266
  bubbleEmpty: function bubbleEmpty(obj, keepEmptyStrings) {                                                           // 267
    if (_.isObject(obj)) {                                                                                             // 268
      _.each(obj, function (val, key) {                                                                                // 269
        if (_.isArray(val)) {                                                                                          // 270
          _.each(val, function (arrayItem) {                                                                           // 271
            bubbleEmpty(arrayItem);                                                                                    // 272
          });                                                                                                          // 273
        } else if (isBasicObject(val)) {                                                                               // 274
          var allEmpty = _.all(val, function (prop) {                                                                  // 275
            return (prop === void 0 || prop === null || (!keepEmptyStrings && typeof prop === "string" && prop.length === 0));
          });                                                                                                          // 277
          if (_.isEmpty(val) || allEmpty) {                                                                            // 278
            obj[key] = null;                                                                                           // 279
          } else {                                                                                                     // 280
            //recurse into objects                                                                                     // 281
            bubbleEmpty(val);                                                                                          // 282
          }                                                                                                            // 283
        }                                                                                                              // 284
      });                                                                                                              // 285
    }                                                                                                                  // 286
  },                                                                                                                   // 287
  /**                                                                                                                  // 288
   * @method Utility.isNullUndefinedOrEmptyString                                                                      // 289
   * @private                                                                                                          // 290
   * @param  {Any} val                                                                                                 // 291
   * @return {Boolean}                                                                                                 // 292
   *                                                                                                                   // 293
   * Returns `true` if the value is null, undefined, or an empty string                                                // 294
   */                                                                                                                  // 295
  isNullUndefinedOrEmptyString: function isNullUndefinedOrEmptyString(val) {                                           // 296
    return (val === void 0 || val === null || (typeof val === "string" && val.length === 0));                          // 297
  },                                                                                                                   // 298
  /**                                                                                                                  // 299
   * @method Utility.isValidDateString                                                                                 // 300
   * @private                                                                                                          // 301
   * @param  {String}  dateString                                                                                      // 302
   * @return {Boolean}                                                                                                 // 303
   *                                                                                                                   // 304
   * Returns `true` if dateString is a "valid date string"                                                             // 305
   */                                                                                                                  // 306
  isValidDateString: function isValidDateString(dateString) {                                                          // 307
    var m = moment(dateString, 'YYYY-MM-DD', true);                                                                    // 308
    return m && m.isValid();                                                                                           // 309
  },                                                                                                                   // 310
  /**                                                                                                                  // 311
   * @method Utility.isValidTimeString                                                                                 // 312
   * @private                                                                                                          // 313
   * @param  {String}  timeString                                                                                      // 314
   * @return {Boolean}                                                                                                 // 315
   *                                                                                                                   // 316
   * Returns `true` if timeString is a "valid time string"                                                             // 317
   */                                                                                                                  // 318
  isValidTimeString: function isValidTimeString(timeString) {                                                          // 319
    if (typeof timeString !== "string") {                                                                              // 320
      return false;                                                                                                    // 321
    }                                                                                                                  // 322
                                                                                                                       // 323
    //this reg ex actually allows a few invalid hours/minutes/seconds, but                                             // 324
    //we can catch that when parsing                                                                                   // 325
    var regEx = /^[0-2][0-9]:[0-5][0-9](:[0-5][0-9](\.[0-9]{1,3})?)?$/;                                                // 326
    return regEx.test(timeString);                                                                                     // 327
  },                                                                                                                   // 328
  /**                                                                                                                  // 329
   * @method  Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString                                                // 330
   * @private                                                                                                          // 331
   * @param  {String} dateString                                                                                       // 332
   * @return {Boolean}                                                                                                 // 333
   *                                                                                                                   // 334
   * Returns true if dateString is a "valid normalized forced-UTC global date and time string"                         // 335
   */                                                                                                                  // 336
  isValidNormalizedForcedUtcGlobalDateAndTimeString: function isValidNormalizedForcedUtcGlobalDateAndTimeString(dateString) {
    if (typeof dateString !== "string") {                                                                              // 338
      return false;                                                                                                    // 339
    }                                                                                                                  // 340
                                                                                                                       // 341
    var datePart = dateString.substring(0, 10);                                                                        // 342
    var tPart = dateString.substring(10, 11);                                                                          // 343
    var timePart = dateString.substring(11, dateString.length - 1);                                                    // 344
    var zPart = dateString.substring(dateString.length - 1);                                                           // 345
    return Utility.isValidDateString(datePart) && tPart === "T" && Utility.isValidTimeString(timePart) && zPart === "Z";
  },                                                                                                                   // 347
  /**                                                                                                                  // 348
   * @method  Utility.isValidNormalizedLocalDateAndTimeString                                                          // 349
   * @private                                                                                                          // 350
   * @param  {String} dtString                                                                                         // 351
   * @return {Boolean}                                                                                                 // 352
   *                                                                                                                   // 353
   * Returns true if dtString is a "valid normalized local date and time string"                                       // 354
   */                                                                                                                  // 355
  isValidNormalizedLocalDateAndTimeString: function isValidNormalizedLocalDateAndTimeString(dtString) {                // 356
    if (typeof dtString !== "string") {                                                                                // 357
      return false;                                                                                                    // 358
    }                                                                                                                  // 359
                                                                                                                       // 360
    var datePart = dtString.substring(0, 10);                                                                          // 361
    var tPart = dtString.substring(10, 11);                                                                            // 362
    var timePart = dtString.substring(11, dtString.length);                                                            // 363
    return Utility.isValidDateString(datePart) && tPart === "T" && Utility.isValidTimeString(timePart);                // 364
  },                                                                                                                   // 365
  /**                                                                                                                  // 366
   * @method Utility.getComponentContext                                                                               // 367
   * @private                                                                                                          // 368
   * @param  {Object} context A context (`this`) object                                                                // 369
   * @param {String} name The name of the helper or component we're calling from.                                      // 370
   * @return {Object} Normalized context object                                                                        // 371
   *                                                                                                                   // 372
   * Returns an object with `atts` and `defs` properties, normalized from whatever object is passed in.                // 373
   * This helps deal with the fact that we have to pass the ancestor autoform's context to different                   // 374
   * helpers and components in different ways, but in all cases we want to get access to it and throw                  // 375
   * an error if we can't find an autoform context.                                                                    // 376
   */                                                                                                                  // 377
  getComponentContext: function autoFormGetComponentContext(context, name) {                                           // 378
    var atts, defs, formComponentAttributes, fieldAttributes, fieldAttributesForComponentType, ss;                     // 379
                                                                                                                       // 380
    atts = _.clone(context || {});                                                                                     // 381
    ss = AutoForm.getFormSchema();                                                                                     // 382
    defs = Utility.getDefs(ss, atts.name); //defs will not be undefined                                                // 383
                                                                                                                       // 384
    // Look up the tree if we're in a helper, checking to see if any ancestor components                               // 385
    // had a <componentType>-attribute specified.                                                                      // 386
    formComponentAttributes = AutoForm.findAttributesWithPrefix(name + "-");                                           // 387
                                                                                                                       // 388
    // Get any field-specific attributes defined in the schema.                                                        // 389
    // They can be in autoform.attrName or autoform.componentType.attrName, with                                       // 390
    // the latter overriding the former.                                                                               // 391
    fieldAttributes = _.clone(defs.autoform) || {};                                                                    // 392
    fieldAttributesForComponentType = fieldAttributes[name] || {};                                                     // 393
    fieldAttributes = _.omit(fieldAttributes, Utility.componentTypeList);                                              // 394
    fieldAttributes = _.extend({}, fieldAttributes, fieldAttributesForComponentType);                                  // 395
                                                                                                                       // 396
    // "autoform" option in the schema provides default atts                                                           // 397
    atts = _.extend({}, formComponentAttributes, fieldAttributes, atts);                                               // 398
                                                                                                                       // 399
    // eval any attribute that is provided as a function                                                               // 400
    var evaluatedAtts = {};                                                                                            // 401
    _.each(atts, function (v, k) {                                                                                     // 402
      if (typeof v === 'function') {                                                                                   // 403
        evaluatedAtts[k] = v.call({                                                                                    // 404
          name: atts.name                                                                                              // 405
        });                                                                                                            // 406
      } else {                                                                                                         // 407
        evaluatedAtts[k] = v;                                                                                          // 408
      }                                                                                                                // 409
    });                                                                                                                // 410
                                                                                                                       // 411
    return {                                                                                                           // 412
      atts: evaluatedAtts,                                                                                             // 413
      defs: defs                                                                                                       // 414
    };                                                                                                                 // 415
  },                                                                                                                   // 416
  /**                                                                                                                  // 417
   * @method Utility.stringToArray                                                                                     // 418
   * @private                                                                                                          // 419
   * @param {String|Array} s A variable that might be a string or an array.                                            // 420
   * @param {String} errorMessage Error message to use if it's not a string or an array.                               // 421
   * @return {Array} The array, building it from a comma-delimited string if necessary.                                // 422
   */                                                                                                                  // 423
  stringToArray: function stringToArray(s, errorMessage) {                                                             // 424
    if (typeof s === "string") {                                                                                       // 425
      return s.replace(/ /g, '').split(',');                                                                           // 426
    } else if (!_.isArray(s)) {                                                                                        // 427
      throw new Error(errorMessage);                                                                                   // 428
    } else {                                                                                                           // 429
      return s;                                                                                                        // 430
    }                                                                                                                  // 431
  },                                                                                                                   // 432
  /**                                                                                                                  // 433
   * @method Utility.addClass                                                                                          // 434
   * @private                                                                                                          // 435
   * @param {Object} atts An object that might have a "class" property                                                 // 436
   * @param {String} klass The class string to add                                                                     // 437
   * @return {Object} The object with klass added to the "class" property, creating the property if necessary          // 438
   */                                                                                                                  // 439
  addClass: function addClass(atts, klass) {                                                                           // 440
    if (typeof atts["class"] === "string") {                                                                           // 441
      atts["class"] += " " + klass;                                                                                    // 442
    } else {                                                                                                           // 443
      atts["class"] = klass;                                                                                           // 444
    }                                                                                                                  // 445
    return atts;                                                                                                       // 446
  },                                                                                                                   // 447
  /**                                                                                                                  // 448
   * @method Utility.getFormTypeDef                                                                                    // 449
   * @private                                                                                                          // 450
   * @param {String} formType The form type                                                                            // 451
   * @return {Object} The definition. Throws an error if type hasn't been defined.                                     // 452
   */                                                                                                                  // 453
  getFormTypeDef: function getFormTypeDef(formType) {                                                                  // 454
    var ftd = AutoForm._formTypeDefinitions[formType];                                                                 // 455
    if (!ftd) {                                                                                                        // 456
      throw new Error('AutoForm: Form type "' + formType + '" has not been defined');                                  // 457
    }                                                                                                                  // 458
    return ftd;                                                                                                        // 459
  }                                                                                                                    // 460
};                                                                                                                     // 461
                                                                                                                       // 462
// getPrototypeOf polyfill                                                                                             // 463
if (typeof Object.getPrototypeOf !== "function") {                                                                     // 464
  if (typeof "".__proto__ === "object") {                                                                              // 465
    Object.getPrototypeOf = function(object) {                                                                         // 466
      return object.__proto__;                                                                                         // 467
    };                                                                                                                 // 468
  } else {                                                                                                             // 469
    Object.getPrototypeOf = function(object) {                                                                         // 470
      // May break if the constructor has been tampered with                                                           // 471
      return object.constructor.prototype;                                                                             // 472
    };                                                                                                                 // 473
  }                                                                                                                    // 474
}                                                                                                                      // 475
                                                                                                                       // 476
/* Tests whether "obj" is an Object as opposed to                                                                      // 477
 * something that inherits from Object                                                                                 // 478
 *                                                                                                                     // 479
 * @param {any} obj                                                                                                    // 480
 * @returns {Boolean}                                                                                                  // 481
 */                                                                                                                    // 482
var isBasicObject = function(obj) {                                                                                    // 483
  return _.isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;                                           // 484
};                                                                                                                     // 485
                                                                                                                       // 486
/*                                                                                                                     // 487
 * Extend SS for now; TODO put this in SS package                                                                      // 488
 */                                                                                                                    // 489
if (typeof SimpleSchema.prototype.getAllowedValuesForKey !== 'function') {                                             // 490
  SimpleSchema.prototype.getAllowedValuesForKey = function (key) {                                                     // 491
    var defs = this.getDefinition(key, ['type', 'allowedValues']);                                                     // 492
                                                                                                                       // 493
    // For array fields, `allowedValues` is on the array item definition                                               // 494
    if (defs.type === Array) {                                                                                         // 495
      defs = this.getDefinition(key+".$", ['allowedValues']);                                                          // 496
    }                                                                                                                  // 497
                                                                                                                       // 498
    return defs.allowedValues;                                                                                         // 499
  };                                                                                                                   // 500
}                                                                                                                      // 501
                                                                                                                       // 502
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 535
}).call(this);                                                       // 536
                                                                     // 537
                                                                     // 538
                                                                     // 539
                                                                     // 540
                                                                     // 541
                                                                     // 542
(function () {                                                       // 543
                                                                     // 544
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/form-preserve.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @constructor                                                                                                        // 2
 * @private                                                                                                            // 3
 * @param {String} migrationName                                                                                       // 4
 *                                                                                                                     // 5
 * Internal helper object to preserve form inputs across Hot Code Push                                                 // 6
 * and across "pages" navigation if the option is enabled.                                                             // 7
 */                                                                                                                    // 8
FormPreserve = function formPreserveConstructor(migrationName) {                                                       // 9
  var self = this;                                                                                                     // 10
  if (! _.isString(migrationName))                                                                                     // 11
    throw Error("You must define an unique migration name of type String");                                            // 12
  self.registeredForms = {};                                                                                           // 13
  self.retrievedDocuments = {};                                                                                        // 14
  if (Package.reload) {                                                                                                // 15
    var Reload = Package.reload.Reload;                                                                                // 16
    self.retrievedDocuments = Reload._migrationData(migrationName) || '{}';                                            // 17
                                                                                                                       // 18
    // Currently migration does not seem to support proper storage                                                     // 19
    // of Date type. It comes back as a string, so we need to store                                                    // 20
    // EJSON instead.                                                                                                  // 21
    if (typeof self.retrievedDocuments === 'string') {                                                                 // 22
      self.retrievedDocuments = EJSON.parse(self.retrievedDocuments);                                                  // 23
    }                                                                                                                  // 24
                                                                                                                       // 25
    Reload._onMigrate(migrationName, function () {                                                                     // 26
      var doc = self._retrieveRegisteredDocuments();                                                                   // 27
      return [true, EJSON.stringify(doc)];                                                                             // 28
    });                                                                                                                // 29
  }                                                                                                                    // 30
};                                                                                                                     // 31
                                                                                                                       // 32
FormPreserve.prototype.getDocument = function (formId) {                                                               // 33
  var self = this, doc;                                                                                                // 34
  if (! _.has(self.retrievedDocuments, formId)) {                                                                      // 35
    return false;                                                                                                      // 36
  }                                                                                                                    // 37
                                                                                                                       // 38
  return self.retrievedDocuments[formId];                                                                              // 39
};                                                                                                                     // 40
                                                                                                                       // 41
FormPreserve.prototype.clearDocument = function (formId) {                                                             // 42
  delete this.retrievedDocuments[formId];                                                                              // 43
};                                                                                                                     // 44
                                                                                                                       // 45
FormPreserve.prototype.registerForm = function (formId, retrieveFunc) {                                                // 46
  this.registeredForms[formId] = retrieveFunc;                                                                         // 47
};                                                                                                                     // 48
                                                                                                                       // 49
FormPreserve.prototype.formIsRegistered = function (formId) {                                                          // 50
  return !!this.registeredForms[formId];                                                                               // 51
};                                                                                                                     // 52
                                                                                                                       // 53
FormPreserve.prototype.unregisterForm = function (formId) {                                                            // 54
  delete this.registeredForms[formId];                                                                                 // 55
  delete this.retrievedDocuments[formId];                                                                              // 56
};                                                                                                                     // 57
                                                                                                                       // 58
FormPreserve.prototype.unregisterAllForms = function () {                                                              // 59
  var self = this;                                                                                                     // 60
  self.registeredForms = {};                                                                                           // 61
  self.retrievedDocuments = {};                                                                                        // 62
};                                                                                                                     // 63
                                                                                                                       // 64
FormPreserve.prototype._retrieveRegisteredDocuments = function () {                                                    // 65
  var self = this;                                                                                                     // 66
  res = {};                                                                                                            // 67
  _.each(self.registeredForms, function (retrieveFunc, formId) {                                                       // 68
    res[formId] = retrieveFunc();                                                                                      // 69
  });                                                                                                                  // 70
  return res;                                                                                                          // 71
};                                                                                                                     // 72
                                                                                                                       // 73
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 625
}).call(this);                                                       // 626
                                                                     // 627
                                                                     // 628
                                                                     // 629
                                                                     // 630
                                                                     // 631
                                                                     // 632
(function () {                                                       // 633
                                                                     // 634
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-hooks.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Manages all hooks, supporting append/replace, get                                                                   // 1
                                                                                                                       // 2
Hooks = {                                                                                                              // 3
  form: {}                                                                                                             // 4
};                                                                                                                     // 5
                                                                                                                       // 6
// The names of all supported hooks, excluding "before" and "after".                                                   // 7
var hookNames = ['formToDoc', 'formToModifier', 'docToForm', 'onSubmit', 'onSuccess', 'onError',                       // 8
    'beginSubmit', 'endSubmit'];                                                                                       // 9
                                                                                                                       // 10
Hooks.getDefault = function() {                                                                                        // 11
  var hooks = {                                                                                                        // 12
    before: {},                                                                                                        // 13
    after: {}                                                                                                          // 14
  };                                                                                                                   // 15
  _.each(hookNames, function(hookName) {                                                                               // 16
    hooks[hookName] = [];                                                                                              // 17
  });                                                                                                                  // 18
  return hooks;                                                                                                        // 19
};                                                                                                                     // 20
                                                                                                                       // 21
Hooks.global = Hooks.getDefault();                                                                                     // 22
                                                                                                                       // 23
Hooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {                                            // 24
  // Add before hooks                                                                                                  // 25
  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {                                  // 26
    if (typeof func !== "function") {                                                                                  // 27
      throw new Error("AutoForm before hook must be a function, not " + typeof func);                                  // 28
    }                                                                                                                  // 29
    hooksList.before[type] = (!replace && hooksList.before[type]) ? hooksList.before[type] : [];                       // 30
    hooksList.before[type].push(func);                                                                                 // 31
  });                                                                                                                  // 32
                                                                                                                       // 33
  // Add after hooks                                                                                                   // 34
  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {                                     // 35
    if (typeof func !== "function") {                                                                                  // 36
      throw new Error("AutoForm after hook must be a function, not " + typeof func);                                   // 37
    }                                                                                                                  // 38
    hooksList.after[type] = (!replace && hooksList.after[type]) ? hooksList.after[type] : [];                          // 39
    hooksList.after[type].push(func);                                                                                  // 40
  });                                                                                                                  // 41
                                                                                                                       // 42
  // Add all other hooks                                                                                               // 43
  _.each(hookNames, function autoFormHooksEach(name) {                                                                 // 44
    if (hooks[name]) {                                                                                                 // 45
      if (typeof hooks[name] !== "function") {                                                                         // 46
        throw new Error("AutoForm " + name + " hook must be a function, not " + typeof hooks[name]);                   // 47
      }                                                                                                                // 48
                                                                                                                       // 49
      if(replace) {                                                                                                    // 50
          hooksList[name] = [];                                                                                        // 51
      }                                                                                                                // 52
                                                                                                                       // 53
      hooksList[name].push(hooks[name]);                                                                               // 54
    }                                                                                                                  // 55
  });                                                                                                                  // 56
};                                                                                                                     // 57
                                                                                                                       // 58
Hooks.getHooks = function getHooks(formId, type, subtype) {                                                            // 59
  var f, g;                                                                                                            // 60
  if (subtype) {                                                                                                       // 61
    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];                     // 62
    g = Hooks.global[type] && Hooks.global[type][subtype] || [];                                                       // 63
  } else {                                                                                                             // 64
    f = Hooks.form[formId] && Hooks.form[formId][type] || [];                                                          // 65
    g = Hooks.global[type] || [];                                                                                      // 66
  }                                                                                                                    // 67
  return f.concat(g);                                                                                                  // 68
};                                                                                                                     // 69
                                                                                                                       // 70
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 712
}).call(this);                                                       // 713
                                                                     // 714
                                                                     // 715
                                                                     // 716
                                                                     // 717
                                                                     // 718
                                                                     // 719
(function () {                                                       // 720
                                                                     // 721
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-formdata.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global FormData:true */                                                                                             // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
 * Tracks form data with reactivity. This is similar to                                                                // 4
 * ReactiveDict, but we need to store typed objects and                                                                // 5
 * keep their type upon retrieval.                                                                                     // 6
 */                                                                                                                    // 7
                                                                                                                       // 8
FormData = function () {                                                                                               // 9
  var self = this;                                                                                                     // 10
  self.forms = {};                                                                                                     // 11
};                                                                                                                     // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * Initializes tracking for a given form, if not already done.                                                         // 15
 * @param {String} formId The form's `id` attribute                                                                    // 16
 */                                                                                                                    // 17
FormData.prototype.initForm = function (formId) {                                                                      // 18
  var self = this;                                                                                                     // 19
                                                                                                                       // 20
  if (self.forms[formId]) {                                                                                            // 21
    return;                                                                                                            // 22
  }                                                                                                                    // 23
                                                                                                                       // 24
  self.forms[formId] = {                                                                                               // 25
    sourceDoc: null,                                                                                                   // 26
    deps: {                                                                                                            // 27
      sourceDoc: new Tracker.Dependency()                                                                              // 28
    }                                                                                                                  // 29
  };                                                                                                                   // 30
};                                                                                                                     // 31
                                                                                                                       // 32
/**                                                                                                                    // 33
 * Initializes tracking for a given form, if not already done.                                                         // 34
 * @param {String} formId The form's `id` attribute                                                                    // 35
 */                                                                                                                    // 36
                                                                                                                       // 37
/**                                                                                                                    // 38
 * Gets or sets a source doc for the given form. Reactive.                                                             // 39
 * @param   {String}                formId    The form's `id` attribute                                                // 40
 * @param   {MongoObject|null}      sourceDoc The mDoc for the form or `null` if no doc.                               // 41
 * @returns {MongoObject|undefined} Returns the form's MongoObject if getting.                                         // 42
 */                                                                                                                    // 43
FormData.prototype.sourceDoc = function (formId, sourceDoc) {                                                          // 44
  var self = this;                                                                                                     // 45
  self.initForm(formId);                                                                                               // 46
                                                                                                                       // 47
  if (sourceDoc || sourceDoc === null) {                                                                               // 48
    //setter                                                                                                           // 49
    self.forms[formId].sourceDoc = sourceDoc;                                                                          // 50
    self.forms[formId].deps.sourceDoc.changed();                                                                       // 51
  } else {                                                                                                             // 52
    //getter                                                                                                           // 53
    self.forms[formId].deps.sourceDoc.depend();                                                                        // 54
    return self.forms[formId].sourceDoc;                                                                               // 55
  }                                                                                                                    // 56
};                                                                                                                     // 57
                                                                                                                       // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 787
}).call(this);                                                       // 788
                                                                     // 789
                                                                     // 790
                                                                     // 791
                                                                     // 792
                                                                     // 793
                                                                     // 794
(function () {                                                       // 795
                                                                     // 796
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-arrays.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Track arrays; this allows us to add/remove fields or groups of fields for an array                                  // 1
// but still easily respect minCount and maxCount, and properly add/remove the same                                    // 2
// items from the database once the form is submitted.                                                                 // 3
                                                                                                                       // 4
ArrayTracker = function afArrayTracker() {                                                                             // 5
  var self = this;                                                                                                     // 6
  self.info = {};                                                                                                      // 7
};                                                                                                                     // 8
                                                                                                                       // 9
ArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {               // 10
  var defs = AutoForm.Utility.getDefs(ss, field);                                                                      // 11
                                                                                                                       // 12
  // minCount is set by the schema, but can be set higher on the field attribute                                       // 13
  overrideMinCount = overrideMinCount || 0;                                                                            // 14
  var minCount = defs.minCount || 0;                                                                                   // 15
  minCount = Math.max(overrideMinCount, minCount);                                                                     // 16
                                                                                                                       // 17
  // maxCount is set by the schema, but can be set lower on the field attribute                                        // 18
  overrideMaxCount = overrideMaxCount || Infinity;                                                                     // 19
  var maxCount = defs.maxCount || Infinity;                                                                            // 20
  maxCount = Math.min(overrideMaxCount, maxCount);                                                                     // 21
                                                                                                                       // 22
  return {minCount: minCount, maxCount: maxCount};                                                                     // 23
};                                                                                                                     // 24
                                                                                                                       // 25
ArrayTracker.prototype.initForm = function atInitForm(formId) {                                                        // 26
	var self = this;                                                                                                      // 27
                                                                                                                       // 28
	if (self.info[formId])                                                                                                // 29
		return;                                                                                                              // 30
                                                                                                                       // 31
	self.info[formId] = {};                                                                                               // 32
};                                                                                                                     // 33
                                                                                                                       // 34
ArrayTracker.prototype.getForm = function atInitForm(formId) {                                                         // 35
	var self = this;                                                                                                      // 36
	self.initForm(formId);                                                                                                // 37
	return self.info[formId];                                                                                             // 38
};                                                                                                                     // 39
                                                                                                                       // 40
ArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {                                           // 41
	var self = this;                                                                                                      // 42
	self.initForm(formId);                                                                                                // 43
                                                                                                                       // 44
	if (!self.info[formId][field]) {                                                                                      // 45
		self.resetField(formId, field);                                                                                      // 46
	}                                                                                                                     // 47
};                                                                                                                     // 48
                                                                                                                       // 49
ArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {
	var self = this;                                                                                                      // 51
	self.ensureField(formId, field);                                                                                      // 52
                                                                                                                       // 53
	if (self.info[formId][field].array != null)                                                                           // 54
		return;                                                                                                              // 55
                                                                                                                       // 56
	// If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.           // 57
	// If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.                 // 58
	var range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);                                            // 59
	var arrayCount = Math.max(range.minCount, (docCount == null) ? 1 : docCount);                                         // 60
                                                                                                                       // 61
	// If this is an array of objects, collect names of object props                                                      // 62
	var childKeys = [];                                                                                                   // 63
	if (ss.schema(field + '.$').type === Object) {                                                                        // 64
    childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                                // 65
	}                                                                                                                     // 66
                                                                                                                       // 67
	var loopArray = [];                                                                                                   // 68
	for (var i = 0; i < arrayCount; i++) {                                                                                // 69
		var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                        // 70
		loopArray.push(loopCtx);                                                                                             // 71
	};                                                                                                                    // 72
                                                                                                                       // 73
	self.info[formId][field].array = loopArray;                                                                           // 74
	var count = loopArray.length;                                                                                         // 75
	self.info[formId][field].count = count;                                                                               // 76
	self.info[formId][field].visibleCount = count;                                                                        // 77
	self.info[formId][field].deps.changed();                                                                              // 78
};                                                                                                                     // 79
                                                                                                                       // 80
ArrayTracker.prototype.resetField = function atResetField(formId, field) {                                             // 81
	var self = this;                                                                                                      // 82
	self.initForm(formId);                                                                                                // 83
                                                                                                                       // 84
	if (!self.info[formId][field]) {                                                                                      // 85
		self.info[formId][field] = {                                                                                         // 86
			deps: new Tracker.Dependency()                                                                                      // 87
		};                                                                                                                   // 88
	}                                                                                                                     // 89
                                                                                                                       // 90
	self.info[formId][field].array = null;                                                                                // 91
	self.info[formId][field].count = 0;                                                                                   // 92
	self.info[formId][field].visibleCount = 0;                                                                            // 93
	self.info[formId][field].deps.changed();                                                                              // 94
};                                                                                                                     // 95
                                                                                                                       // 96
ArrayTracker.prototype.resetForm = function atResetForm(formId) {                                                      // 97
	var self = this;                                                                                                      // 98
	_.each(self.info[formId], function (info, field) {                                                                    // 99
		self.resetField(formId, field);                                                                                      // 100
	});                                                                                                                   // 101
};                                                                                                                     // 102
                                                                                                                       // 103
ArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {                                                  // 104
	var self = this;                                                                                                      // 105
	self.info[formId] = {};                                                                                               // 106
};                                                                                                                     // 107
                                                                                                                       // 108
ArrayTracker.prototype.tracksField = function atTracksField(formId, field) {                                           // 109
	var self = this;                                                                                                      // 110
	self.ensureField(formId, field);                                                                                      // 111
	self.info[formId][field].deps.depend();                                                                               // 112
	return !!self.info[formId][field].array;                                                                              // 113
};                                                                                                                     // 114
                                                                                                                       // 115
ArrayTracker.prototype.getField = function atGetField(formId, field) {                                                 // 116
	var self = this;                                                                                                      // 117
	self.ensureField(formId, field);                                                                                      // 118
	self.info[formId][field].deps.depend();                                                                               // 119
	return self.info[formId][field].array;                                                                                // 120
};                                                                                                                     // 121
                                                                                                                       // 122
ArrayTracker.prototype.getCount = function atGetCount(formId, field) {                                                 // 123
	var self = this;                                                                                                      // 124
	self.ensureField(formId, field);                                                                                      // 125
	self.info[formId][field].deps.depend();                                                                               // 126
	return self.info[formId][field].count;                                                                                // 127
};                                                                                                                     // 128
                                                                                                                       // 129
ArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {                                   // 130
	var self = this;                                                                                                      // 131
	self.ensureField(formId, field);                                                                                      // 132
	self.info[formId][field].deps.depend();                                                                               // 133
	return self.info[formId][field].visibleCount;                                                                         // 134
};                                                                                                                     // 135
                                                                                                                       // 136
ArrayTracker.prototype.isFirstFieldlVisible = function atIsFirstFieldlVisible(formId, field, currentIndex) {           // 137
	var self = this;                                                                                                      // 138
	self.ensureField(formId, field);                                                                                      // 139
	self.info[formId][field].deps.depend();                                                                               // 140
	var firstVisibleField = _.find(self.info[formId][field].array, function(currentField) {                               // 141
		return !currentField.removed;                                                                                        // 142
	});                                                                                                                   // 143
	return (firstVisibleField && firstVisibleField.index === currentIndex);                                               // 144
};                                                                                                                     // 145
                                                                                                                       // 146
ArrayTracker.prototype.isLastFieldlVisible = function atIsLastFieldlVisible(formId, field, currentIndex) {             // 147
	var self = this;                                                                                                      // 148
	self.ensureField(formId, field);                                                                                      // 149
	self.info[formId][field].deps.depend();                                                                               // 150
	var lastVisibleField = _.last(_.filter(self.info[formId][field].array, function(currentField) {                       // 151
		return !currentField.removed;                                                                                        // 152
	}));                                                                                                                  // 153
	return (lastVisibleField && lastVisibleField.index === currentIndex);                                                 // 154
};                                                                                                                     // 155
                                                                                                                       // 156
ArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {
  var self = this;                                                                                                     // 158
  self.ensureField(formId, field);                                                                                     // 159
                                                                                                                       // 160
  if (!self.info[formId][field].array) {                                                                               // 161
  	return;                                                                                                             // 162
  }                                                                                                                    // 163
                                                                                                                       // 164
  var currentCount = self.info[formId][field].visibleCount                                                             // 165
  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;                               // 166
                                                                                                                       // 167
  if (currentCount < maxCount) {                                                                                       // 168
	  var i = self.info[formId][field].array.length;                                                                      // 169
                                                                                                                       // 170
	  // If this is an array of objects, collect names of object props                                                    // 171
	  var childKeys = [];                                                                                                 // 172
	  if (ss.schema(field + '.$').type === Object) {                                                                      // 173
      childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                              // 174
	  }                                                                                                                   // 175
                                                                                                                       // 176
	  var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                       // 177
                                                                                                                       // 178
	  self.info[formId][field].array.push(loopCtx);                                                                       // 179
	  self.info[formId][field].count++;                                                                                   // 180
	  self.info[formId][field].visibleCount++;                                                                            // 181
	  self.info[formId][field].deps.changed();                                                                            // 182
  }                                                                                                                    // 183
};                                                                                                                     // 184
                                                                                                                       // 185
ArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {
  var self = this;                                                                                                     // 187
  self.ensureField(formId, field);                                                                                     // 188
                                                                                                                       // 189
  if (!self.info[formId][field].array) {                                                                               // 190
  	return;                                                                                                             // 191
  }                                                                                                                    // 192
                                                                                                                       // 193
  var currentCount = self.info[formId][field].visibleCount;                                                            // 194
  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;                               // 195
                                                                                                                       // 196
  if (currentCount > minCount) {                                                                                       // 197
    self.info[formId][field].array[index].removed = true;                                                              // 198
    self.info[formId][field].count--;                                                                                  // 199
    self.info[formId][field].visibleCount--;                                                                           // 200
    self.info[formId][field].deps.changed();                                                                           // 201
  }                                                                                                                    // 202
}                                                                                                                      // 203
                                                                                                                       // 204
/*                                                                                                                     // 205
 * PRIVATE                                                                                                             // 206
 */                                                                                                                    // 207
var createLoopCtx = function(formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {                    // 208
  var loopCtx = {                                                                                                      // 209
  	formId:         formId,                                                                                             // 210
  	arrayFieldName: field,                                                                                              // 211
  	name:           field + '.' + index,                                                                                // 212
  	index:          index,                                                                                              // 213
  	minCount:       overrideMinCount,                                                                                   // 214
  	maxCount:       overrideMaxCount                                                                                    // 215
  };                                                                                                                   // 216
                                                                                                                       // 217
  // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName                // 218
  if (childKeys.length) {                                                                                              // 219
    loopCtx.current = {};                                                                                              // 220
	_.each(childKeys, function (k) {                                                                                      // 221
	  loopCtx.current[k] = field + '.' + index + '.' + k;                                                                 // 222
    });                                                                                                                // 223
  }                                                                                                                    // 224
                                                                                                                       // 225
  return loopCtx;                                                                                                      // 226
}                                                                                                                      // 227
                                                                                                                       // 228
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 1032
}).call(this);                                                       // 1033
                                                                     // 1034
                                                                     // 1035
                                                                     // 1036
                                                                     // 1037
                                                                     // 1038
                                                                     // 1039
(function () {                                                       // 1040
                                                                     // 1041
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm:true, FormPreserve */                                                                               // 1
                                                                                                                       // 2
AutoForm = AutoForm || {};                                                                                             // 3
                                                                                                                       // 4
// formPreserve is used to keep current form data across hot code                                                      // 5
// reloads for any forms that are currently rendered                                                                   // 6
AutoForm.formPreserve = new FormPreserve("autoforms");                                                                 // 7
                                                                                                                       // 8
AutoForm.reactiveFormData = new FormData();                                                                            // 9
                                                                                                                       // 10
AutoForm._inputTypeDefinitions = {}; //for storing input type definitions added by AutoForm.addInputType               // 11
AutoForm._formTypeDefinitions = {}; //for storing submit type definitions added by AutoForm.addFormType                // 12
                                                                                                                       // 13
arrayTracker = new ArrayTracker();                                                                                     // 14
                                                                                                                       // 15
// Used by AutoForm._forceResetFormValues; temporary hack                                                              // 16
AutoForm._destroyForm = {};                                                                                            // 17
                                                                                                                       // 18
// reactive templates                                                                                                  // 19
globalDefaultTemplate = "bootstrap3";                                                                                  // 20
defaultTypeTemplates = {};                                                                                             // 21
deps = {                                                                                                               // 22
  defaultTemplate: new Tracker.Dependency(),                                                                           // 23
  defaultTypeTemplates: {}                                                                                             // 24
};                                                                                                                     // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 1075
}).call(this);                                                       // 1076
                                                                     // 1077
                                                                     // 1078
                                                                     // 1079
                                                                     // 1080
                                                                     // 1081
                                                                     // 1082
(function () {                                                       // 1083
                                                                     // 1084
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-helpers.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global arrayTracker, SimpleSchema, AutoForm */                                                                      // 1
                                                                                                                       // 2
function parseOptions(options) {                                                                                       // 3
  var hash = (options || {}).hash || {};                                                                               // 4
  // Find the form's schema                                                                                            // 5
  var ss = AutoForm.getFormSchema();                                                                                   // 6
  // Call getDefs for side effect of throwing errors when name is not in schema                                        // 7
  if (hash.name) {                                                                                                     // 8
    AutoForm.Utility.getDefs(ss, hash.name);                                                                           // 9
  }                                                                                                                    // 10
  return _.extend({}, hash, {ss: ss});                                                                                 // 11
}                                                                                                                      // 12
                                                                                                                       // 13
/*                                                                                                                     // 14
 * Global template helpers (exported to app)                                                                           // 15
 */                                                                                                                    // 16
                                                                                                                       // 17
/*                                                                                                                     // 18
 * afFieldMessage                                                                                                      // 19
 */                                                                                                                    // 20
Template.registerHelper('afFieldMessage', function autoFormFieldMessage(options) {                                     // 21
  options = parseOptions(options, 'afFieldMessage');                                                                   // 22
  var formId = AutoForm.getFormId();                                                                                   // 23
                                                                                                                       // 24
  return options.ss.namedContext(formId).keyErrorMessage(options.name);                                                // 25
});                                                                                                                    // 26
                                                                                                                       // 27
/*                                                                                                                     // 28
 * afFieldIsInvalid                                                                                                    // 29
 */                                                                                                                    // 30
Template.registerHelper('afFieldIsInvalid', function autoFormFieldIsInvalid(options) {                                 // 31
  options = parseOptions(options, 'afFieldIsInvalid');                                                                 // 32
  var formId = AutoForm.getFormId();                                                                                   // 33
                                                                                                                       // 34
  return options.ss.namedContext(formId).keyIsInvalid(options.name);                                                   // 35
});                                                                                                                    // 36
                                                                                                                       // 37
/*                                                                                                                     // 38
 * afArrayFieldHasMoreThanMinimum                                                                                      // 39
 */                                                                                                                    // 40
Template.registerHelper('afArrayFieldHasMoreThanMinimum', function autoFormArrayFieldHasMoreThanMinimum(options) {     // 41
  options = parseOptions(options, 'afArrayFieldHasMoreThanMinimum');                                                   // 42
  var form = AutoForm.getCurrentDataPlusExtrasForForm();                                                               // 43
                                                                                                                       // 44
  // Registered form types can disable adding/removing array items                                                     // 45
  if (form.formTypeDef.hideArrayItemButtons) {                                                                         // 46
    return false;                                                                                                      // 47
  }                                                                                                                    // 48
                                                                                                                       // 49
  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 50
  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);                                              // 51
  return (visibleCount > range.minCount);                                                                              // 52
});                                                                                                                    // 53
                                                                                                                       // 54
/*                                                                                                                     // 55
 * afArrayFieldHasLessThanMaximum                                                                                      // 56
 */                                                                                                                    // 57
Template.registerHelper('afArrayFieldHasLessThanMaximum', function autoFormArrayFieldHasLessThanMaximum(options) {     // 58
  options = parseOptions(options, 'afArrayFieldHasLessThanMaximum');                                                   // 59
  var form = AutoForm.getCurrentDataPlusExtrasForForm();                                                               // 60
                                                                                                                       // 61
  // Registered form types can disable adding/removing array items                                                     // 62
  if (form.formTypeDef.hideArrayItemButtons) {                                                                         // 63
    return false;                                                                                                      // 64
  }                                                                                                                    // 65
                                                                                                                       // 66
  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 67
  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);                                              // 68
  return (visibleCount < range.maxCount);                                                                              // 69
});                                                                                                                    // 70
                                                                                                                       // 71
/*                                                                                                                     // 72
 * afFieldValueIs                                                                                                      // 73
 */                                                                                                                    // 74
Template.registerHelper('afFieldValueIs', function autoFormFieldValueIs(options) {                                     // 75
  options = parseOptions(options, 'afFieldValueIs');                                                                   // 76
                                                                                                                       // 77
  var currentValue = AutoForm.getFieldValue(options.name, options.formId);                                             // 78
  return currentValue === options.value;                                                                               // 79
});                                                                                                                    // 80
                                                                                                                       // 81
/*                                                                                                                     // 82
 * afArrayFieldIsFirstVisible                                                                                          // 83
 */                                                                                                                    // 84
Template.registerHelper('afArrayFieldIsFirstVisible', function autoFormArrayFieldIsFirstVisible() {                    // 85
  var context = this;                                                                                                  // 86
  return arrayTracker.isFirstFieldlVisible(context.formId, context.arrayFieldName, context.index);                     // 87
});                                                                                                                    // 88
                                                                                                                       // 89
/*                                                                                                                     // 90
 * afArrayFieldIsLastVisible                                                                                           // 91
 */                                                                                                                    // 92
Template.registerHelper('afArrayFieldIsLastVisible', function autoFormArrayFieldIsLastVisible() {                      // 93
  var context = this;                                                                                                  // 94
  return arrayTracker.isLastFieldlVisible(context.formId, context.arrayFieldName, context.index);                      // 95
});                                                                                                                    // 96
                                                                                                                       // 97
/*                                                                                                                     // 98
 * afFieldValueContains                                                                                                // 99
 */                                                                                                                    // 100
Template.registerHelper('afFieldValueContains', function autoFormFieldValueContains(options) {                         // 101
  options = parseOptions(options, 'afFieldValueContains');                                                             // 102
                                                                                                                       // 103
  var currentValue = AutoForm.getFieldValue(options.name, options.formId);                                             // 104
  return _.isArray(currentValue) && (_.contains(currentValue, options.value) || options.values && _.intersection(currentValue, options.values.split(",")));
});                                                                                                                    // 106
                                                                                                                       // 107
/*                                                                                                                     // 108
 * afFieldLabelText                                                                                                    // 109
 */                                                                                                                    // 110
Template.registerHelper('afFieldLabelText', function autoFormFieldLabelText(options) {                                 // 111
  options = parseOptions(options, 'afFieldLabelText');                                                                 // 112
  return AutoForm.getLabelForField(options.name);                                                                      // 113
});                                                                                                                    // 114
                                                                                                                       // 115
/*                                                                                                                     // 116
 * afFieldNames                                                                                                        // 117
 */                                                                                                                    // 118
Template.registerHelper("afFieldNames", function autoFormFieldNames(options) {                                         // 119
  options = parseOptions(options, 'afFieldNames');                                                                     // 120
  var ss = options.ss, name = options.name, namePlusDot, genericName, genericNamePlusDot;                              // 121
  var form = AutoForm.getCurrentDataForForm();                                                                         // 122
                                                                                                                       // 123
  if (name) {                                                                                                          // 124
    namePlusDot = name + ".";                                                                                          // 125
    genericName = SimpleSchema._makeGeneric(name);                                                                     // 126
    genericNamePlusDot = genericName + ".";                                                                            // 127
  }                                                                                                                    // 128
                                                                                                                       // 129
  // Get the list of fields we want included                                                                           // 130
  var fieldList = options.fields, usedAncestorFieldList = false;                                                       // 131
  if (fieldList) {                                                                                                     // 132
    fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');
  }                                                                                                                    // 134
                                                                                                                       // 135
  var ancestorFieldList = AutoForm.findAttribute("fields");                                                            // 136
  if (ancestorFieldList) {                                                                                             // 137
    ancestorFieldList = AutoForm.Utility.stringToArray(ancestorFieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');
                                                                                                                       // 139
    // Use the ancestor field list as backup, unless there is                                                          // 140
    // a name and that name is listed in the ancestor field list                                                       // 141
    if (!fieldList) {                                                                                                  // 142
      fieldList = ancestorFieldList;                                                                                   // 143
      usedAncestorFieldList = true;                                                                                    // 144
    }                                                                                                                  // 145
  }                                                                                                                    // 146
                                                                                                                       // 147
  if (fieldList) {                                                                                                     // 148
                                                                                                                       // 149
    // Take only those fields in the fieldList that are descendants of the `name` field                                // 150
    if (name) {                                                                                                        // 151
      // Replace generic name with real name. We assume that field names                                               // 152
      // with $ apply to all array items. Field list will now have the                                                 // 153
      // correct array field item number instead of $.                                                                 // 154
      if (genericName !== name) {                                                                                      // 155
        fieldList = _.map(fieldList, function (field) {                                                                // 156
          if (field.indexOf(genericNamePlusDot) === 0) {                                                               // 157
            return namePlusDot + field.slice(genericNamePlusDot.length);                                               // 158
          }                                                                                                            // 159
          return field;                                                                                                // 160
        });                                                                                                            // 161
      }                                                                                                                // 162
                                                                                                                       // 163
      fieldList = _.filter(fieldList, function filterFieldsByName(field) {                                             // 164
        return field.indexOf(namePlusDot) === 0;                                                                       // 165
      });                                                                                                              // 166
    }                                                                                                                  // 167
                                                                                                                       // 168
    // If top level fields, be sure to remove any with $ in them                                                       // 169
    else {                                                                                                             // 170
      fieldList = _.filter(fieldList, function filterArrayFields(field) {                                              // 171
        return (field.slice(-2) !== '.$' && field.indexOf('.$.') === -1);                                              // 172
      });                                                                                                              // 173
    }                                                                                                                  // 174
                                                                                                                       // 175
    // First we filter out any fields that are subobjects where the                                                    // 176
    // parent object is also in the fieldList and is NOT the current                                                   // 177
    // field name.                                                                                                     // 178
    // This means that if you do `fields="address,address.city"` we                                                    // 179
    // will use an afObjectField for address and include only the                                                      // 180
    // "city" field within that, but if you instead do `fields="address.city"`                                         // 181
    // we will use a single field for the city, with no afObjectField                                                  // 182
    // template around it.                                                                                             // 183
    fieldList = _.reject(fieldList, function (field) {                                                                 // 184
      var lastDotPos = field.lastIndexOf(".");                                                                         // 185
      if (lastDotPos === -1) {                                                                                         // 186
        return false; //keep                                                                                           // 187
      }                                                                                                                // 188
                                                                                                                       // 189
      var parentField = field.slice(0, lastDotPos);                                                                    // 190
      if (parentField.slice(-2) === ".$") {                                                                            // 191
        parentField = parentField.slice(0, -2);                                                                        // 192
      }                                                                                                                // 193
      return _.contains(fieldList, parentField) && parentField !== name && parentField !== genericName;                // 194
    });                                                                                                                // 195
  }                                                                                                                    // 196
                                                                                                                       // 197
  if (!fieldList || (fieldList.length === 0 && usedAncestorFieldList)) {                                               // 198
    // Get list of field names that are descendants of this field's name.                                              // 199
    // If name/genericName is undefined, this will return top-level                                                    // 200
    // schema keys.                                                                                                    // 201
    fieldList = ss.objectKeys(genericName);                                                                            // 202
                                                                                                                       // 203
    if (name) {                                                                                                        // 204
      // Tack child field name on to end of parent field name. This                                                    // 205
      // ensures that we keep the desired array index for array items.                                                 // 206
      fieldList = _.map(fieldList, function (field) {                                                                  // 207
        return name + "." + field;                                                                                     // 208
      });                                                                                                              // 209
    }                                                                                                                  // 210
  }                                                                                                                    // 211
                                                                                                                       // 212
  // If user wants to omit some fields, remove those from the array                                                    // 213
  var omitFields = options.omitFields || AutoForm.findAttribute("omitFields");                                         // 214
  if (omitFields) {                                                                                                    // 215
    omitFields = AutoForm.Utility.stringToArray(omitFields, 'AutoForm: omitFields attribute must be an array or a string containing a comma-delimited list of fields');
    fieldList = _.difference(fieldList, omitFields);                                                                   // 217
    // If omitFields contains generic field names (with $) we omit those too                                           // 218
    fieldList = _.reject(fieldList, function (f) {                                                                     // 219
      return _.contains(omitFields, SimpleSchema._makeGeneric(f));                                                     // 220
    });                                                                                                                // 221
  }                                                                                                                    // 222
                                                                                                                       // 223
  // Filter out fields we never want                                                                                   // 224
  fieldList = _.filter(fieldList, function shouldIncludeField(field) {                                                 // 225
    var fieldDefs = ss.schema(field);                                                                                  // 226
                                                                                                                       // 227
    // Don't include fields that are not in the schema                                                                 // 228
    if (!fieldDefs) {                                                                                                  // 229
      return false;                                                                                                    // 230
    }                                                                                                                  // 231
                                                                                                                       // 232
    // Don't include fields with autoform.omit=true                                                                    // 233
    if (fieldDefs.autoform && fieldDefs.autoform.omit === true) {                                                      // 234
      return false;                                                                                                    // 235
    }                                                                                                                  // 236
                                                                                                                       // 237
    // Don't include fields with denyInsert=true when it's an insert form                                              // 238
    if (fieldDefs.denyInsert && form.type === "insert") {                                                              // 239
      return false;                                                                                                    // 240
    }                                                                                                                  // 241
                                                                                                                       // 242
    // Don't include fields with denyUpdate=true when it's an update form                                              // 243
    if (fieldDefs.denyUpdate && form.type === "update") {                                                              // 244
      return false;                                                                                                    // 245
    }                                                                                                                  // 246
                                                                                                                       // 247
    return true;                                                                                                       // 248
  });                                                                                                                  // 249
                                                                                                                       // 250
  // Ensure fields are not added more than once                                                                        // 251
  fieldList = _.unique(fieldList);                                                                                     // 252
                                                                                                                       // 253
  // We return it as an array of objects because that                                                                  // 254
  // works better with Blaze contexts                                                                                  // 255
  fieldList = _.map(fieldList, function (name) {                                                                       // 256
    return {name: name};                                                                                               // 257
  });                                                                                                                  // 258
                                                                                                                       // 259
  return fieldList;                                                                                                    // 260
});                                                                                                                    // 261
                                                                                                                       // 262
                                                                                                                       // 263
/*                                                                                                                     // 264
 * afSelectOptionAtts                                                                                                  // 265
 */                                                                                                                    // 266
Template.registerHelper('afSelectOptionAtts', function afSelectOptionAtts() {                                          // 267
  var atts = _.pick(this, 'value');                                                                                    // 268
  if (this.selected) {                                                                                                 // 269
    atts.selected = "";                                                                                                // 270
  }                                                                                                                    // 271
  if (this.htmlAtts) {                                                                                                 // 272
    _.extend(atts, this.htmlAtts);                                                                                     // 273
  }                                                                                                                    // 274
  return atts;                                                                                                         // 275
});                                                                                                                    // 276
                                                                                                                       // 277
// Expects to be called with this.name available                                                                       // 278
Template.registerHelper('afOptionsFromSchema', function afOptionsFromSchema() {                                        // 279
  return AutoForm._getOptionsForField(this.name);                                                                      // 280
});                                                                                                                    // 281
                                                                                                                       // 282
/*                                                                                                                     // 283
 * afTemplateName                                                                                                      // 284
 * Deprecated. Don't use this. Eventually remove it.                                                                   // 285
 */                                                                                                                    // 286
Template.registerHelper('afTemplateName', function afTemplateNameHelper(templateType, templateName) {                  // 287
  var self = this;                                                                                                     // 288
  console.log('The afTemplateName template helper is deprecated. Use AutoForm.getTemplateName method in your own helper.');
  return AutoForm.getTemplateName(templateType, templateName, self.atts && self.atts.name);                            // 290
});                                                                                                                    // 291
                                                                                                                       // 292
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 1384
}).call(this);                                                       // 1385
                                                                     // 1386
                                                                     // 1387
                                                                     // 1388
                                                                     // 1389
                                                                     // 1390
                                                                     // 1391
(function () {                                                       // 1392
                                                                     // 1393
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-validation.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, validateField:true */                                                                              // 1
                                                                                                                       // 2
function _validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid) {                                                // 3
  var docToValidate;                                                                                                   // 4
                                                                                                                       // 5
  // Due to throttling, this can be called after the autoForm template is destroyed.                                   // 6
  // If that happens, we exit without error.                                                                           // 7
  var template = AutoForm.templateInstanceForForm(formId);                                                             // 8
                                                                                                                       // 9
  // If form is not currently rendered, return true                                                                    // 10
  if (!template ||                                                                                                     // 11
      !template.view ||                                                                                                // 12
      !template.view._domrange ||                                                                                      // 13
      template.view.isDestroyed) {                                                                                     // 14
    return true;                                                                                                       // 15
  }                                                                                                                    // 16
                                                                                                                       // 17
  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 18
  var ss = AutoForm.getFormSchema(formId, form);                                                                       // 19
                                                                                                                       // 20
  if (!ss) {                                                                                                           // 21
    return true;                                                                                                       // 22
  }                                                                                                                    // 23
                                                                                                                       // 24
  // Skip validation if onlyIfAlreadyInvalid is true and the form is                                                   // 25
  // currently valid.                                                                                                  // 26
  if (onlyIfAlreadyInvalid && ss.namedContext(formId).isValid()) {                                                     // 27
    return true; //skip validation                                                                                     // 28
  }                                                                                                                    // 29
                                                                                                                       // 30
  // Create a document based on all the values of all the inputs on the form                                           // 31
  // Get the form type definition                                                                                      // 32
  var ftd = Utility.getFormTypeDef(form.type);                                                                         // 33
                                                                                                                       // 34
  // Clean and validate doc                                                                                            // 35
  docToValidate = AutoForm.getFormValues(formId, template, ss, !!ftd.usesModifier);                                    // 36
                                                                                                                       // 37
  // If form is not currently rendered, return true                                                                    // 38
  if (!docToValidate) {                                                                                                // 39
    return true;                                                                                                       // 40
  }                                                                                                                    // 41
                                                                                                                       // 42
  // Skip validation if skipEmpty is true and the field we're validating                                               // 43
  // has no value.                                                                                                     // 44
  if (skipEmpty && !AutoForm.Utility.objAffectsKey(docToValidate, key)) {                                              // 45
    return true; //skip validation                                                                                     // 46
  }                                                                                                                    // 47
                                                                                                                       // 48
  return AutoForm._validateFormDoc(docToValidate, !!ftd.usesModifier, formId, ss, form, key);                          // 49
}                                                                                                                      // 50
                                                                                                                       // 51
// Throttle field validation to occur at most every 300ms,                                                             // 52
// with leading and trailing calls.                                                                                    // 53
validateField = _.throttle(_validateField, 300);                                                                       // 54
                                                                                                                       // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 1456
}).call(this);                                                       // 1457
                                                                     // 1458
                                                                     // 1459
                                                                     // 1460
                                                                     // 1461
                                                                     // 1462
                                                                     // 1463
(function () {                                                       // 1464
                                                                     // 1465
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-inputs.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, getInputValue:true, getAllFieldsInForm:true, getInputData:true, updateTrackedFieldValue:true, updateAllTrackedFieldValues:true, getFlatDocOfFieldValues:true */
                                                                                                                       // 2
getFlatDocOfFieldValues = function getFlatDocOfFieldValues(fields, ss) {                                               // 3
  var doc = {};                                                                                                        // 4
  fields.each(function () {                                                                                            // 5
    var fieldName, val = AutoForm.getInputValue(this, ss);                                                             // 6
    if (val !== void 0) {                                                                                              // 7
      // Get the field/schema key name                                                                                 // 8
      fieldName = $(this).attr("data-schema-key");                                                                     // 9
      doc[fieldName] = val;                                                                                            // 10
    }                                                                                                                  // 11
  });                                                                                                                  // 12
  return doc;                                                                                                          // 13
};                                                                                                                     // 14
                                                                                                                       // 15
/*                                                                                                                     // 16
 * package scope functions                                                                                             // 17
 */                                                                                                                    // 18
                                                                                                                       // 19
/*                                                                                                                     // 20
 * Gets the value that should be shown/selected in the input. Returns                                                  // 21
 * a string, a boolean, or an array of strings. The value used,                                                        // 22
 * in order of preference, is one of:                                                                                  // 23
 * * The `value` attribute provided                                                                                    // 24
 * * The value that is set in the `doc` provided on the containing autoForm                                            // 25
 * * The `defaultValue` from the schema                                                                                // 26
 */                                                                                                                    // 27
getInputValue = function getInputValue(atts, value, mDoc, schemaDefaultValue, fieldDefaultValue, typeDefs) {           // 28
                                                                                                                       // 29
  if (typeof value === "undefined") {                                                                                  // 30
    // Get the value for this key in the current document                                                              // 31
    if (mDoc) {                                                                                                        // 32
      var valueInfo = mDoc.getInfoForKey(atts.name);                                                                   // 33
      if (valueInfo) {                                                                                                 // 34
        value = valueInfo.value;                                                                                       // 35
      } else {                                                                                                         // 36
        value = fieldDefaultValue;                                                                                     // 37
      }                                                                                                                // 38
    }                                                                                                                  // 39
                                                                                                                       // 40
    // Only if there is no current document, use the schema defaultValue                                               // 41
    else {                                                                                                             // 42
      // Use the field default value if provided                                                                       // 43
      if (typeof fieldDefaultValue !== 'undefined') {                                                                  // 44
        value = fieldDefaultValue;                                                                                     // 45
      }                                                                                                                // 46
      // Or use the defaultValue in the schema                                                                         // 47
      else {                                                                                                           // 48
        value = schemaDefaultValue;                                                                                    // 49
      }                                                                                                                // 50
    }                                                                                                                  // 51
  }                                                                                                                    // 52
                                                                                                                       // 53
  // Change null or undefined to an empty string                                                                       // 54
  value = (value === null || value === void 0) ? '' : value;                                                           // 55
                                                                                                                       // 56
  // If the component expects the value to be an array, and it's not, make it one                                      // 57
  if (typeDefs.valueIsArray && !_.isArray(value)) {                                                                    // 58
    if (typeof value === "string") {                                                                                   // 59
      value = value.split(',');                                                                                        // 60
    } else {                                                                                                           // 61
      value = [value];                                                                                                 // 62
    }                                                                                                                  // 63
  }                                                                                                                    // 64
                                                                                                                       // 65
  // At this point we have a value or an array of values.                                                              // 66
  // Run through the components valueIn function if we have one.                                                       // 67
  // It should then be in whatever format the component expects.                                                       // 68
  if (typeof typeDefs.valueIn === "function") {                                                                        // 69
    value = typeDefs.valueIn(value, atts);                                                                             // 70
  }                                                                                                                    // 71
                                                                                                                       // 72
  return value;                                                                                                        // 73
};                                                                                                                     // 74
                                                                                                                       // 75
/*                                                                                                                     // 76
 * Builds the data context that the input component will have.                                                         // 77
 */                                                                                                                    // 78
getInputData = function getInputData(defs, hash, value, label, formType) {                                             // 79
                                                                                                                       // 80
  /*                                                                                                                   // 81
   * Get HTML attributes                                                                                               // 82
   */                                                                                                                  // 83
                                                                                                                       // 84
  // We don't want to alter the original hash, so we clone it and                                                      // 85
  // remove some stuff that should not be HTML attributes.                                                             // 86
  var inputAtts = _.omit(hash,                                                                                         // 87
          "type",                                                                                                      // 88
          "value",                                                                                                     // 89
          "noselect",                                                                                                  // 90
          "options",                                                                                                   // 91
          "template",                                                                                                  // 92
          "defaultValue");                                                                                             // 93
                                                                                                                       // 94
  // Add required if required                                                                                          // 95
  if (typeof inputAtts.required === "undefined" && !defs.optional) {                                                   // 96
    inputAtts.required = "";                                                                                           // 97
  }                                                                                                                    // 98
                                                                                                                       // 99
   // Add data-schema-key to every type of element                                                                     // 100
  inputAtts['data-schema-key'] = inputAtts.name;                                                                       // 101
                                                                                                                       // 102
  // Set placeholder to label from schema if requested.                                                                // 103
  // We check hash.placeholder instead of inputAtts.placeholder because                                                // 104
  // we're setting inputAtts.placeholder, so it wouldn't be the same on                                                // 105
  // subsequent reactive runs of this function.                                                                        // 106
  if (hash.placeholder === "schemaLabel") {                                                                            // 107
    inputAtts.placeholder = label;                                                                                     // 108
  }                                                                                                                    // 109
                                                                                                                       // 110
  // To enable reactively toggling boolean attributes                                                                  // 111
  // in a simple way, we add the attributes to the HTML                                                                // 112
  // only if their value is `true`. That is, unlike in                                                                 // 113
  // HTML, their mere presence does not matter.                                                                        // 114
  _.each(["disabled", "readonly", "checked", "required", "autofocus"], function (booleanProp) {                        // 115
    if (!_.has(hash, booleanProp)) {                                                                                   // 116
      return;                                                                                                          // 117
    }                                                                                                                  // 118
                                                                                                                       // 119
    // For historical reasons, we treat the string "true" and an empty string as `true`, too.                          // 120
    // But an empty string value results in the cleanest rendered output for boolean props,                            // 121
    // so we standardize as that.                                                                                      // 122
    if (hash[booleanProp] === true || hash[booleanProp] === "true" || hash[booleanProp] === "") {                      // 123
      inputAtts[booleanProp] = "";                                                                                     // 124
    } else {                                                                                                           // 125
      // If the value is anything else, we don't render it                                                             // 126
      delete inputAtts[booleanProp];                                                                                   // 127
    }                                                                                                                  // 128
  });                                                                                                                  // 129
                                                                                                                       // 130
  /*                                                                                                                   // 131
   * Set up the context. This is the object that becomes `this` in the                                                 // 132
   * input type template.                                                                                              // 133
   */                                                                                                                  // 134
                                                                                                                       // 135
  var inputTypeContext = {                                                                                             // 136
    name: inputAtts.name,                                                                                              // 137
    schemaType: defs.type,                                                                                             // 138
    min: (typeof defs.min === "function") ? defs.min() : defs.min,                                                     // 139
    max: (typeof defs.max === "function") ? defs.max() : defs.max,                                                     // 140
    decimal: defs.decimal,                                                                                             // 141
    value: value,                                                                                                      // 142
    atts: inputAtts,                                                                                                   // 143
    selectOptions: AutoForm.Utility.getSelectOptions(defs, hash)                                                       // 144
  };                                                                                                                   // 145
                                                                                                                       // 146
  // Before returning the context, we allow the registered form type to                                                // 147
  // adjust it if necessary.                                                                                           // 148
  var ftd = Utility.getFormTypeDef(formType);                                                                          // 149
  if (typeof ftd.adjustInputContext === 'function') {                                                                  // 150
    inputTypeContext = ftd.adjustInputContext(inputTypeContext);                                                       // 151
  }                                                                                                                    // 152
                                                                                                                       // 153
  return inputTypeContext;                                                                                             // 154
};                                                                                                                     // 155
                                                                                                                       // 156
function markChanged(template, fieldName) {                                                                            // 157
  // We always want to be sure to wait for DOM updates to                                                              // 158
  // finish before we indicate that values have changed.                                                               // 159
  // Using a value of 0 here did not work, but 100 seems to                                                            // 160
  // work in testing. We'll need to keep an eye on this.                                                               // 161
  // Not an ideal solution.                                                                                            // 162
  setTimeout(function () {                                                                                             // 163
    // Template or view may have disappeared while                                                                     // 164
    // we waited to run this                                                                                           // 165
    if (template &&                                                                                                    // 166
        template.view &&                                                                                               // 167
        template.view._domrange &&                                                                                     // 168
        !template.view.isDestroyed) {                                                                                  // 169
                                                                                                                       // 170
      template.formValues[fieldName].changed();                                                                        // 171
      template.formValues[fieldName].requestInProgress = false;                                                        // 172
                                                                                                                       // 173
    }                                                                                                                  // 174
  }, 100);                                                                                                             // 175
}                                                                                                                      // 176
                                                                                                                       // 177
updateTrackedFieldValue = function updateTrackedFieldValue(template, fieldName) {                                      // 178
  if (!template) {                                                                                                     // 179
    return;                                                                                                            // 180
  }                                                                                                                    // 181
                                                                                                                       // 182
  template.formValues = template.formValues || {};                                                                     // 183
  if (!template.formValues[fieldName]) {                                                                               // 184
    template.formValues[fieldName] = new Tracker.Dependency();                                                         // 185
  }                                                                                                                    // 186
  // In case we call updateTrackedFieldValue from multiple places at once,                                             // 187
  // call .changed() only once                                                                                         // 188
  if (template.formValues[fieldName].requestInProgress) {                                                              // 189
    return;                                                                                                            // 190
  }                                                                                                                    // 191
  template.formValues[fieldName].requestInProgress = true;                                                             // 192
                                                                                                                       // 193
  markChanged(template, fieldName);                                                                                    // 194
                                                                                                                       // 195
  // To properly handle array fields, we'll mark the ancestors as changed, too                                         // 196
  // XXX Might be a more elegant way to handle this                                                                    // 197
  var dotPos = fieldName.lastIndexOf('.');                                                                             // 198
  while (dotPos !== -1) {                                                                                              // 199
    fieldName = fieldName.slice(0, dotPos);                                                                            // 200
                                                                                                                       // 201
    if (!template.formValues[fieldName]) {                                                                             // 202
      template.formValues[fieldName] = new Tracker.Dependency();                                                       // 203
    }                                                                                                                  // 204
                                                                                                                       // 205
    markChanged(template, fieldName);                                                                                  // 206
                                                                                                                       // 207
    dotPos = fieldName.lastIndexOf('.');                                                                               // 208
  }                                                                                                                    // 209
};                                                                                                                     // 210
                                                                                                                       // 211
updateAllTrackedFieldValues = function updateAllTrackedFieldValues(template) {                                         // 212
  if (template && template.formValues) {                                                                               // 213
    _.each(template.formValues, function (o, fieldName) {                                                              // 214
      updateTrackedFieldValue(template, fieldName);                                                                    // 215
    });                                                                                                                // 216
  }                                                                                                                    // 217
};                                                                                                                     // 218
                                                                                                                       // 219
getAllFieldsInForm = function getAllFieldsInForm(template) {                                                           // 220
  // Get all elements with `data-schema-key` attribute, unless disabled                                                // 221
  return template.$("[data-schema-key]").not("[disabled]");                                                            // 222
  // Exclude fields in sub-forms, since they will belong to a different AutoForm and schema.                           // 223
  // TODO need some selector/filter that actually works correctly for excluding subforms                               // 224
  // return template.$('[data-schema-key]').not("[disabled]").not(template.$('form form [data-schema-key]'));          // 225
};                                                                                                                     // 226
                                                                                                                       // 227
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 1700
}).call(this);                                                       // 1701
                                                                     // 1702
                                                                     // 1703
                                                                     // 1704
                                                                     // 1705
                                                                     // 1706
                                                                     // 1707
(function () {                                                       // 1708
                                                                     // 1709
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-api.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm:true, SimpleSchema, Utility, Hooks, deps, globalDefaultTemplate:true, defaultTypeTemplates:true, validateField, arrayTracker, ReactiveVar, getAllFieldsInForm, setDefaults:true, getFlatDocOfFieldValues, MongoObject */
                                                                                                                       // 2
// This file defines the public, exported API                                                                          // 3
                                                                                                                       // 4
AutoForm = AutoForm || {}; //exported                                                                                  // 5
                                                                                                                       // 6
/**                                                                                                                    // 7
 * @property AutoForm.Utility                                                                                          // 8
 * @public                                                                                                             // 9
 */                                                                                                                    // 10
AutoForm.Utility = Utility;                                                                                            // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * @method AutoForm.addHooks                                                                                           // 14
 * @public                                                                                                             // 15
 * @param {String[]|String|null} formIds Form `id` or array of form IDs to which these hooks apply. Specify `null` to add hooks that will run for every form.
 * @param {Object} hooks Hooks to add, where supported names are "before", "after", "formToDoc", "docToForm", "onSubmit", "onSuccess", and "onError".
 * @returns {undefined}                                                                                                // 18
 *                                                                                                                     // 19
 * Defines hooks to be used by one or more forms. Extends hooks lists if called multiple times for the same            // 20
 * form.                                                                                                               // 21
 */                                                                                                                    // 22
AutoForm.addHooks = function autoFormAddHooks(formIds, hooks, replace) {                                               // 23
  if (typeof formIds === "string") {                                                                                   // 24
    formIds = [formIds];                                                                                               // 25
  }                                                                                                                    // 26
                                                                                                                       // 27
  // If formIds is null, add global hooks                                                                              // 28
  if (!formIds) {                                                                                                      // 29
    Hooks.addHooksToList(Hooks.global, hooks, replace);                                                                // 30
  } else {                                                                                                             // 31
    _.each(formIds, function (formId) {                                                                                // 32
                                                                                                                       // 33
      // Init the hooks object if not done yet                                                                         // 34
      Hooks.form[formId] = Hooks.form[formId] || Hooks.getDefault();                                                   // 35
                                                                                                                       // 36
      Hooks.addHooksToList(Hooks.form[formId], hooks, replace);                                                        // 37
    });                                                                                                                // 38
  }                                                                                                                    // 39
};                                                                                                                     // 40
                                                                                                                       // 41
/**                                                                                                                    // 42
 * @method AutoForm.hooks                                                                                              // 43
 * @public                                                                                                             // 44
 * @param {Object} hooks                                                                                               // 45
 * @returns {undefined}                                                                                                // 46
 *                                                                                                                     // 47
 * Defines hooks by form id. Extends hooks lists if called multiple times for the same                                 // 48
 * form.                                                                                                               // 49
 */                                                                                                                    // 50
AutoForm.hooks = function autoFormHooks(hooks, replace) {                                                              // 51
  _.each(hooks, function(hooksObj, formId) {                                                                           // 52
    AutoForm.addHooks(formId, hooksObj, replace);                                                                      // 53
  });                                                                                                                  // 54
};                                                                                                                     // 55
                                                                                                                       // 56
/**                                                                                                                    // 57
 * @property AutoForm._hooks                                                                                           // 58
 * @public                                                                                                             // 59
 *                                                                                                                     // 60
 * Hooks list to aid automated testing                                                                                 // 61
 */                                                                                                                    // 62
AutoForm._hooks = Hooks.form;                                                                                          // 63
                                                                                                                       // 64
/**                                                                                                                    // 65
 * @property AutoForm._globalHooks                                                                                     // 66
 * @public                                                                                                             // 67
 *                                                                                                                     // 68
 * Global hooks list to aid automated testing                                                                          // 69
 */                                                                                                                    // 70
AutoForm._globalHooks = Hooks.global;                                                                                  // 71
                                                                                                                       // 72
/**                                                                                                                    // 73
 * @method AutoForm._forceResetFormValues                                                                              // 74
 * @public                                                                                                             // 75
 * @param {String} formId                                                                                              // 76
 * @returns {undefined}                                                                                                // 77
 *                                                                                                                     // 78
 * Forces an AutoForm's values to properly update.                                                                     // 79
 * See https://github.com/meteor/meteor/issues/2431                                                                    // 80
 */                                                                                                                    // 81
AutoForm._forceResetFormValues = function autoFormForceResetFormValues(formId) {                                       // 82
  AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);                             // 83
                                                                                                                       // 84
  AutoForm._destroyForm[formId].set(true);                                                                             // 85
  setTimeout(function () {                                                                                             // 86
    AutoForm._destroyForm[formId].set(false);                                                                          // 87
  }, 0);                                                                                                               // 88
};                                                                                                                     // 89
                                                                                                                       // 90
/**                                                                                                                    // 91
 * @method AutoForm.resetForm                                                                                          // 92
 * @public                                                                                                             // 93
 * @param {String} formId                                                                                              // 94
 * @param {TemplateInstance} [template] Looked up if not provided. Pass in for efficiency.                             // 95
 * @returns {undefined}                                                                                                // 96
 *                                                                                                                     // 97
 * Resets an autoform, including resetting validation errors. The same as clicking the reset button for an autoform.   // 98
 */                                                                                                                    // 99
AutoForm.resetForm = function autoFormResetForm(formId, template) {                                                    // 100
  template = template || AutoForm.templateInstanceForForm(formId);                                                     // 101
                                                                                                                       // 102
  if (template && template.view._domrange && !template.view.isDestroyed) {                                             // 103
    template.$("form")[0].reset();                                                                                     // 104
  }                                                                                                                    // 105
};                                                                                                                     // 106
                                                                                                                       // 107
/**                                                                                                                    // 108
 * @method AutoForm.setDefaultTemplate                                                                                 // 109
 * @public                                                                                                             // 110
 * @param {String} template                                                                                            // 111
 */                                                                                                                    // 112
AutoForm.setDefaultTemplate = function autoFormSetDefaultTemplate(template) {                                          // 113
  globalDefaultTemplate = template;                                                                                    // 114
  deps.defaultTemplate.changed();                                                                                      // 115
};                                                                                                                     // 116
                                                                                                                       // 117
/**                                                                                                                    // 118
 * @method AutoForm.getDefaultTemplate                                                                                 // 119
 * @public                                                                                                             // 120
 *                                                                                                                     // 121
 * Reactive.                                                                                                           // 122
 */                                                                                                                    // 123
AutoForm.getDefaultTemplate = function autoFormGetDefaultTemplate() {                                                  // 124
  deps.defaultTemplate.depend();                                                                                       // 125
  return globalDefaultTemplate;                                                                                        // 126
};                                                                                                                     // 127
                                                                                                                       // 128
/**                                                                                                                    // 129
 * @method AutoForm.setDefaultTemplateForType                                                                          // 130
 * @public                                                                                                             // 131
 * @param {String} type                                                                                                // 132
 * @param {String} template                                                                                            // 133
 */                                                                                                                    // 134
AutoForm.setDefaultTemplateForType = function autoFormSetDefaultTemplateForType(type, template) {                      // 135
  if (!deps.defaultTypeTemplates[type]) {                                                                              // 136
    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 137
  }                                                                                                                    // 138
  if (template !== null && !Template[type + "_" + template]) {                                                         // 139
    throw new Error("setDefaultTemplateForType can't set default template to \"" + template + "\" for type \"" + type + "\" because there is no defined template with the name \"" + type + "_" + template + "\"");
  }                                                                                                                    // 141
  defaultTypeTemplates[type] = template;                                                                               // 142
  deps.defaultTypeTemplates[type].changed();                                                                           // 143
};                                                                                                                     // 144
                                                                                                                       // 145
/**                                                                                                                    // 146
 * @method AutoForm.getDefaultTemplateForType                                                                          // 147
 * @public                                                                                                             // 148
 * @param {String} type                                                                                                // 149
 * @return {String} Template name                                                                                      // 150
 *                                                                                                                     // 151
 * Reactive.                                                                                                           // 152
 */                                                                                                                    // 153
AutoForm.getDefaultTemplateForType = function autoFormGetDefaultTemplateForType(type) {                                // 154
  if (!deps.defaultTypeTemplates[type]) {                                                                              // 155
    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 156
  }                                                                                                                    // 157
  deps.defaultTypeTemplates[type].depend();                                                                            // 158
  return defaultTypeTemplates[type];                                                                                   // 159
};                                                                                                                     // 160
                                                                                                                       // 161
/**                                                                                                                    // 162
 * @method AutoForm.getTemplateName                                                                                    // 163
 * @public                                                                                                             // 164
 * @param {String} templateType                                                                                        // 165
 * @param {String} templateName                                                                                        // 166
 * @param {String} [fieldName]                                                                                         // 167
 * @param {Boolean} [skipExistsCheck] Pass `true` to return a template name even if that template hasn't been defined. // 168
 * @return {String} Template name                                                                                      // 169
 *                                                                                                                     // 170
 * Returns the full template name. In the simplest scenario, this is templateType_templateName                         // 171
 * as passed in. However, if templateName is not provided, it is looked up in the following                            // 172
 * manner:                                                                                                             // 173
 *                                                                                                                     // 174
 * 1. autoform.<componentType>.template from the schema (field+type override for all forms)                            // 175
 * 2. autoform.template from the schema (field override for all forms)                                                 // 176
 * 3. template-<componentType> attribute on an ancestor component within the same form (form+type for all fields)      // 177
 * 4. template attribute on an ancestor component within the same form (form specificity for all types and fields)     // 178
 * 5. Default template for component type, as set by AutoForm.setDefaultTemplateForType                                // 179
 * 6. Default template, as set by AutoForm.setDefaultTemplate.                                                         // 180
 * 7. Built-in default template, currently bootstrap-3.                                                                // 181
 */                                                                                                                    // 182
AutoForm.getTemplateName = function autoFormGetTemplateName(templateType, templateName, fieldName, skipExistsCheck) {  // 183
  var schemaAutoFormDefs, templateFromAncestor, defaultTemplate;                                                       // 184
                                                                                                                       // 185
  function templateExists(t) {                                                                                         // 186
    return !!(skipExistsCheck || Template[t]);                                                                         // 187
  }                                                                                                                    // 188
                                                                                                                       // 189
  // Default case: use the `template` attribute provided                                                               // 190
  if (templateName && templateExists(templateType + '_' + templateName)) {                                             // 191
    return templateType + '_' + templateName;                                                                          // 192
  }                                                                                                                    // 193
                                                                                                                       // 194
  // If the attributes provided a templateName but that template didn't exist, show a warning                          // 195
  if (templateName && AutoForm._debug) {                                                                               // 196
    console.warn(templateType + ': "' + templateName + '" is not a valid template name. Falling back to a different template.');
  }                                                                                                                    // 198
                                                                                                                       // 199
  // Get `autoform` object from the schema, if present.                                                                // 200
  // Skip for quickForm because it renders a form and not a field.                                                     // 201
  if (templateType !== 'quickForm' && fieldName) {                                                                     // 202
    schemaAutoFormDefs = AutoForm.getSchemaForField(fieldName).autoform;                                               // 203
  }                                                                                                                    // 204
                                                                                                                       // 205
  // Fallback #1: autoform.<componentType>.template from the schema                                                    // 206
  if (schemaAutoFormDefs && schemaAutoFormDefs[templateType] && schemaAutoFormDefs[templateType].template && templateExists(templateType + '_' + schemaAutoFormDefs[templateType].template)) {
    return templateType + '_' + schemaAutoFormDefs[templateType].template;                                             // 208
  }                                                                                                                    // 209
                                                                                                                       // 210
  // Fallback #2: autoform.template from the schema                                                                    // 211
  if (schemaAutoFormDefs && schemaAutoFormDefs.template && templateExists(templateType + '_' + schemaAutoFormDefs.template)) {
    return templateType + '_' + schemaAutoFormDefs.template;                                                           // 213
  }                                                                                                                    // 214
                                                                                                                       // 215
  // Fallback #3: template-<componentType> attribute on an ancestor component within the same form                     // 216
  templateFromAncestor = AutoForm.findAttribute("template-" + templateType);                                           // 217
  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {                             // 218
    return templateType + '_' + templateFromAncestor;                                                                  // 219
  }                                                                                                                    // 220
                                                                                                                       // 221
  // Fallback #4: template attribute on an ancestor component within the same form                                     // 222
  templateFromAncestor = AutoForm.findAttribute("template");                                                           // 223
  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {                             // 224
    return templateType + '_' + templateFromAncestor;                                                                  // 225
  }                                                                                                                    // 226
                                                                                                                       // 227
  // Fallback #5: Default template for component type, as set by AutoForm.setDefaultTemplateForType                    // 228
  defaultTemplate = AutoForm.getDefaultTemplateForType(templateType);                                                  // 229
  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {                                       // 230
    return templateType + '_' + defaultTemplate;                                                                       // 231
  }                                                                                                                    // 232
                                                                                                                       // 233
  // Fallback #6: Default template, as set by AutoForm.setDefaultTemplate                                              // 234
  defaultTemplate = AutoForm.getDefaultTemplate();                                                                     // 235
  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {                                       // 236
    return templateType + '_' + defaultTemplate;                                                                       // 237
  }                                                                                                                    // 238
                                                                                                                       // 239
  // Found nothing. Return undefined                                                                                   // 240
  return;                                                                                                              // 241
};                                                                                                                     // 242
                                                                                                                       // 243
/**                                                                                                                    // 244
 * @method AutoForm.getFormValues                                                                                      // 245
 * @public                                                                                                             // 246
 * @param {String} formId The `id` attribute of the `autoForm` you want current values for.                            // 247
 * @param {Template} [template] The template instance, if already known, as a performance optimization.                // 248
 * @param {SimpleSchema} [ss] The SimpleSchema instance, if already known, as a performance optimization.              // 249
 * @param {Boolean} [getModifier] Set to `true` to return a modifier object or `false` to return a normal object. For backwards compatibility, and object containing both is returned if this is undefined.
 * @return {Object|null}                                                                                               // 251
 *                                                                                                                     // 252
 * Returns an object representing the current values of all schema-based fields in the form.                           // 253
 * The returned object is either a normal object or a MongoDB modifier, based on the `getModifier` argument. Return value may be `null` if the form is not currently rendered on screen.
 */                                                                                                                    // 255
AutoForm.getFormValues = function autoFormGetFormValues(formId, template, ss, getModifier) {                           // 256
  var insertDoc, updateDoc, transforms;                                                                                // 257
                                                                                                                       // 258
  template = template || AutoForm.templateInstanceForForm(formId);                                                     // 259
  if (!template ||                                                                                                     // 260
      !template.view ||                                                                                                // 261
      !template.view._domrange ||                                                                                      // 262
      template.view.isDestroyed) {                                                                                     // 263
    return null;                                                                                                       // 264
  }                                                                                                                    // 265
                                                                                                                       // 266
  // Get a reference to the SimpleSchema instance that should be used for                                              // 267
  // determining what types we want back for each field.                                                               // 268
  ss = ss || AutoForm.getFormSchema(formId);                                                                           // 269
                                                                                                                       // 270
  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 271
                                                                                                                       // 272
  // By default, we do not keep empty strings                                                                          // 273
  var keepEmptyStrings = false;                                                                                        // 274
  if (form.removeEmptyStrings === false) {                                                                             // 275
    keepEmptyStrings = true;                                                                                           // 276
  }                                                                                                                    // 277
  // By default, we do filter                                                                                          // 278
  var filter = true;                                                                                                   // 279
  if (form.filter === false) {                                                                                         // 280
    filter = false;                                                                                                    // 281
  }                                                                                                                    // 282
  // By default, we do autoConvert                                                                                     // 283
  var autoConvert = true;                                                                                              // 284
  if (form.autoConvert === false) {                                                                                    // 285
    autoConvert = false;                                                                                               // 286
  }                                                                                                                    // 287
  // By default, we do trimStrings                                                                                     // 288
  var trimStrings = true;                                                                                              // 289
  if (form.trimStrings === false) {                                                                                    // 290
    trimStrings = false;                                                                                               // 291
  }                                                                                                                    // 292
  // By default, we do keepArrays                                                                                      // 293
  // We need keepArrays: false when we need update fields                                                              // 294
  // like "foo.2.bar" to update the proper index. But in                                                               // 295
  // most cases, we need to keep arrays together due to the mongo                                                      // 296
  // bug that creates objects rather than arrays if the array                                                          // 297
  // does not already exist in the db.                                                                                 // 298
  var keepArrays = true;                                                                                               // 299
  if (form.setArrayItems === true) {                                                                                   // 300
    keepArrays = false;                                                                                                // 301
  }                                                                                                                    // 302
                                                                                                                       // 303
  var hookCtx = {                                                                                                      // 304
    template: template,                                                                                                // 305
    formId: formId,                                                                                                    // 306
    schema: ss                                                                                                         // 307
  };                                                                                                                   // 308
                                                                                                                       // 309
  // Build a flat document from field values                                                                           // 310
  var doc = getFlatDocOfFieldValues(getAllFieldsInForm(template), ss);                                                 // 311
                                                                                                                       // 312
  // Expand the flat document                                                                                          // 313
  doc = AutoForm.Utility.expandObj(doc);                                                                               // 314
                                                                                                                       // 315
  // When all fields that comprise a sub-object are empty, we should unset                                             // 316
  // the whole subobject and not complain about required fields in it. For example,                                    // 317
  // if `profile.address` has several properties but they are all null or undefined,                                   // 318
  // we will set `profile.address=null`. This ensures that we don't get incorrect validation                           // 319
  // errors about required fields that are children of optional objects.                                               // 320
  AutoForm.Utility.bubbleEmpty(doc, keepEmptyStrings);                                                                 // 321
                                                                                                                       // 322
  // Create and clean insert doc.                                                                                      // 323
  if (getModifier !== true) {                                                                                          // 324
    // Delete any properties that are null, undefined, or empty strings,                                               // 325
    // unless the form has requested to keep empty string.                                                             // 326
    // Do not add autoValues at this stage.                                                                            // 327
    insertDoc = AutoForm.Utility.cleanNulls(doc, false, keepEmptyStrings);                                             // 328
                                                                                                                       // 329
    // As array items are removed, gaps can appear in the numbering,                                                   // 330
    // which results in arrays that have undefined items. Here we                                                      // 331
    // remove any array items that are undefined.                                                                      // 332
    //                                                                                                                 // 333
    // We do this to the insertDoc, but we don't want to do it earlier to the                                          // 334
    // doc, because that would cause the update modifier to have $sets for                                             // 335
    // the wrong array indexes.                                                                                        // 336
    AutoForm.Utility.compactArrays(insertDoc);                                                                         // 337
                                                                                                                       // 338
    ss.clean(insertDoc, {                                                                                              // 339
      isModifier: false,                                                                                               // 340
      getAutoValues: false,                                                                                            // 341
      filter: filter,                                                                                                  // 342
      autoConvert: autoConvert,                                                                                        // 343
      trimStrings: trimStrings                                                                                         // 344
    });                                                                                                                // 345
                                                                                                                       // 346
    // Pass expanded doc through formToDoc hooks                                                                       // 347
    transforms = Hooks.getHooks(formId, 'formToDoc');                                                                  // 348
    _.each(transforms, function formValuesTransform(transform) {                                                       // 349
      insertDoc = transform.call(hookCtx, insertDoc, ss);                                                              // 350
    });                                                                                                                // 351
  }                                                                                                                    // 352
                                                                                                                       // 353
  // Create and clean update modifier.                                                                                 // 354
  if (getModifier !== false) {                                                                                         // 355
    // Converts to modifier object with $set and $unset.                                                               // 356
    // Do not add autoValues at this stage.                                                                            // 357
    updateDoc = AutoForm.Utility.docToModifier(doc, {                                                                  // 358
      keepEmptyStrings: keepEmptyStrings,                                                                              // 359
      keepArrays: keepArrays                                                                                           // 360
    });                                                                                                                // 361
                                                                                                                       // 362
    ss.clean(updateDoc, {                                                                                              // 363
      isModifier: true,                                                                                                // 364
      getAutoValues: false,                                                                                            // 365
      filter: filter,                                                                                                  // 366
      autoConvert: autoConvert,                                                                                        // 367
      trimStrings: trimStrings                                                                                         // 368
    });                                                                                                                // 369
                                                                                                                       // 370
    // Pass modifier through formToModifier hooks                                                                      // 371
    transforms = Hooks.getHooks(formId, 'formToModifier');                                                             // 372
    _.each(transforms, function formValuesTransform(transform) {                                                       // 373
      updateDoc = transform.call(hookCtx, updateDoc);                                                                  // 374
    });                                                                                                                // 375
  }                                                                                                                    // 376
                                                                                                                       // 377
  if (getModifier === true) {                                                                                          // 378
    return updateDoc;                                                                                                  // 379
  } else if (getModifier === false) {                                                                                  // 380
    return insertDoc;                                                                                                  // 381
  } else {                                                                                                             // 382
    // We return insertDoc and updateDoc when getModifier                                                              // 383
    // is undefined for backwards compatibility                                                                        // 384
    return {                                                                                                           // 385
      insertDoc: insertDoc,                                                                                            // 386
      updateDoc: updateDoc                                                                                             // 387
    };                                                                                                                 // 388
  }                                                                                                                    // 389
};                                                                                                                     // 390
                                                                                                                       // 391
/**                                                                                                                    // 392
 * @method AutoForm.getFieldValue                                                                                      // 393
 * @public                                                                                                             // 394
 * @param {String} fieldName The name of the field for which you want the current value.                               // 395
 * @param {String} [formId] The `id` attribute of the `autoForm` you want current values for. Default is the closest form from the current context.
 * @return {Any|undefined}                                                                                             // 397
 *                                                                                                                     // 398
 * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 399
 * This is a reactive method that will rerun whenever the current value of the requested field changes. Return value will be undefined if the field is not currently rendered.
 */                                                                                                                    // 401
AutoForm.getFieldValue = function autoFormGetFieldValue(fieldName, formId) {                                           // 402
  // find AutoForm template                                                                                            // 403
  var template = Tracker.nonreactive(function () {                                                                     // 404
    return AutoForm.templateInstanceForForm(formId);                                                                   // 405
  });                                                                                                                  // 406
                                                                                                                       // 407
  if (!template) {                                                                                                     // 408
    if (formId) {                                                                                                      // 409
      AutoForm.rerunWhenFormRenderedOrDestroyed(formId);                                                               // 410
    }                                                                                                                  // 411
    return;                                                                                                            // 412
  }                                                                                                                    // 413
                                                                                                                       // 414
  // reactive dependency                                                                                               // 415
  template.formValues = template.formValues || {};                                                                     // 416
  if (!template.formValues[fieldName]) {                                                                               // 417
    template.formValues[fieldName] = new Tracker.Dependency();                                                         // 418
  }                                                                                                                    // 419
  template.formValues[fieldName].depend();                                                                             // 420
                                                                                                                       // 421
  if (!template.view ||                                                                                                // 422
      !template.view._domrange ||                                                                                      // 423
      template.view.isDestroyed) {                                                                                     // 424
    return;                                                                                                            // 425
  }                                                                                                                    // 426
                                                                                                                       // 427
  var doc = AutoForm.getFormValues(formId, template, null, false);                                                     // 428
  if (!doc) {                                                                                                          // 429
    return;                                                                                                            // 430
  }                                                                                                                    // 431
                                                                                                                       // 432
  var mDoc = new MongoObject(doc);                                                                                     // 433
  var value = mDoc.getValueForKey(fieldName);                                                                          // 434
                                                                                                                       // 435
  return value;                                                                                                        // 436
};                                                                                                                     // 437
                                                                                                                       // 438
/**                                                                                                                    // 439
 * @method AutoForm.getInputTypeTemplateNameForElement                                                                 // 440
 * @public                                                                                                             // 441
 * @param {DOMElement} element The input DOM element, generated by an autoform input control                           // 442
 * @return {String}                                                                                                    // 443
 *                                                                                                                     // 444
 * Returns the name of the template used to render the element.                                                        // 445
 */                                                                                                                    // 446
AutoForm.getInputTypeTemplateNameForElement = function autoFormGetInputTypeTemplateNameForElement(element) {           // 447
  // get the enclosing view                                                                                            // 448
  var view = Blaze.getView(element);                                                                                   // 449
  // if the enclosing view is not a template, perhaps because                                                          // 450
  // the template contains a block helper like if, with, each,                                                         // 451
  // then look up the view chain until we arrive at a template                                                         // 452
  while (view && view.name.slice(0, 9) !== "Template.") {                                                              // 453
    view = view.originalParentView || view.parentView;                                                                 // 454
  }                                                                                                                    // 455
                                                                                                                       // 456
  if (!view) return;                                                                                                   // 457
                                                                                                                       // 458
  // View names have "Template." at the beginning so we slice that off.                                                // 459
  return view.name.slice(9);                                                                                           // 460
};                                                                                                                     // 461
                                                                                                                       // 462
/**                                                                                                                    // 463
 * @method AutoForm.getInputValue                                                                                      // 464
 * @public                                                                                                             // 465
 * @param {DOMElement} element The input DOM element, generated by an autoform input control, which must have a `data-schema-key` attribute set to the correct schema key name.
 * @param {SimpleSchema} [ss] Provide the SimpleSchema instance if you already have it.                                // 467
 * @return {Any}                                                                                                       // 468
 *                                                                                                                     // 469
 * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 470
 * Unlike `AutoForm.getFieldValue`, this function is not reactive.                                                     // 471
 */                                                                                                                    // 472
AutoForm.getInputValue = function autoFormGetInputValue(element, ss) {                                                 // 473
  var field, fieldName, fieldType, arrayItemFieldType, val, typeDef, inputTypeTemplate, dataContext, autoConvert;      // 474
                                                                                                                       // 475
  Tracker.nonreactive(function() {                                                                                     // 476
    //don't rerun when data context of element changes, can cause infinite loops                                       // 477
                                                                                                                       // 478
    dataContext = Blaze.getData(element);                                                                              // 479
    if (dataContext && dataContext.atts) {                                                                             // 480
      autoConvert = dataContext.atts.autoConvert;                                                                      // 481
    }                                                                                                                  // 482
  });                                                                                                                  // 483
                                                                                                                       // 484
  // Get jQuery field reference                                                                                        // 485
  field = $(element);                                                                                                  // 486
                                                                                                                       // 487
  // Get the field/schema key name                                                                                     // 488
  fieldName = field.attr("data-schema-key");                                                                           // 489
                                                                                                                       // 490
  // If we have a schema, we can autoconvert to the correct data type                                                  // 491
  if (ss) {                                                                                                            // 492
    fieldType = ss.schema(fieldName).type;                                                                             // 493
  }                                                                                                                    // 494
                                                                                                                       // 495
  // Get the name of the input type template used to render the input element                                          // 496
  inputTypeTemplate = AutoForm.getInputTypeTemplateNameForElement(element);                                            // 497
                                                                                                                       // 498
  // Slice off the potential theme template, after the last underscore.                                                // 499
  var lastUnderscore = inputTypeTemplate.lastIndexOf('_');                                                             // 500
  if (lastUnderscore !== -1) {                                                                                         // 501
    inputTypeTemplate = inputTypeTemplate.slice(0, lastUnderscore);                                                    // 502
  }                                                                                                                    // 503
                                                                                                                       // 504
  // Figure out what registered input type was used to render this element                                             // 505
  typeDef = _.where(AutoForm._inputTypeDefinitions, {template: inputTypeTemplate})[0];                                 // 506
                                                                                                                       // 507
  // If field has a "data-null-value" attribute, value should always be null                                           // 508
  if (field.attr("data-null-value") !== void 0) {                                                                      // 509
    val = null;                                                                                                        // 510
  }                                                                                                                    // 511
  // Otherwise get the field's value using the input type's `valueOut` function if provided                            // 512
  else if (typeDef && typeDef.valueOut) {                                                                              // 513
    val = typeDef.valueOut.call(field);                                                                                // 514
  }                                                                                                                    // 515
  // Otherwise get the field's value in a default way                                                                  // 516
  else {                                                                                                               // 517
    val = field.val();                                                                                                 // 518
  }                                                                                                                    // 519
                                                                                                                       // 520
  // run through input's type converter if provided                                                                    // 521
  if (val !== void 0 && autoConvert !== false && typeDef && typeDef.valueConverters && fieldType) {                    // 522
    var converterFunc;                                                                                                 // 523
    if (fieldType === String) {                                                                                        // 524
      converterFunc = typeDef.valueConverters.string;                                                                  // 525
    } else if (fieldType === Number) {                                                                                 // 526
      converterFunc = typeDef.valueConverters.number;                                                                  // 527
    } else if (fieldType === Boolean) {                                                                                // 528
      converterFunc = typeDef.valueConverters.boolean;                                                                 // 529
    } else if (fieldType === Date) {                                                                                   // 530
      converterFunc = typeDef.valueConverters.date;                                                                    // 531
    } else if (fieldType === Array) {                                                                                  // 532
      arrayItemFieldType = ss.schema(fieldName + ".$").type;                                                           // 533
      if (arrayItemFieldType === String) {                                                                             // 534
        converterFunc = typeDef.valueConverters.stringArray;                                                           // 535
      } else if (arrayItemFieldType === Number) {                                                                      // 536
        converterFunc = typeDef.valueConverters.numberArray;                                                           // 537
      } else if (arrayItemFieldType === Boolean) {                                                                     // 538
        converterFunc = typeDef.valueConverters.booleanArray;                                                          // 539
      } else if (arrayItemFieldType === Date) {                                                                        // 540
        converterFunc = typeDef.valueConverters.dateArray;                                                             // 541
      }                                                                                                                // 542
    }                                                                                                                  // 543
                                                                                                                       // 544
    if (typeof converterFunc === "function") {                                                                         // 545
      val = converterFunc.call(field, val);                                                                            // 546
    }                                                                                                                  // 547
  }                                                                                                                    // 548
                                                                                                                       // 549
  return val;                                                                                                          // 550
};                                                                                                                     // 551
                                                                                                                       // 552
/**                                                                                                                    // 553
 * @method AutoForm.addInputType                                                                                       // 554
 * @public                                                                                                             // 555
 * @param {String} name The type string that this definition is for.                                                   // 556
 * @param {Object} definition Defines how the input type should be rendered.                                           // 557
 * @param {String} definition.componentName The component name. A template with the name <componentName>_bootstrap3, and potentially others, must be defined.
 * @return {undefined}                                                                                                 // 559
 *                                                                                                                     // 560
 * Use this method to add custom input components.                                                                     // 561
 */                                                                                                                    // 562
AutoForm.addInputType = function afAddInputType(name, definition) {                                                    // 563
  var obj = {};                                                                                                        // 564
  obj[name] = definition;                                                                                              // 565
  _.extend(AutoForm._inputTypeDefinitions, obj);                                                                       // 566
};                                                                                                                     // 567
                                                                                                                       // 568
/**                                                                                                                    // 569
 * @method AutoForm.addFormType                                                                                        // 570
 * @public                                                                                                             // 571
 * @param {String} name The type string that this definition is for.                                                   // 572
 * @param {Object} definition Defines how the submit type should work                                                  // 573
 * @param {Function} [definition.adjustInputContext] A function that accepts a single argument, which is the context with which an input template in the form will be called, potentially changes the context object, and then returns it. For example, the "readonly" and "disabled" form types use this function to add the "readonly" or "disabled" attribute, respectively, to every input within the form.
 * @param {Function} [definition.adjustSchema] A function that accepts a single argument, which is the form schema, and potentially uses that to return a different schema to use instead. For example, the "update-pushArray" form type uses this function to build and return a schema that is limited by the `scope` attribute on the form. When this function is called, `this` contains useful information about the form.
 * @param {Boolean} [definition.hideArrayItemButtons] Set to `true` if this form type should not show buttons for adding and removing items in an array field. The "disabled" and "readonly" form types do this.
 * @param {Function} definition.onSubmit A function that does whatever should happen upon submission of this form type. When this function is called, `this` contains useful information about the form. At a minimum, you probably want to call `this.event.preventDefault()` to prevent the browser from submitting the form. Your submission logic may want to rely on additional custom form attributes, which will be available in `this.formAttributes`. If you do any additional validation and it fails, you should call `this.failedValidation()`. When your logic is done, you should call `this.result(error, result)`. If you want to end the submission process without providing a result, call `this.endSubmission()`. If you don't call `this.result()` or `this.endSubmission()`, `endSubmit` hooks won't be called, so for example the submit button might remain disabled. `onError` hooks will be called only if you pass an error to `this.result()`. `onSuccess` hooks will be called only if you do not pass an error to `this.result()`.
 * @param {Function} [definition.shouldPrevalidate] A function that returns `true` if validation against the form schema should happen before the `onSubmit` function is called, or `false` if not. When this function is called, `this` contains useful information about the form. If this function is not provided for a form type, the default is `true`.
 * @param {Function} definition.validateForm A function that validates the form and returns `true` if valid or `false` if not. This can happen during submission but also at other times. When this function is called, `this` contains useful information about the form and the validation options.
 * @return {undefined}                                                                                                 // 580
 *                                                                                                                     // 581
 * Use this method to add custom form types.                                                                           // 582
 */                                                                                                                    // 583
AutoForm.addFormType = function afAddFormType(name, definition) {                                                      // 584
  var obj = {};                                                                                                        // 585
  obj[name] = definition;                                                                                              // 586
  _.extend(AutoForm._formTypeDefinitions, obj);                                                                        // 587
};                                                                                                                     // 588
                                                                                                                       // 589
/**                                                                                                                    // 590
 * @method AutoForm.validateField                                                                                      // 591
 * @public                                                                                                             // 592
 * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 593
 * @param {String} fieldName The name of the field within the `autoForm` you want to validate.                         // 594
 * @param {Boolean} [skipEmpty=false] Set to `true` to skip validation if the field has no value. Useful for preventing `required` errors in form fields that the user has not yet filled out.
 * @return {Boolean} Is it valid?                                                                                      // 596
 *                                                                                                                     // 597
 * In addition to returning a boolean that indicates whether the field is currently valid,                             // 598
 * this method causes the reactive validation messages to appear.                                                      // 599
 */                                                                                                                    // 600
AutoForm.validateField = function autoFormValidateField(formId, fieldName, skipEmpty) {                                // 601
  var template = AutoForm.templateInstanceForForm(formId);                                                             // 602
  if (!template ||                                                                                                     // 603
      !template.view ||                                                                                                // 604
      !template.view._domrange ||                                                                                      // 605
      template.view.isDestroyed) {                                                                                     // 606
    return true;                                                                                                       // 607
  }                                                                                                                    // 608
                                                                                                                       // 609
  return validateField(fieldName, formId, skipEmpty, false);                                                           // 610
};                                                                                                                     // 611
                                                                                                                       // 612
/**                                                                                                                    // 613
 * @method AutoForm.validateForm                                                                                       // 614
 * @public                                                                                                             // 615
 * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 616
 * @return {Boolean} Is it valid?                                                                                      // 617
 *                                                                                                                     // 618
 * In addition to returning a boolean that indicates whether the form is currently valid,                              // 619
 * this method causes the reactive validation messages to appear.                                                      // 620
 */                                                                                                                    // 621
AutoForm.validateForm = function autoFormValidateForm(formId) {                                                        // 622
  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 623
  var formDoc, formType = form.type;                                                                                   // 624
                                                                                                                       // 625
  var ftd = Utility.getFormTypeDef(formType);                                                                          // 626
                                                                                                                       // 627
  // Gather all form values                                                                                            // 628
  if (ftd.needsModifierAndDoc) {                                                                                       // 629
    formDoc = AutoForm.getFormValues(formId, null, null);                                                              // 630
  } else if (ftd.usesModifier) {                                                                                       // 631
    formDoc = AutoForm.getFormValues(formId, null, null, true);                                                        // 632
  } else {                                                                                                             // 633
    formDoc = AutoForm.getFormValues(formId, null, null, false);                                                       // 634
  }                                                                                                                    // 635
                                                                                                                       // 636
  // If form is not currently rendered, return true                                                                    // 637
  if (!formDoc) {                                                                                                      // 638
    return true;                                                                                                       // 639
  }                                                                                                                    // 640
                                                                                                                       // 641
  return (form.validation === 'none') || ftd.validateForm.call({                                                       // 642
    form: form,                                                                                                        // 643
    formDoc: formDoc,                                                                                                  // 644
    useCollectionSchema: false                                                                                         // 645
  });                                                                                                                  // 646
};                                                                                                                     // 647
                                                                                                                       // 648
/**                                                                                                                    // 649
 * @method AutoForm.getValidationContext                                                                               // 650
 * @public                                                                                                             // 651
 * @param {String} formId The `id` attribute of the `autoForm` for which you want the validation context               // 652
 * @return {SimpleSchemaValidationContext} The SimpleSchema validation context object.                                 // 653
 *                                                                                                                     // 654
 * Use this method to get the validation context, which can be used to check                                           // 655
 * the current invalid fields, manually invalidate fields, etc.                                                        // 656
 */                                                                                                                    // 657
AutoForm.getValidationContext = function autoFormGetValidationContext(formId) {                                        // 658
  var ss = AutoForm.getFormSchema(formId);                                                                             // 659
  return ss && ss.namedContext(formId);                                                                                // 660
};                                                                                                                     // 661
                                                                                                                       // 662
/**                                                                                                                    // 663
 * @method AutoForm.findAttribute                                                                                      // 664
 * @public                                                                                                             // 665
 * @param {String} attrName Attribute name                                                                             // 666
 * @return {Any|undefined} Searches for the given attribute, looking up the parent context tree until the closest autoform is reached.
 *                                                                                                                     // 668
 * Call this method from a UI helper. Might return undefined.                                                          // 669
 */                                                                                                                    // 670
AutoForm.findAttribute = function autoFormFindAttribute(attrName) {                                                    // 671
  var val, view, viewData;                                                                                             // 672
                                                                                                                       // 673
  function checkView() {                                                                                               // 674
    // Is the attribute we're looking for on here?                                                                     // 675
    // If so, stop searching                                                                                           // 676
    viewData = Blaze.getData(view);                                                                                    // 677
    if (viewData && viewData.atts && viewData.atts[attrName] !== void 0) {                                             // 678
      val = viewData.atts[attrName];                                                                                   // 679
    } else if (viewData && viewData[attrName] !== void 0) {                                                            // 680
      // When searching for "template", make sure we didn't just                                                       // 681
      // find the one that's on Template.dynamic                                                                       // 682
      if (attrName !== 'template' || !('data' in viewData)) {                                                          // 683
        val = viewData[attrName];                                                                                      // 684
      }                                                                                                                // 685
    }                                                                                                                  // 686
  }                                                                                                                    // 687
                                                                                                                       // 688
  // Loop                                                                                                              // 689
  view = Blaze.currentView;                                                                                            // 690
  while (val === undefined && view && view.name !== 'Template.autoForm') {                                             // 691
    checkView();                                                                                                       // 692
    view = view.originalParentView || view.parentView;                                                                 // 693
  }                                                                                                                    // 694
                                                                                                                       // 695
  // If we've reached the form, check there, too                                                                       // 696
  if (val === undefined && view && view.name === 'Template.autoForm') {                                                // 697
    checkView();                                                                                                       // 698
  }                                                                                                                    // 699
                                                                                                                       // 700
  return val;                                                                                                          // 701
};                                                                                                                     // 702
                                                                                                                       // 703
/**                                                                                                                    // 704
 * @method AutoForm.findAttributesWithPrefix                                                                           // 705
 * @public                                                                                                             // 706
 * @param {String} prefix Attribute prefix                                                                             // 707
 * @return {Object} An object containing all of the found attributes and their values, with the prefix removed from the keys.
 *                                                                                                                     // 709
 * Call this method from a UI helper. Searches for attributes that start with the given prefix, looking up the parent context tree until the closest autoform is reached.
 */                                                                                                                    // 711
AutoForm.findAttributesWithPrefix = function autoFormFindAttributesWithPrefix(prefix) {                                // 712
  var result = {}, view, viewData, searchObj;                                                                          // 713
                                                                                                                       // 714
  function checkView() {                                                                                               // 715
    // Is the attribute we're looking for on here?                                                                     // 716
    // If so, add to result object.                                                                                    // 717
    viewData = Blaze.getData(view);                                                                                    // 718
    if (viewData && viewData.atts) {                                                                                   // 719
      searchObj = viewData.atts;                                                                                       // 720
    } else {                                                                                                           // 721
      searchObj = viewData;                                                                                            // 722
    }                                                                                                                  // 723
    // We need an isArray check, too because _.isObject([{}]) comes back true                                          // 724
    if (_.isObject(searchObj) && !_.isArray(searchObj)) {                                                              // 725
      _.each(searchObj, function (v, k) {                                                                              // 726
        if (k.indexOf(prefix) === 0) {                                                                                 // 727
          result[k.slice(prefix.length)] = v;                                                                          // 728
        }                                                                                                              // 729
      });                                                                                                              // 730
    }                                                                                                                  // 731
  }                                                                                                                    // 732
                                                                                                                       // 733
  // Loop                                                                                                              // 734
  view = Blaze.currentView;                                                                                            // 735
  while (view && view.name !== 'Template.autoForm') {                                                                  // 736
    checkView();                                                                                                       // 737
    view = view.originalParentView || view.parentView;                                                                 // 738
  }                                                                                                                    // 739
                                                                                                                       // 740
  // If we've reached the form, check there, too                                                                       // 741
  if (view && view.name === 'Template.autoForm') {                                                                     // 742
    checkView();                                                                                                       // 743
  }                                                                                                                    // 744
                                                                                                                       // 745
  return result;                                                                                                       // 746
};                                                                                                                     // 747
                                                                                                                       // 748
/**                                                                                                                    // 749
 * @method AutoForm.debug                                                                                              // 750
 * @public                                                                                                             // 751
 *                                                                                                                     // 752
 * Call this method in client code while developing to turn on extra logging.                                          // 753
 * You need to call it just one time, usually in top level client code.                                                // 754
 */                                                                                                                    // 755
AutoForm.debug = function autoFormDebug() {                                                                            // 756
  SimpleSchema.debug = true;                                                                                           // 757
  AutoForm._debug = true;                                                                                              // 758
  AutoForm.addHooks(null, {                                                                                            // 759
    onError: function (operation, error) {                                                                             // 760
      console.log("Error in " + this.formId, operation, error);                                                        // 761
    }                                                                                                                  // 762
  });                                                                                                                  // 763
};                                                                                                                     // 764
                                                                                                                       // 765
/**                                                                                                                    // 766
 * @property AutoForm.arrayTracker                                                                                     // 767
 * @public                                                                                                             // 768
 */                                                                                                                    // 769
AutoForm.arrayTracker = arrayTracker;                                                                                  // 770
                                                                                                                       // 771
/**                                                                                                                    // 772
 * @method AutoForm.getInputType                                                                                       // 773
 * @param {Object} atts The attributes provided to afFieldInput.                                                       // 774
 * @public                                                                                                             // 775
 * @return {String} The input type. Most are the same as the `type` attributes for HTML input elements, but some are special strings that autoform interprets.
 *                                                                                                                     // 777
 * Call this method from a UI helper to get the type string for the input control.                                     // 778
 */                                                                                                                    // 779
AutoForm.getInputType = function getInputType(atts) {                                                                  // 780
  var expectsArray = false, defs, schemaType, type;                                                                    // 781
                                                                                                                       // 782
  atts = AutoForm.Utility.getComponentContext(atts, 'afFieldInput').atts;                                              // 783
                                                                                                                       // 784
  // If a `type` attribute is specified, we just use that                                                              // 785
  if (atts.type) {                                                                                                     // 786
    return atts.type;                                                                                                  // 787
  }                                                                                                                    // 788
                                                                                                                       // 789
  // Get schema definition, using the item definition for array fields                                                 // 790
  defs = AutoForm.getSchemaForField(atts.name);                                                                        // 791
  if (!defs) {                                                                                                         // 792
    return 'text';                                                                                                     // 793
  }                                                                                                                    // 794
                                                                                                                       // 795
  schemaType = defs.type;                                                                                              // 796
  if (schemaType === Array) {                                                                                          // 797
    expectsArray = true;                                                                                               // 798
    schemaType = AutoForm.getSchemaForField(atts.name + ".$").type;                                                    // 799
    if (!defs) {                                                                                                       // 800
      return 'text';                                                                                                   // 801
    }                                                                                                                  // 802
  }                                                                                                                    // 803
                                                                                                                       // 804
  // Based on the `type` attribute, the `type` from the schema, and/or                                                 // 805
  // other characteristics such as regEx and whether an array is expected,                                             // 806
  // choose which type string to return.                                                                               // 807
                                                                                                                       // 808
  // If options were provided, noselect is `true`, and the schema                                                      // 809
  // expects the value of the field to be an array, use "select-checkbox".                                             // 810
  if (atts.options && atts.noselect === true && expectsArray) {                                                        // 811
    type = 'select-checkbox';                                                                                          // 812
  }                                                                                                                    // 813
                                                                                                                       // 814
  // If options were provided, noselect is `true`, and the schema                                                      // 815
  // does not expect the value of the field to be an array, use "select-radio".                                        // 816
  else if (atts.options && atts.noselect === true && !expectsArray) {                                                  // 817
    type = 'select-radio';                                                                                             // 818
  }                                                                                                                    // 819
                                                                                                                       // 820
  // If options were provided, noselect is not `true`, and the schema                                                  // 821
  // expects the value of the field to be an array, use "select-multiple".                                             // 822
  else if (atts.options && atts.noselect !== true && expectsArray) {                                                   // 823
    type = 'select-multiple';                                                                                          // 824
  }                                                                                                                    // 825
                                                                                                                       // 826
  // If options were provided, noselect is not `true`, and the schema                                                  // 827
  // does not expect the value of the field to be an array, use "select".                                              // 828
  else if (atts.options && atts.noselect !== true && !expectsArray) {                                                  // 829
    type = 'select';                                                                                                   // 830
  }                                                                                                                    // 831
                                                                                                                       // 832
  // If the schema expects the value of the field to be a string and                                                   // 833
  // the `rows` attribute is provided, use "textarea"                                                                  // 834
  else if (schemaType === String && atts.rows === +atts.rows) {                                                        // 835
    type = 'textarea';                                                                                                 // 836
  }                                                                                                                    // 837
                                                                                                                       // 838
  // If the schema expects the value of the field to be a number,                                                      // 839
  // use "number"                                                                                                      // 840
  else if (schemaType === Number) {                                                                                    // 841
    type = 'number';                                                                                                   // 842
  }                                                                                                                    // 843
                                                                                                                       // 844
  // If the schema expects the value of the field to be a Date instance,                                               // 845
  // use "date"                                                                                                        // 846
  else if (schemaType === Date) {                                                                                      // 847
    type = 'date';                                                                                                     // 848
  }                                                                                                                    // 849
                                                                                                                       // 850
  // If the schema expects the value of the field to be a boolean,                                                     // 851
  // use "boolean-checkbox"                                                                                            // 852
  else if (schemaType === Boolean) {                                                                                   // 853
    type = 'boolean-checkbox';                                                                                         // 854
  }                                                                                                                    // 855
                                                                                                                       // 856
  // Default is "text"                                                                                                 // 857
  else {                                                                                                               // 858
    type = 'text';                                                                                                     // 859
  }                                                                                                                    // 860
                                                                                                                       // 861
  return type;                                                                                                         // 862
};                                                                                                                     // 863
                                                                                                                       // 864
/**                                                                                                                    // 865
 * @method AutoForm.getSchemaForField                                                                                  // 866
 * @public                                                                                                             // 867
 * @param {String} name The field name attribute / schema key.                                                         // 868
 * @return {Object|undefined}                                                                                          // 869
 *                                                                                                                     // 870
 * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.
 */                                                                                                                    // 872
AutoForm.getSchemaForField = function autoFormGetSchemaForField(name) {                                                // 873
  var ss = AutoForm.getFormSchema();                                                                                   // 874
  return AutoForm.Utility.getDefs(ss, name);                                                                           // 875
};                                                                                                                     // 876
                                                                                                                       // 877
/**                                                                                                                    // 878
 * @method AutoForm._getOptionsForField                                                                                // 879
 * @public                                                                                                             // 880
 * @param {String} name The field name attribute / schema key.                                                         // 881
 * @return {Array(Object)|String|undefined}                                                                            // 882
 *                                                                                                                     // 883
 * Call this method from a UI helper to get the select options for the field. Might return the string "allowed".       // 884
 */                                                                                                                    // 885
AutoForm._getOptionsForField = function autoFormGetOptionsForField(name) {                                             // 886
  var ss, def, saf, allowedValues;                                                                                     // 887
                                                                                                                       // 888
  ss = AutoForm.getFormSchema();                                                                                       // 889
  if (!ss) {                                                                                                           // 890
    return;                                                                                                            // 891
  }                                                                                                                    // 892
                                                                                                                       // 893
  def = ss.getDefinition(name);                                                                                        // 894
  if (!def) {                                                                                                          // 895
    return;                                                                                                            // 896
  }                                                                                                                    // 897
                                                                                                                       // 898
  // If options in schema, use those                                                                                   // 899
  saf = def.autoform;                                                                                                  // 900
  if (saf) {                                                                                                           // 901
    if (saf.afFieldInput && saf.afFieldInput.options) {                                                                // 902
      return saf.afFieldInput.options;                                                                                 // 903
    } else if (saf.afQuickField && saf.afQuickField.options) {                                                         // 904
      return saf.afQuickField.options;                                                                                 // 905
    } else if (saf.options) {                                                                                          // 906
      return saf.options;                                                                                              // 907
    }                                                                                                                  // 908
  }                                                                                                                    // 909
                                                                                                                       // 910
  // If schema has allowedValues, use those                                                                            // 911
  allowedValues = ss.getAllowedValuesForKey(name);                                                                     // 912
  if (allowedValues) {                                                                                                 // 913
    return 'allowed';                                                                                                  // 914
  }                                                                                                                    // 915
};                                                                                                                     // 916
                                                                                                                       // 917
/**                                                                                                                    // 918
 * @method AutoForm.getLabelForField                                                                                   // 919
 * @public                                                                                                             // 920
 * @param {String} name The field name attribute / schema key.                                                         // 921
 * @return {Object}                                                                                                    // 922
 *                                                                                                                     // 923
 * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.
 */                                                                                                                    // 925
AutoForm.getLabelForField = function autoFormGetSchemaForField(name) {                                                 // 926
  var ss = AutoForm.getFormSchema(), label = ss.label(name);                                                           // 927
  // for array items we don't want to inflect the label because                                                        // 928
  // we will end up with a number;                                                                                     // 929
  // TODO this check should probably be in the SimpleSchema code                                                       // 930
  if (SimpleSchema._makeGeneric(name).slice(-1) === "$" && !isNaN(parseInt(label, 10))) {                              // 931
    label = null;                                                                                                      // 932
  }                                                                                                                    // 933
  return label;                                                                                                        // 934
};                                                                                                                     // 935
                                                                                                                       // 936
/**                                                                                                                    // 937
 * @method AutoForm.templateInstanceForForm                                                                            // 938
 * @public                                                                                                             // 939
 * @param {String} [formId] The form's `id` attribute                                                                  // 940
 * @returns {TemplateInstance|undefined} The template instance.                                                        // 941
 *                                                                                                                     // 942
 * Gets the template instance for the form with formId or the closest form to the current context.                     // 943
 */                                                                                                                    // 944
AutoForm.templateInstanceForForm = function (formId) {                                                                 // 945
  var view = AutoForm.viewForForm(formId);                                                                             // 946
                                                                                                                       // 947
  if (!view) return;                                                                                                   // 948
                                                                                                                       // 949
  return view.templateInstance();                                                                                      // 950
};                                                                                                                     // 951
                                                                                                                       // 952
/**                                                                                                                    // 953
 * @method AutoForm.viewForForm                                                                                        // 954
 * @public                                                                                                             // 955
 * @param {String} [formId] The form's `id` attribute. Do not pass this if calling from within a form context.         // 956
 * @returns {Blaze.View|undefined} The `Blaze.View` instance for the autoForm.                                         // 957
 *                                                                                                                     // 958
 * Gets the `Blaze.View` instance for the form with formId or the closest form to the current context.                 // 959
 */                                                                                                                    // 960
AutoForm.viewForForm = function (formId) {                                                                             // 961
  var formElement, view;                                                                                               // 962
                                                                                                                       // 963
  if (formId) {                                                                                                        // 964
    formElement = document.getElementById(formId);                                                                     // 965
    if (!formElement) {                                                                                                // 966
      return;                                                                                                          // 967
    }                                                                                                                  // 968
  }                                                                                                                    // 969
                                                                                                                       // 970
  // If formElement is undefined, Blaze.getView returns the current view.                                              // 971
  try {                                                                                                                // 972
    view = Blaze.getView(formElement);                                                                                 // 973
  } catch (err) {}                                                                                                     // 974
                                                                                                                       // 975
  while (view && view.name !== 'Template.autoForm') {                                                                  // 976
    view = view.originalParentView || view.parentView;                                                                 // 977
  }                                                                                                                    // 978
                                                                                                                       // 979
  if (!view || view.name !== 'Template.autoForm') {                                                                    // 980
    return;                                                                                                            // 981
  }                                                                                                                    // 982
                                                                                                                       // 983
  return view;                                                                                                         // 984
};                                                                                                                     // 985
                                                                                                                       // 986
/**                                                                                                                    // 987
 * @method AutoForm.getArrayCountFromDocForField                                                                       // 988
 * @public                                                                                                             // 989
 * @param {String} formId The form's `id` attribute                                                                    // 990
 * @param {String} field  The field name (schema key)                                                                  // 991
 * @returns {Number|undefined} Array count in the attached document.                                                   // 992
 *                                                                                                                     // 993
 * Looks in the document attached to the form to see if the                                                            // 994
 * requested field exists and is an array. If so, returns the                                                          // 995
 * length (count) of the array. Otherwise returns undefined.                                                           // 996
 */                                                                                                                    // 997
AutoForm.getArrayCountFromDocForField = function (formId, field) {                                                     // 998
  var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);                                                              // 999
  var docCount;                                                                                                        // 1000
  if (mDoc) {                                                                                                          // 1001
    var keyInfo = mDoc.getInfoForKey(field);                                                                           // 1002
    if (keyInfo && _.isArray(keyInfo.value)) {                                                                         // 1003
      docCount = keyInfo.value.length;                                                                                 // 1004
    }                                                                                                                  // 1005
  }                                                                                                                    // 1006
  return docCount;                                                                                                     // 1007
};                                                                                                                     // 1008
                                                                                                                       // 1009
/**                                                                                                                    // 1010
 * @method AutoForm.parseData                                                                                          // 1011
 * @public                                                                                                             // 1012
 * @param {Object} data Current data context for the form, or an empty object. Usually this is used from a quickForm, since the autoForm won't be rendered yet. Otherwise you should use AutoForm.getCurrentDataForForm if you can.
 * @returns {Object} Current data context for the form, or an empty object.                                            // 1014
 *                                                                                                                     // 1015
 * Parses and alters the current data context for a form. It will have default values added and a `_resolvedSchema` property that has the schema the form should use.
 */                                                                                                                    // 1017
AutoForm.parseData = function (data) {                                                                                 // 1018
  return setDefaults(data);                                                                                            // 1019
};                                                                                                                     // 1020
                                                                                                                       // 1021
/**                                                                                                                    // 1022
 * @method AutoForm.getCurrentDataForForm                                                                              // 1023
 * @public                                                                                                             // 1024
 * @param {String} formId The form's `id` attribute                                                                    // 1025
 * @returns {Object} Current data context for the form, or an empty object.                                            // 1026
 *                                                                                                                     // 1027
 * Returns the current data context for a form.                                                                        // 1028
 * You can call this without a formId from within a helper and                                                         // 1029
 * the data for the nearest containing form will be returned.                                                          // 1030
 */                                                                                                                    // 1031
AutoForm.getCurrentDataForForm = function (formId) {                                                                   // 1032
  var view = AutoForm.viewForForm(formId);                                                                             // 1033
                                                                                                                       // 1034
  if (!view) return;                                                                                                   // 1035
                                                                                                                       // 1036
  var data = Blaze.getData(view);                                                                                      // 1037
                                                                                                                       // 1038
  if (!data) return;                                                                                                   // 1039
                                                                                                                       // 1040
  return setDefaults(data);                                                                                            // 1041
};                                                                                                                     // 1042
                                                                                                                       // 1043
/**                                                                                                                    // 1044
 * @method AutoForm.getCurrentDataPlusExtrasForForm                                                                    // 1045
 * @public                                                                                                             // 1046
 * @param   {String} [formId] The form's `id` attribute                                                                // 1047
 * @returns {Object} Current data context for the form, or an empty object.                                            // 1048
 *                                                                                                                     // 1049
 * Returns the current data context for a form plus some extra properties.                                             // 1050
 * You can call this without a formId from within a helper and                                                         // 1051
 * the data for the nearest containing form will be returned.                                                          // 1052
 */                                                                                                                    // 1053
AutoForm.getCurrentDataPlusExtrasForForm = function (formId) {                                                         // 1054
  var data = AutoForm.getCurrentDataForForm(formId);                                                                   // 1055
                                                                                                                       // 1056
  data = _.clone(data);                                                                                                // 1057
                                                                                                                       // 1058
  // add form type definition                                                                                          // 1059
  var formType = data.type || 'normal';                                                                                // 1060
  data.formTypeDef = Utility.getFormTypeDef(formType);                                                                 // 1061
                                                                                                                       // 1062
  return data;                                                                                                         // 1063
};                                                                                                                     // 1064
                                                                                                                       // 1065
/**                                                                                                                    // 1066
 * @method AutoForm.getFormCollection                                                                                  // 1067
 * @public                                                                                                             // 1068
 * @param {String} formId The form's `id` attribute                                                                    // 1069
 * @returns {Mongo.Collection|undefined} The Collection instance                                                       // 1070
 *                                                                                                                     // 1071
 * Gets the collection for a form from the `collection` attribute                                                      // 1072
 */                                                                                                                    // 1073
AutoForm.getFormCollection = function (formId) {                                                                       // 1074
  var data = AutoForm.getCurrentDataForForm(formId);                                                                   // 1075
  return AutoForm.Utility.lookup(data.collection);                                                                     // 1076
};                                                                                                                     // 1077
                                                                                                                       // 1078
/**                                                                                                                    // 1079
 * @method AutoForm.getFormSchema                                                                                      // 1080
 * @public                                                                                                             // 1081
 * @param {String} formId The form's `id` attribute                                                                    // 1082
 * @param {Object} [form] Pass the form data context as an optimization or if the form is not yet rendered.            // 1083
 * @returns {SimpleSchema|undefined} The SimpleSchema instance                                                         // 1084
 *                                                                                                                     // 1085
 * Gets the schema for a form, from the `schema` attribute if                                                          // 1086
 * provided, or from the schema attached to the `Mongo.Collection`                                                     // 1087
 * specified in the `collection` attribute. The form must be                                                           // 1088
 * currently rendered.                                                                                                 // 1089
 */                                                                                                                    // 1090
AutoForm.getFormSchema = function (formId, form) {                                                                     // 1091
  form = form ? setDefaults(form) : AutoForm.getCurrentDataForForm(formId);                                            // 1092
  return form._resolvedSchema;                                                                                         // 1093
};                                                                                                                     // 1094
                                                                                                                       // 1095
/**                                                                                                                    // 1096
 * @method AutoForm.getFormId                                                                                          // 1097
 * @public                                                                                                             // 1098
 * @returns {String} The containing form's `id` attribute value                                                        // 1099
 *                                                                                                                     // 1100
 * Call in a helper to get the containing form's `id` attribute. Reactive.                                             // 1101
 */                                                                                                                    // 1102
AutoForm.getFormId = function () {                                                                                     // 1103
  return AutoForm.getCurrentDataForForm().id;                                                                          // 1104
};                                                                                                                     // 1105
                                                                                                                       // 1106
/**                                                                                                                    // 1107
 * @method AutoForm.selectFirstInvalidField                                                                            // 1108
 * @public                                                                                                             // 1109
 * @param {String} formId The `id` attribute of the form                                                               // 1110
 * @param {SimpleSchema} ss The SimpleSchema instance that was used to create the form's validation context.           // 1111
 * @returns {undefined}                                                                                                // 1112
 *                                                                                                                     // 1113
 * Selects the focus the first field (in DOM order) with an error.                                                     // 1114
 */                                                                                                                    // 1115
AutoForm.selectFirstInvalidField = function selectFirstInvalidField(formId, ss) {                                      // 1116
  var ctx = ss.namedContext(formId), template, fields;                                                                 // 1117
  if (!ctx.isValid()) {                                                                                                // 1118
    template = AutoForm.templateInstanceForForm(formId);                                                               // 1119
    fields = getAllFieldsInForm(template);                                                                             // 1120
    fields.each(function () {                                                                                          // 1121
      var f = $(this);                                                                                                 // 1122
      if (ctx.keyIsInvalid(f.attr('data-schema-key'))) {                                                               // 1123
        f.focus();                                                                                                     // 1124
        return false;                                                                                                  // 1125
      }                                                                                                                // 1126
    });                                                                                                                // 1127
  }                                                                                                                    // 1128
};                                                                                                                     // 1129
                                                                                                                       // 1130
/**                                                                                                                    // 1131
 * @method AutoForm._validateFormDoc                                                                                   // 1132
 * @public                                                                                                             // 1133
 *                                                                                                                     // 1134
 * If creating a form type, you will often want to call this from the `validateForm` function. It provides the generic form validation logic that does not typically change between form types.
 *                                                                                                                     // 1136
 * @param {Object} doc The document with the gathered form values to validate.                                         // 1137
 * @param {Boolean} isModifier Is `doc` actually a mongo modifier object?                                              // 1138
 * @param {String} formId The form `id` attribute                                                                      // 1139
 * @param {SimpleSchema} ss The SimpleSchema instance against which to validate.                                       // 1140
 * @param {Object} form The form context object                                                                        // 1141
 * @param {String} [key] Optionally, a specific schema key to validate.                                                // 1142
 * @returns {Boolean} Is the form valid?                                                                               // 1143
 */                                                                                                                    // 1144
AutoForm._validateFormDoc = function validateFormDoc(doc, isModifier, formId, ss, form, key) {                         // 1145
  var isValid;                                                                                                         // 1146
  var ec = {                                                                                                           // 1147
    userId: (Meteor.userId && Meteor.userId()) || null,                                                                // 1148
    isInsert: !isModifier,                                                                                             // 1149
    isUpdate: !!isModifier,                                                                                            // 1150
    isUpsert: false,                                                                                                   // 1151
    isFromTrustedCode: false,                                                                                          // 1152
    docId: (form.doc && form.doc._id) || null                                                                          // 1153
  };                                                                                                                   // 1154
                                                                                                                       // 1155
  // Get a version of the doc that has auto values to validate here. We                                                // 1156
  // don't want to actually send any auto values to the server because                                                 // 1157
  // we ultimately want them generated on the server                                                                   // 1158
  var docForValidation = _.clone(doc);                                                                                 // 1159
  ss.clean(docForValidation, {                                                                                         // 1160
    isModifier: isModifier,                                                                                            // 1161
    filter: false,                                                                                                     // 1162
    autoConvert: false,                                                                                                // 1163
    trimStrings: false,                                                                                                // 1164
    extendAutoValueContext: ec                                                                                         // 1165
  });                                                                                                                  // 1166
                                                                                                                       // 1167
  // Get form's validation context                                                                                     // 1168
  var vc = ss.namedContext(formId);                                                                                    // 1169
                                                                                                                       // 1170
  // Validate                                                                                                          // 1171
  // If `key` is provided, we validate that key/field only                                                             // 1172
  if (key) {                                                                                                           // 1173
    isValid = vc.validateOne(docForValidation, key, {                                                                  // 1174
      modifier: isModifier,                                                                                            // 1175
      extendedCustomContext: ec                                                                                        // 1176
    });                                                                                                                // 1177
                                                                                                                       // 1178
    // Add sticky error for this key if there is one                                                                   // 1179
    var stickyError = AutoForm.templateInstanceForForm(formId)._stickyErrors[key];                                     // 1180
    if (stickyError) {                                                                                                 // 1181
      isValid = false;                                                                                                 // 1182
      vc.addInvalidKeys([                                                                                              // 1183
        {name: key, type: stickyError.type, value: stickyError.value}                                                  // 1184
      ]);                                                                                                              // 1185
    }                                                                                                                  // 1186
  } else {                                                                                                             // 1187
    isValid = vc.validate(docForValidation, {                                                                          // 1188
      modifier: isModifier,                                                                                            // 1189
      extendedCustomContext: ec                                                                                        // 1190
    });                                                                                                                // 1191
                                                                                                                       // 1192
    // Add sticky errors for all keys if any                                                                           // 1193
    var stickyErrors = AutoForm.templateInstanceForForm(formId)._stickyErrors;                                         // 1194
    if (!_.isEmpty(stickyErrors)) {                                                                                    // 1195
      isValid = false;                                                                                                 // 1196
      stickyErrors = _.map(stickyErrors, function (obj, k) {                                                           // 1197
        return {name: k, type: obj.type, value: obj.value};                                                            // 1198
      });                                                                                                              // 1199
      vc.addInvalidKeys(stickyErrors);                                                                                 // 1200
    }                                                                                                                  // 1201
                                                                                                                       // 1202
    if (!isValid) {                                                                                                    // 1203
      AutoForm.selectFirstInvalidField(formId, ss);                                                                    // 1204
    }                                                                                                                  // 1205
  }                                                                                                                    // 1206
                                                                                                                       // 1207
  return isValid;                                                                                                      // 1208
};                                                                                                                     // 1209
                                                                                                                       // 1210
/**                                                                                                                    // 1211
 * Sets defaults for the form data context                                                                             // 1212
 * @private                                                                                                            // 1213
 * @returns {String} The data context with property defaults added.                                                    // 1214
 */                                                                                                                    // 1215
setDefaults = function setDefaults(data) {                                                                             // 1216
  if (!data) {                                                                                                         // 1217
    data = {};                                                                                                         // 1218
  }                                                                                                                    // 1219
                                                                                                                       // 1220
  // default form type is "normal"                                                                                     // 1221
  if (typeof data.type !== 'string') {                                                                                 // 1222
    data.type = 'normal';                                                                                              // 1223
  }                                                                                                                    // 1224
                                                                                                                       // 1225
  // default form validation is "submitThenKeyup"                                                                      // 1226
  if (typeof data.validation !== 'string') {                                                                           // 1227
    data.validation = 'submitThenKeyup';                                                                               // 1228
  }                                                                                                                    // 1229
                                                                                                                       // 1230
  // Resolve form schema                                                                                               // 1231
  if (!data._resolvedSchema) {                                                                                         // 1232
    var formType = data.type;                                                                                          // 1233
    var schema = data.schema;                                                                                          // 1234
    if (schema) {                                                                                                      // 1235
      schema = AutoForm.Utility.lookup(schema);                                                                        // 1236
    } else {                                                                                                           // 1237
      var collection = AutoForm.Utility.lookup(data.collection);                                                       // 1238
      if (collection && typeof collection.simpleSchema === 'function') {                                               // 1239
        schema = collection.simpleSchema();                                                                            // 1240
      }                                                                                                                // 1241
    }                                                                                                                  // 1242
                                                                                                                       // 1243
    // Form type definition can optionally alter the schema                                                            // 1244
    var ftd = Utility.getFormTypeDef(formType);                                                                        // 1245
                                                                                                                       // 1246
    if (typeof ftd.adjustSchema === 'function') {                                                                      // 1247
      schema = ftd.adjustSchema.call({form: data}, schema);                                                            // 1248
    }                                                                                                                  // 1249
                                                                                                                       // 1250
    // If we have a schema, cache it                                                                                   // 1251
    if (schema) {                                                                                                      // 1252
      data._resolvedSchema = schema;                                                                                   // 1253
    }                                                                                                                  // 1254
  }                                                                                                                    // 1255
                                                                                                                       // 1256
  return data;                                                                                                         // 1257
};                                                                                                                     // 1258
                                                                                                                       // 1259
var waitingForForms = {};                                                                                              // 1260
AutoForm.rerunWhenFormRenderedOrDestroyed = function (formId) {                                                        // 1261
  if (!_.has(waitingForForms, formId)) {                                                                               // 1262
    waitingForForms[formId] = new Tracker.Dependency();                                                                // 1263
  }                                                                                                                    // 1264
  waitingForForms[formId].depend();                                                                                    // 1265
};                                                                                                                     // 1266
                                                                                                                       // 1267
AutoForm.triggerFormRenderedDestroyedReruns = function (formId) {                                                      // 1268
  if (!_.has(waitingForForms, formId)) {                                                                               // 1269
    waitingForForms[formId] = new Tracker.Dependency();                                                                // 1270
  }                                                                                                                    // 1271
  waitingForForms[formId].changed();                                                                                   // 1272
};                                                                                                                     // 1273
                                                                                                                       // 1274
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 2991
}).call(this);                                                       // 2992
                                                                     // 2993
                                                                     // 2994
                                                                     // 2995
                                                                     // 2996
                                                                     // 2997
                                                                     // 2998
(function () {                                                       // 2999
                                                                     // 3000
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/insert.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('insert', {                                                                                       // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Prevent browser form submission                                                                                 // 7
    this.event.preventDefault();                                                                                       // 8
                                                                                                                       // 9
    // Make sure we have a collection                                                                                  // 10
    var collection = this.collection;                                                                                  // 11
    if (!collection) {                                                                                                 // 12
      throw new Error("AutoForm: You must specify a collection when form type is insert.");                            // 13
    }                                                                                                                  // 14
                                                                                                                       // 15
    // See if the collection has a schema attached                                                                     // 16
    var collectionHasSchema = (typeof collection.simpleSchema === "function" &&                                        // 17
                               collection.simpleSchema() != null);                                                     // 18
                                                                                                                       // 19
    // Run "before.insert" hooks                                                                                       // 20
    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 21
      // Perform insert                                                                                                // 22
      if (collectionHasSchema) {                                                                                       // 23
        // If the collection2 pkg is used and a schema is attached, we pass a validationContext                        // 24
        collection.insert(doc, c.validationOptions, c.result);                                                         // 25
      } else {                                                                                                         // 26
        // If the collection2 pkg is not used or no schema is attached, we don't pass options                          // 27
        // because core Meteor's `insert` function does not accept                                                     // 28
        // an options argument.                                                                                        // 29
        collection.insert(doc, c.result);                                                                              // 30
      }                                                                                                                // 31
    });                                                                                                                // 32
  },                                                                                                                   // 33
  validateForm: function () {                                                                                          // 34
    // Get SimpleSchema                                                                                                // 35
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 36
    // Validate                                                                                                        // 37
    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 38
  },                                                                                                                   // 39
  shouldPrevalidate: function () {                                                                                     // 40
    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 41
    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 42
  }                                                                                                                    // 43
});                                                                                                                    // 44
                                                                                                                       // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3053
}).call(this);                                                       // 3054
                                                                     // 3055
                                                                     // 3056
                                                                     // 3057
                                                                     // 3058
                                                                     // 3059
                                                                     // 3060
(function () {                                                       // 3061
                                                                     // 3062
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/update.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('update', {                                                                                       // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Prevent browser form submission                                                                                 // 7
    this.event.preventDefault();                                                                                       // 8
                                                                                                                       // 9
    // Make sure we have a collection                                                                                  // 10
    var collection = this.collection;                                                                                  // 11
    if (!collection) {                                                                                                 // 12
      throw new Error("AutoForm: You must specify a collection when form type is update.");                            // 13
    }                                                                                                                  // 14
                                                                                                                       // 15
    // Run "before.update" hooks                                                                                       // 16
    this.runBeforeHooks(this.updateDoc, function (modifier) {                                                          // 17
      if (_.isEmpty(modifier)) { // make sure this check stays after the before hooks                                  // 18
        // Nothing to update. Just treat it as a successful update.                                                    // 19
        c.result(null, 0);                                                                                             // 20
      } else {                                                                                                         // 21
        // Perform update                                                                                              // 22
        collection.update({_id: c.docId}, modifier, c.validationOptions, c.result);                                    // 23
      }                                                                                                                // 24
    });                                                                                                                // 25
  },                                                                                                                   // 26
  usesModifier: true,                                                                                                  // 27
  validateForm: function () {                                                                                          // 28
    // Get SimpleSchema                                                                                                // 29
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 30
    // We validate the modifier. We don't want to throw errors about missing required fields, etc.                     // 31
    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);                                 // 32
  },                                                                                                                   // 33
  shouldPrevalidate: function () {                                                                                     // 34
    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 35
    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 36
  }                                                                                                                    // 37
});                                                                                                                    // 38
                                                                                                                       // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3109
}).call(this);                                                       // 3110
                                                                     // 3111
                                                                     // 3112
                                                                     // 3113
                                                                     // 3114
                                                                     // 3115
                                                                     // 3116
(function () {                                                       // 3117
                                                                     // 3118
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/update-pushArray.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, SimpleSchema */                                                                                    // 1
                                                                                                                       // 2
AutoForm.addFormType('update-pushArray', {                                                                             // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Prevent browser form submission                                                                                 // 7
    this.event.preventDefault();                                                                                       // 8
                                                                                                                       // 9
    // Make sure we have a collection                                                                                  // 10
    var collection = this.collection;                                                                                  // 11
    if (!collection) {                                                                                                 // 12
      throw new Error("AutoForm: You must specify a collection when form type is update-pushArray.");                  // 13
    }                                                                                                                  // 14
                                                                                                                       // 15
    // Make sure we have a scope                                                                                       // 16
    var scope = c.formAttributes.scope;                                                                                // 17
    if (!scope) {                                                                                                      // 18
      throw new Error("AutoForm: You must specify a scope when form type is update-pushArray.");                       // 19
    }                                                                                                                  // 20
                                                                                                                       // 21
    // Run "before.update" hooks                                                                                       // 22
    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 23
      if (_.isEmpty(doc)) { // make sure this check stays after the before hooks                                       // 24
        // Nothing to update. Just treat it as a successful update.                                                    // 25
        c.result(null, 0);                                                                                             // 26
      } else {                                                                                                         // 27
        var modifer = {$push: {}};                                                                                     // 28
        modifer.$push[scope] = doc;                                                                                    // 29
        // Perform update                                                                                              // 30
        collection.update({_id: c.docId}, modifer, c.validationOptions, c.result);                                     // 31
      }                                                                                                                // 32
    });                                                                                                                // 33
  },                                                                                                                   // 34
  validateForm: function () {                                                                                          // 35
    // Get SimpleSchema                                                                                                // 36
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 37
    // We validate as if it's an insert form                                                                           // 38
    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 39
  },                                                                                                                   // 40
  adjustSchema: function (ss) {                                                                                        // 41
    var scope = this.form.scope, newSchemaDef = {};                                                                    // 42
    var searchString = SimpleSchema._makeGeneric(scope) + '.$.';                                                       // 43
                                                                                                                       // 44
    // create new SS instance with only the fields that begin with `scope`                                             // 45
    _.each(ss.schema(), function (val, key) {                                                                          // 46
      if (key.indexOf(searchString) === 0) {                                                                           // 47
        newSchemaDef[key.slice(searchString.length)] = val;                                                            // 48
      }                                                                                                                // 49
    });                                                                                                                // 50
                                                                                                                       // 51
    return new SimpleSchema(newSchemaDef);                                                                             // 52
  },                                                                                                                   // 53
  shouldPrevalidate: function () {                                                                                     // 54
    // Prevalidate because the form is generated with a schema                                                         // 55
    // that has keys different from the collection schema                                                              // 56
    return true;                                                                                                       // 57
  }                                                                                                                    // 58
});                                                                                                                    // 59
                                                                                                                       // 60
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3186
}).call(this);                                                       // 3187
                                                                     // 3188
                                                                     // 3189
                                                                     // 3190
                                                                     // 3191
                                                                     // 3192
                                                                     // 3193
(function () {                                                       // 3194
                                                                     // 3195
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/method.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('method', {                                                                                       // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Prevent browser form submission                                                                                 // 7
    this.event.preventDefault();                                                                                       // 8
                                                                                                                       // 9
    if (!this.formAttributes.meteormethod) {                                                                           // 10
      throw new Error('When form type is "method", you must also provide a "meteormethod" attribute');                 // 11
    }                                                                                                                  // 12
                                                                                                                       // 13
    // Run "before.method" hooks                                                                                       // 14
    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 15
      // Validate. If both schema and collection were provided, then we validate                                       // 16
      // against the collection schema here. Otherwise we validate against whichever                                   // 17
      // one was passed.                                                                                               // 18
      var valid = (c.formAttributes.validation === 'none') ||                                                          // 19
          c.formTypeDefinition.validateForm.call({                                                                     // 20
            form: c.formAttributes,                                                                                    // 21
            formDoc: doc,                                                                                              // 22
            useCollectionSchema: c.ssIsOverride                                                                        // 23
          });                                                                                                          // 24
                                                                                                                       // 25
      if (valid === false) {                                                                                           // 26
        c.failedValidation();                                                                                          // 27
      } else {                                                                                                         // 28
        // Call the method. If a ddp connection was provided, use                                                      // 29
        // that instead of the default Meteor connection                                                               // 30
        var ddp = c.formAttributes.ddp;                                                                                // 31
        if (ddp && ddp.call && typeof ddp.call === 'function') {                                                       // 32
          ddp.call(c.formAttributes.meteormethod, doc, c.result);                                                      // 33
        } else {                                                                                                       // 34
          Meteor.call(c.formAttributes.meteormethod, doc, c.result);                                                   // 35
        }                                                                                                              // 36
      }                                                                                                                // 37
    });                                                                                                                // 38
  },                                                                                                                   // 39
  validateForm: function () {                                                                                          // 40
    // Get SimpleSchema                                                                                                // 41
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 42
                                                                                                                       // 43
    var collection = AutoForm.getFormCollection(this.form.id);                                                         // 44
    // If there is a `schema` attribute but you want to force validation against the                                   // 45
    // collection's schema instead, pass useCollectionSchema=true                                                      // 46
    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;                                    // 47
                                                                                                                       // 48
    // Validate                                                                                                        // 49
    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 50
  },                                                                                                                   // 51
  shouldPrevalidate: function () {                                                                                     // 52
    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 53
    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 54
  }                                                                                                                    // 55
});                                                                                                                    // 56
                                                                                                                       // 57
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3260
}).call(this);                                                       // 3261
                                                                     // 3262
                                                                     // 3263
                                                                     // 3264
                                                                     // 3265
                                                                     // 3266
                                                                     // 3267
(function () {                                                       // 3268
                                                                     // 3269
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/method-update.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('method-update', {                                                                                // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Prevent browser form submission                                                                                 // 7
    this.event.preventDefault();                                                                                       // 8
                                                                                                                       // 9
    if (!this.formAttributes.meteormethod) {                                                                           // 10
      throw new Error('When form type is "method-update", you must also provide a "meteormethod" attribute');          // 11
    }                                                                                                                  // 12
                                                                                                                       // 13
    // Run "before.method" hooks                                                                                       // 14
    this.runBeforeHooks(this.updateDoc, function (updateDoc) {                                                         // 15
      // Validate. If both schema and collection were provided, then we validate                                       // 16
      // against the collection schema here. Otherwise we validate against whichever                                   // 17
      // one was passed.                                                                                               // 18
      var valid = (c.formAttributes.validation === 'none') ||                                                          // 19
          c.formTypeDefinition.validateForm.call({                                                                     // 20
            form: c.formAttributes,                                                                                    // 21
            formDoc: updateDoc,                                                                                        // 22
            useCollectionSchema: c.ssIsOverride                                                                        // 23
          });                                                                                                          // 24
                                                                                                                       // 25
      if (valid === false) {                                                                                           // 26
        c.failedValidation();                                                                                          // 27
      } else {                                                                                                         // 28
        // Call the method. If a ddp connection was provided, use                                                      // 29
        // that instead of the default Meteor connection                                                               // 30
        var ddp = c.formAttributes.ddp;                                                                                // 31
        if (ddp && ddp.call && typeof ddp.call === 'function') {                                                       // 32
          ddp.call(c.formAttributes.meteormethod, updateDoc, c.docId, c.result);                                       // 33
        } else {                                                                                                       // 34
          Meteor.call(c.formAttributes.meteormethod, updateDoc, c.docId, c.result);                                    // 35
        }                                                                                                              // 36
      }                                                                                                                // 37
    });                                                                                                                // 38
  },                                                                                                                   // 39
  usesModifier: true,                                                                                                  // 40
  validateForm: function () {                                                                                          // 41
    // Get SimpleSchema                                                                                                // 42
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 43
                                                                                                                       // 44
    var collection = AutoForm.getFormCollection(this.form.id);                                                         // 45
    // If there is a `schema` attribute but you want to force validation against the                                   // 46
    // collection's schema instead, pass useCollectionSchema=true                                                      // 47
    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;                                    // 48
                                                                                                                       // 49
    // We validate the modifier. We don't want to throw errors about missing required fields, etc.                     // 50
    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);                                 // 51
  },                                                                                                                   // 52
  shouldPrevalidate: function () {                                                                                     // 53
    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 54
    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 55
  }                                                                                                                    // 56
});                                                                                                                    // 57
                                                                                                                       // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3335
}).call(this);                                                       // 3336
                                                                     // 3337
                                                                     // 3338
                                                                     // 3339
                                                                     // 3340
                                                                     // 3341
                                                                     // 3342
(function () {                                                       // 3343
                                                                     // 3344
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/normal.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, Hooks */                                                                                           // 1
                                                                                                                       // 2
AutoForm.addFormType('normal', {                                                                                       // 3
  onSubmit: function () {                                                                                              // 4
    var c = this;                                                                                                      // 5
                                                                                                                       // 6
    // Get onSubmit hooks                                                                                              // 7
    // These are called differently from the before hooks because                                                      // 8
    // they run async, but they can run in parallel and we need the                                                    // 9
    // result of all of them immediately because they can return                                                       // 10
    // false to stop normal form submission.                                                                           // 11
    var hooks = Hooks.getHooks(this.formId, 'onSubmit');                                                               // 12
                                                                                                                       // 13
    var hookCount = hooks.length, doneCount = 0, submitError, submitResult;                                            // 14
                                                                                                                       // 15
    if (hookCount === 0) {                                                                                             // 16
      // we haven't called preventDefault, so normal browser                                                           // 17
      // submission will now happen                                                                                    // 18
      this.endSubmission();                                                                                            // 19
      return;                                                                                                          // 20
    }                                                                                                                  // 21
                                                                                                                       // 22
    // Set up onSubmit hook context                                                                                    // 23
    var ctx = _.extend({                                                                                               // 24
      done: function (error, result) {                                                                                 // 25
        doneCount++;                                                                                                   // 26
        if (!submitError && error) {                                                                                   // 27
          submitError = error;                                                                                         // 28
        }                                                                                                              // 29
        if (!submitResult && result) {                                                                                 // 30
          submitResult = result;                                                                                       // 31
        }                                                                                                              // 32
        if (doneCount === hookCount) {                                                                                 // 33
          // run onError, onSuccess, endSubmit                                                                         // 34
          c.result(submitError, submitResult);                                                                         // 35
        }                                                                                                              // 36
      }                                                                                                                // 37
    }, this.hookContext);                                                                                              // 38
                                                                                                                       // 39
    // Call all hooks at once.                                                                                         // 40
    // Pass both types of doc plus the doc attached to the form.                                                       // 41
    // If any return false, we stop normal submission, but we don't                                                    // 42
    // run onError, onSuccess, endSubmit hooks until they all call this.done().                                        // 43
    var shouldStop = false;                                                                                            // 44
    _.each(hooks, function eachOnSubmit(hook) {                                                                        // 45
      var result = hook.call(ctx, c.insertDoc, c.updateDoc, c.currentDoc);                                             // 46
      if (shouldStop === false && result === false) {                                                                  // 47
        shouldStop = true;                                                                                             // 48
      }                                                                                                                // 49
    });                                                                                                                // 50
    if (shouldStop) {                                                                                                  // 51
      this.event.preventDefault();                                                                                     // 52
      this.event.stopPropagation();                                                                                    // 53
      this.endSubmission();                                                                                            // 54
    }                                                                                                                  // 55
  },                                                                                                                   // 56
  needsModifierAndDoc: true,                                                                                           // 57
  validateForm: function () {                                                                                          // 58
    // Get SimpleSchema                                                                                                // 59
    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 60
    // Validate                                                                                                        // 61
    return AutoForm._validateFormDoc(this.formDoc.insertDoc, false, this.form.id, ss, this.form);                      // 62
  }                                                                                                                    // 63
});                                                                                                                    // 64
                                                                                                                       // 65
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3417
}).call(this);                                                       // 3418
                                                                     // 3419
                                                                     // 3420
                                                                     // 3421
                                                                     // 3422
                                                                     // 3423
                                                                     // 3424
(function () {                                                       // 3425
                                                                     // 3426
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/readonly.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('readonly', {                                                                                     // 3
  onSubmit: function () {                                                                                              // 4
    // Prevent browser form submission                                                                                 // 5
    this.event.preventDefault();                                                                                       // 6
    // Nothing else                                                                                                    // 7
  },                                                                                                                   // 8
  validateForm: function () {                                                                                          // 9
    // Always valid                                                                                                    // 10
    return true;                                                                                                       // 11
  },                                                                                                                   // 12
  adjustInputContext: function (ctx) {                                                                                 // 13
    ctx.atts.readonly = "";                                                                                            // 14
    return ctx;                                                                                                        // 15
  },                                                                                                                   // 16
  hideArrayItemButtons: true                                                                                           // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3453
}).call(this);                                                       // 3454
                                                                     // 3455
                                                                     // 3456
                                                                     // 3457
                                                                     // 3458
                                                                     // 3459
                                                                     // 3460
(function () {                                                       // 3461
                                                                     // 3462
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/formTypes/disabled.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
AutoForm.addFormType('disabled', {                                                                                     // 3
  onSubmit: function () {                                                                                              // 4
    // Prevent browser form submission                                                                                 // 5
    this.event.preventDefault();                                                                                       // 6
    // Nothing else                                                                                                    // 7
  },                                                                                                                   // 8
  validateForm: function () {                                                                                          // 9
    // Always valid                                                                                                    // 10
    return true;                                                                                                       // 11
  },                                                                                                                   // 12
  adjustInputContext: function (ctx) {                                                                                 // 13
    ctx.atts.disabled = "";                                                                                            // 14
    return ctx;                                                                                                        // 15
  },                                                                                                                   // 16
  hideArrayItemButtons: true                                                                                           // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3489
}).call(this);                                                       // 3490
                                                                     // 3491
                                                                     // 3492
                                                                     // 3493
                                                                     // 3494
                                                                     // 3495
                                                                     // 3496
(function () {                                                       // 3497
                                                                     // 3498
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/value-converters.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
 * The conversion functions in this file can be used by input types to convert their outgoing values into the data type expected by the schema
 */                                                                                                                    // 3
                                                                                                                       // 4
AutoForm.valueConverters = {                                                                                           // 5
  booleanToString: function booleanToString(val) {                                                                     // 6
    if (val === true) {                                                                                                // 7
      return "TRUE";                                                                                                   // 8
    } else if (val === false) {                                                                                        // 9
      return "FALSE";                                                                                                  // 10
    }                                                                                                                  // 11
    return val;                                                                                                        // 12
  },                                                                                                                   // 13
  booleanToStringArray: function booleanToStringArray(val) {                                                           // 14
    if (val === true) {                                                                                                // 15
      return ["TRUE"];                                                                                                 // 16
    } else if (val === false) {                                                                                        // 17
      return ["FALSE"];                                                                                                // 18
    }                                                                                                                  // 19
    return val;                                                                                                        // 20
  },                                                                                                                   // 21
  booleanToNumber: function booleanToNumber(val) {                                                                     // 22
    if (val === true) {                                                                                                // 23
      return 1;                                                                                                        // 24
    } else if (val === false) {                                                                                        // 25
      return 0;                                                                                                        // 26
    }                                                                                                                  // 27
    return val;                                                                                                        // 28
  },                                                                                                                   // 29
  booleanToNumberArray: function booleanToNumberArray(val) {                                                           // 30
    if (val === true) {                                                                                                // 31
      return [1];                                                                                                      // 32
    } else if (val === false) {                                                                                        // 33
      return [0];                                                                                                      // 34
    }                                                                                                                  // 35
    return val;                                                                                                        // 36
  },                                                                                                                   // 37
  /**                                                                                                                  // 38
   * @method  AutoForm.valueConverters.dateToDateString                                                                // 39
   * @private                                                                                                          // 40
   * @param  {Date} date                                                                                               // 41
   * @return {String}                                                                                                  // 42
   *                                                                                                                   // 43
   * Returns a "valid date string" representing the local date.                                                        // 44
   */                                                                                                                  // 45
  dateToDateString: function dateToDateString(val) {                                                                   // 46
    return (val instanceof Date) ? moment(val).format("YYYY-MM-DD") : val;                                             // 47
  },                                                                                                                   // 48
  /**                                                                                                                  // 49
   * @method  AutoForm.valueConverters.dateToDateStringUTC                                                             // 50
   * @private                                                                                                          // 51
   * @param  {Date} date                                                                                               // 52
   * @return {String}                                                                                                  // 53
   *                                                                                                                   // 54
   * Returns a "valid date string" representing the date converted to the UTC time zone.                               // 55
   */                                                                                                                  // 56
  dateToDateStringUTC: function dateToDateStringUTC(val) {                                                             // 57
    return (val instanceof Date) ? moment.utc(val).format("YYYY-MM-DD") : val;                                         // 58
  },                                                                                                                   // 59
  dateToDateStringUTCArray: function dateToDateStringUTCArray(val) {                                                   // 60
    if (val instanceof Date) {                                                                                         // 61
      return [AutoForm.valueConverters.dateToDateStringUTC(val)];                                                      // 62
    }                                                                                                                  // 63
    return val;                                                                                                        // 64
  },                                                                                                                   // 65
  /**                                                                                                                  // 66
   * @method  AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString                                // 67
   * @private                                                                                                          // 68
   * @param  {Date} date                                                                                               // 69
   * @return {String}                                                                                                  // 70
   *                                                                                                                   // 71
   * Returns a "valid normalized forced-UTC global date and time string" representing the time                         // 72
   * converted to the UTC time zone and expressed as the shortest possible string for the given                        // 73
   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).            // 74
   *                                                                                                                   // 75
   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)
   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string
   */                                                                                                                  // 78
  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(val) {   // 79
    return (val instanceof Date) ? moment(val).utc().format("YYYY-MM-DD[T]HH:mm:ss.SSS[Z]") : val;                     // 80
  },                                                                                                                   // 81
  dateToNormalizedForcedUtcGlobalDateAndTimeStringArray: function dateToNormalizedForcedUtcGlobalDateAndTimeStringArray(val) {
    if (val instanceof Date) {                                                                                         // 83
      return [AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];                         // 84
    }                                                                                                                  // 85
    return val;                                                                                                        // 86
  },                                                                                                                   // 87
  /**                                                                                                                  // 88
   * @method AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString                                           // 89
   * @private                                                                                                          // 90
   * @param {Date} date The Date object                                                                                // 91
   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., "America/Los_Angeles"     // 92
   * @return {String}                                                                                                  // 93
   *                                                                                                                   // 94
   * Returns a "valid normalized local date and time string".                                                          // 95
   */                                                                                                                  // 96
  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {          // 97
    var m = moment(date);                                                                                              // 98
    // by default, we assume local timezone; add moment-timezone to app and pass timezoneId                            // 99
    // to use a different timezone                                                                                     // 100
    if (typeof timezoneId === "string") {                                                                              // 101
      if (typeof m.tz !== "function") {                                                                                // 102
        throw new Error("If you specify a timezoneId, make sure that you've added a moment-timezone package to your app");
      }                                                                                                                // 104
      m.tz(timezoneId);                                                                                                // 105
    }                                                                                                                  // 106
    return m.format("YYYY-MM-DD[T]HH:mm:ss.SSS");                                                                      // 107
  },                                                                                                                   // 108
  dateToNumber: function dateToNumber(val) {                                                                           // 109
    return (val instanceof Date) ? val.getTime() : val;                                                                // 110
  },                                                                                                                   // 111
  dateToNumberArray: function dateToNumberArray(val) {                                                                 // 112
    if (val instanceof Date) {                                                                                         // 113
      return [val.getTime()];                                                                                          // 114
    }                                                                                                                  // 115
    return val;                                                                                                        // 116
  },                                                                                                                   // 117
  dateToDateArray: function dateToDateArray(val) {                                                                     // 118
    if (val instanceof Date) {                                                                                         // 119
      return [val];                                                                                                    // 120
    }                                                                                                                  // 121
    return val;                                                                                                        // 122
  },                                                                                                                   // 123
  stringToStringArray: function stringToStringArray(val) {                                                             // 124
    if (typeof val === "string") {                                                                                     // 125
      val = val.split(",");                                                                                            // 126
      return _.map(val, function (item) {                                                                              // 127
        return $.trim(item);                                                                                           // 128
      });                                                                                                              // 129
    }                                                                                                                  // 130
    return val;                                                                                                        // 131
  },                                                                                                                   // 132
  /**                                                                                                                  // 133
   * @method AutoForm.valueConverters.stringToNumber                                                                   // 134
   * @public                                                                                                           // 135
   * @param {String} val A string or null or undefined.                                                                // 136
   * @return {Number|String} The string converted to a Number or the original value.                                   // 137
   *                                                                                                                   // 138
   * For strings, returns Number(val) unless the result is NaN. Otherwise returns val.                                 // 139
   */                                                                                                                  // 140
  stringToNumber: function stringToNumber(val) {                                                                       // 141
    if (typeof val === "string" && val.length > 0) {                                                                   // 142
      var numVal = Number(val);                                                                                        // 143
      if (!isNaN(numVal)) {                                                                                            // 144
        return numVal;                                                                                                 // 145
      }                                                                                                                // 146
    }                                                                                                                  // 147
    return val;                                                                                                        // 148
  },                                                                                                                   // 149
  stringToNumberArray: function stringToNumberArray(val) {                                                             // 150
    if (typeof val === "string") {                                                                                     // 151
      val = val.split(",");                                                                                            // 152
      return _.map(val, function (item) {                                                                              // 153
        item = $.trim(item);                                                                                           // 154
        return AutoForm.valueConverters.stringToNumber(item);                                                          // 155
      });                                                                                                              // 156
    }                                                                                                                  // 157
    return val;                                                                                                        // 158
  },                                                                                                                   // 159
  /**                                                                                                                  // 160
   * @method AutoForm.valueConverters.stringToBoolean                                                                  // 161
   * @private                                                                                                          // 162
   * @param {String} val A string or null or undefined.                                                                // 163
   * @return {Boolean|String} The string converted to a Boolean.                                                       // 164
   *                                                                                                                   // 165
   * If the string is "true" or "1", returns `true`. If the string is "false" or "0", returns `false`. Otherwise returns the original string.
   */                                                                                                                  // 167
  stringToBoolean: function stringToBoolean(val) {                                                                     // 168
    if (typeof val === "string" && val.length > 0) {                                                                   // 169
      var lval = val.toLowerCase();                                                                                    // 170
      if (lval === "true" || lval === "1") {                                                                           // 171
        return true;                                                                                                   // 172
      } else if (lval === "false" || lval === "0") {                                                                   // 173
        return false;                                                                                                  // 174
      }                                                                                                                // 175
    }                                                                                                                  // 176
    return val;                                                                                                        // 177
  },                                                                                                                   // 178
  stringToBooleanArray: function stringToBooleanArray(val) {                                                           // 179
    if (typeof val === "string") {                                                                                     // 180
      val = val.split(",");                                                                                            // 181
      return _.map(val, function (item) {                                                                              // 182
        item = $.trim(item);                                                                                           // 183
        return AutoForm.valueConverters.stringToBoolean(item);                                                         // 184
      });                                                                                                              // 185
    }                                                                                                                  // 186
    return val;                                                                                                        // 187
  },                                                                                                                   // 188
  /**                                                                                                                  // 189
   * @method AutoForm.valueConverters.stringToDate                                                                     // 190
   * @private                                                                                                          // 191
   * @param {String} val A string or null or undefined.                                                                // 192
   * @return {Date|String} The string converted to a Date instance.                                                    // 193
   *                                                                                                                   // 194
   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.
   */                                                                                                                  // 196
  stringToDate: function stringToDate(val) {                                                                           // 197
    if (typeof val === "string" && val.length > 0) {                                                                   // 198
      return new Date(val);                                                                                            // 199
    }                                                                                                                  // 200
    return val;                                                                                                        // 201
  },                                                                                                                   // 202
  stringToDateArray: function stringToDateArray(val) {                                                                 // 203
    if (typeof val === "string") {                                                                                     // 204
      val = val.split(",");                                                                                            // 205
      return _.map(val, function (item) {                                                                              // 206
        item = $.trim(item);                                                                                           // 207
        return AutoForm.valueConverters.stringToDate(item);                                                            // 208
      });                                                                                                              // 209
    }                                                                                                                  // 210
    return val;                                                                                                        // 211
  },                                                                                                                   // 212
  numberToString: function numberToString(val) {                                                                       // 213
    if (typeof val === "number") {                                                                                     // 214
      return val.toString();                                                                                           // 215
    }                                                                                                                  // 216
    return val;                                                                                                        // 217
  },                                                                                                                   // 218
  numberToStringArray: function numberToStringArray(val) {                                                             // 219
    if (typeof val === "number") {                                                                                     // 220
      return [val.toString()];                                                                                         // 221
    }                                                                                                                  // 222
    return val;                                                                                                        // 223
  },                                                                                                                   // 224
  numberToNumberArray: function numberToNumberArray(val) {                                                             // 225
    if (typeof val === "number") {                                                                                     // 226
      return [val];                                                                                                    // 227
    }                                                                                                                  // 228
    return val;                                                                                                        // 229
  },                                                                                                                   // 230
  numberToBoolean: function numberToBoolean(val) {                                                                     // 231
    if (val === 0) {                                                                                                   // 232
      return false;                                                                                                    // 233
    } else if (val === 1) {                                                                                            // 234
      return true;                                                                                                     // 235
    }                                                                                                                  // 236
    return val;                                                                                                        // 237
  },                                                                                                                   // 238
  numberToBooleanArray: function numberToBooleanArray(val) {                                                           // 239
    if (val === 0) {                                                                                                   // 240
      return [false];                                                                                                  // 241
    } else if (val === 1) {                                                                                            // 242
      return [true];                                                                                                   // 243
    }                                                                                                                  // 244
    return val;                                                                                                        // 245
  }                                                                                                                    // 246
};                                                                                                                     // 247
                                                                                                                       // 248
// BACKWARDS COMPATIBILITY - some of these were formerly on the Utility object                                         // 249
Utility.dateToDateString = AutoForm.valueConverters.dateToDateString;                                                  // 250
Utility.dateToDateStringUTC = AutoForm.valueConverters.dateToDateStringUTC;                                            // 251
Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString;
Utility.dateToNormalizedLocalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString;      // 253
Utility.stringToBool = AutoForm.valueConverters.stringToBoolean;                                                       // 254
Utility.stringToNumber = AutoForm.valueConverters.stringToNumber;                                                      // 255
Utility.stringToDate = AutoForm.valueConverters.stringToDate;                                                          // 256
                                                                                                                       // 257
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3763
}).call(this);                                                       // 3764
                                                                     // 3765
                                                                     // 3766
                                                                     // 3767
                                                                     // 3768
                                                                     // 3769
                                                                     // 3770
(function () {                                                       // 3771
                                                                     // 3772
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-checkbox/template.boolean-checkbox.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckbox");                                                                                    // 2
Template["afCheckbox"] = new Template("Template.afCheckbox", (function() {                                             // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5
    type: "checkbox",                                                                                                  // 6
    value: "true"                                                                                                      // 7
  }, function() {                                                                                                      // 8
    return Spacebars.attrMustache(view.lookup("atts"));                                                                // 9
  })), " ", Blaze.View("lookup:afFieldLabelText", function() {                                                         // 10
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 11
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 12
    }));                                                                                                               // 13
  })));                                                                                                                // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3796
}).call(this);                                                       // 3797
                                                                     // 3798
                                                                     // 3799
                                                                     // 3800
                                                                     // 3801
                                                                     // 3802
                                                                     // 3803
(function () {                                                       // 3804
                                                                     // 3805
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-checkbox/boolean-checkbox.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("boolean-checkbox", {                                                                            // 1
  template: "afCheckbox",                                                                                              // 2
  valueOut: function () {                                                                                              // 3
    return !!this.is(":checked");                                                                                      // 4
  },                                                                                                                   // 5
  valueConverters: {                                                                                                   // 6
    "string": AutoForm.valueConverters.booleanToString,                                                                // 7
    "stringArray": AutoForm.valueConverters.booleanToStringArray,                                                      // 8
    "number": AutoForm.valueConverters.booleanToNumber,                                                                // 9
    "numberArray": AutoForm.valueConverters.booleanToNumberArray                                                       // 10
  },                                                                                                                   // 11
  contextAdjust: function (context) {                                                                                  // 12
    if (context.value === true) {                                                                                      // 13
      context.atts.checked = "";                                                                                       // 14
    }                                                                                                                  // 15
    //don't add required attribute to checkboxes because some browsers assume that to mean that it must be checked, which is not what we mean by "required"
    delete context.atts.required;                                                                                      // 17
    return context;                                                                                                    // 18
  }                                                                                                                    // 19
});                                                                                                                    // 20
                                                                                                                       // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3834
}).call(this);                                                       // 3835
                                                                     // 3836
                                                                     // 3837
                                                                     // 3838
                                                                     // 3839
                                                                     // 3840
                                                                     // 3841
(function () {                                                       // 3842
                                                                     // 3843
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-radios/template.boolean-radios.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afBooleanRadioGroup");                                                                           // 2
Template["afBooleanRadioGroup"] = new Template("Template.afBooleanRadioGroup", (function() {                           // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 6
  }), "\n    ", HTML.DIV("\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                // 7
    type: "radio",                                                                                                     // 8
    value: "false",                                                                                                    // 9
    name: function() {                                                                                                 // 10
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                              // 11
    }                                                                                                                  // 12
  }, function() {                                                                                                      // 13
    return Spacebars.attrMustache(view.lookup("falseAtts"));                                                           // 14
  })), " ", Spacebars.With(function() {                                                                                // 15
    return Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "falseLabel"));                                      // 16
  }, function() {                                                                                                      // 17
    return Blaze.View("lookup:.", function() {                                                                         // 18
      return Spacebars.mustache(view.lookup("."));                                                                     // 19
    });                                                                                                                // 20
  }, function() {                                                                                                      // 21
    return "False";                                                                                                    // 22
  })), "\n    "), "\n    ", HTML.DIV("\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                    // 23
    type: "radio",                                                                                                     // 24
    value: "true",                                                                                                     // 25
    name: function() {                                                                                                 // 26
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                              // 27
    }                                                                                                                  // 28
  }, function() {                                                                                                      // 29
    return Spacebars.attrMustache(view.lookup("trueAtts"));                                                            // 30
  })), " ", Spacebars.With(function() {                                                                                // 31
    return Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "trueLabel"));                                       // 32
  }, function() {                                                                                                      // 33
    return Blaze.View("lookup:.", function() {                                                                         // 34
      return Spacebars.mustache(view.lookup("."));                                                                     // 35
    });                                                                                                                // 36
  }, function() {                                                                                                      // 37
    return "True";                                                                                                     // 38
  })), "\n    "), "\n    ", Spacebars.With(function() {                                                                // 39
    return Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "nullLabel"));                                       // 40
  }, function() {                                                                                                      // 41
    return [ "\n    ", HTML.DIV("\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                         // 42
      type: "radio",                                                                                                   // 43
      value: "",                                                                                                       // 44
      name: function() {                                                                                               // 45
        return Spacebars.mustache(Spacebars.dot(view.lookup(".."), "name"));                                           // 46
      }                                                                                                                // 47
    }, function() {                                                                                                    // 48
      return Spacebars.attrMustache(view.lookup("nullAtts"));                                                          // 49
    })), " ", Blaze.View("lookup:.", function() {                                                                      // 50
      return Spacebars.mustache(view.lookup("."));                                                                     // 51
    })), "\n    "), "\n    " ];                                                                                        // 52
  }), "\n  ");                                                                                                         // 53
}));                                                                                                                   // 54
                                                                                                                       // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3906
}).call(this);                                                       // 3907
                                                                     // 3908
                                                                     // 3909
                                                                     // 3910
                                                                     // 3911
                                                                     // 3912
                                                                     // 3913
(function () {                                                       // 3914
                                                                     // 3915
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-radios/boolean-radios.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("boolean-radios", {                                                                              // 1
  template: "afBooleanRadioGroup",                                                                                     // 2
  valueOut: function () {                                                                                              // 3
    if (this.find('input[value=false]').is(":checked")) {                                                              // 4
      return false;                                                                                                    // 5
    } else if (this.find('input[value=true]').is(":checked")) {                                                        // 6
      return true;                                                                                                     // 7
    }                                                                                                                  // 8
  },                                                                                                                   // 9
  valueConverters: {                                                                                                   // 10
    "string": AutoForm.valueConverters.booleanToString,                                                                // 11
    "stringArray": AutoForm.valueConverters.booleanToStringArray,                                                      // 12
    "number": AutoForm.valueConverters.booleanToNumber,                                                                // 13
    "numberArray": AutoForm.valueConverters.booleanToNumberArray                                                       // 14
  }                                                                                                                    // 15
});                                                                                                                    // 16
                                                                                                                       // 17
Template.afBooleanRadioGroup.helpers({                                                                                 // 18
  falseAtts: function falseAtts() {                                                                                    // 19
    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 20
    if (this.value === false) {                                                                                        // 21
      atts.checked = "";                                                                                               // 22
    }                                                                                                                  // 23
    return atts;                                                                                                       // 24
  },                                                                                                                   // 25
  trueAtts: function trueAtts() {                                                                                      // 26
    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 27
    if (this.value === true) {                                                                                         // 28
      atts.checked = "";                                                                                               // 29
    }                                                                                                                  // 30
    return atts;                                                                                                       // 31
  },                                                                                                                   // 32
  nullAtts: function nullAtts() {                                                                                      // 33
    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 34
    if (this.value !== true && this.value !== false) {                                                                 // 35
      atts.checked = "";                                                                                               // 36
    }                                                                                                                  // 37
    return atts;                                                                                                       // 38
  },                                                                                                                   // 39
  dsk: function () {                                                                                                   // 40
    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 41
  }                                                                                                                    // 42
});                                                                                                                    // 43
                                                                                                                       // 44
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 3967
}).call(this);                                                       // 3968
                                                                     // 3969
                                                                     // 3970
                                                                     // 3971
                                                                     // 3972
                                                                     // 3973
                                                                     // 3974
(function () {                                                       // 3975
                                                                     // 3976
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-select/template.boolean-select.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afBooleanSelect");                                                                               // 2
Template["afBooleanSelect"] = new Template("Template.afBooleanSelect", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 6
  }), "\n    ", Blaze.Each(function() {                                                                                // 7
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", HTML.OPTION(HTML.Attrs(function() {                                                             // 10
      return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                                // 11
    }), Blaze.View("lookup:..label", function() {                                                                      // 12
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 13
    })), "\n    " ];                                                                                                   // 14
  }), "\n  ");                                                                                                         // 15
}));                                                                                                                   // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4001
}).call(this);                                                       // 4002
                                                                     // 4003
                                                                     // 4004
                                                                     // 4005
                                                                     // 4006
                                                                     // 4007
                                                                     // 4008
(function () {                                                       // 4009
                                                                     // 4010
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/boolean-select/boolean-select.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("boolean-select", {                                                                              // 1
  template: "afBooleanSelect",                                                                                         // 2
  valueOut: function () {                                                                                              // 3
    var val = this.val();                                                                                              // 4
    if (val === "true") {                                                                                              // 5
      return true;                                                                                                     // 6
    } else if (val === "false") {                                                                                      // 7
      return false;                                                                                                    // 8
    }                                                                                                                  // 9
  },                                                                                                                   // 10
  valueConverters: {                                                                                                   // 11
    "string": AutoForm.valueConverters.booleanToString,                                                                // 12
    "stringArray": AutoForm.valueConverters.booleanToStringArray,                                                      // 13
    "number": AutoForm.valueConverters.booleanToNumber,                                                                // 14
    "numberArray": AutoForm.valueConverters.booleanToNumberArray                                                       // 15
  },                                                                                                                   // 16
  contextAdjust: function (context) {                                                                                  // 17
    var atts = _.omit(context.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'firstOption');                            // 18
                                                                                                                       // 19
    // build items list                                                                                                // 20
    context.items = [                                                                                                  // 21
      {                                                                                                                // 22
        name: context.name,                                                                                            // 23
        value: "",                                                                                                     // 24
        // _id must be included because it is a special property that                                                  // 25
        // #each uses to track unique list items when adding and removing them                                         // 26
        // See https://github.com/meteor/meteor/issues/2174                                                            // 27
        _id: "",                                                                                                       // 28
        selected: (context.value !== false && context.value !== true),                                                 // 29
        label: context.atts.nullLabel || context.atts.firstOption || "(Select One)",                                   // 30
        atts: atts                                                                                                     // 31
      },                                                                                                               // 32
      {                                                                                                                // 33
        name: context.name,                                                                                            // 34
        value: "false",                                                                                                // 35
        // _id must be included because it is a special property that                                                  // 36
        // #each uses to track unique list items when adding and removing them                                         // 37
        // See https://github.com/meteor/meteor/issues/2174                                                            // 38
        _id: "false",                                                                                                  // 39
        selected: (context.value === false),                                                                           // 40
        label: context.atts.falseLabel || "False",                                                                     // 41
        atts: atts                                                                                                     // 42
      },                                                                                                               // 43
      {                                                                                                                // 44
        name: context.name,                                                                                            // 45
        value: "true",                                                                                                 // 46
        // _id must be included because it is a special property that                                                  // 47
        // #each uses to track unique list items when adding and removing them                                         // 48
        // See https://github.com/meteor/meteor/issues/2174                                                            // 49
        _id: "true",                                                                                                   // 50
        selected: (context.value === true),                                                                            // 51
        label: context.atts.trueLabel || "True",                                                                       // 52
        atts: atts                                                                                                     // 53
      }                                                                                                                // 54
    ];                                                                                                                 // 55
                                                                                                                       // 56
    return context;                                                                                                    // 57
  }                                                                                                                    // 58
});                                                                                                                    // 59
                                                                                                                       // 60
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4078
}).call(this);                                                       // 4079
                                                                     // 4080
                                                                     // 4081
                                                                     // 4082
                                                                     // 4083
                                                                     // 4084
                                                                     // 4085
(function () {                                                       // 4086
                                                                     // 4087
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/button/template.button.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputButton");                                                                                 // 2
Template["afInputButton"] = new Template("Template.afInputButton", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "button",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4109
}).call(this);                                                       // 4110
                                                                     // 4111
                                                                     // 4112
                                                                     // 4113
                                                                     // 4114
                                                                     // 4115
                                                                     // 4116
(function () {                                                       // 4117
                                                                     // 4118
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/button/button.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("button", {                                                                                      // 1
  template: "afInputButton"                                                                                            // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4129
}).call(this);                                                       // 4130
                                                                     // 4131
                                                                     // 4132
                                                                     // 4133
                                                                     // 4134
                                                                     // 4135
                                                                     // 4136
(function () {                                                       // 4137
                                                                     // 4138
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/color/template.color.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputColor");                                                                                  // 2
Template["afInputColor"] = new Template("Template.afInputColor", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "color",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4160
}).call(this);                                                       // 4161
                                                                     // 4162
                                                                     // 4163
                                                                     // 4164
                                                                     // 4165
                                                                     // 4166
                                                                     // 4167
(function () {                                                       // 4168
                                                                     // 4169
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/color/color.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("color", {                                                                                       // 1
  template: "afInputColor"                                                                                             // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4180
}).call(this);                                                       // 4181
                                                                     // 4182
                                                                     // 4183
                                                                     // 4184
                                                                     // 4185
                                                                     // 4186
                                                                     // 4187
(function () {                                                       // 4188
                                                                     // 4189
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/contenteditable/template.contenteditable.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afContenteditable");                                                                             // 2
Template["afContenteditable"] = new Template("Template.afContenteditable", (function() {                               // 3
  var view = this;                                                                                                     // 4
  return [ Blaze.View("lookup:getValue", function() {                                                                  // 5
    return Spacebars.mustache(view.lookup("getValue"), Spacebars.dot(view.lookup("."), "value"));                      // 6
  }), "\n  ", HTML.DIV(HTML.Attrs({                                                                                    // 7
    contenteditable: "true"                                                                                            // 8
  }, function() {                                                                                                      // 9
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 10
  })) ];                                                                                                               // 11
}));                                                                                                                   // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4210
}).call(this);                                                       // 4211
                                                                     // 4212
                                                                     // 4213
                                                                     // 4214
                                                                     // 4215
                                                                     // 4216
                                                                     // 4217
(function () {                                                       // 4218
                                                                     // 4219
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/contenteditable/contenteditable.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("contenteditable", {                                                                             // 1
  template: "afContenteditable",                                                                                       // 2
  valueOut: function () {                                                                                              // 3
    return this.html();                                                                                                // 4
  },                                                                                                                   // 5
  contextAdjust: function (context) {                                                                                  // 6
    if (typeof context.atts['data-maxlength'] === "undefined" && typeof context.max === "number") {                    // 7
      context.atts['data-maxlength'] = context.max;                                                                    // 8
    }                                                                                                                  // 9
    return context;                                                                                                    // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
                                                                                                                       // 13
Template.afContenteditable.events({                                                                                    // 14
  'blur div[contenteditable=true]': function (event, template) {                                                       // 15
    template.$(event.target).change();                                                                                 // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
                                                                                                                       // 19
Template.afContenteditable.helpers({                                                                                   // 20
  getValue: function (value) {                                                                                         // 21
    if(Template.instance().view.isRendered){                                                                           // 22
      Template.instance().$('[contenteditable]').html(value);                                                          // 23
    }                                                                                                                  // 24
  }                                                                                                                    // 25
});                                                                                                                    // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4254
}).call(this);                                                       // 4255
                                                                     // 4256
                                                                     // 4257
                                                                     // 4258
                                                                     // 4259
                                                                     // 4260
                                                                     // 4261
(function () {                                                       // 4262
                                                                     // 4263
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/date/template.date.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDate");                                                                                   // 2
Template["afInputDate"] = new Template("Template.afInputDate", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "date",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4285
}).call(this);                                                       // 4286
                                                                     // 4287
                                                                     // 4288
                                                                     // 4289
                                                                     // 4290
                                                                     // 4291
                                                                     // 4292
(function () {                                                       // 4293
                                                                     // 4294
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/date/date.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("date", {                                                                                        // 1
  template: "afInputDate",                                                                                             // 2
  valueIn: function (val) {                                                                                            // 3
    //convert Date to string value                                                                                     // 4
    return AutoForm.valueConverters.dateToDateStringUTC(val);                                                          // 5
  },                                                                                                                   // 6
  valueOut: function () {                                                                                              // 7
    var val = this.val();                                                                                              // 8
    if (AutoForm.Utility.isValidDateString(val)) {                                                                     // 9
      //Date constructor will interpret val as UTC and create                                                          // 10
      //date at mignight in the morning of val date in UTC time zone                                                   // 11
      return new Date(val);                                                                                            // 12
    } else {                                                                                                           // 13
      return null;                                                                                                     // 14
    }                                                                                                                  // 15
  },                                                                                                                   // 16
  valueConverters: {                                                                                                   // 17
    "string": AutoForm.valueConverters.dateToDateStringUTC,                                                            // 18
    "stringArray": AutoForm.valueConverters.dateToDateStringUTCArray,                                                  // 19
    "number": AutoForm.valueConverters.dateToNumber,                                                                   // 20
    "numberArray": AutoForm.valueConverters.dateToNumberArray,                                                         // 21
    "dateArray": AutoForm.valueConverters.dateToDateArray                                                              // 22
  },                                                                                                                   // 23
  contextAdjust: function (context) {                                                                                  // 24
    if (typeof context.atts.max === "undefined" && context.max instanceof Date) {                                      // 25
      context.atts.max = AutoForm.valueConverters.dateToDateStringUTC(context.max);                                    // 26
    }                                                                                                                  // 27
    if (typeof context.atts.min === "undefined" && context.min instanceof Date) {                                      // 28
      context.atts.min = AutoForm.valueConverters.dateToDateStringUTC(context.min);                                    // 29
    }                                                                                                                  // 30
    return context;                                                                                                    // 31
  }                                                                                                                    // 32
});                                                                                                                    // 33
                                                                                                                       // 34
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4336
}).call(this);                                                       // 4337
                                                                     // 4338
                                                                     // 4339
                                                                     // 4340
                                                                     // 4341
                                                                     // 4342
                                                                     // 4343
(function () {                                                       // 4344
                                                                     // 4345
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/datetime/template.datetime.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDateTime");                                                                               // 2
Template["afInputDateTime"] = new Template("Template.afInputDateTime", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "datetime",                                                                                                  // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4367
}).call(this);                                                       // 4368
                                                                     // 4369
                                                                     // 4370
                                                                     // 4371
                                                                     // 4372
                                                                     // 4373
                                                                     // 4374
(function () {                                                       // 4375
                                                                     // 4376
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/datetime/datetime.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("datetime", {                                                                                    // 1
  template: "afInputDateTime",                                                                                         // 2
  valueIn: function (val) {                                                                                            // 3
    //convert Date to string value                                                                                     // 4
    return AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val);                             // 5
  },                                                                                                                   // 6
  valueOut: function () {                                                                                              // 7
    var val = this.val();                                                                                              // 8
    val = (typeof val === "string") ? val.replace(/ /g, "T") : val;                                                    // 9
    if (AutoForm.Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString(val)) {                                     // 10
      //Date constructor will interpret val as UTC due to ending "Z"                                                   // 11
      return new Date(val);                                                                                            // 12
    } else {                                                                                                           // 13
      return null;                                                                                                     // 14
    }                                                                                                                  // 15
  },                                                                                                                   // 16
  valueConverters: {                                                                                                   // 17
    "string": AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString,                               // 18
    "stringArray": AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeStringArray,                     // 19
    "number": AutoForm.valueConverters.dateToNumber,                                                                   // 20
    "numberArray": AutoForm.valueConverters.dateToNumberArray,                                                         // 21
    "dateArray": AutoForm.valueConverters.dateToDateArray                                                              // 22
  },                                                                                                                   // 23
  contextAdjust: function (context) {                                                                                  // 24
    if (typeof context.atts.max === "undefined" && context.max instanceof Date) {                                      // 25
      context.atts.max = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.max);       // 26
    }                                                                                                                  // 27
    if (typeof context.atts.min === "undefined" && context.min instanceof Date) {                                      // 28
      context.atts.min = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.min);       // 29
    }                                                                                                                  // 30
    return context;                                                                                                    // 31
  }                                                                                                                    // 32
});                                                                                                                    // 33
                                                                                                                       // 34
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4418
}).call(this);                                                       // 4419
                                                                     // 4420
                                                                     // 4421
                                                                     // 4422
                                                                     // 4423
                                                                     // 4424
                                                                     // 4425
(function () {                                                       // 4426
                                                                     // 4427
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/datetime-local/template.datetime-local.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDateTimeLocal");                                                                          // 2
Template["afInputDateTimeLocal"] = new Template("Template.afInputDateTimeLocal", (function() {                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "datetime-local",                                                                                            // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4449
}).call(this);                                                       // 4450
                                                                     // 4451
                                                                     // 4452
                                                                     // 4453
                                                                     // 4454
                                                                     // 4455
                                                                     // 4456
(function () {                                                       // 4457
                                                                     // 4458
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/datetime-local/datetime-local.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("datetime-local", {                                                                              // 1
  template: "afInputDateTimeLocal",                                                                                    // 2
  valueIn: function (val, atts) {                                                                                      // 3
    //convert Date to string value                                                                                     // 4
    return (val instanceof Date) ? AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, atts.timezoneId) : val;
  },                                                                                                                   // 6
  valueOut: function () {                                                                                              // 7
    var val = this.val();                                                                                              // 8
    val = (typeof val === "string") ? val.replace(/ /g, "T") : val;                                                    // 9
    if (AutoForm.Utility.isValidNormalizedLocalDateAndTimeString(val)) {                                               // 10
      var timezoneId = this.attr("data-timezone-id");                                                                  // 11
      // default is local, but if there's a timezoneId, we use that                                                    // 12
      if (typeof timezoneId === "string") {                                                                            // 13
        if (typeof moment.tz !== "function") {                                                                         // 14
          throw new Error("If you specify a timezoneId, make sure that you've added a moment-timezone package to your app");
        }                                                                                                              // 16
        return moment.tz(val, timezoneId).toDate();                                                                    // 17
      } else {                                                                                                         // 18
        return moment(val).toDate();                                                                                   // 19
      }                                                                                                                // 20
    } else {                                                                                                           // 21
      return this.val();                                                                                               // 22
    }                                                                                                                  // 23
  },                                                                                                                   // 24
  valueConverters: {                                                                                                   // 25
    "string": function dateToNormalizedLocalDateAndTimeString(val) {                                                   // 26
      return (val instanceof Date) ? AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, this.attr("data-timezone-id")) : val;
    },                                                                                                                 // 28
    "stringArray": function dateToNormalizedLocalDateAndTimeStringArray(val) {                                         // 29
      if (val instanceof Date) {                                                                                       // 30
        return [AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, this.attr("data-timezone-id"))];  // 31
      }                                                                                                                // 32
      return val;                                                                                                      // 33
    },                                                                                                                 // 34
    "number": AutoForm.valueConverters.dateToNumber,                                                                   // 35
    "numberArray": AutoForm.valueConverters.dateToNumberArray,                                                         // 36
    "dateArray": AutoForm.valueConverters.dateToDateArray                                                              // 37
  },                                                                                                                   // 38
  contextAdjust: function (context) {                                                                                  // 39
    if (typeof context.atts.max === "undefined" && context.max instanceof Date) {                                      // 40
      context.atts.max = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(context.max, context.atts.timezoneId);
    }                                                                                                                  // 42
    if (typeof context.atts.min === "undefined" && context.min instanceof Date) {                                      // 43
      context.atts.min = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(context.min, context.atts.timezoneId);
    }                                                                                                                  // 45
    if (context.atts.timezoneId) {                                                                                     // 46
      context.atts["data-timezone-id"] = context.atts.timezoneId;                                                      // 47
    }                                                                                                                  // 48
    delete context.atts.timezoneId;                                                                                    // 49
    return context;                                                                                                    // 50
  }                                                                                                                    // 51
});                                                                                                                    // 52
                                                                                                                       // 53
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4519
}).call(this);                                                       // 4520
                                                                     // 4521
                                                                     // 4522
                                                                     // 4523
                                                                     // 4524
                                                                     // 4525
                                                                     // 4526
(function () {                                                       // 4527
                                                                     // 4528
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/email/template.email.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputEmail");                                                                                  // 2
Template["afInputEmail"] = new Template("Template.afInputEmail", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "email",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4550
}).call(this);                                                       // 4551
                                                                     // 4552
                                                                     // 4553
                                                                     // 4554
                                                                     // 4555
                                                                     // 4556
                                                                     // 4557
(function () {                                                       // 4558
                                                                     // 4559
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/email/email.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("email", {                                                                                       // 1
  template: "afInputEmail",                                                                                            // 2
  contextAdjust: function (context) {                                                                                  // 3
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 4
      context.atts.maxlength = context.max;                                                                            // 5
    }                                                                                                                  // 6
    return context;                                                                                                    // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4576
}).call(this);                                                       // 4577
                                                                     // 4578
                                                                     // 4579
                                                                     // 4580
                                                                     // 4581
                                                                     // 4582
                                                                     // 4583
(function () {                                                       // 4584
                                                                     // 4585
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/file/template.file.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputFile");                                                                                   // 2
Template["afInputFile"] = new Template("Template.afInputFile", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "file",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4607
}).call(this);                                                       // 4608
                                                                     // 4609
                                                                     // 4610
                                                                     // 4611
                                                                     // 4612
                                                                     // 4613
                                                                     // 4614
(function () {                                                       // 4615
                                                                     // 4616
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/file/file.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("file", {                                                                                        // 1
  template: "afInputFile"                                                                                              // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4627
}).call(this);                                                       // 4628
                                                                     // 4629
                                                                     // 4630
                                                                     // 4631
                                                                     // 4632
                                                                     // 4633
                                                                     // 4634
(function () {                                                       // 4635
                                                                     // 4636
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/hidden/template.hidden.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputHidden");                                                                                 // 2
Template["afInputHidden"] = new Template("Template.afInputHidden", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "hidden",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4658
}).call(this);                                                       // 4659
                                                                     // 4660
                                                                     // 4661
                                                                     // 4662
                                                                     // 4663
                                                                     // 4664
                                                                     // 4665
(function () {                                                       // 4666
                                                                     // 4667
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/hidden/hidden.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("hidden", {                                                                                      // 1
  template: "afInputHidden",                                                                                           // 2
  isHidden: true,                                                                                                      // 3
  valueOut: function () {                                                                                              // 4
    return this.val();                                                                                                 // 5
  },                                                                                                                   // 6
  valueConverters: {                                                                                                   // 7
    "stringArray": AutoForm.valueConverters.stringToStringArray,                                                       // 8
    "number": AutoForm.valueConverters.stringToNumber,                                                                 // 9
    "numberArray": AutoForm.valueConverters.stringToNumberArray,                                                       // 10
    "boolean": AutoForm.valueConverters.stringToBoolean,                                                               // 11
    "booleanArray": AutoForm.valueConverters.stringToBooleanArray,                                                     // 12
    "date": AutoForm.valueConverters.stringToDate,                                                                     // 13
    "dateArray": AutoForm.valueConverters.stringToDateArray                                                            // 14
  }                                                                                                                    // 15
});                                                                                                                    // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4692
}).call(this);                                                       // 4693
                                                                     // 4694
                                                                     // 4695
                                                                     // 4696
                                                                     // 4697
                                                                     // 4698
                                                                     // 4699
(function () {                                                       // 4700
                                                                     // 4701
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/image/template.image.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputImage");                                                                                  // 2
Template["afInputImage"] = new Template("Template.afInputImage", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "image",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4723
}).call(this);                                                       // 4724
                                                                     // 4725
                                                                     // 4726
                                                                     // 4727
                                                                     // 4728
                                                                     // 4729
                                                                     // 4730
(function () {                                                       // 4731
                                                                     // 4732
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/image/image.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("image", {                                                                                       // 1
  template: "afInputImage"                                                                                             // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4743
}).call(this);                                                       // 4744
                                                                     // 4745
                                                                     // 4746
                                                                     // 4747
                                                                     // 4748
                                                                     // 4749
                                                                     // 4750
(function () {                                                       // 4751
                                                                     // 4752
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/month/template.month.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputMonth");                                                                                  // 2
Template["afInputMonth"] = new Template("Template.afInputMonth", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "month",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4774
}).call(this);                                                       // 4775
                                                                     // 4776
                                                                     // 4777
                                                                     // 4778
                                                                     // 4779
                                                                     // 4780
                                                                     // 4781
(function () {                                                       // 4782
                                                                     // 4783
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/month/month.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("month", {                                                                                       // 1
  template: "afInputMonth",                                                                                            // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": AutoForm.valueConverters.stringToStringArray                                                        // 4
  }                                                                                                                    // 5
});                                                                                                                    // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4798
}).call(this);                                                       // 4799
                                                                     // 4800
                                                                     // 4801
                                                                     // 4802
                                                                     // 4803
                                                                     // 4804
                                                                     // 4805
(function () {                                                       // 4806
                                                                     // 4807
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/number/template.number.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputNumber");                                                                                 // 2
Template["afInputNumber"] = new Template("Template.afInputNumber", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "number",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4829
}).call(this);                                                       // 4830
                                                                     // 4831
                                                                     // 4832
                                                                     // 4833
                                                                     // 4834
                                                                     // 4835
                                                                     // 4836
(function () {                                                       // 4837
                                                                     // 4838
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/number/number.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("number", {                                                                                      // 1
  template: "afInputNumber",                                                                                           // 2
  valueOut: function () {                                                                                              // 3
    return AutoForm.valueConverters.stringToNumber(this.val());                                                        // 4
  },                                                                                                                   // 5
  valueConverters: {                                                                                                   // 6
    "string": AutoForm.valueConverters.numberToString,                                                                 // 7
    "stringArray": AutoForm.valueConverters.numberToStringArray,                                                       // 8
    "numberArray": AutoForm.valueConverters.numberToNumberArray,                                                       // 9
    "boolean": AutoForm.valueConverters.numberToBoolean,                                                               // 10
    "booleanArray": AutoForm.valueConverters.numberToBooleanArray                                                      // 11
  },                                                                                                                   // 12
  contextAdjust: function (context) {                                                                                  // 13
    if (typeof context.atts.max === "undefined" && typeof context.max === "number") {                                  // 14
      context.atts.max = context.max;                                                                                  // 15
    }                                                                                                                  // 16
    if (typeof context.atts.min === "undefined" && typeof context.min === "number") {                                  // 17
      context.atts.min = context.min;                                                                                  // 18
    }                                                                                                                  // 19
    if (typeof context.atts.step === "undefined" && context.decimal) {                                                 // 20
      context.atts.step = '0.01';                                                                                      // 21
    }                                                                                                                  // 22
    return context;                                                                                                    // 23
  }                                                                                                                    // 24
});                                                                                                                    // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4872
}).call(this);                                                       // 4873
                                                                     // 4874
                                                                     // 4875
                                                                     // 4876
                                                                     // 4877
                                                                     // 4878
                                                                     // 4879
(function () {                                                       // 4880
                                                                     // 4881
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/password/template.password.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputPassword");                                                                               // 2
Template["afInputPassword"] = new Template("Template.afInputPassword", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "password",                                                                                                  // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4903
}).call(this);                                                       // 4904
                                                                     // 4905
                                                                     // 4906
                                                                     // 4907
                                                                     // 4908
                                                                     // 4909
                                                                     // 4910
(function () {                                                       // 4911
                                                                     // 4912
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/password/password.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("password", {                                                                                    // 1
  template: "afInputPassword",                                                                                         // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": AutoForm.valueConverters.stringToStringArray                                                        // 4
  },                                                                                                                   // 5
  contextAdjust: function (context) {                                                                                  // 6
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 7
      context.atts.maxlength = context.max;                                                                            // 8
    }                                                                                                                  // 9
    return context;                                                                                                    // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4933
}).call(this);                                                       // 4934
                                                                     // 4935
                                                                     // 4936
                                                                     // 4937
                                                                     // 4938
                                                                     // 4939
                                                                     // 4940
(function () {                                                       // 4941
                                                                     // 4942
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/radio/template.radio.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadio");                                                                                       // 2
Template["afRadio"] = new Template("Template.afRadio", (function() {                                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5
    type: "checkbox",                                                                                                  // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("atts"));                                                                // 11
  })), " ", Blaze.View("lookup:afFieldLabelText", function() {                                                         // 12
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 13
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 14
    }));                                                                                                               // 15
  })));                                                                                                                // 16
}));                                                                                                                   // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 4968
}).call(this);                                                       // 4969
                                                                     // 4970
                                                                     // 4971
                                                                     // 4972
                                                                     // 4973
                                                                     // 4974
                                                                     // 4975
(function () {                                                       // 4976
                                                                     // 4977
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/radio/radio.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("radio", {                                                                                       // 1
  template: "afRadio",                                                                                                 // 2
  valueOut: function () {                                                                                              // 3
    if (this.is(":checked")) {                                                                                         // 4
      return this.val();                                                                                               // 5
    }                                                                                                                  // 6
  },                                                                                                                   // 7
  valueConverters: {                                                                                                   // 8
    "stringArray": AutoForm.valueConverters.stringToStringArray                                                        // 9
  }                                                                                                                    // 10
});                                                                                                                    // 11
                                                                                                                       // 12
Template["afRadio"].helpers({                                                                                          // 13
  atts: function selectedAttsAdjust() {                                                                                // 14
    var atts = _.clone(this.atts);                                                                                     // 15
    if (this.selected) {                                                                                               // 16
      atts.checked = "";                                                                                               // 17
    }                                                                                                                  // 18
    return atts;                                                                                                       // 19
  }                                                                                                                    // 20
});                                                                                                                    // 21
                                                                                                                       // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5007
}).call(this);                                                       // 5008
                                                                     // 5009
                                                                     // 5010
                                                                     // 5011
                                                                     // 5012
                                                                     // 5013
                                                                     // 5014
(function () {                                                       // 5015
                                                                     // 5016
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/range/template.range.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputRange");                                                                                  // 2
Template["afInputRange"] = new Template("Template.afInputRange", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "range",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5038
}).call(this);                                                       // 5039
                                                                     // 5040
                                                                     // 5041
                                                                     // 5042
                                                                     // 5043
                                                                     // 5044
                                                                     // 5045
(function () {                                                       // 5046
                                                                     // 5047
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/range/range.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("range", {                                                                                       // 1
  template: "afInputRange",                                                                                            // 2
  valueOut: function () {                                                                                              // 3
    return AutoForm.valueConverters.stringToNumber(this.val());                                                        // 4
  },                                                                                                                   // 5
  valueConverters: {                                                                                                   // 6
    "string": AutoForm.valueConverters.numberToString,                                                                 // 7
    "stringArray": AutoForm.valueConverters.numberToStringArray,                                                       // 8
    "numberArray": AutoForm.valueConverters.numberToNumberArray,                                                       // 9
    "boolean": AutoForm.valueConverters.numberToBoolean,                                                               // 10
    "booleanArray": AutoForm.valueConverters.numberToBooleanArray                                                      // 11
  }                                                                                                                    // 12
});                                                                                                                    // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5069
}).call(this);                                                       // 5070
                                                                     // 5071
                                                                     // 5072
                                                                     // 5073
                                                                     // 5074
                                                                     // 5075
                                                                     // 5076
(function () {                                                       // 5077
                                                                     // 5078
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/reset/template.reset.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputReset");                                                                                  // 2
Template["afInputReset"] = new Template("Template.afInputReset", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "reset",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5100
}).call(this);                                                       // 5101
                                                                     // 5102
                                                                     // 5103
                                                                     // 5104
                                                                     // 5105
                                                                     // 5106
                                                                     // 5107
(function () {                                                       // 5108
                                                                     // 5109
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/reset/reset.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("reset", {                                                                                       // 1
  template: "afInputReset"                                                                                             // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5120
}).call(this);                                                       // 5121
                                                                     // 5122
                                                                     // 5123
                                                                     // 5124
                                                                     // 5125
                                                                     // 5126
                                                                     // 5127
(function () {                                                       // 5128
                                                                     // 5129
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/search/template.search.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputSearch");                                                                                 // 2
Template["afInputSearch"] = new Template("Template.afInputSearch", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "search",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5151
}).call(this);                                                       // 5152
                                                                     // 5153
                                                                     // 5154
                                                                     // 5155
                                                                     // 5156
                                                                     // 5157
                                                                     // 5158
(function () {                                                       // 5159
                                                                     // 5160
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/search/search.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("search", {                                                                                      // 1
  template: "afInputSearch",                                                                                           // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": AutoForm.valueConverters.stringToStringArray                                                        // 4
  },                                                                                                                   // 5
  contextAdjust: function (context) {                                                                                  // 6
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 7
      context.atts.maxlength = context.max;                                                                            // 8
    }                                                                                                                  // 9
    return context;                                                                                                    // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5181
}).call(this);                                                       // 5182
                                                                     // 5183
                                                                     // 5184
                                                                     // 5185
                                                                     // 5186
                                                                     // 5187
                                                                     // 5188
(function () {                                                       // 5189
                                                                     // 5190
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select/template.select.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afSelect");                                                                                      // 2
Template["afSelect"] = new Template("Template.afSelect", (function() {                                                 // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 6
  }), "\n    ", Blaze.Each(function() {                                                                                // 7
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 8
  }, function() {                                                                                                      // 9
    return [ "\n      ", Blaze.If(function() {                                                                         // 10
      return Spacebars.call(Spacebars.dot(view.lookup("."), "optgroup"));                                              // 11
    }, function() {                                                                                                    // 12
      return [ "\n        ", HTML.OPTGROUP({                                                                           // 13
        label: function() {                                                                                            // 14
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "optgroup"));                                      // 15
        }                                                                                                              // 16
      }, "\n        ", Blaze.Each(function() {                                                                         // 17
        return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                               // 18
      }, function() {                                                                                                  // 19
        return [ "\n        ", HTML.OPTION(HTML.Attrs(function() {                                                     // 20
          return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                            // 21
        }), Blaze.View("lookup:..label", function() {                                                                  // 22
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                         // 23
        })), "\n        " ];                                                                                           // 24
      }), "\n        "), "\n      " ];                                                                                 // 25
    }, function() {                                                                                                    // 26
      return [ "\n        ", HTML.OPTION(HTML.Attrs(function() {                                                       // 27
        return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                              // 28
      }), Blaze.View("lookup:..label", function() {                                                                    // 29
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                           // 30
      })), "\n      " ];                                                                                               // 31
    }), "\n    " ];                                                                                                    // 32
  }), "\n  ");                                                                                                         // 33
}));                                                                                                                   // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5233
}).call(this);                                                       // 5234
                                                                     // 5235
                                                                     // 5236
                                                                     // 5237
                                                                     // 5238
                                                                     // 5239
                                                                     // 5240
(function () {                                                       // 5241
                                                                     // 5242
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select/select.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select", {                                                                                      // 1
  template: "afSelect",                                                                                                // 2
  valueOut: function () {                                                                                              // 3
    return this.val();                                                                                                 // 4
  },                                                                                                                   // 5
  valueConverters: {                                                                                                   // 6
    "stringArray": AutoForm.valueConverters.stringToStringArray,                                                       // 7
    "number": AutoForm.valueConverters.stringToNumber,                                                                 // 8
    "numberArray": AutoForm.valueConverters.stringToNumberArray,                                                       // 9
    "boolean": AutoForm.valueConverters.stringToBoolean,                                                               // 10
    "booleanArray": AutoForm.valueConverters.stringToBooleanArray,                                                     // 11
    "date": AutoForm.valueConverters.stringToDate,                                                                     // 12
    "dateArray": AutoForm.valueConverters.stringToDateArray                                                            // 13
  },                                                                                                                   // 14
  contextAdjust: function (context) {                                                                                  // 15
    //can fix issues with some browsers selecting the firstOption instead of the selected option                       // 16
    context.atts.autocomplete = "off";                                                                                 // 17
                                                                                                                       // 18
    var itemAtts = _.omit(context.atts, 'firstOption');                                                                // 19
    var firstOption = context.atts.firstOption;                                                                        // 20
                                                                                                                       // 21
    // build items list                                                                                                // 22
    context.items = [];                                                                                                // 23
                                                                                                                       // 24
    // If a firstOption was provided, add that to the items list first                                                 // 25
    if (firstOption !== false) {                                                                                       // 26
      context.items.push({                                                                                             // 27
        name: context.name,                                                                                            // 28
        label: (typeof firstOption === "string" ? firstOption : "(Select One)"),                                       // 29
        value: "",                                                                                                     // 30
        // _id must be included because it is a special property that                                                  // 31
        // #each uses to track unique list items when adding and removing them                                         // 32
        // See https://github.com/meteor/meteor/issues/2174                                                            // 33
        //                                                                                                             // 34
        // Setting this to an empty string caused problems if option with value                                        // 35
        // 1 was in the options list because Spacebars evaluates "" to 1 and                                           // 36
        // considers that a duplicate.                                                                                 // 37
        // See https://github.com/aldeed/meteor-autoform/issues/656                                                    // 38
        _id: "AUTOFORM_EMPTY_FIRST_OPTION",                                                                            // 39
        selected: false,                                                                                               // 40
        atts: itemAtts                                                                                                 // 41
      });                                                                                                              // 42
    }                                                                                                                  // 43
                                                                                                                       // 44
    // Add all defined options                                                                                         // 45
    _.each(context.selectOptions, function(opt) {                                                                      // 46
      if (opt.optgroup) {                                                                                              // 47
        var subItems = _.map(opt.options, function(subOpt) {                                                           // 48
          return {                                                                                                     // 49
            name: context.name,                                                                                        // 50
            label: subOpt.label,                                                                                       // 51
            value: subOpt.value,                                                                                       // 52
            htmlAtts: _.omit(subOpt, 'label', 'value'),                                                                // 53
            // _id must be included because it is a special property that                                              // 54
            // #each uses to track unique list items when adding and removing them                                     // 55
            // See https://github.com/meteor/meteor/issues/2174                                                        // 56
            //                                                                                                         // 57
            // The toString() is necessary because otherwise Spacebars evaluates                                       // 58
            // any string to 1 if the other values are numbers, and then considers                                     // 59
            // that a duplicate.                                                                                       // 60
            // See https://github.com/aldeed/meteor-autoform/issues/656                                                // 61
            _id: subOpt.value.toString(),                                                                              // 62
            selected: (subOpt.value === context.value),                                                                // 63
            atts: itemAtts                                                                                             // 64
          };                                                                                                           // 65
        });                                                                                                            // 66
        context.items.push({                                                                                           // 67
          optgroup: opt.optgroup,                                                                                      // 68
          items: subItems                                                                                              // 69
        });                                                                                                            // 70
      } else {                                                                                                         // 71
        context.items.push({                                                                                           // 72
          name: context.name,                                                                                          // 73
          label: opt.label,                                                                                            // 74
          value: opt.value,                                                                                            // 75
          htmlAtts: _.omit(opt, 'label', 'value'),                                                                     // 76
          // _id must be included because it is a special property that                                                // 77
          // #each uses to track unique list items when adding and removing them                                       // 78
          // See https://github.com/meteor/meteor/issues/2174                                                          // 79
          //                                                                                                           // 80
          // The toString() is necessary because otherwise Spacebars evaluates                                         // 81
          // any string to 1 if the other values are numbers, and then considers                                       // 82
          // that a duplicate.                                                                                         // 83
          // See https://github.com/aldeed/meteor-autoform/issues/656                                                  // 84
          _id: opt.value.toString(),                                                                                   // 85
          selected: (opt.value === context.value),                                                                     // 86
          atts: itemAtts                                                                                               // 87
        });                                                                                                            // 88
      }                                                                                                                // 89
    });                                                                                                                // 90
                                                                                                                       // 91
    return context;                                                                                                    // 92
  }                                                                                                                    // 93
});                                                                                                                    // 94
                                                                                                                       // 95
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5345
}).call(this);                                                       // 5346
                                                                     // 5347
                                                                     // 5348
                                                                     // 5349
                                                                     // 5350
                                                                     // 5351
                                                                     // 5352
(function () {                                                       // 5353
                                                                     // 5354
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-checkbox/template.select-checkbox.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckboxGroup");                                                                               // 2
Template["afCheckboxGroup"] = new Template("Template.afCheckboxGroup", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-checkbox-group"                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n      ", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                   // 12
      type: "checkbox",                                                                                                // 13
      value: function() {                                                                                              // 14
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 15
      }                                                                                                                // 16
    }, function() {                                                                                                    // 17
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 18
    })), " ", Blaze.View("lookup:..label", function() {                                                                // 19
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 20
    }))), "\n    " ];                                                                                                  // 21
  }), "\n  ");                                                                                                         // 22
}));                                                                                                                   // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5386
}).call(this);                                                       // 5387
                                                                     // 5388
                                                                     // 5389
                                                                     // 5390
                                                                     // 5391
                                                                     // 5392
                                                                     // 5393
(function () {                                                       // 5394
                                                                     // 5395
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-checkbox/select-checkbox.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select-checkbox", {                                                                             // 1
  template: "afCheckboxGroup",                                                                                         // 2
  valueIsArray: true,                                                                                                  // 3
  valueOut: function () {                                                                                              // 4
    var val = [];                                                                                                      // 5
    this.find('input[type=checkbox]').each(function () {                                                               // 6
      if ($(this).is(":checked")) {                                                                                    // 7
        val.push($(this).val());                                                                                       // 8
      }                                                                                                                // 9
    });                                                                                                                // 10
    return val;                                                                                                        // 11
  },                                                                                                                   // 12
  contextAdjust: function (context) {                                                                                  // 13
    var itemAtts = _.omit(context.atts);                                                                               // 14
                                                                                                                       // 15
    // build items list                                                                                                // 16
    context.items = [];                                                                                                // 17
                                                                                                                       // 18
    // Add all defined options                                                                                         // 19
    _.each(context.selectOptions, function(opt) {                                                                      // 20
      context.items.push({                                                                                             // 21
        name: context.name,                                                                                            // 22
        label: opt.label,                                                                                              // 23
        value: opt.value,                                                                                              // 24
        // _id must be included because it is a special property that                                                  // 25
        // #each uses to track unique list items when adding and removing them                                         // 26
        // See https://github.com/meteor/meteor/issues/2174                                                            // 27
        _id: opt.value,                                                                                                // 28
        selected: (_.contains(context.value, opt.value)),                                                              // 29
        atts: itemAtts                                                                                                 // 30
      });                                                                                                              // 31
    });                                                                                                                // 32
                                                                                                                       // 33
    return context;                                                                                                    // 34
  }                                                                                                                    // 35
});                                                                                                                    // 36
                                                                                                                       // 37
Template.afCheckboxGroup.helpers({                                                                                     // 38
  atts: function selectedAttsAdjust() {                                                                                // 39
    var atts = _.clone(this.atts);                                                                                     // 40
    if (this.selected) {                                                                                               // 41
      atts.checked = "";                                                                                               // 42
    }                                                                                                                  // 43
    // remove data-schema-key attribute because we put it                                                              // 44
    // on the entire group                                                                                             // 45
    delete atts["data-schema-key"];                                                                                    // 46
    return atts;                                                                                                       // 47
  },                                                                                                                   // 48
  dsk: function dsk() {                                                                                                // 49
    return {                                                                                                           // 50
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 51
    }                                                                                                                  // 52
  }                                                                                                                    // 53
});                                                                                                                    // 54
                                                                                                                       // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5458
}).call(this);                                                       // 5459
                                                                     // 5460
                                                                     // 5461
                                                                     // 5462
                                                                     // 5463
                                                                     // 5464
                                                                     // 5465
(function () {                                                       // 5466
                                                                     // 5467
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckboxGroupInline");                                                                         // 2
Template["afCheckboxGroupInline"] = new Template("Template.afCheckboxGroupInline", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-checkbox-group"                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                            // 12
      type: "checkbox",                                                                                                // 13
      value: function() {                                                                                              // 14
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 15
      }                                                                                                                // 16
    }, function() {                                                                                                    // 17
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 18
    })), " ", Blaze.View("lookup:..label", function() {                                                                // 19
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 20
    })), "\n    " ];                                                                                                   // 21
  }), "\n  ");                                                                                                         // 22
}));                                                                                                                   // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5499
}).call(this);                                                       // 5500
                                                                     // 5501
                                                                     // 5502
                                                                     // 5503
                                                                     // 5504
                                                                     // 5505
                                                                     // 5506
(function () {                                                       // 5507
                                                                     // 5508
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-checkbox-inline/select-checkbox-inline.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select-checkbox-inline", {                                                                      // 1
  template: "afCheckboxGroupInline",                                                                                   // 2
  valueIsArray: true,                                                                                                  // 3
  valueOut: function () {                                                                                              // 4
    var val = [];                                                                                                      // 5
    this.find('input[type=checkbox]').each(function () {                                                               // 6
      if ($(this).is(":checked")) {                                                                                    // 7
        val.push($(this).val());                                                                                       // 8
      }                                                                                                                // 9
    });                                                                                                                // 10
    return val;                                                                                                        // 11
  },                                                                                                                   // 12
  contextAdjust: function (context) {                                                                                  // 13
    var itemAtts = _.omit(context.atts);                                                                               // 14
                                                                                                                       // 15
    // build items list                                                                                                // 16
    context.items = [];                                                                                                // 17
                                                                                                                       // 18
    // Add all defined options                                                                                         // 19
    _.each(context.selectOptions, function(opt) {                                                                      // 20
      context.items.push({                                                                                             // 21
        name: context.name,                                                                                            // 22
        label: opt.label,                                                                                              // 23
        value: opt.value,                                                                                              // 24
        // _id must be included because it is a special property that                                                  // 25
        // #each uses to track unique list items when adding and removing them                                         // 26
        // See https://github.com/meteor/meteor/issues/2174                                                            // 27
        _id: opt.value,                                                                                                // 28
        selected: (_.contains(context.value, opt.value)),                                                              // 29
        atts: itemAtts                                                                                                 // 30
      });                                                                                                              // 31
    });                                                                                                                // 32
                                                                                                                       // 33
    return context;                                                                                                    // 34
  }                                                                                                                    // 35
});                                                                                                                    // 36
                                                                                                                       // 37
Template.afCheckboxGroupInline.helpers({                                                                               // 38
  atts: function selectedAttsAdjust() {                                                                                // 39
    var atts = _.clone(this.atts);                                                                                     // 40
    if (this.selected) {                                                                                               // 41
      atts.checked = "";                                                                                               // 42
    }                                                                                                                  // 43
    // remove data-schema-key attribute because we put it                                                              // 44
    // on the entire group                                                                                             // 45
    delete atts["data-schema-key"];                                                                                    // 46
    return atts;                                                                                                       // 47
  },                                                                                                                   // 48
  dsk: function dsk() {                                                                                                // 49
    return {                                                                                                           // 50
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 51
    };                                                                                                                 // 52
  }                                                                                                                    // 53
});                                                                                                                    // 54
                                                                                                                       // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5571
}).call(this);                                                       // 5572
                                                                     // 5573
                                                                     // 5574
                                                                     // 5575
                                                                     // 5576
                                                                     // 5577
                                                                     // 5578
(function () {                                                       // 5579
                                                                     // 5580
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-multiple/template.select-multiple.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afSelectMultiple");                                                                              // 2
Template["afSelectMultiple"] = new Template("Template.afSelectMultiple", (function() {                                 // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs({                                                                                      // 5
    multiple: ""                                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n      ", Blaze.If(function() {                                                                         // 12
      return Spacebars.call(Spacebars.dot(view.lookup("."), "optgroup"));                                              // 13
    }, function() {                                                                                                    // 14
      return [ "\n        ", HTML.OPTGROUP({                                                                           // 15
        label: function() {                                                                                            // 16
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "optgroup"));                                      // 17
        }                                                                                                              // 18
      }, "\n        ", Blaze.Each(function() {                                                                         // 19
        return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                               // 20
      }, function() {                                                                                                  // 21
        return [ "\n        ", HTML.OPTION(HTML.Attrs(function() {                                                     // 22
          return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                            // 23
        }), Blaze.View("lookup:..label", function() {                                                                  // 24
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                         // 25
        })), "\n        " ];                                                                                           // 26
      }), "\n        "), "\n      " ];                                                                                 // 27
    }, function() {                                                                                                    // 28
      return [ "\n        ", HTML.OPTION(HTML.Attrs(function() {                                                       // 29
        return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                              // 30
      }), Blaze.View("lookup:..label", function() {                                                                    // 31
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                           // 32
      })), "\n      " ];                                                                                               // 33
    }), "\n    " ];                                                                                                    // 34
  }), "\n  ");                                                                                                         // 35
}));                                                                                                                   // 36
                                                                                                                       // 37
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5625
}).call(this);                                                       // 5626
                                                                     // 5627
                                                                     // 5628
                                                                     // 5629
                                                                     // 5630
                                                                     // 5631
                                                                     // 5632
(function () {                                                       // 5633
                                                                     // 5634
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-multiple/select-multiple.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select-multiple", {                                                                             // 1
  template: "afSelectMultiple",                                                                                        // 2
  valueIsArray: true,                                                                                                  // 3
  valueOut: function () {                                                                                              // 4
    return AutoForm.Utility.getSelectValues(this[0]);                                                                  // 5
  },                                                                                                                   // 6
  contextAdjust: function (context) {                                                                                  // 7
    // build items list                                                                                                // 8
    context.items = _.map(context.selectOptions, function(opt) {                                                       // 9
      if (opt.optgroup) {                                                                                              // 10
        var subItems = _.map(opt.options, function(subOpt) {                                                           // 11
          return {                                                                                                     // 12
            name: context.name,                                                                                        // 13
            label: subOpt.label,                                                                                       // 14
            value: subOpt.value,                                                                                       // 15
            htmlAtts: _.omit(subOpt, 'label', 'value'),                                                                // 16
            // _id must be included because it is a special property that                                              // 17
            // #each uses to track unique list items when adding and removing them                                     // 18
            // See https://github.com/meteor/meteor/issues/2174                                                        // 19
            _id: subOpt.value,                                                                                         // 20
            selected: _.contains(context.value, subOpt.value),                                                         // 21
            atts: context.atts                                                                                         // 22
          };                                                                                                           // 23
        });                                                                                                            // 24
        return {                                                                                                       // 25
          optgroup: opt.optgroup,                                                                                      // 26
          items: subItems                                                                                              // 27
        };                                                                                                             // 28
      } else {                                                                                                         // 29
        return {                                                                                                       // 30
          name: context.name,                                                                                          // 31
          label: opt.label,                                                                                            // 32
          value: opt.value,                                                                                            // 33
          htmlAtts: _.omit(opt, 'label', 'value'),                                                                     // 34
          // _id must be included because it is a special property that                                                // 35
          // #each uses to track unique list items when adding and removing them                                       // 36
          // See https://github.com/meteor/meteor/issues/2174                                                          // 37
          _id: opt.value,                                                                                              // 38
          selected: _.contains(context.value, opt.value),                                                              // 39
          atts: context.atts                                                                                           // 40
        };                                                                                                             // 41
      }                                                                                                                // 42
    });                                                                                                                // 43
                                                                                                                       // 44
    return context;                                                                                                    // 45
  }                                                                                                                    // 46
});                                                                                                                    // 47
                                                                                                                       // 48
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5690
}).call(this);                                                       // 5691
                                                                     // 5692
                                                                     // 5693
                                                                     // 5694
                                                                     // 5695
                                                                     // 5696
                                                                     // 5697
(function () {                                                       // 5698
                                                                     // 5699
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-radio/template.select-radio.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadioGroup");                                                                                  // 2
Template["afRadioGroup"] = new Template("Template.afRadioGroup", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-radio-group"                                                                                          // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n  ", Blaze.Each(function() {                                                                                  // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                     // 12
      type: "radio",                                                                                                   // 13
      value: function() {                                                                                              // 14
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 15
      }                                                                                                                // 16
    }, function() {                                                                                                    // 17
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 18
    })), " ", Blaze.View("lookup:..label", function() {                                                                // 19
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 20
    }))), "\n  " ];                                                                                                    // 21
  }), "\n  ");                                                                                                         // 22
}));                                                                                                                   // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5731
}).call(this);                                                       // 5732
                                                                     // 5733
                                                                     // 5734
                                                                     // 5735
                                                                     // 5736
                                                                     // 5737
                                                                     // 5738
(function () {                                                       // 5739
                                                                     // 5740
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-radio/select-radio.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select-radio", {                                                                                // 1
  template: "afRadioGroup",                                                                                            // 2
  valueOut: function () {                                                                                              // 3
    return this.find('input[type=radio]:checked').val();                                                               // 4
  },                                                                                                                   // 5
  contextAdjust: function (context) {                                                                                  // 6
    var itemAtts = _.omit(context.atts);                                                                               // 7
                                                                                                                       // 8
    // build items list                                                                                                // 9
    context.items = [];                                                                                                // 10
                                                                                                                       // 11
    // Add all defined options                                                                                         // 12
    _.each(context.selectOptions, function(opt) {                                                                      // 13
      context.items.push({                                                                                             // 14
        name: context.name,                                                                                            // 15
        label: opt.label,                                                                                              // 16
        value: opt.value,                                                                                              // 17
        // _id must be included because it is a special property that                                                  // 18
        // #each uses to track unique list items when adding and removing them                                         // 19
        // See https://github.com/meteor/meteor/issues/2174                                                            // 20
        _id: opt.value,                                                                                                // 21
        selected: (opt.value === context.value),                                                                       // 22
        atts: itemAtts                                                                                                 // 23
      });                                                                                                              // 24
    });                                                                                                                // 25
                                                                                                                       // 26
    return context;                                                                                                    // 27
  }                                                                                                                    // 28
});                                                                                                                    // 29
                                                                                                                       // 30
Template.afRadioGroup.helpers({                                                                                        // 31
  atts: function selectedAttsAdjust() {                                                                                // 32
    var atts = _.clone(this.atts);                                                                                     // 33
    if (this.selected) {                                                                                               // 34
      atts.checked = "";                                                                                               // 35
    }                                                                                                                  // 36
    // remove data-schema-key attribute because we put it                                                              // 37
    // on the entire group                                                                                             // 38
    delete atts["data-schema-key"];                                                                                    // 39
    return atts;                                                                                                       // 40
  },                                                                                                                   // 41
  dsk: function dsk() {                                                                                                // 42
    return {                                                                                                           // 43
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 44
    };                                                                                                                 // 45
  }                                                                                                                    // 46
});                                                                                                                    // 47
                                                                                                                       // 48
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5796
}).call(this);                                                       // 5797
                                                                     // 5798
                                                                     // 5799
                                                                     // 5800
                                                                     // 5801
                                                                     // 5802
                                                                     // 5803
(function () {                                                       // 5804
                                                                     // 5805
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-radio-inline/template.select-radio-inline.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadioGroupInline");                                                                            // 2
Template["afRadioGroupInline"] = new Template("Template.afRadioGroupInline", (function() {                             // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-radio-group"                                                                                          // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n  ", Blaze.Each(function() {                                                                                  // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                              // 12
      type: "radio",                                                                                                   // 13
      value: function() {                                                                                              // 14
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 15
      }                                                                                                                // 16
    }, function() {                                                                                                    // 17
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 18
    })), " ", Blaze.View("lookup:..label", function() {                                                                // 19
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 20
    })), "\n  " ];                                                                                                     // 21
  }), "\n  ");                                                                                                         // 22
}));                                                                                                                   // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5837
}).call(this);                                                       // 5838
                                                                     // 5839
                                                                     // 5840
                                                                     // 5841
                                                                     // 5842
                                                                     // 5843
                                                                     // 5844
(function () {                                                       // 5845
                                                                     // 5846
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/select-radio-inline/select-radio-inline.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("select-radio-inline", {                                                                         // 1
  template: "afRadioGroupInline",                                                                                      // 2
  valueOut: function () {                                                                                              // 3
    return this.find('input[type=radio]:checked').val();                                                               // 4
  },                                                                                                                   // 5
  contextAdjust: function (context) {                                                                                  // 6
    var itemAtts = _.omit(context.atts);                                                                               // 7
                                                                                                                       // 8
    // build items list                                                                                                // 9
    context.items = [];                                                                                                // 10
                                                                                                                       // 11
    // Add all defined options                                                                                         // 12
    _.each(context.selectOptions, function(opt) {                                                                      // 13
      context.items.push({                                                                                             // 14
        name: context.name,                                                                                            // 15
        label: opt.label,                                                                                              // 16
        value: opt.value,                                                                                              // 17
        // _id must be included because it is a special property that                                                  // 18
        // #each uses to track unique list items when adding and removing them                                         // 19
        // See https://github.com/meteor/meteor/issues/2174                                                            // 20
        _id: opt.value,                                                                                                // 21
        selected: (opt.value === context.value),                                                                       // 22
        atts: itemAtts                                                                                                 // 23
      });                                                                                                              // 24
    });                                                                                                                // 25
                                                                                                                       // 26
    return context;                                                                                                    // 27
  }                                                                                                                    // 28
});                                                                                                                    // 29
                                                                                                                       // 30
Template.afRadioGroupInline.helpers({                                                                                  // 31
  atts: function selectedAttsAdjust() {                                                                                // 32
    var atts = _.clone(this.atts);                                                                                     // 33
    if (this.selected) {                                                                                               // 34
      atts.checked = "";                                                                                               // 35
    }                                                                                                                  // 36
    // remove data-schema-key attribute because we put it                                                              // 37
    // on the entire group                                                                                             // 38
    delete atts["data-schema-key"];                                                                                    // 39
    return atts;                                                                                                       // 40
  },                                                                                                                   // 41
  dsk: function dsk() {                                                                                                // 42
    return {                                                                                                           // 43
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 44
    };                                                                                                                 // 45
  }                                                                                                                    // 46
});                                                                                                                    // 47
                                                                                                                       // 48
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5902
}).call(this);                                                       // 5903
                                                                     // 5904
                                                                     // 5905
                                                                     // 5906
                                                                     // 5907
                                                                     // 5908
                                                                     // 5909
(function () {                                                       // 5910
                                                                     // 5911
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/submit/template.submit.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputSubmit");                                                                                 // 2
Template["afInputSubmit"] = new Template("Template.afInputSubmit", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "submit",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5933
}).call(this);                                                       // 5934
                                                                     // 5935
                                                                     // 5936
                                                                     // 5937
                                                                     // 5938
                                                                     // 5939
                                                                     // 5940
(function () {                                                       // 5941
                                                                     // 5942
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/submit/submit.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("submit", {                                                                                      // 1
  template: "afInputSubmit"                                                                                            // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5953
}).call(this);                                                       // 5954
                                                                     // 5955
                                                                     // 5956
                                                                     // 5957
                                                                     // 5958
                                                                     // 5959
                                                                     // 5960
(function () {                                                       // 5961
                                                                     // 5962
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/tel/template.tel.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputTel");                                                                                    // 2
Template["afInputTel"] = new Template("Template.afInputTel", (function() {                                             // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "tel",                                                                                                       // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 5984
}).call(this);                                                       // 5985
                                                                     // 5986
                                                                     // 5987
                                                                     // 5988
                                                                     // 5989
                                                                     // 5990
                                                                     // 5991
(function () {                                                       // 5992
                                                                     // 5993
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/tel/tel.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("tel", {                                                                                         // 1
  template: "afInputTel",                                                                                              // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": AutoForm.valueConverters.stringToStringArray                                                        // 4
  },                                                                                                                   // 5
  contextAdjust: function (context) {                                                                                  // 6
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 7
      context.atts.maxlength = context.max;                                                                            // 8
    }                                                                                                                  // 9
    return context;                                                                                                    // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6014
}).call(this);                                                       // 6015
                                                                     // 6016
                                                                     // 6017
                                                                     // 6018
                                                                     // 6019
                                                                     // 6020
                                                                     // 6021
(function () {                                                       // 6022
                                                                     // 6023
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/text/template.text.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputText");                                                                                   // 2
Template["afInputText"] = new Template("Template.afInputText", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "text",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6045
}).call(this);                                                       // 6046
                                                                     // 6047
                                                                     // 6048
                                                                     // 6049
                                                                     // 6050
                                                                     // 6051
                                                                     // 6052
(function () {                                                       // 6053
                                                                     // 6054
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/text/text.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("text", {                                                                                        // 1
  template: "afInputText",                                                                                             // 2
  valueOut: function () {                                                                                              // 3
    return this.val();                                                                                                 // 4
  },                                                                                                                   // 5
  valueConverters: {                                                                                                   // 6
    "stringArray": AutoForm.valueConverters.stringToStringArray,                                                       // 7
    "number": AutoForm.valueConverters.stringToNumber,                                                                 // 8
    "numberArray": AutoForm.valueConverters.stringToNumberArray,                                                       // 9
    "boolean": AutoForm.valueConverters.stringToBoolean,                                                               // 10
    "booleanArray": AutoForm.valueConverters.stringToBooleanArray,                                                     // 11
    "date": AutoForm.valueConverters.stringToDate,                                                                     // 12
    "dateArray": AutoForm.valueConverters.stringToDateArray                                                            // 13
  },                                                                                                                   // 14
  contextAdjust: function (context) {                                                                                  // 15
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 16
      context.atts.maxlength = context.max;                                                                            // 17
    }                                                                                                                  // 18
    return context;                                                                                                    // 19
  }                                                                                                                    // 20
});                                                                                                                    // 21
                                                                                                                       // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6084
}).call(this);                                                       // 6085
                                                                     // 6086
                                                                     // 6087
                                                                     // 6088
                                                                     // 6089
                                                                     // 6090
                                                                     // 6091
(function () {                                                       // 6092
                                                                     // 6093
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/textarea/template.textarea.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afTextarea");                                                                                    // 2
Template["afTextarea"] = new Template("Template.afTextarea", (function() {                                             // 3
  var view = this;                                                                                                     // 4
  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 6
  }, {                                                                                                                 // 7
    value: function() {                                                                                                // 8
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 9
    }                                                                                                                  // 10
  }));                                                                                                                 // 11
}));                                                                                                                   // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6114
}).call(this);                                                       // 6115
                                                                     // 6116
                                                                     // 6117
                                                                     // 6118
                                                                     // 6119
                                                                     // 6120
                                                                     // 6121
(function () {                                                       // 6122
                                                                     // 6123
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/textarea/textarea.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("textarea", {                                                                                    // 1
  template: "afTextarea",                                                                                              // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": function (val) {                                                                                    // 4
      if (typeof val === "string" && val.length > 0) {                                                                 // 5
        return linesToArray(val);                                                                                      // 6
      }                                                                                                                // 7
      return val;                                                                                                      // 8
    },                                                                                                                 // 9
    "number": AutoForm.valueConverters.stringToNumber,                                                                 // 10
    "numberArray": AutoForm.valueConverters.stringToNumberArray,                                                       // 11
    "boolean": AutoForm.valueConverters.stringToBoolean,                                                               // 12
    "booleanArray": function (val) {                                                                                   // 13
      if (typeof val === "string" && val.length > 0) {                                                                 // 14
        var arr = linesToArray(val);                                                                                   // 15
        return _.map(arr, function (item) {                                                                            // 16
          return AutoForm.valueConverters.stringToBoolean(item);                                                       // 17
        });                                                                                                            // 18
      }                                                                                                                // 19
      return val;                                                                                                      // 20
    },                                                                                                                 // 21
    "date": AutoForm.valueConverters.stringToDate,                                                                     // 22
    "dateArray": function (val) {                                                                                      // 23
      if (typeof val === "string" && val.length > 0) {                                                                 // 24
        var arr = linesToArray(val);                                                                                   // 25
        return _.map(arr, function (item) {                                                                            // 26
          return AutoForm.valueConverters.stringToDate(item);                                                          // 27
        });                                                                                                            // 28
      }                                                                                                                // 29
      return val;                                                                                                      // 30
    }                                                                                                                  // 31
  },                                                                                                                   // 32
  contextAdjust: function (context) {                                                                                  // 33
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 34
      context.atts.maxlength = context.max;                                                                            // 35
    }                                                                                                                  // 36
    return context;                                                                                                    // 37
  }                                                                                                                    // 38
});                                                                                                                    // 39
                                                                                                                       // 40
function linesToArray(text) {                                                                                          // 41
  text = text.split('\n');                                                                                             // 42
  var lines = [];                                                                                                      // 43
  _.each(text, function (line) {                                                                                       // 44
    line = $.trim(line);                                                                                               // 45
    if (line.length) {                                                                                                 // 46
      lines.push(line);                                                                                                // 47
    }                                                                                                                  // 48
  });                                                                                                                  // 49
  return lines;                                                                                                        // 50
}                                                                                                                      // 51
                                                                                                                       // 52
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6183
}).call(this);                                                       // 6184
                                                                     // 6185
                                                                     // 6186
                                                                     // 6187
                                                                     // 6188
                                                                     // 6189
                                                                     // 6190
(function () {                                                       // 6191
                                                                     // 6192
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/time/template.time.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputTime");                                                                                   // 2
Template["afInputTime"] = new Template("Template.afInputTime", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "time",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6214
}).call(this);                                                       // 6215
                                                                     // 6216
                                                                     // 6217
                                                                     // 6218
                                                                     // 6219
                                                                     // 6220
                                                                     // 6221
(function () {                                                       // 6222
                                                                     // 6223
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/time/time.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("time", {                                                                                        // 1
  template: "afInputTime",                                                                                             // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": AutoForm.valueConverters.stringToStringArray                                                        // 4
  }                                                                                                                    // 5
});                                                                                                                    // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6238
}).call(this);                                                       // 6239
                                                                     // 6240
                                                                     // 6241
                                                                     // 6242
                                                                     // 6243
                                                                     // 6244
                                                                     // 6245
(function () {                                                       // 6246
                                                                     // 6247
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/url/template.url.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputUrl");                                                                                    // 2
Template["afInputUrl"] = new Template("Template.afInputUrl", (function() {                                             // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "url",                                                                                                       // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6269
}).call(this);                                                       // 6270
                                                                     // 6271
                                                                     // 6272
                                                                     // 6273
                                                                     // 6274
                                                                     // 6275
                                                                     // 6276
(function () {                                                       // 6277
                                                                     // 6278
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/url/url.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("url", {                                                                                         // 1
  template: "afInputUrl",                                                                                              // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": AutoForm.valueConverters.stringToStringArray                                                        // 4
  },                                                                                                                   // 5
  contextAdjust: function (context) {                                                                                  // 6
    if (typeof context.atts.maxlength === "undefined" && typeof context.max === "number") {                            // 7
      context.atts.maxlength = context.max;                                                                            // 8
    }                                                                                                                  // 9
    return context;                                                                                                    // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6299
}).call(this);                                                       // 6300
                                                                     // 6301
                                                                     // 6302
                                                                     // 6303
                                                                     // 6304
                                                                     // 6305
                                                                     // 6306
(function () {                                                       // 6307
                                                                     // 6308
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/week/template.week.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputWeek");                                                                                   // 2
Template["afInputWeek"] = new Template("Template.afInputWeek", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "week",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6330
}).call(this);                                                       // 6331
                                                                     // 6332
                                                                     // 6333
                                                                     // 6334
                                                                     // 6335
                                                                     // 6336
                                                                     // 6337
(function () {                                                       // 6338
                                                                     // 6339
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/inputTypes/week/week.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AutoForm.addInputType("week", {                                                                                        // 1
  template: "afInputWeek",                                                                                             // 2
  valueConverters: {                                                                                                   // 3
    "stringArray": AutoForm.valueConverters.stringToStringArray                                                        // 4
  }                                                                                                                    // 5
});                                                                                                                    // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6354
}).call(this);                                                       // 6355
                                                                     // 6356
                                                                     // 6357
                                                                     // 6358
                                                                     // 6359
                                                                     // 6360
                                                                     // 6361
(function () {                                                       // 6362
                                                                     // 6363
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/autoForm/template.autoForm.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("autoForm");                                                                                      // 2
Template["autoForm"] = new Template("Template.autoForm", (function() {                                                 // 3
  var view = this;                                                                                                     // 4
  return Blaze.Unless(function() {                                                                                     // 5
    return Spacebars.dataMustache(view.lookup("afDestroyUpdateForm"), Spacebars.dot(view.lookup("."), "id"));          // 6
  }, function() {                                                                                                      // 7
    return [ "\n  \n  \n  ", HTML.FORM(HTML.Attrs(function() {                                                         // 8
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 9
    }), "\n    ", Blaze._InOuterTemplateScope(view, function() {                                                       // 10
      return Blaze._TemplateWith(function() {                                                                          // 11
        return Spacebars.call(view.lookup(".."));                                                                      // 12
      }, function() {                                                                                                  // 13
        return Spacebars.include(function() {                                                                          // 14
          return Spacebars.call(view.templateContentBlock);                                                            // 15
        });                                                                                                            // 16
      });                                                                                                              // 17
    }), "\n  "), "\n  " ];                                                                                             // 18
  });                                                                                                                  // 19
}));                                                                                                                   // 20
                                                                                                                       // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6392
}).call(this);                                                       // 6393
                                                                     // 6394
                                                                     // 6395
                                                                     // 6396
                                                                     // 6397
                                                                     // 6398
                                                                     // 6399
(function () {                                                       // 6400
                                                                     // 6401
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/autoForm/autoForm.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, ReactiveVar, arrayTracker, Hooks, MongoObject, Utility, setDefaults */                             // 1
                                                                                                                       // 2
Template.autoForm.helpers({                                                                                            // 3
  atts: function autoFormTplAtts() {                                                                                   // 4
    // After removing all of the props we know about, everything else should                                           // 5
    // become a form attribute unless it's an array or object.                                                         // 6
    var val, htmlAttributes = {}, context = this;                                                                      // 7
    var removeProps = [                                                                                                // 8
      "schema",                                                                                                        // 9
      "collection",                                                                                                    // 10
      "validation",                                                                                                    // 11
      "doc",                                                                                                           // 12
      "resetOnSuccess",                                                                                                // 13
      "type",                                                                                                          // 14
      "template",                                                                                                      // 15
      "autosave",                                                                                                      // 16
      "autosaveOnKeyup",                                                                                               // 17
      "meteormethod",                                                                                                  // 18
      "filter",                                                                                                        // 19
      "autoConvert",                                                                                                   // 20
      "removeEmptyStrings",                                                                                            // 21
      "trimStrings"                                                                                                    // 22
    ];                                                                                                                 // 23
                                                                                                                       // 24
    // Filter out any attributes that have a component prefix                                                          // 25
    function hasComponentPrefix(prop) {                                                                                // 26
      return _.any(Utility.componentTypeList, function (componentType) {                                               // 27
        return prop.indexOf(componentType + '-') === 0;                                                                // 28
      });                                                                                                              // 29
    }                                                                                                                  // 30
                                                                                                                       // 31
    // Filter out arrays and objects, which are obviously not meant to be                                              // 32
    // HTML attributes.                                                                                                // 33
    for (var prop in context) {                                                                                        // 34
      if (context.hasOwnProperty(prop) &&                                                                              // 35
          !_.contains(removeProps, prop) &&                                                                            // 36
          !hasComponentPrefix(prop)) {                                                                                 // 37
        val = context[prop];                                                                                           // 38
        if (!_.isArray(val) && !_.isObject(val)) {                                                                     // 39
          htmlAttributes[prop] = val;                                                                                  // 40
        }                                                                                                              // 41
      }                                                                                                                // 42
    }                                                                                                                  // 43
                                                                                                                       // 44
    // By default, we add the `novalidate="novalidate"` attribute to our form,                                         // 45
    // unless the user passes `validation="browser"`.                                                                  // 46
    if (this.validation !== "browser" && !htmlAttributes.novalidate) {                                                 // 47
      htmlAttributes.novalidate = "novalidate";                                                                        // 48
    }                                                                                                                  // 49
                                                                                                                       // 50
    return htmlAttributes;                                                                                             // 51
  },                                                                                                                   // 52
  afDestroyUpdateForm: function (formId) {                                                                             // 53
    AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);                           // 54
    return AutoForm._destroyForm[formId].get();                                                                        // 55
  }                                                                                                                    // 56
});                                                                                                                    // 57
                                                                                                                       // 58
Template.autoForm.created = function autoFormCreated() {                                                               // 59
  var template = this;                                                                                                 // 60
                                                                                                                       // 61
  // We'll add tracker dependencies for reactive field values                                                          // 62
  // to this object as necessary                                                                                       // 63
  template.formValues = template.formValues || {};                                                                     // 64
                                                                                                                       // 65
  // We'll store "sticky" errors here. These are errors added                                                          // 66
  // manually based on server validation, which we don't want to                                                       // 67
  // be wiped out by further client validation.                                                                        // 68
  template._stickyErrors = {};                                                                                         // 69
                                                                                                                       // 70
  template.autorun(function (c) {                                                                                      // 71
    var data = Template.currentData(); // rerun when current data changes                                              // 72
    var formId = data.id;                                                                                              // 73
                                                                                                                       // 74
    if (!formId) {                                                                                                     // 75
      throw new Error('Every autoForm and quickForm must have an "id" attribute set to a unique string.');             // 76
    }                                                                                                                  // 77
                                                                                                                       // 78
    // When we change the form, loading a different doc, reloading the current doc, etc.,                              // 79
    // we also want to reset the array counts for the form                                                             // 80
    arrayTracker.resetForm(formId);                                                                                    // 81
                                                                                                                       // 82
    data = setDefaults(data);                                                                                          // 83
                                                                                                                       // 84
    // Clone the doc so that docToForm and other modifications do not change                                           // 85
    // the original referenced object.                                                                                 // 86
    var doc = data.doc ? EJSON.clone(data.doc) : null;                                                                 // 87
                                                                                                                       // 88
    // Update cached form values for hot code reload persistence                                                       // 89
    if (data.preserveForm === false) {                                                                                 // 90
      AutoForm.formPreserve.unregisterForm(formId);                                                                    // 91
    } else {                                                                                                           // 92
      // Even if we have already registered, we reregister to ensure that the                                          // 93
      // closure values of template, formId, and ss remain correct after each                                          // 94
      // reaction                                                                                                      // 95
      AutoForm.formPreserve.registerForm(formId, function autoFormRegFormCallback() {                                  // 96
        return AutoForm.getFormValues(formId, template, data._resolvedSchema, false);                                  // 97
      });                                                                                                              // 98
    }                                                                                                                  // 99
                                                                                                                       // 100
    // Retain doc values after a "hot code push", if possible                                                          // 101
    if (c.firstRun) {                                                                                                  // 102
      var retrievedDoc = AutoForm.formPreserve.getDocument(formId);                                                    // 103
      if (retrievedDoc !== false) {                                                                                    // 104
        // Ensure we keep the _id property which may not be present in retrievedDoc.                                   // 105
        doc = _.extend(doc || {}, retrievedDoc || {});                                                                 // 106
      }                                                                                                                // 107
    }                                                                                                                  // 108
                                                                                                                       // 109
    var mDoc;                                                                                                          // 110
    if (doc && !_.isEmpty(doc)) {                                                                                      // 111
      var hookCtx = {formId: formId};                                                                                  // 112
      // Pass doc through docToForm hooks                                                                              // 113
      _.each(Hooks.getHooks(formId, 'docToForm'), function autoFormEachDocToForm(hook) {                               // 114
        doc = hook.call(hookCtx, doc, data._resolvedSchema);                                                           // 115
        if (!doc) {                                                                                                    // 116
          throw new Error('Oops! Did you forget to return the modified document from your docToForm hook for the ' + formId + ' form?');
        }                                                                                                              // 118
      });                                                                                                              // 119
                                                                                                                       // 120
      // Create a "flat doc" that can be used to easily get values for corresponding                                   // 121
      // form fields.                                                                                                  // 122
      mDoc = new MongoObject(doc);                                                                                     // 123
      AutoForm.reactiveFormData.sourceDoc(formId, mDoc);                                                               // 124
    } else {                                                                                                           // 125
      AutoForm.reactiveFormData.sourceDoc(formId, null);                                                               // 126
    }                                                                                                                  // 127
  });                                                                                                                  // 128
};                                                                                                                     // 129
                                                                                                                       // 130
Template.autoForm.rendered = function autoFormRendered() {                                                             // 131
  var lastId;                                                                                                          // 132
  this.autorun(function () {                                                                                           // 133
    var data = Template.currentData(); // rerun when current data changes                                              // 134
                                                                                                                       // 135
    if (data.id === lastId) return;                                                                                    // 136
    lastId = data.id;                                                                                                  // 137
                                                                                                                       // 138
    AutoForm.triggerFormRenderedDestroyedReruns(data.id);                                                              // 139
  });                                                                                                                  // 140
};                                                                                                                     // 141
                                                                                                                       // 142
Template.autoForm.destroyed = function autoFormDestroyed() {                                                           // 143
  var self = this;                                                                                                     // 144
  var formId = self.data.id;                                                                                           // 145
                                                                                                                       // 146
  // TODO if formId was changing reactively during life of instance,                                                   // 147
  // some data won't be removed by the calls below.                                                                    // 148
                                                                                                                       // 149
  // Remove from array fields list                                                                                     // 150
  arrayTracker.untrackForm(formId);                                                                                    // 151
                                                                                                                       // 152
  // Unregister form preservation                                                                                      // 153
  AutoForm.formPreserve.unregisterForm(formId);                                                                        // 154
                                                                                                                       // 155
  // Trigger value reruns                                                                                              // 156
  AutoForm.triggerFormRenderedDestroyedReruns(formId);                                                                 // 157
};                                                                                                                     // 158
                                                                                                                       // 159
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6568
}).call(this);                                                       // 6569
                                                                     // 6570
                                                                     // 6571
                                                                     // 6572
                                                                     // 6573
                                                                     // 6574
                                                                     // 6575
(function () {                                                       // 6576
                                                                     // 6577
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/quickForm/template.quickForm.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm");                                                                                     // 2
Template["quickForm"] = new Template("Template.quickForm", (function() {                                               // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("getTemplateName")),                                                        // 7
      data: Spacebars.call(view.lookup("innerContext"))                                                                // 8
    };                                                                                                                 // 9
  }, function() {                                                                                                      // 10
    return Spacebars.include(function() {                                                                              // 11
      return Spacebars.call(Template.__dynamic);                                                                       // 12
    });                                                                                                                // 13
  });                                                                                                                  // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6601
}).call(this);                                                       // 6602
                                                                     // 6603
                                                                     // 6604
                                                                     // 6605
                                                                     // 6606
                                                                     // 6607
                                                                     // 6608
(function () {                                                       // 6609
                                                                     // 6610
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/quickForm/quickForm.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template.quickForm.helpers({                                                                                           // 3
  getTemplateName: function () {                                                                                       // 4
    return AutoForm.getTemplateName('quickForm', this.template);                                                       // 5
  },                                                                                                                   // 6
  innerContext: function quickFormContext() {                                                                          // 7
    var atts = this;                                                                                                   // 8
    var adjustedData = AutoForm.parseData(_.clone(this));                                                              // 9
    var simpleSchema = adjustedData._resolvedSchema;                                                                   // 10
    var sortedSchema = {};                                                                                             // 11
    var fieldGroups = [];                                                                                              // 12
    var grouplessFieldContext;                                                                                         // 13
                                                                                                                       // 14
    // --------------- A. Schema --------------- //                                                                    // 15
                                                                                                                       // 16
    var fieldList = atts.fields;                                                                                       // 17
    if (fieldList) {                                                                                                   // 18
      fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');
                                                                                                                       // 20
      // get the schema object, but sorted into the same order as the field list                                       // 21
      fieldList.forEach(function (fieldName) {                                                                         // 22
        sortedSchema[fieldName] = simpleSchema.schema(fieldName);                                                      // 23
      });                                                                                                              // 24
    } else {                                                                                                           // 25
      sortedSchema = simpleSchema.schema();                                                                            // 26
    }                                                                                                                  // 27
                                                                                                                       // 28
    // --------------- B. Field With No Groups --------------- //                                                      // 29
                                                                                                                       // 30
    var grouplessFields = getFieldsWithNoGroup(sortedSchema);                                                          // 31
    if (grouplessFields.length > 0) {                                                                                  // 32
      grouplessFieldContext = {                                                                                        // 33
        atts: _.extend({}, atts, {fields: grouplessFields}),                                                           // 34
        fields: grouplessFields                                                                                        // 35
      };                                                                                                               // 36
    }                                                                                                                  // 37
                                                                                                                       // 38
    // --------------- C. Field With Groups --------------- //                                                         // 39
                                                                                                                       // 40
    // get sorted list of field groups                                                                                 // 41
    var fieldGroupNames = getSortedFieldGroupNames(sortedSchema);                                                      // 42
                                                                                                                       // 43
    // Loop through the list and make a field group context for each                                                   // 44
    _.each(fieldGroupNames, function (fieldGroupName) {                                                                // 45
      var fieldsForGroup = getFieldsForGroup(fieldGroupName, sortedSchema);                                            // 46
                                                                                                                       // 47
      if (fieldsForGroup.length > 0) {                                                                                 // 48
        fieldGroups.push({                                                                                             // 49
          name: fieldGroupName,                                                                                        // 50
          atts: _.extend({}, atts, {fields: fieldsForGroup}),                                                          // 51
          fields: fieldsForGroup                                                                                       // 52
        });                                                                                                            // 53
      }                                                                                                                // 54
    });                                                                                                                // 55
                                                                                                                       // 56
    // --------------- D. Context --------------- //                                                                   // 57
                                                                                                                       // 58
    // Pass along quickForm context to autoForm context, minus a few                                                   // 59
    // properties that are specific to quickForms.                                                                     // 60
    var qfAutoFormContext = _.omit(atts,                                                                               // 61
                                   'buttonContent',                                                                    // 62
                                   'buttonClasses',                                                                    // 63
                                   'fields',                                                                           // 64
                                   'omitFields',                                                                       // 65
                                   'id-prefix');                                                                       // 66
                                                                                                                       // 67
    // Determine whether we want to render a submit button                                                             // 68
    var qfShouldRenderButton = (atts.buttonContent !== false && atts.type !== 'readonly' && atts.type !== 'disabled'); // 69
                                                                                                                       // 70
    var context = {                                                                                                    // 71
      qfAutoFormContext: qfAutoFormContext,                                                                            // 72
      atts: atts,                                                                                                      // 73
      qfShouldRenderButton: qfShouldRenderButton,                                                                      // 74
      fieldGroups: fieldGroups,                                                                                        // 75
      grouplessFields: grouplessFieldContext                                                                           // 76
    };                                                                                                                 // 77
    return context;                                                                                                    // 78
  }                                                                                                                    // 79
});                                                                                                                    // 80
                                                                                                                       // 81
/* Private Functions */                                                                                                // 82
                                                                                                                       // 83
/**                                                                                                                    // 84
 * Takes a schema object and returns a sorted array of field group names for it                                        // 85
 *                                                                                                                     // 86
 * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 87
 * @returns {String[]} Array of field group names                                                                      // 88
 */                                                                                                                    // 89
function getSortedFieldGroupNames(schemaObj) {                                                                         // 90
  var names = _.map(schemaObj, function (field) {                                                                      // 91
    return field.autoform && field.autoform.group;                                                                     // 92
  });                                                                                                                  // 93
                                                                                                                       // 94
  // Remove undefined                                                                                                  // 95
  names = _.compact(names);                                                                                            // 96
                                                                                                                       // 97
  // Remove duplicate names                                                                                            // 98
  names = _.unique(names);                                                                                             // 99
                                                                                                                       // 100
  return names.sort();                                                                                                 // 101
}                                                                                                                      // 102
                                                                                                                       // 103
/**                                                                                                                    // 104
 * Returns the schema field names that belong in the group.                                                            // 105
 *                                                                                                                     // 106
 * @param   {String}   groupName The group name                                                                        // 107
 * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 108
 * @returns {String[]} Array of field names (schema keys)                                                              // 109
 */                                                                                                                    // 110
function getFieldsForGroup(groupName, schemaObj) {                                                                     // 111
  var fields = _.map(schemaObj, function (field, fieldName) {                                                          // 112
    return (fieldName.slice(-2) !== '.$') &&                                                                           // 113
      field.autoform &&                                                                                                // 114
      field.autoform.group === groupName &&                                                                            // 115
      fieldName;                                                                                                       // 116
  });                                                                                                                  // 117
                                                                                                                       // 118
  // Remove undefined                                                                                                  // 119
  fields = _.compact(fields);                                                                                          // 120
                                                                                                                       // 121
  return fields;                                                                                                       // 122
}                                                                                                                      // 123
                                                                                                                       // 124
/**                                                                                                                    // 125
 * Returns the schema field names that don't belong to a group                                                         // 126
 *                                                                                                                     // 127
 * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 128
 * @returns {String[]} Array of field names (schema keys)                                                              // 129
 */                                                                                                                    // 130
function getFieldsWithNoGroup(schemaObj) {                                                                             // 131
  var fields = _.map(schemaObj, function (field, fieldName) {                                                          // 132
    return (fieldName.slice(-2) !== '.$') &&                                                                           // 133
      (!field.autoform || !field.autoform.group) &&                                                                    // 134
      fieldName;                                                                                                       // 135
  });                                                                                                                  // 136
                                                                                                                       // 137
  // Remove undefined                                                                                                  // 138
  fields = _.compact(fields);                                                                                          // 139
                                                                                                                       // 140
  return fields;                                                                                                       // 141
}                                                                                                                      // 142
                                                                                                                       // 143
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6761
}).call(this);                                                       // 6762
                                                                     // 6763
                                                                     // 6764
                                                                     // 6765
                                                                     // 6766
                                                                     // 6767
                                                                     // 6768
(function () {                                                       // 6769
                                                                     // 6770
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afArrayField/template.afArrayField.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afArrayField");                                                                                  // 2
Template["afArrayField"] = new Template("Template.afArrayField", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("getTemplateName")),                                                        // 7
      data: Spacebars.call(view.lookup("innerContext"))                                                                // 8
    };                                                                                                                 // 9
  }, function() {                                                                                                      // 10
    return Spacebars.include(function() {                                                                              // 11
      return Spacebars.call(Template.__dynamic);                                                                       // 12
    });                                                                                                                // 13
  });                                                                                                                  // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6794
}).call(this);                                                       // 6795
                                                                     // 6796
                                                                     // 6797
                                                                     // 6798
                                                                     // 6799
                                                                     // 6800
                                                                     // 6801
(function () {                                                       // 6802
                                                                     // 6803
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afArrayField/afArrayField.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, arrayTracker */                                                                                    // 1
                                                                                                                       // 2
Template.afArrayField.helpers({                                                                                        // 3
  getTemplateName: function () {                                                                                       // 4
    return AutoForm.getTemplateName('afArrayField', this.template, this.name);                                         // 5
  },                                                                                                                   // 6
  innerContext: function afArrayFieldContext() {                                                                       // 7
    var c = AutoForm.Utility.getComponentContext(this, "afArrayField");                                                // 8
    var name = c.atts.name;                                                                                            // 9
    var fieldMinCount = c.atts.minCount || 0;                                                                          // 10
    var fieldMaxCount = c.atts.maxCount || Infinity;                                                                   // 11
    var ss = AutoForm.getFormSchema();                                                                                 // 12
    var formId = AutoForm.getFormId();                                                                                 // 13
                                                                                                                       // 14
    // Init the array tracking for this field                                                                          // 15
    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);                                                // 16
    if (docCount === undefined) {                                                                                      // 17
      docCount = c.atts.initialCount;                                                                                  // 18
    }                                                                                                                  // 19
    arrayTracker.initField(formId, name, ss, docCount, fieldMinCount, fieldMaxCount);                                  // 20
                                                                                                                       // 21
    return {                                                                                                           // 22
      atts: c.atts                                                                                                     // 23
    };                                                                                                                 // 24
  }                                                                                                                    // 25
});                                                                                                                    // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6838
}).call(this);                                                       // 6839
                                                                     // 6840
                                                                     // 6841
                                                                     // 6842
                                                                     // 6843
                                                                     // 6844
                                                                     // 6845
(function () {                                                       // 6846
                                                                     // 6847
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afEachArrayItem/template.afEachArrayItem.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afEachArrayItem");                                                                               // 2
Template["afEachArrayItem"] = new Template("Template.afEachArrayItem", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return [ "\n  ", Spacebars.With(function() {                                                                         // 5
    return Spacebars.call(view.lookup("innerContext"));                                                                // 6
  }, function() {                                                                                                      // 7
    return [ "\n    ", Blaze.Each(function() {                                                                         // 8
      return Spacebars.call(view.lookup("."));                                                                         // 9
    }, function() {                                                                                                    // 10
      return [ "\n    ", Blaze.If(function() {                                                                         // 11
        return Spacebars.call(Spacebars.dot(view.lookup("."), "removed"));                                             // 12
      }, function() {                                                                                                  // 13
        return [ "\n    ", HTML.INPUT({                                                                                // 14
          type: "hidden",                                                                                              // 15
          name: function() {                                                                                           // 16
            return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                        // 17
          },                                                                                                           // 18
          "data-schema-key": function() {                                                                              // 19
            return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                        // 20
          },                                                                                                           // 21
          "data-null-value": "true",                                                                                   // 22
          value: ""                                                                                                    // 23
        }), "\n    " ];                                                                                                // 24
      }, function() {                                                                                                  // 25
        return [ "\n    ", Blaze._InOuterTemplateScope(view, function() {                                              // 26
          return Blaze._TemplateWith(function() {                                                                      // 27
            return Spacebars.call(view.lookup("."));                                                                   // 28
          }, function() {                                                                                              // 29
            return Spacebars.include(function() {                                                                      // 30
              return Spacebars.call(view.templateContentBlock);                                                        // 31
            });                                                                                                        // 32
          });                                                                                                          // 33
        }), "\n    " ];                                                                                                // 34
      }), "\n    " ];                                                                                                  // 35
    }), "\n  " ];                                                                                                      // 36
  }) ];                                                                                                                // 37
}));                                                                                                                   // 38
                                                                                                                       // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6894
}).call(this);                                                       // 6895
                                                                     // 6896
                                                                     // 6897
                                                                     // 6898
                                                                     // 6899
                                                                     // 6900
                                                                     // 6901
(function () {                                                       // 6902
                                                                     // 6903
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afEachArrayItem/afEachArrayItem.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, arrayTracker */                                                                                    // 1
                                                                                                                       // 2
Template.afEachArrayItem.helpers({                                                                                     // 3
  innerContext: function afEachArrayItemContext() {                                                                    // 4
    var c = AutoForm.Utility.getComponentContext(this, "afEachArrayItem");                                             // 5
    var formId = AutoForm.getFormId();                                                                                 // 6
    var ss = AutoForm.getFormSchema();                                                                                 // 7
    var name = c.atts.name;                                                                                            // 8
                                                                                                                       // 9
    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);                                                // 10
    if (docCount === undefined) {                                                                                      // 11
      docCount = c.atts.initialCount;                                                                                  // 12
    }                                                                                                                  // 13
    arrayTracker.initField(formId, name, ss, docCount, c.atts.minCount, c.atts.maxCount);                              // 14
                                                                                                                       // 15
    return arrayTracker.getField(formId, name);                                                                        // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6930
}).call(this);                                                       // 6931
                                                                     // 6932
                                                                     // 6933
                                                                     // 6934
                                                                     // 6935
                                                                     // 6936
                                                                     // 6937
(function () {                                                       // 6938
                                                                     // 6939
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afFieldInput/template.afFieldInput.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afFieldInput");                                                                                  // 2
Template["afFieldInput"] = new Template("Template.afFieldInput", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("getTemplateName")),                                                        // 7
      data: Spacebars.call(view.lookup("innerContext"))                                                                // 8
    };                                                                                                                 // 9
  }, function() {                                                                                                      // 10
    return Spacebars.include(function() {                                                                              // 11
      return Spacebars.call(Template.__dynamic);                                                                       // 12
    });                                                                                                                // 13
  });                                                                                                                  // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 6963
}).call(this);                                                       // 6964
                                                                     // 6965
                                                                     // 6966
                                                                     // 6967
                                                                     // 6968
                                                                     // 6969
                                                                     // 6970
(function () {                                                       // 6971
                                                                     // 6972
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afFieldInput/afFieldInput.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, getInputValue, getInputData, updateTrackedFieldValue */                                            // 1
                                                                                                                       // 2
Template.afFieldInput.helpers({                                                                                        // 3
  // similar to AutoForm.getTemplateName, but we have fewer layers of fallback, and we fall back                       // 4
  // lastly to a template without an _ piece at the end                                                                // 5
  getTemplateName: function getTemplateName() {                                                                        // 6
    var self = this;                                                                                                   // 7
                                                                                                                       // 8
    // Determine what `type` attribute should be if not set                                                            // 9
    var inputType = AutoForm.getInputType(this);                                                                       // 10
    var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                      // 11
    if (!componentDef) {                                                                                               // 12
      throw new Error('AutoForm: No component found for rendering input with type "' + inputType + '"');               // 13
    }                                                                                                                  // 14
                                                                                                                       // 15
    var inputTemplateName = componentDef.template;                                                                     // 16
    var styleTemplateName = this.template;                                                                             // 17
                                                                                                                       // 18
    // We skip the check for existence here so that we can get the `_plain` string                                     // 19
    // even though they don't exist.                                                                                   // 20
    var templateName = AutoForm.getTemplateName(inputTemplateName, styleTemplateName, self.name, true);                // 21
                                                                                                                       // 22
    // Special case: the built-in "plain" template uses the basic input templates for                                  // 23
    // everything, so if we found _plain, we use inputTemplateName instead                                             // 24
    if (templateName.indexOf('_plain') !== -1) {                                                                       // 25
      templateName = null;                                                                                             // 26
    }                                                                                                                  // 27
                                                                                                                       // 28
    // If no override templateName found, use the exact name from the input type definition                            // 29
    if (!templateName || !Template[templateName]) {                                                                    // 30
      templateName = inputTemplateName;                                                                                // 31
    }                                                                                                                  // 32
                                                                                                                       // 33
    return templateName;                                                                                               // 34
  },                                                                                                                   // 35
  innerContext: function afFieldInputContext() {                                                                       // 36
    var c = AutoForm.Utility.getComponentContext(this, "afFieldInput");                                                // 37
    var form = AutoForm.getCurrentDataForForm();                                                                       // 38
    var formId = form.id;                                                                                              // 39
    var ss = AutoForm.getFormSchema();                                                                                 // 40
    var defs = c.defs;                                                                                                 // 41
                                                                                                                       // 42
    // Get schema default value.                                                                                       // 43
    // We must do this before adjusting defs for arrays.                                                               // 44
    var schemaDefaultValue = defs.defaultValue;                                                                        // 45
                                                                                                                       // 46
    // Adjust for array fields if necessary                                                                            // 47
    if (defs.type === Array) {                                                                                         // 48
      defs = ss.schema(c.atts.name + ".$");                                                                            // 49
    }                                                                                                                  // 50
                                                                                                                       // 51
    // Determine what `type` attribute should be if not set                                                            // 52
    var inputType = AutoForm.getInputType(this);                                                                       // 53
    var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                      // 54
    if (!componentDef) {                                                                                               // 55
      throw new Error('AutoForm: No component found for rendering input with type "' + inputType + '"');               // 56
    }                                                                                                                  // 57
                                                                                                                       // 58
    // Get reactive mDoc                                                                                               // 59
    var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);                                                            // 60
                                                                                                                       // 61
    // Get input value                                                                                                 // 62
    var value = getInputValue(c.atts, c.atts.value, mDoc, schemaDefaultValue, c.atts.defaultValue, componentDef);      // 63
                                                                                                                       // 64
    // Mark field value as changed for reactive updates                                                                // 65
    // We need to defer this until the element will be                                                                 // 66
    // added to the DOM. Otherwise, AutoForm.getFieldValue                                                             // 67
    // will not pick up the new value when there are #if etc.                                                          // 68
    // blocks involved.                                                                                                // 69
    // See https://github.com/aldeed/meteor-autoform/issues/461                                                        // 70
    var template = AutoForm.templateInstanceForForm();                                                                 // 71
    if (template.view.isRendered) {                                                                                    // 72
      // No need to do this on first run because we'll rerun the value functions                                       // 73
      // once the form is rendered anyway                                                                              // 74
      updateTrackedFieldValue(template, c.atts.name);                                                                  // 75
    }                                                                                                                  // 76
                                                                                                                       // 77
    // Build input data context                                                                                        // 78
    var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), form.type);                                   // 79
                                                                                                                       // 80
    // Adjust and return context                                                                                       // 81
    return (typeof componentDef.contextAdjust === "function") ? componentDef.contextAdjust(iData) : iData;             // 82
  }                                                                                                                    // 83
});                                                                                                                    // 84
                                                                                                                       // 85
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 7065
}).call(this);                                                       // 7066
                                                                     // 7067
                                                                     // 7068
                                                                     // 7069
                                                                     // 7070
                                                                     // 7071
                                                                     // 7072
(function () {                                                       // 7073
                                                                     // 7074
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afFormGroup/template.afFormGroup.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afFormGroup");                                                                                   // 2
Template["afFormGroup"] = new Template("Template.afFormGroup", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("getTemplateName")),                                                        // 7
      data: Spacebars.call(view.lookup("innerContext"))                                                                // 8
    };                                                                                                                 // 9
  }, function() {                                                                                                      // 10
    return Spacebars.include(function() {                                                                              // 11
      return Spacebars.call(Template.__dynamic);                                                                       // 12
    });                                                                                                                // 13
  });                                                                                                                  // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 7098
}).call(this);                                                       // 7099
                                                                     // 7100
                                                                     // 7101
                                                                     // 7102
                                                                     // 7103
                                                                     // 7104
                                                                     // 7105
(function () {                                                       // 7106
                                                                     // 7107
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afFormGroup/afFormGroup.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template.afFormGroup.helpers({                                                                                         // 3
  getTemplateName: function () {                                                                                       // 4
    return AutoForm.getTemplateName('afFormGroup', this.template, this.name);                                          // 5
  },                                                                                                                   // 6
  innerContext: function afFormGroupContext() {                                                                        // 7
    var c = AutoForm.Utility.getComponentContext(this, 'afFormGroup');                                                 // 8
    var afFormGroupAtts = formGroupAtts(c.atts);                                                                       // 9
    var afFieldLabelAtts = formGroupLabelAtts(c.atts);                                                                 // 10
    var afFieldInputAtts = formGroupInputAtts(c.atts);                                                                 // 11
                                                                                                                       // 12
    // Construct an `id` attribute for the input, optionally                                                           // 13
    // adding a user-provided prefix. Since id attribute is                                                            // 14
    // supposed to be unique in the DOM and templates can be                                                           // 15
    // included multiple times, it's best not to provide an `id`                                                       // 16
    // and generate a random one here for accessibility reasons.                                                       // 17
    var id = c.atts.id || Random.id();                                                                                 // 18
    var idPrefix = c.atts['id-prefix'];                                                                                // 19
    if (idPrefix && idPrefix.length > 0) {                                                                             // 20
      id = idPrefix + '-' + id;                                                                                        // 21
    }                                                                                                                  // 22
                                                                                                                       // 23
    // Set the input's `id` attribute and the label's `for` attribute to                                               // 24
    // the same ID.                                                                                                    // 25
    // NOTE: `afFieldLabelAtts.for` causes exception in IE8                                                            // 26
    afFieldLabelAtts['for'] = afFieldInputAtts.id = id;                                                                // 27
                                                                                                                       // 28
    // Get the field's schema definition                                                                               // 29
    var fieldSchema = AutoForm.getSchemaForField(c.atts.name);                                                         // 30
                                                                                                                       // 31
    return {                                                                                                           // 32
      skipLabel: (c.atts.label === false),                                                                             // 33
      afFormGroupClass: c.atts['formgroup-class'],                                                                     // 34
      afFormGroupAtts: afFormGroupAtts,                                                                                // 35
      afFieldLabelAtts: afFieldLabelAtts,                                                                              // 36
      afFieldInputAtts: afFieldInputAtts,                                                                              // 37
      name: c.atts.name,                                                                                               // 38
      required: fieldSchema ? !fieldSchema.optional : false,                                                           // 39
      labelText: (typeof c.atts.label === 'string') ? c.atts.label : null                                              // 40
    };                                                                                                                 // 41
  }                                                                                                                    // 42
});                                                                                                                    // 43
                                                                                                                       // 44
/*                                                                                                                     // 45
 * Private                                                                                                             // 46
 */                                                                                                                    // 47
                                                                                                                       // 48
function formGroupAtts(atts) {                                                                                         // 49
  // Separate formgroup options from input options; formgroup items begin with 'formgroup-'                            // 50
  var labelAtts = {};                                                                                                  // 51
  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 52
    if (key.indexOf('formgroup-') === 0 && key != 'formgroup-class') {                                                 // 53
      labelAtts[key.substring(10)] = val;                                                                              // 54
    }                                                                                                                  // 55
  });                                                                                                                  // 56
  return labelAtts;                                                                                                    // 57
}                                                                                                                      // 58
                                                                                                                       // 59
function formGroupLabelAtts(atts) {                                                                                    // 60
  // Separate label options from input options; label items begin with 'label-'                                        // 61
  var labelAtts = {};                                                                                                  // 62
  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 63
    if (key.indexOf('label-') === 0) {                                                                                 // 64
      labelAtts[key.substring(6)] = val;                                                                               // 65
    }                                                                                                                  // 66
  });                                                                                                                  // 67
  return labelAtts;                                                                                                    // 68
}                                                                                                                      // 69
                                                                                                                       // 70
function formGroupInputAtts(atts) {                                                                                    // 71
  // Separate input options from label and formgroup options                                                           // 72
  // We also don't want the 'label' option                                                                             // 73
  var inputAtts = {};                                                                                                  // 74
  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 75
    if (['id-prefix', 'id', 'label'].indexOf(key) === -1 && key.indexOf('label-') !== 0 && key.indexOf('formgroup-') !== 0) {
      inputAtts[key] = val;                                                                                            // 77
    }                                                                                                                  // 78
  });                                                                                                                  // 79
  return inputAtts;                                                                                                    // 80
}                                                                                                                      // 81
                                                                                                                       // 82
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 7197
}).call(this);                                                       // 7198
                                                                     // 7199
                                                                     // 7200
                                                                     // 7201
                                                                     // 7202
                                                                     // 7203
                                                                     // 7204
(function () {                                                       // 7205
                                                                     // 7206
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afObjectField/template.afObjectField.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afObjectField");                                                                                 // 2
Template["afObjectField"] = new Template("Template.afObjectField", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("getTemplateName")),                                                        // 7
      data: Spacebars.call(view.lookup("innerContext"))                                                                // 8
    };                                                                                                                 // 9
  }, function() {                                                                                                      // 10
    return Spacebars.include(function() {                                                                              // 11
      return Spacebars.call(Template.__dynamic);                                                                       // 12
    });                                                                                                                // 13
  });                                                                                                                  // 14
}));                                                                                                                   // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 7230
}).call(this);                                                       // 7231
                                                                     // 7232
                                                                     // 7233
                                                                     // 7234
                                                                     // 7235
                                                                     // 7236
                                                                     // 7237
(function () {                                                       // 7238
                                                                     // 7239
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afObjectField/afObjectField.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template.afObjectField.helpers({                                                                                       // 3
  getTemplateName: function () {                                                                                       // 4
    return AutoForm.getTemplateName('afObjectField', this.template, this.name);                                        // 5
  },                                                                                                                   // 6
  innerContext: function() {                                                                                           // 7
    var c = AutoForm.Utility.getComponentContext(this, 'afObjectField');                                               // 8
    return _.extend({}, this, c.atts);                                                                                 // 9
  }                                                                                                                    // 10
});                                                                                                                    // 11
                                                                                                                       // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 7259
}).call(this);                                                       // 7260
                                                                     // 7261
                                                                     // 7262
                                                                     // 7263
                                                                     // 7264
                                                                     // 7265
                                                                     // 7266
(function () {                                                       // 7267
                                                                     // 7268
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afQuickField/template.afQuickField.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afQuickField");                                                                                  // 2
Template["afQuickField"] = new Template("Template.afQuickField", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return Blaze.If(function() {                                                                                         // 5
    return Spacebars.call(view.lookup("isGroup"));                                                                     // 6
  }, function() {                                                                                                      // 7
    return [ "\n    ", Spacebars.include(view.lookupTemplate("afObjectField")), "\n  " ];                              // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", Blaze.If(function() {                                                                           // 10
      return Spacebars.call(view.lookup("isFieldArray"));                                                              // 11
    }, function() {                                                                                                    // 12
      return [ "\n      ", Spacebars.include(view.lookupTemplate("afArrayField")), "\n    " ];                         // 13
    }, function() {                                                                                                    // 14
      return [ "\n      ", Blaze.If(function() {                                                                       // 15
        return Spacebars.call(view.lookup("isHiddenInput"));                                                           // 16
      }, function() {                                                                                                  // 17
        return [ "\n        \n        ", Blaze._TemplateWith(function() {                                              // 18
          return Spacebars.call(view.lookup("groupAtts"));                                                             // 19
        }, function() {                                                                                                // 20
          return Spacebars.include(view.lookupTemplate("afFieldInput"));                                               // 21
        }), "\n      " ];                                                                                              // 22
      }, function() {                                                                                                  // 23
        return [ "\n        ", Blaze._TemplateWith(function() {                                                        // 24
          return Spacebars.call(view.lookup("groupAtts"));                                                             // 25
        }, function() {                                                                                                // 26
          return Spacebars.include(view.lookupTemplate("afFormGroup"));                                                // 27
        }), "\n      " ];                                                                                              // 28
      }), "\n    " ];                                                                                                  // 29
    }), "\n  " ];                                                                                                      // 30
  });                                                                                                                  // 31
}));                                                                                                                   // 32
                                                                                                                       // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 7309
}).call(this);                                                       // 7310
                                                                     // 7311
                                                                     // 7312
                                                                     // 7313
                                                                     // 7314
                                                                     // 7315
                                                                     // 7316
(function () {                                                       // 7317
                                                                     // 7318
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afQuickField/afQuickField.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template.afQuickField.helpers({                                                                                        // 3
  isGroup: function afQuickFieldIsGroup() {                                                                            // 4
    var c = AutoForm.Utility.getComponentContext(this, "afQuickField");                                                // 5
    // Render a group of fields if we expect an Object and we don't have options                                       // 6
    // and we have not overridden the type                                                                             // 7
    return (c.defs.type === Object && !c.atts.options && !c.atts.type);                                                // 8
  },                                                                                                                   // 9
  isFieldArray: function afQuickFieldIsFieldArray() {                                                                  // 10
    var c = AutoForm.Utility.getComponentContext(this, "afQuickField");                                                // 11
    // Render an array of fields if we expect an Array and we don't have options                                       // 12
    // and we have not overridden the type                                                                             // 13
    return (c.defs.type === Array && !c.atts.options && !c.atts.type);                                                 // 14
  },                                                                                                                   // 15
  groupAtts: function afQuickFieldGroupAtts() {                                                                        // 16
    // afQuickField passes `fields` and `omitFields` on to `afObjectField`                                             // 17
    // and `afArrayField`, but not to `afFormGroup`                                                                    // 18
    return _.omit(this, 'fields', 'omitFields');                                                                       // 19
  },                                                                                                                   // 20
  isHiddenInput: function afQuickFieldIsHiddenInput() {                                                                // 21
    var c = AutoForm.Utility.getComponentContext(this, "afQuickField");                                                // 22
    var inputType = c.atts.type;                                                                                       // 23
    if (inputType) {                                                                                                   // 24
      var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                    // 25
      if (!componentDef) {                                                                                             // 26
        throw new Error('AutoForm: No component found for rendering input with type "' + inputType + '"');             // 27
      }                                                                                                                // 28
      return componentDef.isHidden;                                                                                    // 29
    }                                                                                                                  // 30
                                                                                                                       // 31
    return false;                                                                                                      // 32
  }                                                                                                                    // 33
});                                                                                                                    // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 7361
}).call(this);                                                       // 7362
                                                                     // 7363
                                                                     // 7364
                                                                     // 7365
                                                                     // 7366
                                                                     // 7367
                                                                     // 7368
(function () {                                                       // 7369
                                                                     // 7370
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afQuickFields/template.afQuickFields.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afQuickFields");                                                                                 // 2
Template["afQuickFields"] = new Template("Template.afQuickFields", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return Blaze.Each(function() {                                                                                       // 5
    return Spacebars.dataMustache(view.lookup("afFieldNames"), Spacebars.kw({                                          // 6
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 7
    }));                                                                                                               // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", Blaze._TemplateWith(function() {                                                                // 10
      return Spacebars.call(view.lookup("quickFieldAtts"));                                                            // 11
    }, function() {                                                                                                    // 12
      return Spacebars.include(view.lookupTemplate("afQuickField"));                                                   // 13
    }), "\n  " ];                                                                                                      // 14
  });                                                                                                                  // 15
}));                                                                                                                   // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 7395
}).call(this);                                                       // 7396
                                                                     // 7397
                                                                     // 7398
                                                                     // 7399
                                                                     // 7400
                                                                     // 7401
                                                                     // 7402
(function () {                                                       // 7403
                                                                     // 7404
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/components/afQuickFields/afQuickFields.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template.afQuickFields.helpers({                                                                                       // 3
  quickFieldAtts: function afQuickFieldsQuickFieldAtts() {                                                             // 4
    var afQuickFieldsComponentAtts, defaultOptions, atts = {};                                                         // 5
                                                                                                                       // 6
    // Get the attributes that were on the afQuickFields component                                                     // 7
    afQuickFieldsComponentAtts = Template.parentData(1);                                                               // 8
    // It's possible to call {{> afQuickFields}} with no attributes, in which case we                                  // 9
    // don't want the "attributes" because they're really just the parent context.                                     // 10
    if (!afQuickFieldsComponentAtts || afQuickFieldsComponentAtts.atts) {                                              // 11
      afQuickFieldsComponentAtts = {};                                                                                 // 12
    }                                                                                                                  // 13
                                                                                                                       // 14
    // Add default options from schema/allowed                                                                         // 15
    defaultOptions = AutoForm._getOptionsForField(this.name);                                                          // 16
    if (defaultOptions) {                                                                                              // 17
      atts.options = defaultOptions;                                                                                   // 18
    }                                                                                                                  // 19
                                                                                                                       // 20
    return _.extend(atts, afQuickFieldsComponentAtts, this);                                                           // 21
  }                                                                                                                    // 22
});                                                                                                                    // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 7436
}).call(this);                                                       // 7437
                                                                     // 7438
                                                                     // 7439
                                                                     // 7440
                                                                     // 7441
                                                                     // 7442
                                                                     // 7443
(function () {                                                       // 7444
                                                                     // 7445
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/autoform-events.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm, Hooks, validateField, updateTrackedFieldValue, arrayTracker, updateAllTrackedFieldValues, SimpleSchema */
                                                                                                                       // 2
// all form events handled here                                                                                        // 3
var lastAutoSaveElement = null;                                                                                        // 4
var lastKeyVal = null;                                                                                                 // 5
                                                                                                                       // 6
function beginSubmit(formId, template, hookContext) {                                                                  // 7
  if (!template || !template.view._domrange || template.view.isDestroyed) {                                            // 8
    return;                                                                                                            // 9
  }                                                                                                                    // 10
                                                                                                                       // 11
  // Get user-defined hooks                                                                                            // 12
  var hooks = Hooks.getHooks(formId, 'beginSubmit');                                                                   // 13
  if (hooks.length) {                                                                                                  // 14
    _.each(hooks, function beginSubmitHooks(hook) {                                                                    // 15
      hook.call(hookContext);                                                                                          // 16
    });                                                                                                                // 17
  } else {                                                                                                             // 18
    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 19
    var submitButton = template.find("button[type=submit]") || template.find("input[type=submit]");                    // 20
    if (submitButton) {                                                                                                // 21
      submitButton.disabled = true;                                                                                    // 22
    }                                                                                                                  // 23
  }                                                                                                                    // 24
}                                                                                                                      // 25
                                                                                                                       // 26
function endSubmit(formId, template, hookContext) {                                                                    // 27
  if (!template || !template.view._domrange || template.view.isDestroyed) {                                            // 28
    return;                                                                                                            // 29
  }                                                                                                                    // 30
                                                                                                                       // 31
  // Try to avoid incorrect reporting of which input caused autosave                                                   // 32
  lastAutoSaveElement = null;                                                                                          // 33
  // Get user-defined hooks                                                                                            // 34
  var hooks = Hooks.getHooks(formId, 'endSubmit');                                                                     // 35
  if (hooks.length) {                                                                                                  // 36
    _.each(hooks, function endSubmitHooks(hook) {                                                                      // 37
      hook.call(hookContext);                                                                                          // 38
    });                                                                                                                // 39
  } else {                                                                                                             // 40
    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 41
    var submitButton = template.find("button[type=submit]") || template.find("input[type=submit]");                    // 42
    if (submitButton) {                                                                                                // 43
      submitButton.disabled = false;                                                                                   // 44
    }                                                                                                                  // 45
  }                                                                                                                    // 46
}                                                                                                                      // 47
                                                                                                                       // 48
function adjustKeyForArrays(key) {                                                                                     // 49
  var gKey = SimpleSchema._makeGeneric(key);                                                                           // 50
  if (gKey.slice(-2) === '.$' || gKey.indexOf('.$.') !== -1) {                                                         // 51
    key = gKey.slice(0, gKey.indexOf('.$'));                                                                           // 52
  }                                                                                                                    // 53
  return key;                                                                                                          // 54
}                                                                                                                      // 55
                                                                                                                       // 56
/**                                                                                                                    // 57
 * Returns `true` if the specified validation type should                                                              // 58
 * be revalidated only when the form is already invalid.                                                               // 59
 * @param {String} validationType The validation type string.                                                          // 60
 */                                                                                                                    // 61
function onlyIfAlreadyInvalid(validationType) {                                                                        // 62
  return validationType === 'submitThenKeyup' ||                                                                       // 63
    validationType === 'submitThenBlur';                                                                               // 64
}                                                                                                                      // 65
                                                                                                                       // 66
/**                                                                                                                    // 67
 * Given an element, returns the schema key for it, using the                                                          // 68
 * `data-schema-key` attribute on the element or on the closest                                                        // 69
 * element that has one.                                                                                               // 70
 *                                                                                                                     // 71
 * @param   {Element}          element The DOM element                                                                 // 72
 * @returns {String|undefined} The schema key                                                                          // 73
 */                                                                                                                    // 74
function getKeyForElement(element) {                                                                                   // 75
  var key = element.getAttribute("data-schema-key");                                                                   // 76
  if (!key) {                                                                                                          // 77
    key = $(element).closest('[data-schema-key]').attr("data-schema-key");                                             // 78
  }                                                                                                                    // 79
  return key;                                                                                                          // 80
}                                                                                                                      // 81
                                                                                                                       // 82
//throttle autosave, at most autosave every 500ms                                                                      // 83
var throttleAutosave = _.throttle(function(event) {                                                                    // 84
  lastAutoSaveElement = event.target;                                                                                  // 85
  $(event.currentTarget).submit();                                                                                     // 86
}, 500, {leading: false});                                                                                             // 87
                                                                                                                       // 88
Template.autoForm.events({                                                                                             // 89
  'submit form': function autoFormSubmitHandler(event, template) {                                                     // 90
    var formDoc;                                                                                                       // 91
    // Gather necessary form info                                                                                      // 92
    var formId = this.id;                                                                                              // 93
    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 94
    var formType = form.type;                                                                                          // 95
    // ss will be the schema for the `schema` attribute if present,                                                    // 96
    // else the schema for the collection                                                                              // 97
    var ss = AutoForm.getFormSchema(formId);                                                                           // 98
    var collection = AutoForm.getFormCollection(formId);                                                               // 99
    var ssIsOverride = !!(collection && form.schema);                                                                  // 100
                                                                                                                       // 101
    var currentDoc = form.doc;                                                                                         // 102
    var docId = currentDoc ? currentDoc._id : null;                                                                    // 103
    var isValid;                                                                                                       // 104
                                                                                                                       // 105
    var validationOptions = {                                                                                          // 106
      validationContext: formId,                                                                                       // 107
      filter: form.filter,                                                                                             // 108
      autoConvert: form.autoConvert,                                                                                   // 109
      removeEmptyStrings: form.removeEmptyStrings,                                                                     // 110
      trimStrings: form.trimStrings                                                                                    // 111
    };                                                                                                                 // 112
                                                                                                                       // 113
    // Get the form type definition                                                                                    // 114
    var ftd;                                                                                                           // 115
    try {                                                                                                              // 116
      ftd = Utility.getFormTypeDef(formType);                                                                          // 117
    } catch (err) {                                                                                                    // 118
      event.preventDefault();                                                                                          // 119
      throw err;                                                                                                       // 120
    }                                                                                                                  // 121
                                                                                                                       // 122
    // Gather hooks                                                                                                    // 123
    var onSuccessHooks = Hooks.getHooks(formId, 'onSuccess');                                                          // 124
    var onErrorHooks = Hooks.getHooks(formId, 'onError');                                                              // 125
    var beforeHooks = Hooks.getHooks(formId, 'before', formType);                                                      // 126
    var afterHooks = Hooks.getHooks(formId, 'after', formType);                                                        // 127
                                                                                                                       // 128
    // Prep context with which hooks are called                                                                        // 129
    var hookContext = {                                                                                                // 130
      addStickyValidationError: function (key, type, value) {                                                          // 131
        AutoForm.templateInstanceForForm(formId)._stickyErrors[key] = {type: type, value: value};                      // 132
      },                                                                                                               // 133
      autoSaveChangedElement: lastAutoSaveElement,                                                                     // 134
      collection: collection,                                                                                          // 135
      currentDoc: currentDoc,                                                                                          // 136
      docId: docId,                                                                                                    // 137
      event: event,                                                                                                    // 138
      formAttributes: form,                                                                                            // 139
      formId: formId,                                                                                                  // 140
      formTypeDefinition: ftd,                                                                                         // 141
      removeStickyValidationError: function (key) {                                                                    // 142
        delete AutoForm.templateInstanceForForm(formId)._stickyErrors[key];                                            // 143
        // revalidate that field                                                                                       // 144
        validateField(key, formId, false, false);                                                                      // 145
      },                                                                                                               // 146
      resetForm: function () {                                                                                         // 147
        AutoForm.resetForm(formId, template);                                                                          // 148
      },                                                                                                               // 149
      ss: ss,                                                                                                          // 150
      ssIsOverride: ssIsOverride,                                                                                      // 151
      template: template,                                                                                              // 152
      validationContext: AutoForm.getValidationContext(formId)                                                         // 153
    };                                                                                                                 // 154
                                                                                                                       // 155
    // Gather all form values                                                                                          // 156
    if (ftd.needsModifierAndDoc) {                                                                                     // 157
      formDoc = AutoForm.getFormValues(formId, template, ss);                                                          // 158
      hookContext.updateDoc = formDoc.updateDoc;                                                                       // 159
      hookContext.insertDoc = formDoc.insertDoc;                                                                       // 160
    } else if (ftd.usesModifier) {                                                                                     // 161
      formDoc = AutoForm.getFormValues(formId, template, ss, true);                                                    // 162
      hookContext.updateDoc = formDoc;                                                                                 // 163
    } else {                                                                                                           // 164
      formDoc = AutoForm.getFormValues(formId, template, ss, false);                                                   // 165
      hookContext.insertDoc = formDoc;                                                                                 // 166
    }                                                                                                                  // 167
                                                                                                                       // 168
    // It is pretty unlikely since we are submitting it, but if                                                        // 169
    // for some reason this form is not currently rendered, we exit.                                                   // 170
    if (!formDoc) {                                                                                                    // 171
      event.preventDefault();                                                                                          // 172
      return;                                                                                                          // 173
    }                                                                                                                  // 174
                                                                                                                       // 175
    function endSubmission() {                                                                                         // 176
      // Run endSubmit hooks (re-enabled submit button or form, etc.)                                                  // 177
      endSubmit(formId, template, hookContext);                                                                        // 178
    }                                                                                                                  // 179
                                                                                                                       // 180
    function failedValidation() {                                                                                      // 181
      // add invalidKeys array as a property                                                                           // 182
      // of the Error object before we call                                                                            // 183
      // onError hooks                                                                                                 // 184
      var ec = ss.namedContext(formId);                                                                                // 185
      var ik = ec.invalidKeys(), error;                                                                                // 186
      if (ik) {                                                                                                        // 187
        if (ik.length) {                                                                                               // 188
          // We add `message` prop to the invalidKeys.                                                                 // 189
          // Maybe SS pkg should just add that property back in?                                                       // 190
          ik = _.map(ik, function (o) {                                                                                // 191
            return _.extend({message: ec.keyErrorMessage(o.name)}, o);                                                 // 192
          });                                                                                                          // 193
          error = new Error(ik[0].message);                                                                            // 194
        } else {                                                                                                       // 195
          error = new Error('form failed validation');                                                                 // 196
        }                                                                                                              // 197
        error.invalidKeys = ik;                                                                                        // 198
      } else {                                                                                                         // 199
        error = new Error('form failed validation');                                                                   // 200
      }                                                                                                                // 201
      _.each(onErrorHooks, function onErrorEach(hook) {                                                                // 202
        hook.call(hookContext, 'pre-submit validation', error);                                                        // 203
      });                                                                                                              // 204
      event.preventDefault();                                                                                          // 205
      event.stopPropagation();                                                                                         // 206
      endSubmission();                                                                                                 // 207
    }                                                                                                                  // 208
                                                                                                                       // 209
    // Prep function that calls before hooks.                                                                          // 210
    function runBeforeHooks(doc, next) {                                                                               // 211
      // We call the hooks recursively, in order added,                                                                // 212
      // passing the result of the first hook to the                                                                   // 213
      // second hook, etc.                                                                                             // 214
      function runHook(i, doc) {                                                                                       // 215
        var hook = beforeHooks[i];                                                                                     // 216
                                                                                                                       // 217
        if (!hook) {                                                                                                   // 218
          // We've run all hooks; continue submission                                                                  // 219
          next(doc);                                                                                                   // 220
          return;                                                                                                      // 221
        }                                                                                                              // 222
                                                                                                                       // 223
        // Define a `result` function                                                                                  // 224
        var cb = function (d) {                                                                                        // 225
          // If the hook returns false, we cancel                                                                      // 226
          if (d === false) {                                                                                           // 227
            endSubmission();                                                                                           // 228
          } else if (!_.isObject(d)) {                                                                                 // 229
            throw new Error("A 'before' hook must return an object");                                                  // 230
          } else {                                                                                                     // 231
            runHook(i+1, d);                                                                                           // 232
          }                                                                                                            // 233
        };                                                                                                             // 234
                                                                                                                       // 235
        // Add the `result` function to the before hook context                                                        // 236
        var ctx = _.extend({                                                                                           // 237
          result: _.once(cb)                                                                                           // 238
        }, hookContext);                                                                                               // 239
                                                                                                                       // 240
        var result = hook.call(ctx, doc);                                                                              // 241
                                                                                                                       // 242
        // If the hook returns undefined, we wait for it                                                               // 243
        // to call this.result()                                                                                       // 244
        if (result !== void 0) {                                                                                       // 245
          ctx.result(result);                                                                                          // 246
        }                                                                                                              // 247
      }                                                                                                                // 248
                                                                                                                       // 249
      runHook(0, doc);                                                                                                 // 250
    }                                                                                                                  // 251
                                                                                                                       // 252
    // Prep function that calls after, onError, and onSuccess hooks.                                                   // 253
    // Also resets the form on success.                                                                                // 254
    function resultCallback(error, result) {                                                                           // 255
      if (error) {                                                                                                     // 256
        if (onErrorHooks && onErrorHooks.length) {                                                                     // 257
          _.each(onErrorHooks, function onErrorEach(hook) {                                                            // 258
            hook.call(hookContext, formType, error);                                                                   // 259
          });                                                                                                          // 260
        } else if ((!afterHooks || !afterHooks.length) && ss.namedContext(formId).isValid()) {                         // 261
          // if there are no onError or "after" hooks or validation errors, log the error                              // 262
          // because it must be some other error from the server                                                       // 263
          console.log(error);                                                                                          // 264
        }                                                                                                              // 265
      } else {                                                                                                         // 266
        // By default, we reset form after successful submit, but                                                      // 267
        // you can opt out. We should never reset after submit                                                         // 268
        // when autosaving.                                                                                            // 269
        if (form.resetOnSuccess !== false && form.autosave !== true) {                                                 // 270
          AutoForm.resetForm(formId, template);                                                                        // 271
        }                                                                                                              // 272
        // Set docId in the context for insert forms, too                                                              // 273
        if (formType === "insert") {                                                                                   // 274
          hookContext.docId = result;                                                                                  // 275
        }                                                                                                              // 276
        _.each(onSuccessHooks, function onSuccessEach(hook) {                                                          // 277
          hook.call(hookContext, formType, result);                                                                    // 278
        });                                                                                                            // 279
      }                                                                                                                // 280
      _.each(afterHooks, function afterHooksEach(hook) {                                                               // 281
        hook.call(hookContext, error, result);                                                                         // 282
      });                                                                                                              // 283
      endSubmission();                                                                                                 // 284
    }                                                                                                                  // 285
                                                                                                                       // 286
    // Run beginSubmit hooks (disable submit button or form, etc.)                                                     // 287
    // NOTE: This needs to stay after getFormValues in case a                                                          // 288
    // beginSubmit hook disables inputs. We don't get values for                                                       // 289
    // disabled inputs, but if they are just disabling during submission,                                              // 290
    // then we actually do want the values.                                                                            // 291
    //                                                                                                                 // 292
    // Also keep this before prevalidation so that sticky errors can be                                                // 293
    // removed in this hook.                                                                                           // 294
    beginSubmit(formId, template, hookContext);                                                                        // 295
                                                                                                                       // 296
    // Ask form type definition whether we should prevalidate. By default we do.                                       // 297
    var shouldPrevalidate = ftd.shouldPrevalidate ? ftd.shouldPrevalidate.call(hookContext) : true;                    // 298
                                                                                                                       // 299
    if (shouldPrevalidate) {                                                                                           // 300
      // This validation pass happens before any "before" hooks run. We                                                // 301
      // validate against the form schema. Then before hooks can add any missing                                       // 302
      // properties before we validate against the full collection schema.                                             // 303
      try {                                                                                                            // 304
        isValid = (form.validation === 'none') ||                                                                      // 305
          ftd.validateForm.call({                                                                                      // 306
            form: form,                                                                                                // 307
            formDoc: formDoc,                                                                                          // 308
            useCollectionSchema: false                                                                                 // 309
          });                                                                                                          // 310
      } catch (e) {                                                                                                    // 311
        // Catch exceptions in validation functions which will bubble up here, cause a form with                       // 312
        // onSubmit() to submit prematurely and prevent the error from being reported                                  // 313
        // (due to a page refresh).                                                                                    // 314
        console.error('Validation error', e);                                                                          // 315
        isValid = false;                                                                                               // 316
      }                                                                                                                // 317
      // If we failed pre-submit validation, we stop submission.                                                       // 318
      if (isValid === false) {                                                                                         // 319
        failedValidation();                                                                                            // 320
        return;                                                                                                        // 321
      }                                                                                                                // 322
    }                                                                                                                  // 323
                                                                                                                       // 324
    // Call onSubmit from the form type definition                                                                     // 325
    ftd.onSubmit.call(_.extend({                                                                                       // 326
      runBeforeHooks: runBeforeHooks,                                                                                  // 327
      result: resultCallback,                                                                                          // 328
      endSubmission: endSubmission,                                                                                    // 329
      failedValidation: failedValidation,                                                                              // 330
      validationOptions: validationOptions,                                                                            // 331
      hookContext: hookContext                                                                                         // 332
    }, hookContext));                                                                                                  // 333
  },                                                                                                                   // 334
  'keyup [data-schema-key]': function autoFormKeyUpHandler(event) {                                                    // 335
    // validateField is throttled, so we need to get the nearest form's                                                // 336
    // ID here, while we're still in the correct context                                                               // 337
    var formId = AutoForm.getFormId();                                                                                 // 338
                                                                                                                       // 339
    // Get current form data context                                                                                   // 340
    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 341
                                                                                                                       // 342
    var validationType = form.validation;                                                                              // 343
    var skipEmpty = !(event.keyCode === 8 || event.keyCode === 46); //if deleting or backspacing, don't skip empty     // 344
                                                                                                                       // 345
    if ((validationType === 'keyup' || validationType === 'submitThenKeyup')) {                                        // 346
      var key = getKeyForElement(event.currentTarget);                                                                 // 347
      if (!key) {return;}                                                                                              // 348
                                                                                                                       // 349
      validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));                                     // 350
                                                                                                                       // 351
      // If it's an array field, we also want to validate the entire topmost array                                     // 352
      // in case there are minCount/maxCount errors, etc.                                                              // 353
      var arrayKey = adjustKeyForArrays(key);                                                                          // 354
      if (arrayKey !== key) {                                                                                          // 355
        validateField(arrayKey, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));                              // 356
      }                                                                                                                // 357
                                                                                                                       // 358
      // If the form should be auto-saved whenever updated, we do that on field                                        // 359
      // changes instead of validating the field                                                                       // 360
      if (form.autosaveOnKeyup === true) {                                                                             // 361
        throttleAutosave(event);                                                                                       // 362
      }                                                                                                                // 363
    }                                                                                                                  // 364
  },                                                                                                                   // 365
  'blur [data-schema-key]': function autoFormBlurHandler(event) {                                                      // 366
    // validateField is throttled, so we need to get the nearest form's                                                // 367
    // ID here, while we're still in the correct context                                                               // 368
    var formId = AutoForm.getFormId();                                                                                 // 369
                                                                                                                       // 370
    // Get current form data context                                                                                   // 371
    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 372
    var validationType = form.validation;                                                                              // 373
                                                                                                                       // 374
    if (validationType === 'keyup' ||                                                                                  // 375
        validationType === 'blur' ||                                                                                   // 376
        validationType === 'submitThenKeyup' ||                                                                        // 377
        validationType === 'submitThenBlur') {                                                                         // 378
      var key = getKeyForElement(event.currentTarget);                                                                 // 379
      if (!key) {return;}                                                                                              // 380
                                                                                                                       // 381
      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));                                         // 382
                                                                                                                       // 383
      // If it's an array field, we also want to validate the entire topmost array                                     // 384
      // in case there are minCount/maxCount errors, etc.                                                              // 385
      var arrayKey = adjustKeyForArrays(key);                                                                          // 386
      if (arrayKey !== key) {                                                                                          // 387
        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));                                  // 388
      }                                                                                                                // 389
    }                                                                                                                  // 390
  },                                                                                                                   // 391
  'change form': function autoFormChangeHandler(event, template) {                                                     // 392
    var key = getKeyForElement(event.target);                                                                          // 393
    if (!key) {return;}                                                                                                // 394
                                                                                                                       // 395
    // Some plugins, like jquery.inputmask, can cause infinite                                                         // 396
    // loops by continually saying the field changed when it did not,                                                  // 397
    // especially in an autosave situation. This is an attempt to                                                      // 398
    // prevent that from happening.                                                                                    // 399
    var keyVal = event.target.value;                                                                                   // 400
    if (event.target.type === 'checkbox') {                                                                            // 401
      // Special handling for checkboxes, which always have the same value                                             // 402
      keyVal = keyVal + '_' + $(event.target).prop('checked');                                                         // 403
    }                                                                                                                  // 404
                                                                                                                       // 405
    keyVal = key + '___' + keyVal;                                                                                     // 406
                                                                                                                       // 407
    if (keyVal === lastKeyVal) {                                                                                       // 408
      return;                                                                                                          // 409
    }                                                                                                                  // 410
    lastKeyVal = keyVal;                                                                                               // 411
                                                                                                                       // 412
    var formId = this.id;                                                                                              // 413
                                                                                                                       // 414
    // Mark field value as changed for reactive updates                                                                // 415
    updateTrackedFieldValue(template, key);                                                                            // 416
                                                                                                                       // 417
    // Get current form data context                                                                                   // 418
    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 419
                                                                                                                       // 420
    // If the form should be auto-saved whenever updated, we do that on field                                          // 421
    // changes instead of validating the field                                                                         // 422
    if (form.autosave === true || form.autosaveOnKeyup === true) {                                                     // 423
      lastAutoSaveElement = event.target;                                                                              // 424
      $(event.currentTarget).submit();                                                                                 // 425
      return;                                                                                                          // 426
    }                                                                                                                  // 427
                                                                                                                       // 428
    var validationType = form.validation;                                                                              // 429
                                                                                                                       // 430
    if (validationType === 'keyup' ||                                                                                  // 431
        validationType === 'blur' ||                                                                                   // 432
        validationType === 'submitThenKeyup' ||                                                                        // 433
        validationType === 'submitThenBlur') {                                                                         // 434
                                                                                                                       // 435
      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));                                         // 436
                                                                                                                       // 437
      // If it's an array field, we also want to validate the entire topmost array                                     // 438
      // in case there are minCount/maxCount errors, etc.                                                              // 439
      var arrayKey = adjustKeyForArrays(key);                                                                          // 440
      if (arrayKey !== key) {                                                                                          // 441
        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));                                  // 442
      }                                                                                                                // 443
    }                                                                                                                  // 444
  },                                                                                                                   // 445
  'reset form': function autoFormResetHandler(event, template) {                                                       // 446
    var formId = this.id;                                                                                              // 447
                                                                                                                       // 448
    AutoForm.formPreserve.clearDocument(formId);                                                                       // 449
                                                                                                                       // 450
    // Reset array counts                                                                                              // 451
    arrayTracker.resetForm(formId);                                                                                    // 452
                                                                                                                       // 453
    var vc = AutoForm.getValidationContext(formId);                                                                    // 454
    if (vc) {                                                                                                          // 455
      vc.resetValidation();                                                                                            // 456
      // If simpleSchema is undefined, we haven't yet rendered the form, and therefore                                 // 457
      // there is no need to reset validation for it. No error need be thrown.                                         // 458
    }                                                                                                                  // 459
                                                                                                                       // 460
    if (this.doc) {                                                                                                    // 461
      event.preventDefault();                                                                                          // 462
      AutoForm._forceResetFormValues(formId);                                                                          // 463
    }                                                                                                                  // 464
                                                                                                                       // 465
    // Mark all fields as changed                                                                                      // 466
    updateAllTrackedFieldValues(template);                                                                             // 467
    // Focus the autofocus element                                                                                     // 468
    template.$("[autofocus]").focus();                                                                                 // 469
                                                                                                                       // 470
  },                                                                                                                   // 471
  'keydown .autoform-array-item input': function (event) {                                                             // 472
    // When enter is pressed in an array item field, default behavior                                                  // 473
    // seems to be to "click" the remove item button. This doesn't make                                                // 474
    // sense so we stop it.                                                                                            // 475
    if (event.keyCode === 13) {                                                                                        // 476
      event.preventDefault();                                                                                          // 477
    }                                                                                                                  // 478
  },                                                                                                                   // 479
  'click .autoform-remove-item': function autoFormClickRemoveItem(event, template) {                                   // 480
    var self = this; // This type of button must be used within an afEachArrayItem block, so we know the context       // 481
                                                                                                                       // 482
    event.preventDefault();                                                                                            // 483
                                                                                                                       // 484
    var name = self.arrayFieldName;                                                                                    // 485
    var minCount = self.minCount; // optional, overrides schema                                                        // 486
    var maxCount = self.maxCount; // optional, overrides schema                                                        // 487
    var index = self.index;                                                                                            // 488
    var data = template.data;                                                                                          // 489
    var formId = data && data.id;                                                                                      // 490
    var ss = AutoForm.getFormSchema(formId);                                                                           // 491
                                                                                                                       // 492
    // remove the item we clicked                                                                                      // 493
    arrayTracker.removeFromFieldAtIndex(formId, name, index, ss, minCount, maxCount);                                  // 494
  },                                                                                                                   // 495
  'click .autoform-add-item': function autoFormClickAddItem(event, template) {                                         // 496
    event.preventDefault();                                                                                            // 497
                                                                                                                       // 498
    // We pull from data attributes because the button could be manually                                               // 499
    // added anywhere, so we don't know the data context.                                                              // 500
    var btn = $(event.currentTarget);                                                                                  // 501
    var name = btn.attr("data-autoform-field");                                                                        // 502
    var minCount = btn.attr("data-autoform-minCount"); // optional, overrides schema                                   // 503
    var maxCount = btn.attr("data-autoform-maxCount"); // optional, overrides schema                                   // 504
                                                                                                                       // 505
    var data = template.data;                                                                                          // 506
    var formId = data && data.id;                                                                                      // 507
    var ss = AutoForm.getFormSchema(formId);                                                                           // 508
                                                                                                                       // 509
    arrayTracker.addOneToField(formId, name, ss, minCount, maxCount);                                                  // 510
  }                                                                                                                    // 511
});                                                                                                                    // 512
                                                                                                                       // 513
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 7966
}).call(this);                                                       // 7967
                                                                     // 7968
                                                                     // 7969
                                                                     // 7970
                                                                     // 7971
                                                                     // 7972
                                                                     // 7973
(function () {                                                       // 7974
                                                                     // 7975
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/bootstrap3.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
/*                                                                                                                     // 3
 * Template helpers for "bootstrap3" templates                                                                         // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
Template.registerHelper('attsPlusFormControlClass', function attsPlusFormControlClass() {                              // 7
  var atts = _.clone(this.atts);                                                                                       // 8
  // Add bootstrap class                                                                                               // 9
  atts = AutoForm.Utility.addClass(atts, "form-control");                                                              // 10
  return atts;                                                                                                         // 11
});                                                                                                                    // 12
                                                                                                                       // 13
Template.registerHelper('attsPlusBtnClass', function attsPlusBtnClass() {                                              // 14
  var atts = _.clone(this.atts);                                                                                       // 15
  // Add bootstrap class                                                                                               // 16
  atts = AutoForm.Utility.addClass(atts, "btn");                                                                       // 17
  return atts;                                                                                                         // 18
});                                                                                                                    // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8003
}).call(this);                                                       // 8004
                                                                     // 8005
                                                                     // 8006
                                                                     // 8007
                                                                     // 8008
                                                                     // 8009
                                                                     // 8010
(function () {                                                       // 8011
                                                                     // 8012
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/quickForm/template.quickForm.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm_bootstrap3");                                                                          // 2
Template["quickForm_bootstrap3"] = new Template("Template.quickForm_bootstrap3", (function() {                         // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return Spacebars.call(view.lookup("qfAutoFormContext"));                                                           // 6
  }, function() {                                                                                                      // 7
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {                                             // 8
      return [ "\n\n    ", Spacebars.With(function() {                                                                 // 9
        return Spacebars.call(view.lookup("grouplessFields"));                                                         // 10
      }, function() {                                                                                                  // 11
        return [ "\n      ", Blaze._TemplateWith(function() {                                                          // 12
          return Spacebars.call(view.lookup("quickFieldsAtts"));                                                       // 13
        }, function() {                                                                                                // 14
          return Spacebars.include(view.lookupTemplate("afQuickFields"));                                              // 15
        }), "\n    " ];                                                                                                // 16
      }), "\n\n    ", Blaze.Each(function() {                                                                          // 17
        return Spacebars.call(view.lookup("fieldGroups"));                                                             // 18
      }, function() {                                                                                                  // 19
        return [ "\n      ", HTML.FIELDSET({                                                                           // 20
          "class": "af-fieldGroup"                                                                                     // 21
        }, "\n        ", Spacebars.With(function() {                                                                   // 22
          return Spacebars.call(view.lookup("fieldGroupLabel"));                                                       // 23
        }, function() {                                                                                                // 24
          return [ "\n          ", HTML.LEGEND({                                                                       // 25
            "class": "af-fieldGroup-heading"                                                                           // 26
          }, Blaze.View("lookup:.", function() {                                                                       // 27
            return Spacebars.mustache(view.lookup("."));                                                               // 28
          })), "\n        " ];                                                                                         // 29
        }), "\n        ", Blaze._TemplateWith(function() {                                                             // 30
          return Spacebars.call(view.lookup("quickFieldsAtts"));                                                       // 31
        }, function() {                                                                                                // 32
          return Spacebars.include(view.lookupTemplate("afQuickFields"));                                              // 33
        }), "\n      "), "\n    " ];                                                                                   // 34
      }), "\n\n    ", Blaze.If(function() {                                                                            // 35
        return Spacebars.call(view.lookup("qfShouldRenderButton"));                                                    // 36
      }, function() {                                                                                                  // 37
        return [ "\n      ", HTML.DIV({                                                                                // 38
          "class": "form-group"                                                                                        // 39
        }, "\n        ", HTML.BUTTON(HTML.Attrs({                                                                      // 40
          type: "submit"                                                                                               // 41
        }, function() {                                                                                                // 42
          return Spacebars.attrMustache(view.lookup("submitButtonAtts"));                                              // 43
        }), "\n          ", Spacebars.With(function() {                                                                // 44
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "buttonContent"));                            // 45
        }, function() {                                                                                                // 46
          return [ "\n          ", Blaze.View("lookup:.", function() {                                                 // 47
            return Spacebars.mustache(view.lookup("."));                                                               // 48
          }), "\n          " ];                                                                                        // 49
        }, function() {                                                                                                // 50
          return "\n          Submit\n          ";                                                                     // 51
        }), "\n        "), "\n      "), "\n    " ];                                                                    // 52
      }), "\n\n  " ];                                                                                                  // 53
    });                                                                                                                // 54
  });                                                                                                                  // 55
}));                                                                                                                   // 56
                                                                                                                       // 57
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8077
}).call(this);                                                       // 8078
                                                                     // 8079
                                                                     // 8080
                                                                     // 8081
                                                                     // 8082
                                                                     // 8083
                                                                     // 8084
(function () {                                                       // 8085
                                                                     // 8086
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/quickForm/quickForm.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.quickForm_bootstrap3.helpers({                                                                                // 1
  fieldGroupLabel: function () {                                                                                       // 2
    var name = this.name;                                                                                              // 3
                                                                                                                       // 4
    // if field group name is of the form XY_abcde where "XY" is a number, remove prefix                               // 5
    if (!isNaN(parseInt(name.substr(0,2), 10)) && name.charAt(2) === "_") {                                            // 6
      name = name.substr(3);                                                                                           // 7
    }                                                                                                                  // 8
                                                                                                                       // 9
    // if SimpleSchema.defaultLabel is defined, use it                                                                 // 10
    if (typeof SimpleSchema.defaultLabel === "function") {                                                             // 11
      return SimpleSchema.defaultLabel(name);                                                                          // 12
    } else {                                                                                                           // 13
      // else, just capitalise name                                                                                    // 14
      return name.charAt(0).toUpperCase() + name.slice(1);                                                             // 15
    }                                                                                                                  // 16
  },                                                                                                                   // 17
  quickFieldsAtts: function () {                                                                                       // 18
    // These are the quickForm attributes that we want to forward to                                                   // 19
    // the afQuickFields component.                                                                                    // 20
    return _.pick(this.atts, 'fields', 'id-prefix', 'input-col-class', 'label-class');                                 // 21
  },                                                                                                                   // 22
  submitButtonAtts: function bsQuickFormSubmitButtonAtts() {                                                           // 23
    var qfAtts = this.atts;                                                                                            // 24
    var atts = {};                                                                                                     // 25
    if (typeof qfAtts.buttonClasses === 'string') {                                                                    // 26
      atts['class'] = qfAtts.buttonClasses;                                                                            // 27
    } else {                                                                                                           // 28
      atts['class'] = 'btn btn-primary';                                                                               // 29
    }                                                                                                                  // 30
    return atts;                                                                                                       // 31
  }                                                                                                                    // 32
});                                                                                                                    // 33
                                                                                                                       // 34
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8128
}).call(this);                                                       // 8129
                                                                     // 8130
                                                                     // 8131
                                                                     // 8132
                                                                     // 8133
                                                                     // 8134
                                                                     // 8135
(function () {                                                       // 8136
                                                                     // 8137
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/afArrayField/template.afArrayField.js                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afArrayField_bootstrap3");                                                                       // 2
Template["afArrayField_bootstrap3"] = new Template("Template.afArrayField_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": "panel panel-default"                                                                                     // 6
  }, "\n    ", HTML.DIV({                                                                                              // 7
    "class": "panel-heading"                                                                                           // 8
  }, Blaze.View("lookup:afFieldLabelText", function() {                                                                // 9
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 10
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 11
    }));                                                                                                               // 12
  })), "\n    ", Blaze.If(function() {                                                                                 // 13
    return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                      // 14
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 15
    }));                                                                                                               // 16
  }, function() {                                                                                                      // 17
    return [ "\n    ", HTML.DIV({                                                                                      // 18
      "class": "panel-body has-error"                                                                                  // 19
    }, "\n      ", HTML.SPAN({                                                                                         // 20
      "class": "help-block"                                                                                            // 21
    }, Blaze.View("lookup:afFieldMessage", function() {                                                                // 22
      return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                        // 23
        name: Spacebars.dot(view.lookup("."), "atts", "name")                                                          // 24
      })));                                                                                                            // 25
    })), "\n    "), "\n    " ];                                                                                        // 26
  }), "\n    ", HTML.UL({                                                                                              // 27
    "class": "list-group"                                                                                              // 28
  }, "\n      ", Blaze._TemplateWith(function() {                                                                      // 29
    return {                                                                                                           // 30
      name: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "name")),                                           // 31
      minCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "minCount")),                                   // 32
      maxCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "maxCount"))                                    // 33
    };                                                                                                                 // 34
  }, function() {                                                                                                      // 35
    return Spacebars.include(view.lookupTemplate("afEachArrayItem"), function() {                                      // 36
      return [ "\n      ", HTML.LI({                                                                                   // 37
        "class": "list-group-item autoform-array-item"                                                                 // 38
      }, "\n        ", HTML.DIV("\n          ", HTML.DIV({                                                             // 39
        "class": "autoform-remove-item-wrap"                                                                           // 40
      }, "\n            ", Blaze.If(function() {                                                                       // 41
        return Spacebars.dataMustache(view.lookup("afArrayFieldHasMoreThanMinimum"), Spacebars.kw({                    // 42
          name: Spacebars.dot(view.lookup(".."), "atts", "name"),                                                      // 43
          minCount: Spacebars.dot(view.lookup(".."), "atts", "minCount"),                                              // 44
          maxCount: Spacebars.dot(view.lookup(".."), "atts", "maxCount")                                               // 45
        }));                                                                                                           // 46
      }, function() {                                                                                                  // 47
        return [ "\n            ", HTML.BUTTON({                                                                       // 48
          type: "button",                                                                                              // 49
          "class": "btn btn-primary autoform-remove-item"                                                              // 50
        }, HTML.SPAN({                                                                                                 // 51
          "class": "glyphicon glyphicon-minus"                                                                         // 52
        })), "\n            " ];                                                                                       // 53
      }), "\n          "), "\n          ", HTML.DIV({                                                                  // 54
        "class": "autoform-array-item-body"                                                                            // 55
      }, "\n            ", Blaze._TemplateWith(function() {                                                            // 56
        return {                                                                                                       // 57
          name: Spacebars.call(Spacebars.dot(view.lookup("."), "name")),                                               // 58
          label: Spacebars.call(false),                                                                                // 59
          options: Spacebars.call(view.lookup("afOptionsFromSchema"))                                                  // 60
        };                                                                                                             // 61
      }, function() {                                                                                                  // 62
        return Spacebars.include(view.lookupTemplate("afQuickField"));                                                 // 63
      }), "\n          "), "\n        "), "\n      "), "\n      " ];                                                   // 64
    });                                                                                                                // 65
  }), "\n      ", Blaze.If(function() {                                                                                // 66
    return Spacebars.dataMustache(view.lookup("afArrayFieldHasLessThanMaximum"), Spacebars.kw({                        // 67
      name: Spacebars.dot(view.lookup("."), "atts", "name"),                                                           // 68
      minCount: Spacebars.dot(view.lookup("."), "atts", "minCount"),                                                   // 69
      maxCount: Spacebars.dot(view.lookup("."), "atts", "maxCount")                                                    // 70
    }));                                                                                                               // 71
  }, function() {                                                                                                      // 72
    return [ "\n      ", HTML.LI({                                                                                     // 73
      "class": "list-group-item"                                                                                       // 74
    }, "\n        ", HTML.BUTTON({                                                                                     // 75
      type: "button",                                                                                                  // 76
      "class": "btn btn-primary autoform-add-item",                                                                    // 77
      "data-autoform-field": function() {                                                                              // 78
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "name"));                                    // 79
      },                                                                                                               // 80
      "data-autoform-mincount": function() {                                                                           // 81
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "minCount"));                                // 82
      },                                                                                                               // 83
      "data-autoform-maxcount": function() {                                                                           // 84
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "maxCount"));                                // 85
      }                                                                                                                // 86
    }, HTML.SPAN({                                                                                                     // 87
      "class": "glyphicon glyphicon-plus"                                                                              // 88
    })), "\n      "), "\n      " ];                                                                                    // 89
  }), "\n    "), "\n  ");                                                                                              // 90
}));                                                                                                                   // 91
                                                                                                                       // 92
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8237
}).call(this);                                                       // 8238
                                                                     // 8239
                                                                     // 8240
                                                                     // 8241
                                                                     // 8242
                                                                     // 8243
                                                                     // 8244
(function () {                                                       // 8245
                                                                     // 8246
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/afFormGroup/template.afFormGroup.js                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afFormGroup_bootstrap3");                                                                        // 2
Template["afFormGroup_bootstrap3"] = new Template("Template.afFormGroup_bootstrap3", (function() {                     // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": function() {                                                                                              // 6
      return [ "form-group ", Blaze.If(function() {                                                                    // 7
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 8
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 9
        }));                                                                                                           // 10
      }, function() {                                                                                                  // 11
        return "has-error";                                                                                            // 12
      }), " ", Spacebars.mustache(view.lookup("afFormGroupClass")) ];                                                  // 13
    },                                                                                                                 // 14
    "data-required": function() {                                                                                      // 15
      return Spacebars.mustache(view.lookup("required"));                                                              // 16
    }                                                                                                                  // 17
  }, function() {                                                                                                      // 18
    return Spacebars.attrMustache(view.lookup("afFormGroupAtts"));                                                     // 19
  }), "\n    ", Blaze.Unless(function() {                                                                              // 20
    return Spacebars.call(view.lookup("skipLabel"));                                                                   // 21
  }, function() {                                                                                                      // 22
    return [ "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                              // 23
      return Spacebars.attrMustache(view.lookup("bsFieldLabelAtts"));                                                  // 24
    }), Blaze.If(function() {                                                                                          // 25
      return Spacebars.call(Spacebars.dot(view.lookup("."), "labelText"));                                             // 26
    }, function() {                                                                                                    // 27
      return Blaze.View("lookup:..labelText", function() {                                                             // 28
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "labelText"));                                       // 29
      });                                                                                                              // 30
    }, function() {                                                                                                    // 31
      return Blaze.View("lookup:afFieldLabelText", function() {                                                        // 32
        return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 33
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 34
        }));                                                                                                           // 35
      });                                                                                                              // 36
    })), "\n    " ];                                                                                                   // 37
  }), "\n    ", Blaze._TemplateWith(function() {                                                                       // 38
    return Spacebars.call(Spacebars.dot(view.lookup("."), "afFieldInputAtts"));                                        // 39
  }, function() {                                                                                                      // 40
    return Spacebars.include(view.lookupTemplate("afFieldInput"));                                                     // 41
  }), "\n    ", HTML.SPAN({                                                                                            // 42
    "class": "help-block"                                                                                              // 43
  }, Blaze.View("lookup:afFieldMessage", function() {                                                                  // 44
    return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                          // 45
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 46
    })));                                                                                                              // 47
  })), "\n  ");                                                                                                        // 48
}));                                                                                                                   // 49
                                                                                                                       // 50
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8304
}).call(this);                                                       // 8305
                                                                     // 8306
                                                                     // 8307
                                                                     // 8308
                                                                     // 8309
                                                                     // 8310
                                                                     // 8311
(function () {                                                       // 8312
                                                                     // 8313
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/afFormGroup/afFormGroup.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afFormGroup_bootstrap3.helpers({                                                                              // 1
  skipLabel: function bsFormGroupSkipLabel() {                                                                         // 2
    var self = this;                                                                                                   // 3
                                                                                                                       // 4
    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 5
    return (self.skipLabel || type === "boolean-checkbox");                                                            // 6
  },                                                                                                                   // 7
  bsFieldLabelAtts: function bsFieldLabelAtts() {                                                                      // 8
    var atts = _.clone(this.afFieldLabelAtts);                                                                         // 9
    // Add bootstrap class                                                                                             // 10
    atts = AutoForm.Utility.addClass(atts, "control-label");                                                           // 11
    return atts;                                                                                                       // 12
  }                                                                                                                    // 13
});                                                                                                                    // 14
                                                                                                                       // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8336
}).call(this);                                                       // 8337
                                                                     // 8338
                                                                     // 8339
                                                                     // 8340
                                                                     // 8341
                                                                     // 8342
                                                                     // 8343
(function () {                                                       // 8344
                                                                     // 8345
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/afObjectField/template.afObjectField.js                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afObjectField_bootstrap3");                                                                      // 2
Template["afObjectField_bootstrap3"] = new Template("Template.afObjectField_bootstrap3", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": function() {                                                                                              // 6
      return [ "panel ", Spacebars.mustache(view.lookup("panelClass")) ];                                              // 7
    }                                                                                                                  // 8
  }, "\n    ", Spacebars.With(function() {                                                                             // 9
    return Spacebars.dataMustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 10
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 11
    }));                                                                                                               // 12
  }, function() {                                                                                                      // 13
    return [ "\n    ", HTML.DIV({                                                                                      // 14
      "class": function() {                                                                                            // 15
        return [ "panel-heading ", Spacebars.mustache(view.lookup("headingClass")) ];                                  // 16
      }                                                                                                                // 17
    }, "\n      ", HTML.H3({                                                                                           // 18
      "class": "panel-title"                                                                                           // 19
    }, Blaze.View("lookup:.", function() {                                                                             // 20
      return Spacebars.mustache(view.lookup("."));                                                                     // 21
    })), "\n    "), "\n    " ];                                                                                        // 22
  }), "\n    ", HTML.DIV({                                                                                             // 23
    "class": function() {                                                                                              // 24
      return [ "panel-body ", Spacebars.mustache(view.lookup("bodyClass")) ];                                          // 25
    }                                                                                                                  // 26
  }, "\n      ", Blaze.If(function() {                                                                                 // 27
    return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                      // 28
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 29
    }));                                                                                                               // 30
  }, function() {                                                                                                      // 31
    return [ "\n      ", HTML.SPAN({                                                                                   // 32
      "class": "help-block"                                                                                            // 33
    }, Blaze.View("lookup:afFieldMessage", function() {                                                                // 34
      return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                        // 35
        name: Spacebars.dot(view.lookup("."), "name")                                                                  // 36
      })));                                                                                                            // 37
    })), "\n      " ];                                                                                                 // 38
  }), "\n      ", Blaze._TemplateWith(function() {                                                                     // 39
    return Spacebars.call(view.lookup("quickFieldsAtts"));                                                             // 40
  }, function() {                                                                                                      // 41
    return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                    // 42
  }), "\n    "), "\n  ");                                                                                              // 43
}));                                                                                                                   // 44
                                                                                                                       // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8398
}).call(this);                                                       // 8399
                                                                     // 8400
                                                                     // 8401
                                                                     // 8402
                                                                     // 8403
                                                                     // 8404
                                                                     // 8405
(function () {                                                       // 8406
                                                                     // 8407
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/components/afObjectField/afObjectField.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afObjectField_bootstrap3.helpers({                                                                            // 1
  quickFieldsAtts: function () {                                                                                       // 2
    return _.pick(this, 'name', 'id-prefix');                                                                          // 3
  },                                                                                                                   // 4
  panelClass: function() {                                                                                             // 5
    return this.panelClass || 'panel-default';                                                                         // 6
  }                                                                                                                    // 7
});                                                                                                                    // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8424
}).call(this);                                                       // 8425
                                                                     // 8426
                                                                     // 8427
                                                                     // 8428
                                                                     // 8429
                                                                     // 8430
                                                                     // 8431
(function () {                                                       // 8432
                                                                     // 8433
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-checkbox/template.boolean-checkbox.js              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckbox_bootstrap3");                                                                         // 2
Template["afCheckbox_bootstrap3"] = new Template("Template.afCheckbox_bootstrap3", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": "checkbox"                                                                                                // 6
  }, "\n    ", HTML.LABEL("\n      ", HTML.INPUT(HTML.Attrs({                                                          // 7
    type: "checkbox",                                                                                                  // 8
    value: "true"                                                                                                      // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("atts"));                                                                // 11
  })), "\n      ", Blaze.View("lookup:afFieldLabelText", function() {                                                  // 12
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 13
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 14
    }));                                                                                                               // 15
  }), "\n    "), "\n  ");                                                                                              // 16
}));                                                                                                                   // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8459
}).call(this);                                                       // 8460
                                                                     // 8461
                                                                     // 8462
                                                                     // 8463
                                                                     // 8464
                                                                     // 8465
                                                                     // 8466
(function () {                                                       // 8467
                                                                     // 8468
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-radios/template.boolean-radios.js                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afBooleanRadioGroup_bootstrap3");                                                                // 2
Template["afBooleanRadioGroup_bootstrap3"] = new Template("Template.afBooleanRadioGroup_bootstrap3", (function() {     // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 6
  }), "\n    ", HTML.DIV({                                                                                             // 7
    "class": "radio"                                                                                                   // 8
  }, "\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 9
    type: "radio",                                                                                                     // 10
    value: "false",                                                                                                    // 11
    name: function() {                                                                                                 // 12
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                              // 13
    }                                                                                                                  // 14
  }, function() {                                                                                                      // 15
    return Spacebars.attrMustache(view.lookup("falseAtts"));                                                           // 16
  })), " ", Spacebars.With(function() {                                                                                // 17
    return Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "falseLabel"));                                      // 18
  }, function() {                                                                                                      // 19
    return Blaze.View("lookup:.", function() {                                                                         // 20
      return Spacebars.mustache(view.lookup("."));                                                                     // 21
    });                                                                                                                // 22
  }, function() {                                                                                                      // 23
    return "False";                                                                                                    // 24
  })), "\n    "), "\n    ", HTML.DIV({                                                                                 // 25
    "class": "radio"                                                                                                   // 26
  }, "\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 27
    type: "radio",                                                                                                     // 28
    value: "true",                                                                                                     // 29
    name: function() {                                                                                                 // 30
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "name"));                                              // 31
    }                                                                                                                  // 32
  }, function() {                                                                                                      // 33
    return Spacebars.attrMustache(view.lookup("trueAtts"));                                                            // 34
  })), " ", Spacebars.With(function() {                                                                                // 35
    return Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "trueLabel"));                                       // 36
  }, function() {                                                                                                      // 37
    return Blaze.View("lookup:.", function() {                                                                         // 38
      return Spacebars.mustache(view.lookup("."));                                                                     // 39
    });                                                                                                                // 40
  }, function() {                                                                                                      // 41
    return "True";                                                                                                     // 42
  })), "\n    "), "\n    ", Spacebars.With(function() {                                                                // 43
    return Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "nullLabel"));                                       // 44
  }, function() {                                                                                                      // 45
    return [ "\n    ", HTML.DIV({                                                                                      // 46
      "class": "radio"                                                                                                 // 47
    }, "\n      ", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                  // 48
      type: "radio",                                                                                                   // 49
      value: "",                                                                                                       // 50
      name: function() {                                                                                               // 51
        return Spacebars.mustache(Spacebars.dot(view.lookup(".."), "name"));                                           // 52
      }                                                                                                                // 53
    }, function() {                                                                                                    // 54
      return Spacebars.attrMustache(view.lookup("nullAtts"));                                                          // 55
    })), " ", Blaze.View("lookup:.", function() {                                                                      // 56
      return Spacebars.mustache(view.lookup("."));                                                                     // 57
    })), "\n    "), "\n    " ];                                                                                        // 58
  }), "\n  ");                                                                                                         // 59
}));                                                                                                                   // 60
                                                                                                                       // 61
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8537
}).call(this);                                                       // 8538
                                                                     // 8539
                                                                     // 8540
                                                                     // 8541
                                                                     // 8542
                                                                     // 8543
                                                                     // 8544
(function () {                                                       // 8545
                                                                     // 8546
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-radios/boolean-radios.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afBooleanRadioGroup_bootstrap3.helpers({                                                                      // 1
  falseAtts: function falseAtts() {                                                                                    // 2
    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 3
    if (this.value === false) {                                                                                        // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    return atts;                                                                                                       // 7
  },                                                                                                                   // 8
  trueAtts: function trueAtts() {                                                                                      // 9
    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 10
    if (this.value === true) {                                                                                         // 11
      atts.checked = "";                                                                                               // 12
    }                                                                                                                  // 13
    return atts;                                                                                                       // 14
  },                                                                                                                   // 15
  nullAtts: function nullAtts() {                                                                                      // 16
    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 17
    if (this.value !== true && this.value !== false) {                                                                 // 18
      atts.checked = "";                                                                                               // 19
    }                                                                                                                  // 20
    return atts;                                                                                                       // 21
  },                                                                                                                   // 22
  dsk: function () {                                                                                                   // 23
    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 24
  }                                                                                                                    // 25
});                                                                                                                    // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8581
}).call(this);                                                       // 8582
                                                                     // 8583
                                                                     // 8584
                                                                     // 8585
                                                                     // 8586
                                                                     // 8587
                                                                     // 8588
(function () {                                                       // 8589
                                                                     // 8590
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/boolean-select/template.boolean-select.js                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afBooleanSelect_bootstrap3");                                                                    // 2
Template["afBooleanSelect_bootstrap3"] = new Template("Template.afBooleanSelect_bootstrap3", (function() {             // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 6
  }), "\n    ", Blaze.Each(function() {                                                                                // 7
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", HTML.OPTION(HTML.Attrs(function() {                                                             // 10
      return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                                // 11
    }), Blaze.View("lookup:..label", function() {                                                                      // 12
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 13
    })), "\n    " ];                                                                                                   // 14
  }), "\n  ");                                                                                                         // 15
}));                                                                                                                   // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8615
}).call(this);                                                       // 8616
                                                                     // 8617
                                                                     // 8618
                                                                     // 8619
                                                                     // 8620
                                                                     // 8621
                                                                     // 8622
(function () {                                                       // 8623
                                                                     // 8624
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/button/template.button.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputButton_bootstrap3");                                                                      // 2
Template["afInputButton_bootstrap3"] = new Template("Template.afInputButton_bootstrap3", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "button",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusBtnClass"));                                                    // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8646
}).call(this);                                                       // 8647
                                                                     // 8648
                                                                     // 8649
                                                                     // 8650
                                                                     // 8651
                                                                     // 8652
                                                                     // 8653
(function () {                                                       // 8654
                                                                     // 8655
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/color/template.color.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputColor_bootstrap3");                                                                       // 2
Template["afInputColor_bootstrap3"] = new Template("Template.afInputColor_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "color",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8677
}).call(this);                                                       // 8678
                                                                     // 8679
                                                                     // 8680
                                                                     // 8681
                                                                     // 8682
                                                                     // 8683
                                                                     // 8684
(function () {                                                       // 8685
                                                                     // 8686
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/date/template.date.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDate_bootstrap3");                                                                        // 2
Template["afInputDate_bootstrap3"] = new Template("Template.afInputDate_bootstrap3", (function() {                     // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "date",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8708
}).call(this);                                                       // 8709
                                                                     // 8710
                                                                     // 8711
                                                                     // 8712
                                                                     // 8713
                                                                     // 8714
                                                                     // 8715
(function () {                                                       // 8716
                                                                     // 8717
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/datetime/template.datetime.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDateTime_bootstrap3");                                                                    // 2
Template["afInputDateTime_bootstrap3"] = new Template("Template.afInputDateTime_bootstrap3", (function() {             // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "datetime",                                                                                                  // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8739
}).call(this);                                                       // 8740
                                                                     // 8741
                                                                     // 8742
                                                                     // 8743
                                                                     // 8744
                                                                     // 8745
                                                                     // 8746
(function () {                                                       // 8747
                                                                     // 8748
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/datetime-local/template.datetime-local.js                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputDateTimeLocal_bootstrap3");                                                               // 2
Template["afInputDateTimeLocal_bootstrap3"] = new Template("Template.afInputDateTimeLocal_bootstrap3", (function() {   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "datetime-local",                                                                                            // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8770
}).call(this);                                                       // 8771
                                                                     // 8772
                                                                     // 8773
                                                                     // 8774
                                                                     // 8775
                                                                     // 8776
                                                                     // 8777
(function () {                                                       // 8778
                                                                     // 8779
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/email/template.email.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputEmail_bootstrap3");                                                                       // 2
Template["afInputEmail_bootstrap3"] = new Template("Template.afInputEmail_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "email",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8801
}).call(this);                                                       // 8802
                                                                     // 8803
                                                                     // 8804
                                                                     // 8805
                                                                     // 8806
                                                                     // 8807
                                                                     // 8808
(function () {                                                       // 8809
                                                                     // 8810
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/month/template.month.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputMonth_bootstrap3");                                                                       // 2
Template["afInputMonth_bootstrap3"] = new Template("Template.afInputMonth_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "month",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8832
}).call(this);                                                       // 8833
                                                                     // 8834
                                                                     // 8835
                                                                     // 8836
                                                                     // 8837
                                                                     // 8838
                                                                     // 8839
(function () {                                                       // 8840
                                                                     // 8841
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/number/template.number.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputNumber_bootstrap3");                                                                      // 2
Template["afInputNumber_bootstrap3"] = new Template("Template.afInputNumber_bootstrap3", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "number",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8863
}).call(this);                                                       // 8864
                                                                     // 8865
                                                                     // 8866
                                                                     // 8867
                                                                     // 8868
                                                                     // 8869
                                                                     // 8870
(function () {                                                       // 8871
                                                                     // 8872
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/password/template.password.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputPassword_bootstrap3");                                                                    // 2
Template["afInputPassword_bootstrap3"] = new Template("Template.afInputPassword_bootstrap3", (function() {             // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "password",                                                                                                  // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8894
}).call(this);                                                       // 8895
                                                                     // 8896
                                                                     // 8897
                                                                     // 8898
                                                                     // 8899
                                                                     // 8900
                                                                     // 8901
(function () {                                                       // 8902
                                                                     // 8903
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/radio/template.radio.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadio_bootstrap3");                                                                            // 2
Template["afRadio_bootstrap3"] = new Template("Template.afRadio_bootstrap3", (function() {                             // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": "radio"                                                                                                   // 6
  }, "\n    ", HTML.LABEL("\n      ", HTML.INPUT(HTML.Attrs({                                                          // 7
    type: "radio",                                                                                                     // 8
    value: function() {                                                                                                // 9
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 10
    }                                                                                                                  // 11
  }, function() {                                                                                                      // 12
    return Spacebars.attrMustache(view.lookup("atts"));                                                                // 13
  })), "\n      ", Blaze.View("lookup:afFieldLabelText", function() {                                                  // 14
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 15
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 16
    }));                                                                                                               // 17
  }), "\n    "), "\n  ");                                                                                              // 18
}));                                                                                                                   // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8931
}).call(this);                                                       // 8932
                                                                     // 8933
                                                                     // 8934
                                                                     // 8935
                                                                     // 8936
                                                                     // 8937
                                                                     // 8938
(function () {                                                       // 8939
                                                                     // 8940
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/radio/radio.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afRadio_bootstrap3.helpers({                                                                                  // 1
  atts: function selectedAttsAdjust() {                                                                                // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    if (this.selected) {                                                                                               // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    return atts;                                                                                                       // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8958
}).call(this);                                                       // 8959
                                                                     // 8960
                                                                     // 8961
                                                                     // 8962
                                                                     // 8963
                                                                     // 8964
                                                                     // 8965
(function () {                                                       // 8966
                                                                     // 8967
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/range/template.range.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputRange_bootstrap3");                                                                       // 2
Template["afInputRange_bootstrap3"] = new Template("Template.afInputRange_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "range",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "atts"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 8989
}).call(this);                                                       // 8990
                                                                     // 8991
                                                                     // 8992
                                                                     // 8993
                                                                     // 8994
                                                                     // 8995
                                                                     // 8996
(function () {                                                       // 8997
                                                                     // 8998
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/reset/template.reset.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputReset_bootstrap3");                                                                       // 2
Template["afInputReset_bootstrap3"] = new Template("Template.afInputReset_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "reset",                                                                                                     // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusBtnClass"));                                                    // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9020
}).call(this);                                                       // 9021
                                                                     // 9022
                                                                     // 9023
                                                                     // 9024
                                                                     // 9025
                                                                     // 9026
                                                                     // 9027
(function () {                                                       // 9028
                                                                     // 9029
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/search/template.search.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputSearch_bootstrap3");                                                                      // 2
Template["afInputSearch_bootstrap3"] = new Template("Template.afInputSearch_bootstrap3", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "search",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9051
}).call(this);                                                       // 9052
                                                                     // 9053
                                                                     // 9054
                                                                     // 9055
                                                                     // 9056
                                                                     // 9057
                                                                     // 9058
(function () {                                                       // 9059
                                                                     // 9060
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select/template.select.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afSelect_bootstrap3");                                                                           // 2
Template["afSelect_bootstrap3"] = new Template("Template.afSelect_bootstrap3", (function() {                           // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 6
  }), "\n    ", Blaze.Each(function() {                                                                                // 7
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", Blaze.If(function() {                                                                           // 10
      return Spacebars.call(Spacebars.dot(view.lookup("."), "optgroup"));                                              // 11
    }, function() {                                                                                                    // 12
      return [ "\n    ", HTML.OPTGROUP({                                                                               // 13
        label: function() {                                                                                            // 14
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "optgroup"));                                      // 15
        }                                                                                                              // 16
      }, "\n      ", Blaze.Each(function() {                                                                           // 17
        return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                               // 18
      }, function() {                                                                                                  // 19
        return [ "\n      ", HTML.OPTION(HTML.Attrs(function() {                                                       // 20
          return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                            // 21
        }), Blaze.View("lookup:..label", function() {                                                                  // 22
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                         // 23
        })), "\n      " ];                                                                                             // 24
      }), "\n    "), "\n    " ];                                                                                       // 25
    }, function() {                                                                                                    // 26
      return [ "\n    ", HTML.OPTION(HTML.Attrs(function() {                                                           // 27
        return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                              // 28
      }), Blaze.View("lookup:..label", function() {                                                                    // 29
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                           // 30
      })), "\n    " ];                                                                                                 // 31
    }), "\n    " ];                                                                                                    // 32
  }), "\n  ");                                                                                                         // 33
}));                                                                                                                   // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9103
}).call(this);                                                       // 9104
                                                                     // 9105
                                                                     // 9106
                                                                     // 9107
                                                                     // 9108
                                                                     // 9109
                                                                     // 9110
(function () {                                                       // 9111
                                                                     // 9112
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox/template.select-checkbox.js                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckboxGroup_bootstrap3");                                                                    // 2
Template["afCheckboxGroup_bootstrap3"] = new Template("Template.afCheckboxGroup_bootstrap3", (function() {             // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-checkbox-group"                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.DIV({                                                                                      // 12
      "class": "checkbox"                                                                                              // 13
    }, "\n      ", HTML.LABEL("\n        ", HTML.INPUT(HTML.Attrs({                                                    // 14
      type: "checkbox",                                                                                                // 15
      value: function() {                                                                                              // 16
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 17
      }                                                                                                                // 18
    }, function() {                                                                                                    // 19
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 20
    })), "\n        ", Blaze.View("lookup:..label", function() {                                                       // 21
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 22
    }), "\n      "), "\n    "), "\n    " ];                                                                            // 23
  }), "\n  ");                                                                                                         // 24
}));                                                                                                                   // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9146
}).call(this);                                                       // 9147
                                                                     // 9148
                                                                     // 9149
                                                                     // 9150
                                                                     // 9151
                                                                     // 9152
                                                                     // 9153
(function () {                                                       // 9154
                                                                     // 9155
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox/select-checkbox.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afCheckboxGroup_bootstrap3.helpers({                                                                          // 1
  atts: function selectedAttsAdjust() {                                                                                // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    if (this.selected) {                                                                                               // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    // remove data-schema-key attribute because we put it                                                              // 7
    // on the entire group                                                                                             // 8
    delete atts["data-schema-key"];                                                                                    // 9
    return atts;                                                                                                       // 10
  },                                                                                                                   // 11
  dsk: function dsk() {                                                                                                // 12
    return {                                                                                                           // 13
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9181
}).call(this);                                                       // 9182
                                                                     // 9183
                                                                     // 9184
                                                                     // 9185
                                                                     // 9186
                                                                     // 9187
                                                                     // 9188
(function () {                                                       // 9189
                                                                     // 9190
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckboxGroupInline_bootstrap3");                                                              // 2
Template["afCheckboxGroupInline_bootstrap3"] = new Template("Template.afCheckboxGroupInline_bootstrap3", (function() { // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-checkbox-group"                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.LABEL({                                                                                    // 12
      "class": "checkbox-inline fix-indent"                                                                            // 13
    }, "\n      ", HTML.INPUT(HTML.Attrs({                                                                             // 14
      type: "checkbox",                                                                                                // 15
      value: function() {                                                                                              // 16
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 17
      }                                                                                                                // 18
    }, function() {                                                                                                    // 19
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 20
    })), "\n      ", Blaze.View("lookup:..label", function() {                                                         // 21
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 22
    }), "\n    "), "\n    " ];                                                                                         // 23
  }), "\n  ");                                                                                                         // 24
}));                                                                                                                   // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9224
}).call(this);                                                       // 9225
                                                                     // 9226
                                                                     // 9227
                                                                     // 9228
                                                                     // 9229
                                                                     // 9230
                                                                     // 9231
(function () {                                                       // 9232
                                                                     // 9233
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/select-checkbox-inline.js           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afCheckboxGroupInline_bootstrap3.helpers({                                                                    // 1
  atts: function selectedAttsAdjust() {                                                                                // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    if (this.selected) {                                                                                               // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    // remove data-schema-key attribute because we put it                                                              // 7
    // on the entire group                                                                                             // 8
    delete atts["data-schema-key"];                                                                                    // 9
    return atts;                                                                                                       // 10
  },                                                                                                                   // 11
  dsk: function dsk() {                                                                                                // 12
    return {                                                                                                           // 13
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9259
}).call(this);                                                       // 9260
                                                                     // 9261
                                                                     // 9262
                                                                     // 9263
                                                                     // 9264
                                                                     // 9265
                                                                     // 9266
(function () {                                                       // 9267
                                                                     // 9268
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-multiple/template.select-multiple.js                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afSelectMultiple_bootstrap3");                                                                   // 2
Template["afSelectMultiple_bootstrap3"] = new Template("Template.afSelectMultiple_bootstrap3", (function() {           // 3
  var view = this;                                                                                                     // 4
  return HTML.SELECT(HTML.Attrs({                                                                                      // 5
    multiple: ""                                                                                                       // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", Blaze.If(function() {                                                                           // 12
      return Spacebars.call(Spacebars.dot(view.lookup("."), "optgroup"));                                              // 13
    }, function() {                                                                                                    // 14
      return [ "\n    ", HTML.OPTGROUP({                                                                               // 15
        label: function() {                                                                                            // 16
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "optgroup"));                                      // 17
        }                                                                                                              // 18
      }, "\n      ", Blaze.Each(function() {                                                                           // 19
        return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                               // 20
      }, function() {                                                                                                  // 21
        return [ "\n      ", HTML.OPTION(HTML.Attrs(function() {                                                       // 22
          return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                            // 23
        }), Blaze.View("lookup:..label", function() {                                                                  // 24
          return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                         // 25
        })), "\n      " ];                                                                                             // 26
      }), "\n    "), "\n    " ];                                                                                       // 27
    }, function() {                                                                                                    // 28
      return [ "\n    ", HTML.OPTION(HTML.Attrs(function() {                                                           // 29
        return Spacebars.attrMustache(view.lookup("afSelectOptionAtts"));                                              // 30
      }), Blaze.View("lookup:..label", function() {                                                                    // 31
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                           // 32
      })), "\n    " ];                                                                                                 // 33
    }), "\n    " ];                                                                                                    // 34
  }), "\n  ");                                                                                                         // 35
}));                                                                                                                   // 36
                                                                                                                       // 37
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9313
}).call(this);                                                       // 9314
                                                                     // 9315
                                                                     // 9316
                                                                     // 9317
                                                                     // 9318
                                                                     // 9319
                                                                     // 9320
(function () {                                                       // 9321
                                                                     // 9322
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio/template.select-radio.js                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadioGroup_bootstrap3");                                                                       // 2
Template["afRadioGroup_bootstrap3"] = new Template("Template.afRadioGroup_bootstrap3", (function() {                   // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-radio-group"                                                                                          // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.DIV({                                                                                      // 12
      "class": "radio"                                                                                                 // 13
    }, "\n      ", HTML.LABEL("\n        ", HTML.INPUT(HTML.Attrs({                                                    // 14
      type: "radio",                                                                                                   // 15
      value: function() {                                                                                              // 16
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 17
      }                                                                                                                // 18
    }, function() {                                                                                                    // 19
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 20
    })), "\n        ", Blaze.View("lookup:..label", function() {                                                       // 21
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 22
    }), "\n      "), "\n    "), "\n    " ];                                                                            // 23
  }), "\n  ");                                                                                                         // 24
}));                                                                                                                   // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9356
}).call(this);                                                       // 9357
                                                                     // 9358
                                                                     // 9359
                                                                     // 9360
                                                                     // 9361
                                                                     // 9362
                                                                     // 9363
(function () {                                                       // 9364
                                                                     // 9365
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio/select-radio.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afRadioGroup_bootstrap3.helpers({                                                                             // 1
  atts: function selectedAttsAdjust() {                                                                                // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    if (this.selected) {                                                                                               // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    // remove data-schema-key attribute because we put it                                                              // 7
    // on the entire group                                                                                             // 8
    delete atts["data-schema-key"];                                                                                    // 9
    return atts;                                                                                                       // 10
  },                                                                                                                   // 11
  dsk: function dsk() {                                                                                                // 12
    return {                                                                                                           // 13
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9391
}).call(this);                                                       // 9392
                                                                     // 9393
                                                                     // 9394
                                                                     // 9395
                                                                     // 9396
                                                                     // 9397
                                                                     // 9398
(function () {                                                       // 9399
                                                                     // 9400
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio-inline/template.select-radio-inline.js        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afRadioGroupInline_bootstrap3");                                                                 // 2
Template["afRadioGroupInline_bootstrap3"] = new Template("Template.afRadioGroupInline_bootstrap3", (function() {       // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": "af-radio-group"                                                                                          // 6
  }, function() {                                                                                                      // 7
    return Spacebars.attrMustache(view.lookup("dsk"));                                                                 // 8
  }), "\n    ", Blaze.Each(function() {                                                                                // 9
    return Spacebars.call(Spacebars.dot(view.lookup("."), "items"));                                                   // 10
  }, function() {                                                                                                      // 11
    return [ "\n    ", HTML.LABEL({                                                                                    // 12
      "class": "radio-inline fix-indent"                                                                               // 13
    }, "\n      ", HTML.INPUT(HTML.Attrs({                                                                             // 14
      type: "radio",                                                                                                   // 15
      value: function() {                                                                                              // 16
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                           // 17
      }                                                                                                                // 18
    }, function() {                                                                                                    // 19
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 20
    })), "\n      ", Blaze.View("lookup:..label", function() {                                                         // 21
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "label"));                                             // 22
    }), "\n    "), "\n    " ];                                                                                         // 23
  }), "\n  ");                                                                                                         // 24
}));                                                                                                                   // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9434
}).call(this);                                                       // 9435
                                                                     // 9436
                                                                     // 9437
                                                                     // 9438
                                                                     // 9439
                                                                     // 9440
                                                                     // 9441
(function () {                                                       // 9442
                                                                     // 9443
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/select-radio-inline/select-radio-inline.js                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afRadioGroupInline_bootstrap3.helpers({                                                                       // 1
  atts: function selectedAttsAdjust() {                                                                                // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    if (this.selected) {                                                                                               // 4
      atts.checked = "";                                                                                               // 5
    }                                                                                                                  // 6
    // remove data-schema-key attribute because we put it                                                              // 7
    // on the entire group                                                                                             // 8
    delete atts["data-schema-key"];                                                                                    // 9
    return atts;                                                                                                       // 10
  },                                                                                                                   // 11
  dsk: function dsk() {                                                                                                // 12
    return {                                                                                                           // 13
      "data-schema-key": this.atts["data-schema-key"]                                                                  // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9469
}).call(this);                                                       // 9470
                                                                     // 9471
                                                                     // 9472
                                                                     // 9473
                                                                     // 9474
                                                                     // 9475
                                                                     // 9476
(function () {                                                       // 9477
                                                                     // 9478
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/submit/template.submit.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputSubmit_bootstrap3");                                                                      // 2
Template["afInputSubmit_bootstrap3"] = new Template("Template.afInputSubmit_bootstrap3", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "submit",                                                                                                    // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusBtnClass"));                                                    // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9500
}).call(this);                                                       // 9501
                                                                     // 9502
                                                                     // 9503
                                                                     // 9504
                                                                     // 9505
                                                                     // 9506
                                                                     // 9507
(function () {                                                       // 9508
                                                                     // 9509
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/tel/template.tel.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputTel_bootstrap3");                                                                         // 2
Template["afInputTel_bootstrap3"] = new Template("Template.afInputTel_bootstrap3", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "tel",                                                                                                       // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9531
}).call(this);                                                       // 9532
                                                                     // 9533
                                                                     // 9534
                                                                     // 9535
                                                                     // 9536
                                                                     // 9537
                                                                     // 9538
(function () {                                                       // 9539
                                                                     // 9540
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/text/template.text.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputText_bootstrap3");                                                                        // 2
Template["afInputText_bootstrap3"] = new Template("Template.afInputText_bootstrap3", (function() {                     // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "text",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9562
}).call(this);                                                       // 9563
                                                                     // 9564
                                                                     // 9565
                                                                     // 9566
                                                                     // 9567
                                                                     // 9568
                                                                     // 9569
(function () {                                                       // 9570
                                                                     // 9571
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/textarea/template.textarea.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afTextarea_bootstrap3");                                                                         // 2
Template["afTextarea_bootstrap3"] = new Template("Template.afTextarea_bootstrap3", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 6
  }, {                                                                                                                 // 7
    value: function() {                                                                                                // 8
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 9
    }                                                                                                                  // 10
  }));                                                                                                                 // 11
}));                                                                                                                   // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9592
}).call(this);                                                       // 9593
                                                                     // 9594
                                                                     // 9595
                                                                     // 9596
                                                                     // 9597
                                                                     // 9598
                                                                     // 9599
(function () {                                                       // 9600
                                                                     // 9601
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/time/template.time.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputTime_bootstrap3");                                                                        // 2
Template["afInputTime_bootstrap3"] = new Template("Template.afInputTime_bootstrap3", (function() {                     // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "time",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9623
}).call(this);                                                       // 9624
                                                                     // 9625
                                                                     // 9626
                                                                     // 9627
                                                                     // 9628
                                                                     // 9629
                                                                     // 9630
(function () {                                                       // 9631
                                                                     // 9632
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/url/template.url.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputUrl_bootstrap3");                                                                         // 2
Template["afInputUrl_bootstrap3"] = new Template("Template.afInputUrl_bootstrap3", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "url",                                                                                                       // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9654
}).call(this);                                                       // 9655
                                                                     // 9656
                                                                     // 9657
                                                                     // 9658
                                                                     // 9659
                                                                     // 9660
                                                                     // 9661
(function () {                                                       // 9662
                                                                     // 9663
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3/inputTypes/week/template.week.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afInputWeek_bootstrap3");                                                                        // 2
Template["afInputWeek_bootstrap3"] = new Template("Template.afInputWeek_bootstrap3", (function() {                     // 3
  var view = this;                                                                                                     // 4
  return HTML.INPUT(HTML.Attrs({                                                                                       // 5
    type: "week",                                                                                                      // 6
    value: function() {                                                                                                // 7
      return Spacebars.mustache(Spacebars.dot(view.lookup("."), "value"));                                             // 8
    }                                                                                                                  // 9
  }, function() {                                                                                                      // 10
    return Spacebars.attrMustache(view.lookup("attsPlusFormControlClass"));                                            // 11
  }));                                                                                                                 // 12
}));                                                                                                                   // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9685
}).call(this);                                                       // 9686
                                                                     // 9687
                                                                     // 9688
                                                                     // 9689
                                                                     // 9690
                                                                     // 9691
                                                                     // 9692
(function () {                                                       // 9693
                                                                     // 9694
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/quickForm/template.quickForm.js                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm_bootstrap3-horizontal");                                                               // 2
Template["quickForm_bootstrap3-horizontal"] = new Template("Template.quickForm_bootstrap3-horizontal", (function() {   // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return Spacebars.call(view.lookup("qfAutoFormContext"));                                                           // 6
  }, function() {                                                                                                      // 7
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {                                             // 8
      return [ "\n\n    ", Spacebars.With(function() {                                                                 // 9
        return Spacebars.call(view.lookup("grouplessFields"));                                                         // 10
      }, function() {                                                                                                  // 11
        return [ "\n      ", Blaze._TemplateWith(function() {                                                          // 12
          return Spacebars.call(view.lookup("quickFieldsAtts"));                                                       // 13
        }, function() {                                                                                                // 14
          return Spacebars.include(view.lookupTemplate("afQuickFields"));                                              // 15
        }), "\n    " ];                                                                                                // 16
      }), "\n\n    ", Blaze.Each(function() {                                                                          // 17
        return Spacebars.call(view.lookup("fieldGroups"));                                                             // 18
      }, function() {                                                                                                  // 19
        return [ "\n      ", HTML.FIELDSET({                                                                           // 20
          "class": "af-fieldGroup"                                                                                     // 21
        }, "\n        ", Spacebars.With(function() {                                                                   // 22
          return Spacebars.call(view.lookup("fieldGroupLabel"));                                                       // 23
        }, function() {                                                                                                // 24
          return [ "\n          ", HTML.LEGEND({                                                                       // 25
            "class": "af-fieldGroup-heading"                                                                           // 26
          }, Blaze.View("lookup:.", function() {                                                                       // 27
            return Spacebars.mustache(view.lookup("."));                                                               // 28
          })), "\n        " ];                                                                                         // 29
        }), "\n        ", Blaze._TemplateWith(function() {                                                             // 30
          return Spacebars.call(view.lookup("quickFieldsAtts"));                                                       // 31
        }, function() {                                                                                                // 32
          return Spacebars.include(view.lookupTemplate("afQuickFields"));                                              // 33
        }), "\n      "), "\n    " ];                                                                                   // 34
      }), "\n\n    ", Blaze.If(function() {                                                                            // 35
        return Spacebars.call(view.lookup("qfShouldRenderButton"));                                                    // 36
      }, function() {                                                                                                  // 37
        return [ "\n    ", HTML.DIV({                                                                                  // 38
          "class": "form-group"                                                                                        // 39
        }, "\n      ", HTML.DIV({                                                                                      // 40
          "class": function() {                                                                                        // 41
            return Spacebars.mustache(view.lookup("labelClass"));                                                      // 42
          }                                                                                                            // 43
        }), "\n      ", HTML.DIV({                                                                                     // 44
          "class": function() {                                                                                        // 45
            return Spacebars.mustache(view.lookup("inputClass"));                                                      // 46
          }                                                                                                            // 47
        }, "\n        ", HTML.BUTTON(HTML.Attrs({                                                                      // 48
          type: "submit"                                                                                               // 49
        }, function() {                                                                                                // 50
          return Spacebars.attrMustache(view.lookup("submitButtonAtts"));                                              // 51
        }), "\n          ", Spacebars.With(function() {                                                                // 52
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "buttonContent"));                            // 53
        }, function() {                                                                                                // 54
          return [ "\n          ", Blaze.View("lookup:.", function() {                                                 // 55
            return Spacebars.mustache(view.lookup("."));                                                               // 56
          }), "\n          " ];                                                                                        // 57
        }, function() {                                                                                                // 58
          return "\n          Submit\n          ";                                                                     // 59
        }), "\n        "), "\n      "), "\n    "), "\n    " ];                                                         // 60
      }), "\n\n  " ];                                                                                                  // 61
    });                                                                                                                // 62
  });                                                                                                                  // 63
}));                                                                                                                   // 64
                                                                                                                       // 65
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9767
}).call(this);                                                       // 9768
                                                                     // 9769
                                                                     // 9770
                                                                     // 9771
                                                                     // 9772
                                                                     // 9773
                                                                     // 9774
(function () {                                                       // 9775
                                                                     // 9776
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/quickForm/quickForm.js                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template['quickForm_bootstrap3-horizontal'].helpers({                                                                  // 1
  inputClass: function () {                                                                                            // 2
    return this.atts["input-col-class"];                                                                               // 3
  },                                                                                                                   // 4
  labelClass: function () {                                                                                            // 5
    return this.atts["label-class"];                                                                                   // 6
  },                                                                                                                   // 7
  fieldGroupLabel: function () {                                                                                       // 8
    var name = this.name;                                                                                              // 9
                                                                                                                       // 10
    // if field group name is of the form XY_abcde where "XY" is a number, remove prefix                               // 11
    if (!isNaN(parseInt(name.substr(0,2), 10)) && name.charAt(2) === "_") {                                            // 12
      name = name.substr(3);                                                                                           // 13
    }                                                                                                                  // 14
                                                                                                                       // 15
    // if SimpleSchema.defaultLabel is defined, use it                                                                 // 16
    if (typeof SimpleSchema.defaultLabel === "function") {                                                             // 17
      return SimpleSchema.defaultLabel(name);                                                                          // 18
    } else {                                                                                                           // 19
      // else, just capitalise name                                                                                    // 20
      return name.charAt(0).toUpperCase() + name.slice(1);                                                             // 21
    }                                                                                                                  // 22
  },                                                                                                                   // 23
  quickFieldsAtts: function () {                                                                                       // 24
    // These are the quickForm attributes that we want to forward to                                                   // 25
    // the afQuickFields component.                                                                                    // 26
    return _.pick(this.atts, 'fields', 'id-prefix', 'input-col-class', 'label-class');                                 // 27
  },                                                                                                                   // 28
  submitButtonAtts: function () {                                                                                      // 29
    var qfAtts = this.atts;                                                                                            // 30
    var atts = {};                                                                                                     // 31
    if (typeof qfAtts.buttonClasses === "string") {                                                                    // 32
      atts['class'] = qfAtts.buttonClasses;                                                                            // 33
    } else {                                                                                                           // 34
      atts['class'] = 'btn btn-primary';                                                                               // 35
    }                                                                                                                  // 36
    return atts;                                                                                                       // 37
  },                                                                                                                   // 38
  qfAutoFormContext: function () {                                                                                     // 39
    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 40
    ctx = AutoForm.Utility.addClass(ctx, 'form-horizontal');                                                           // 41
                                                                                                                       // 42
    // input-col-class and label-class attributes are unique to this template so they will                             // 43
    // not have been removed by AutoForm core. We remove them from the autoForm context                                // 44
    // because they are attributes supported only by quickFields, quickField,                                          // 45
    // afObjectField, afArrayField, and afFormGroup.                                                                   // 46
    delete ctx['input-col-class'];                                                                                     // 47
    delete ctx['label-class'];                                                                                         // 48
                                                                                                                       // 49
    return ctx;                                                                                                        // 50
  }                                                                                                                    // 51
});                                                                                                                    // 52
                                                                                                                       // 53
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9837
}).call(this);                                                       // 9838
                                                                     // 9839
                                                                     // 9840
                                                                     // 9841
                                                                     // 9842
                                                                     // 9843
                                                                     // 9844
(function () {                                                       // 9845
                                                                     // 9846
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afArrayField/template.afArrayField.js           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afArrayField_bootstrap3-horizontal");                                                            // 2
Template["afArrayField_bootstrap3-horizontal"] = new Template("Template.afArrayField_bootstrap3-horizontal", (function() {
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": function() {                                                                                              // 6
      return [ "form-group", Blaze.If(function() {                                                                     // 7
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 8
          name: Spacebars.dot(view.lookup("."), "atts", "name")                                                        // 9
        }));                                                                                                           // 10
      }, function() {                                                                                                  // 11
        return " has-error";                                                                                           // 12
      }) ];                                                                                                            // 13
    }                                                                                                                  // 14
  }, "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                                      // 15
    return Spacebars.attrMustache(view.lookup("afFieldLabelAtts"));                                                    // 16
  }), Blaze.View("lookup:afFieldLabelText", function() {                                                               // 17
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 18
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 19
    }));                                                                                                               // 20
  })), "\n    ", HTML.DIV({                                                                                            // 21
    "class": function() {                                                                                              // 22
      return Spacebars.mustache(view.lookup("rightColumnClass"));                                                      // 23
    }                                                                                                                  // 24
  }, "\n      ", HTML.DIV({                                                                                            // 25
    "class": "panel panel-default autoform-padding-fix"                                                                // 26
  }, "\n        ", Blaze.If(function() {                                                                               // 27
    return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                      // 28
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 29
    }));                                                                                                               // 30
  }, function() {                                                                                                      // 31
    return [ "\n        ", HTML.DIV({                                                                                  // 32
      "class": "panel-body has-error"                                                                                  // 33
    }, "\n          ", HTML.SPAN({                                                                                     // 34
      "class": "help-block"                                                                                            // 35
    }, Blaze.View("lookup:afFieldMessage", function() {                                                                // 36
      return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                        // 37
        name: Spacebars.dot(view.lookup("."), "atts", "name")                                                          // 38
      })));                                                                                                            // 39
    })), "\n        "), "\n        " ];                                                                                // 40
  }), "\n        ", HTML.UL({                                                                                          // 41
    "class": "list-group"                                                                                              // 42
  }, "\n          ", Blaze._TemplateWith(function() {                                                                  // 43
    return {                                                                                                           // 44
      name: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "name")),                                           // 45
      minCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "minCount")),                                   // 46
      maxCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "maxCount"))                                    // 47
    };                                                                                                                 // 48
  }, function() {                                                                                                      // 49
    return Spacebars.include(view.lookupTemplate("afEachArrayItem"), function() {                                      // 50
      return [ "\n          ", HTML.LI({                                                                               // 51
        "class": "list-group-item autoform-array-item"                                                                 // 52
      }, "\n            ", HTML.DIV("\n              ", HTML.DIV({                                                     // 53
        "class": "autoform-remove-item-wrap"                                                                           // 54
      }, "\n                ", Blaze.If(function() {                                                                   // 55
        return Spacebars.dataMustache(view.lookup("afArrayFieldHasMoreThanMinimum"), Spacebars.kw({                    // 56
          name: Spacebars.dot(view.lookup(".."), "atts", "name"),                                                      // 57
          minCount: Spacebars.dot(view.lookup(".."), "atts", "minCount"),                                              // 58
          maxCount: Spacebars.dot(view.lookup(".."), "atts", "maxCount")                                               // 59
        }));                                                                                                           // 60
      }, function() {                                                                                                  // 61
        return [ "\n                ", HTML.BUTTON({                                                                   // 62
          type: "button",                                                                                              // 63
          "class": "btn btn-primary autoform-remove-item"                                                              // 64
        }, HTML.SPAN({                                                                                                 // 65
          "class": "glyphicon glyphicon-minus"                                                                         // 66
        })), "\n                " ];                                                                                   // 67
      }), "\n              "), "\n              ", HTML.DIV({                                                          // 68
        "class": "autoform-array-item-body"                                                                            // 69
      }, "\n                ", Blaze._TemplateWith(function() {                                                        // 70
        return {                                                                                                       // 71
          name: Spacebars.call(Spacebars.dot(view.lookup("."), "name")),                                               // 72
          label: Spacebars.call(false),                                                                                // 73
          options: Spacebars.call(view.lookup("afOptionsFromSchema"))                                                  // 74
        };                                                                                                             // 75
      }, function() {                                                                                                  // 76
        return Spacebars.include(view.lookupTemplate("afQuickField"));                                                 // 77
      }), "\n              "), "\n            "), "\n          "), "\n          " ];                                   // 78
    });                                                                                                                // 79
  }), "\n          ", Blaze.If(function() {                                                                            // 80
    return Spacebars.dataMustache(view.lookup("afArrayFieldHasLessThanMaximum"), Spacebars.kw({                        // 81
      name: Spacebars.dot(view.lookup("."), "atts", "name"),                                                           // 82
      minCount: Spacebars.dot(view.lookup("."), "atts", "minCount"),                                                   // 83
      maxCount: Spacebars.dot(view.lookup("."), "atts", "maxCount")                                                    // 84
    }));                                                                                                               // 85
  }, function() {                                                                                                      // 86
    return [ "\n          ", HTML.LI({                                                                                 // 87
      "class": "list-group-item"                                                                                       // 88
    }, "\n            ", HTML.BUTTON({                                                                                 // 89
      type: "button",                                                                                                  // 90
      "class": "btn btn-primary autoform-add-item",                                                                    // 91
      "data-autoform-field": function() {                                                                              // 92
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "name"));                                    // 93
      },                                                                                                               // 94
      "data-autoform-mincount": function() {                                                                           // 95
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "minCount"));                                // 96
      },                                                                                                               // 97
      "data-autoform-maxcount": function() {                                                                           // 98
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "maxCount"));                                // 99
      }                                                                                                                // 100
    }, HTML.SPAN({                                                                                                     // 101
      "class": "glyphicon glyphicon-plus"                                                                              // 102
    })), "\n          "), "\n          " ];                                                                            // 103
  }), "\n        "), "\n      "), "\n    "), "\n  ");                                                                  // 104
}));                                                                                                                   // 105
                                                                                                                       // 106
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9960
}).call(this);                                                       // 9961
                                                                     // 9962
                                                                     // 9963
                                                                     // 9964
                                                                     // 9965
                                                                     // 9966
                                                                     // 9967
(function () {                                                       // 9968
                                                                     // 9969
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afArrayField/afArrayField.js                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template["afArrayField_bootstrap3-horizontal"].helpers({                                                               // 1
  rightColumnClass: function () {                                                                                      // 2
    var atts = this.atts || {};                                                                                        // 3
    return atts['input-col-class'] || "";                                                                              // 4
  },                                                                                                                   // 5
  afFieldLabelAtts: function () {                                                                                      // 6
    // Use only atts beginning with label-                                                                             // 7
    var labelAtts = {};                                                                                                // 8
    _.each(this.atts, function (val, key) {                                                                            // 9
      if (key.indexOf("label-") === 0) {                                                                               // 10
        labelAtts[key.substring(6)] = val;                                                                             // 11
      }                                                                                                                // 12
    });                                                                                                                // 13
    // Add bootstrap class                                                                                             // 14
    labelAtts = AutoForm.Utility.addClass(labelAtts, "control-label");                                                 // 15
    return labelAtts;                                                                                                  // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 9996
}).call(this);                                                       // 9997
                                                                     // 9998
                                                                     // 9999
                                                                     // 10000
                                                                     // 10001
                                                                     // 10002
                                                                     // 10003
(function () {                                                       // 10004
                                                                     // 10005
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afFormGroup/template.afFormGroup.js             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afFormGroup_bootstrap3-horizontal");                                                             // 2
Template["afFormGroup_bootstrap3-horizontal"] = new Template("Template.afFormGroup_bootstrap3-horizontal", (function() {
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": function() {                                                                                              // 6
      return [ "form-group ", Blaze.If(function() {                                                                    // 7
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 8
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 9
        }));                                                                                                           // 10
      }, function() {                                                                                                  // 11
        return "has-error";                                                                                            // 12
      }), " ", Spacebars.mustache(view.lookup("afFormGroupClass")) ];                                                  // 13
    },                                                                                                                 // 14
    "data-required": function() {                                                                                      // 15
      return Spacebars.mustache(view.lookup("required"));                                                              // 16
    }                                                                                                                  // 17
  }, function() {                                                                                                      // 18
    return Spacebars.attrMustache(view.lookup("afFormGroupAtts"));                                                     // 19
  }), "\n    ", Blaze.If(function() {                                                                                  // 20
    return Spacebars.call(view.lookup("skipLabel"));                                                                   // 21
  }, function() {                                                                                                      // 22
    return [ "\n    \n    ", HTML.LABEL(HTML.Attrs(function() {                                                        // 23
      return Spacebars.attrMustache(view.lookup("afFieldLabelAtts"));                                                  // 24
    })), "\n    " ];                                                                                                   // 25
  }, function() {                                                                                                      // 26
    return [ "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                              // 27
      return Spacebars.attrMustache(view.lookup("afFieldLabelAtts"));                                                  // 28
    }), Blaze.If(function() {                                                                                          // 29
      return Spacebars.call(Spacebars.dot(view.lookup("."), "labelText"));                                             // 30
    }, function() {                                                                                                    // 31
      return Blaze.View("lookup:..labelText", function() {                                                             // 32
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "labelText"));                                       // 33
      });                                                                                                              // 34
    }, function() {                                                                                                    // 35
      return Blaze.View("lookup:afFieldLabelText", function() {                                                        // 36
        return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 37
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 38
        }));                                                                                                           // 39
      });                                                                                                              // 40
    })), "\n    " ];                                                                                                   // 41
  }), "\n    ", HTML.DIV({                                                                                             // 42
    "class": function() {                                                                                              // 43
      return Spacebars.mustache(view.lookup("rightColumnClass"));                                                      // 44
    }                                                                                                                  // 45
  }, "\n      ", Blaze._TemplateWith(function() {                                                                      // 46
    return Spacebars.call(view.lookup("afFieldInputAtts"));                                                            // 47
  }, function() {                                                                                                      // 48
    return Spacebars.include(view.lookupTemplate("afFieldInput"));                                                     // 49
  }), "\n      ", HTML.SPAN({                                                                                          // 50
    "class": "help-block"                                                                                              // 51
  }, Blaze.View("lookup:afFieldMessage", function() {                                                                  // 52
    return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                          // 53
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 54
    })));                                                                                                              // 55
  })), "\n    "), "\n  ");                                                                                             // 56
}));                                                                                                                   // 57
                                                                                                                       // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10071
}).call(this);                                                       // 10072
                                                                     // 10073
                                                                     // 10074
                                                                     // 10075
                                                                     // 10076
                                                                     // 10077
                                                                     // 10078
(function () {                                                       // 10079
                                                                     // 10080
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afFormGroup/afFormGroup.js                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template["afFormGroup_bootstrap3-horizontal"].helpers({                                                                // 1
  afFieldInputAtts: function () {                                                                                      // 2
    var atts = _.omit(this.afFieldInputAtts || {}, 'input-col-class');                                                 // 3
    // We have a special template for check boxes, but otherwise we                                                    // 4
    // want to use the same as those defined for bootstrap3 template.                                                  // 5
    if (AutoForm.getInputType(this.afFieldInputAtts) === "boolean-checkbox") {                                         // 6
      atts.template = "bootstrap3-horizontal";                                                                         // 7
    } else {                                                                                                           // 8
      atts.template = "bootstrap3";                                                                                    // 9
    }                                                                                                                  // 10
    return atts;                                                                                                       // 11
  },                                                                                                                   // 12
  afFieldLabelAtts: function () {                                                                                      // 13
    var atts = _.clone(this.afFieldLabelAtts || {});                                                                   // 14
    // Add bootstrap class                                                                                             // 15
    atts = AutoForm.Utility.addClass(atts, "control-label");                                                           // 16
    return atts;                                                                                                       // 17
  },                                                                                                                   // 18
  rightColumnClass: function () {                                                                                      // 19
    var atts = this.afFieldInputAtts || {};                                                                            // 20
    return atts['input-col-class'] || "";                                                                              // 21
  },                                                                                                                   // 22
  skipLabel: function () {                                                                                             // 23
    var self = this;                                                                                                   // 24
                                                                                                                       // 25
    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 26
    return (self.skipLabel || (type === "boolean-checkbox" && !self.afFieldInputAtts.leftLabel));                      // 27
  }                                                                                                                    // 28
});                                                                                                                    // 29
                                                                                                                       // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10118
}).call(this);                                                       // 10119
                                                                     // 10120
                                                                     // 10121
                                                                     // 10122
                                                                     // 10123
                                                                     // 10124
                                                                     // 10125
(function () {                                                       // 10126
                                                                     // 10127
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afObjectField/template.afObjectField.js         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afObjectField_bootstrap3-horizontal");                                                           // 2
Template["afObjectField_bootstrap3-horizontal"] = new Template("Template.afObjectField_bootstrap3-horizontal", (function() {
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": function() {                                                                                              // 6
      return [ "form-group ", Blaze.If(function() {                                                                    // 7
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 8
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 9
        }));                                                                                                           // 10
      }, function() {                                                                                                  // 11
        return "has-error";                                                                                            // 12
      }) ];                                                                                                            // 13
    }                                                                                                                  // 14
  }, "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                                      // 15
    return Spacebars.attrMustache(view.lookup("afFieldLabelAtts"));                                                    // 16
  }), Blaze.View("lookup:afFieldLabelText", function() {                                                               // 17
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 18
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 19
    }));                                                                                                               // 20
  })), "\n    ", HTML.DIV({                                                                                            // 21
    "class": function() {                                                                                              // 22
      return Spacebars.mustache(view.lookup("rightColumnClass"));                                                      // 23
    }                                                                                                                  // 24
  }, "\n      ", HTML.DIV({                                                                                            // 25
    "class": function() {                                                                                              // 26
      return [ "panel panel-default autoform-padding-fix ", Spacebars.mustache(view.lookup("panelClass")) ];           // 27
    }                                                                                                                  // 28
  }, "\n        ", HTML.DIV({                                                                                          // 29
    "class": function() {                                                                                              // 30
      return [ "panel-body ", Spacebars.mustache(view.lookup("bodyClass")) ];                                          // 31
    }                                                                                                                  // 32
  }, "\n          ", Blaze._TemplateWith(function() {                                                                  // 33
    return Spacebars.call(view.lookup("quickFieldsAtts"));                                                             // 34
  }, function() {                                                                                                      // 35
    return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                    // 36
  }), "\n        "), "\n      "), "\n    "), "\n  ");                                                                  // 37
}));                                                                                                                   // 38
                                                                                                                       // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10174
}).call(this);                                                       // 10175
                                                                     // 10176
                                                                     // 10177
                                                                     // 10178
                                                                     // 10179
                                                                     // 10180
                                                                     // 10181
(function () {                                                       // 10182
                                                                     // 10183
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/components/afObjectField/afObjectField.js                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template["afObjectField_bootstrap3-horizontal"].helpers({                                                              // 3
  rightColumnClass: function () {                                                                                      // 4
    return this['input-col-class'] || "";                                                                              // 5
  },                                                                                                                   // 6
  afFieldLabelAtts: function () {                                                                                      // 7
    // Use only atts beginning with label-                                                                             // 8
    var labelAtts = {};                                                                                                // 9
    _.each(this, function (val, key) {                                                                                 // 10
      if (key.indexOf("label-") === 0) {                                                                               // 11
        labelAtts[key.substring(6)] = val;                                                                             // 12
      }                                                                                                                // 13
    });                                                                                                                // 14
    // Add bootstrap class                                                                                             // 15
    labelAtts = AutoForm.Utility.addClass(labelAtts, "control-label");                                                 // 16
    return labelAtts;                                                                                                  // 17
  },                                                                                                                   // 18
  quickFieldsAtts: function () {                                                                                       // 19
    var atts = _.pick(this, 'name', 'id-prefix');                                                                      // 20
    // We want to default to using bootstrap3 template below this point                                                // 21
    // because we don't want horizontal within horizontal                                                              // 22
    atts.template = 'bootstrap3';                                                                                      // 23
    return atts;                                                                                                       // 24
  }                                                                                                                    // 25
});                                                                                                                    // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10218
}).call(this);                                                       // 10219
                                                                     // 10220
                                                                     // 10221
                                                                     // 10222
                                                                     // 10223
                                                                     // 10224
                                                                     // 10225
(function () {                                                       // 10226
                                                                     // 10227
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/template.boolean-checkbox.js   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afCheckbox_bootstrap3-horizontal");                                                              // 2
Template["afCheckbox_bootstrap3-horizontal"] = new Template("Template.afCheckbox_bootstrap3-horizontal", (function() { // 3
  var view = this;                                                                                                     // 4
  return Blaze.If(function() {                                                                                         // 5
    return Spacebars.call(view.lookup("useLeftLabel"));                                                                // 6
  }, function() {                                                                                                      // 7
    return [ "\n  \n  ", HTML.DIV({                                                                                    // 8
      "class": "checkbox"                                                                                              // 9
    }, "\n    ", HTML.INPUT(HTML.Attrs({                                                                               // 10
      type: "checkbox",                                                                                                // 11
      value: "true"                                                                                                    // 12
    }, function() {                                                                                                    // 13
      return Spacebars.attrMustache(view.lookup("attsPlusSpecialClass"));                                              // 14
    })), "\n  "), "\n  " ];                                                                                            // 15
  }, function() {                                                                                                      // 16
    return [ "\n  ", HTML.DIV({                                                                                        // 17
      "class": "checkbox"                                                                                              // 18
    }, "\n    ", HTML.LABEL("\n      ", HTML.INPUT(HTML.Attrs({                                                        // 19
      type: "checkbox",                                                                                                // 20
      value: "true"                                                                                                    // 21
    }, function() {                                                                                                    // 22
      return Spacebars.attrMustache(view.lookup("atts"));                                                              // 23
    })), "\n      ", Blaze.View("lookup:afFieldLabelText", function() {                                                // 24
      return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                        // 25
        name: Spacebars.dot(view.lookup("."), "name")                                                                  // 26
      }));                                                                                                             // 27
    }), "\n    "), "\n  "), "\n  " ];                                                                                  // 28
  });                                                                                                                  // 29
}));                                                                                                                   // 30
                                                                                                                       // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10266
}).call(this);                                                       // 10267
                                                                     // 10268
                                                                     // 10269
                                                                     // 10270
                                                                     // 10271
                                                                     // 10272
                                                                     // 10273
(function () {                                                       // 10274
                                                                     // 10275
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/boolean-checkbox.js            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template["afCheckbox_bootstrap3-horizontal"].helpers({                                                                 // 1
  attsPlusSpecialClass: function () {                                                                                  // 2
    var atts = _.clone(this.atts);                                                                                     // 3
    atts = AutoForm.Utility.addClass(atts, "autoform-checkbox-margin-fix");                                            // 4
    return atts;                                                                                                       // 5
  },                                                                                                                   // 6
  useLeftLabel: function () {                                                                                          // 7
    return this.atts.leftLabel;                                                                                        // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10294
}).call(this);                                                       // 10295
                                                                     // 10296
                                                                     // 10297
                                                                     // 10298
                                                                     // 10299
                                                                     // 10300
                                                                     // 10301
(function () {                                                       // 10302
                                                                     // 10303
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-inline/template.bootstrap3-inline.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm_bootstrap3-inline");                                                                   // 2
Template["quickForm_bootstrap3-inline"] = new Template("Template.quickForm_bootstrap3-inline", (function() {           // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return Spacebars.call(view.lookup("qfAutoFormContext"));                                                           // 6
  }, function() {                                                                                                      // 7
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {                                             // 8
      return [ "\n    ", Blaze._TemplateWith(function() {                                                              // 9
        return Spacebars.call(view.lookup("quickFieldsAtts"));                                                         // 10
      }, function() {                                                                                                  // 11
        return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                // 12
      }), "\n    ", Blaze.If(function() {                                                                              // 13
        return Spacebars.call(view.lookup("qfShouldRenderButton"));                                                    // 14
      }, function() {                                                                                                  // 15
        return [ "\n    ", HTML.BUTTON(HTML.Attrs({                                                                    // 16
          type: "submit"                                                                                               // 17
        }, function() {                                                                                                // 18
          return Spacebars.attrMustache(view.lookup("submitButtonAtts"));                                              // 19
        }), "\n    ", Spacebars.With(function() {                                                                      // 20
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "buttonContent"));                            // 21
        }, function() {                                                                                                // 22
          return [ "\n    ", Blaze.View("lookup:.", function() {                                                       // 23
            return Spacebars.mustache(view.lookup("."));                                                               // 24
          }), "\n    " ];                                                                                              // 25
        }, function() {                                                                                                // 26
          return "\n    Submit\n    ";                                                                                 // 27
        }), "\n    "), "\n    " ];                                                                                     // 28
      }), "\n  " ];                                                                                                    // 29
    });                                                                                                                // 30
  });                                                                                                                  // 31
}));                                                                                                                   // 32
                                                                                                                       // 33
Template.__checkName("afFormGroup_bootstrap3-inline");                                                                 // 34
Template["afFormGroup_bootstrap3-inline"] = new Template("Template.afFormGroup_bootstrap3-inline", (function() {       // 35
  var view = this;                                                                                                     // 36
  return HTML.DIV(HTML.Attrs({                                                                                         // 37
    "class": function() {                                                                                              // 38
      return [ "form-group ", Blaze.If(function() {                                                                    // 39
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 40
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 41
        }));                                                                                                           // 42
      }, function() {                                                                                                  // 43
        return "has-error";                                                                                            // 44
      }), " ", Spacebars.mustache(view.lookup("afFormGroupClass")) ];                                                  // 45
    },                                                                                                                 // 46
    "data-required": function() {                                                                                      // 47
      return Spacebars.mustache(view.lookup("required"));                                                              // 48
    }                                                                                                                  // 49
  }, function() {                                                                                                      // 50
    return Spacebars.attrMustache(view.lookup("afFormGroupAtts"));                                                     // 51
  }), "\n    ", Blaze.Unless(function() {                                                                              // 52
    return Spacebars.call(view.lookup("skipLabel"));                                                                   // 53
  }, function() {                                                                                                      // 54
    return [ "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                              // 55
      return Spacebars.attrMustache(view.lookup("afFieldLabelAtts"));                                                  // 56
    }), Blaze.If(function() {                                                                                          // 57
      return Spacebars.call(Spacebars.dot(view.lookup("."), "labelText"));                                             // 58
    }, function() {                                                                                                    // 59
      return Blaze.View("lookup:..labelText", function() {                                                             // 60
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "labelText"));                                       // 61
      });                                                                                                              // 62
    }, function() {                                                                                                    // 63
      return Blaze.View("lookup:afFieldLabelText", function() {                                                        // 64
        return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 65
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 66
        }));                                                                                                           // 67
      });                                                                                                              // 68
    })), "\n    " ];                                                                                                   // 69
  }), "\n    ", Blaze._TemplateWith(function() {                                                                       // 70
    return Spacebars.call(view.lookup("afFieldInputAtts"));                                                            // 71
  }, function() {                                                                                                      // 72
    return Spacebars.include(view.lookupTemplate("afFieldInput"));                                                     // 73
  }), "\n    ", HTML.SPAN({                                                                                            // 74
    "class": "help-block"                                                                                              // 75
  }, Blaze.View("lookup:afFieldMessage", function() {                                                                  // 76
    return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                          // 77
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 78
    })));                                                                                                              // 79
  })), "\n  ");                                                                                                        // 80
}));                                                                                                                   // 81
                                                                                                                       // 82
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10393
}).call(this);                                                       // 10394
                                                                     // 10395
                                                                     // 10396
                                                                     // 10397
                                                                     // 10398
                                                                     // 10399
                                                                     // 10400
(function () {                                                       // 10401
                                                                     // 10402
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/bootstrap3-inline/bootstrap3-inline.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global AutoForm */                                                                                                  // 1
                                                                                                                       // 2
Template['quickForm_bootstrap3-inline'].helpers({                                                                      // 3
  submitButtonAtts: function () {                                                                                      // 4
    var qfAtts = this.atts;                                                                                            // 5
    var atts = {};                                                                                                     // 6
    if (typeof qfAtts.buttonClasses === 'string') {                                                                    // 7
      atts['class'] = qfAtts.buttonClasses;                                                                            // 8
    } else {                                                                                                           // 9
      atts['class'] = 'btn btn-primary autoform-inline-align';                                                         // 10
    }                                                                                                                  // 11
    return atts;                                                                                                       // 12
  },                                                                                                                   // 13
  qfAutoFormContext: function () {                                                                                     // 14
    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 15
    ctx = AutoForm.Utility.addClass(ctx, 'form-inline');                                                               // 16
                                                                                                                       // 17
    // label-class attribute is unique to this template so it will                                                     // 18
    // not have been removed by AutoForm core. We remove it from the autoForm context                                  // 19
    // because it is an attribute supported only by quickFields, quickField,                                           // 20
    // afObjectField, afArrayField, and afFormGroup.                                                                   // 21
    delete ctx['label-class'];                                                                                         // 22
                                                                                                                       // 23
    return ctx;                                                                                                        // 24
  },                                                                                                                   // 25
  quickFieldsAtts: function () {                                                                                       // 26
    // These are the quickForm attributes that we want to forward to                                                   // 27
    // the afQuickFields component.                                                                                    // 28
    return _.pick(this.atts, 'id-prefix', 'label-class');                                                              // 29
  }                                                                                                                    // 30
});                                                                                                                    // 31
                                                                                                                       // 32
Template['afFormGroup_bootstrap3-inline'].helpers({                                                                    // 33
  afFieldInputAtts: function () {                                                                                      // 34
    var atts = _.clone(this.afFieldInputAtts || {});                                                                   // 35
    // Use the same templates as those defined for bootstrap3 template.                                                // 36
    atts.template = 'bootstrap3';                                                                                      // 37
    return atts;                                                                                                       // 38
  }                                                                                                                    // 39
});                                                                                                                    // 40
                                                                                                                       // 41
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10451
}).call(this);                                                       // 10452
                                                                     // 10453
                                                                     // 10454
                                                                     // 10455
                                                                     // 10456
                                                                     // 10457
                                                                     // 10458
(function () {                                                       // 10459
                                                                     // 10460
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/quickForm/template.quickForm.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm_plain");                                                                               // 2
Template["quickForm_plain"] = new Template("Template.quickForm_plain", (function() {                                   // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return Spacebars.call(view.lookup("qfAutoFormContext"));                                                           // 6
  }, function() {                                                                                                      // 7
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {                                             // 8
      return [ "\n\n    ", Spacebars.With(function() {                                                                 // 9
        return Spacebars.call(view.lookup("grouplessFields"));                                                         // 10
      }, function() {                                                                                                  // 11
        return [ "\n      ", Blaze._TemplateWith(function() {                                                          // 12
          return Spacebars.call(view.lookup("quickFieldsAtts"));                                                       // 13
        }, function() {                                                                                                // 14
          return Spacebars.include(view.lookupTemplate("afQuickFields"));                                              // 15
        }), "\n    " ];                                                                                                // 16
      }), "\n\n    ", Blaze.Each(function() {                                                                          // 17
        return Spacebars.call(view.lookup("fieldGroups"));                                                             // 18
      }, function() {                                                                                                  // 19
        return [ "\n      ", HTML.FIELDSET({                                                                           // 20
          "class": "af-fieldGroup"                                                                                     // 21
        }, "\n        ", Spacebars.With(function() {                                                                   // 22
          return Spacebars.call(view.lookup("fieldGroupLabel"));                                                       // 23
        }, function() {                                                                                                // 24
          return [ "\n          ", HTML.LEGEND({                                                                       // 25
            "class": "af-fieldGroup-heading"                                                                           // 26
          }, Blaze.View("lookup:.", function() {                                                                       // 27
            return Spacebars.mustache(view.lookup("."));                                                               // 28
          })), "\n        " ];                                                                                         // 29
        }), "\n        ", Blaze._TemplateWith(function() {                                                             // 30
          return Spacebars.call(view.lookup("quickFieldsAtts"));                                                       // 31
        }, function() {                                                                                                // 32
          return Spacebars.include(view.lookupTemplate("afQuickFields"));                                              // 33
        }), "\n      "), "\n    " ];                                                                                   // 34
      }), "\n\n    ", Blaze.If(function() {                                                                            // 35
        return Spacebars.call(view.lookup("qfShouldRenderButton"));                                                    // 36
      }, function() {                                                                                                  // 37
        return [ "\n    ", HTML.DIV("\n      ", HTML.BUTTON(HTML.Attrs({                                               // 38
          type: "submit"                                                                                               // 39
        }, function() {                                                                                                // 40
          return Spacebars.attrMustache(view.lookup("submitButtonAtts"));                                              // 41
        }), "\n      ", Spacebars.With(function() {                                                                    // 42
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "buttonContent"));                            // 43
        }, function() {                                                                                                // 44
          return [ "\n      ", Blaze.View("lookup:.", function() {                                                     // 45
            return Spacebars.mustache(view.lookup("."));                                                               // 46
          }), "\n      " ];                                                                                            // 47
        }, function() {                                                                                                // 48
          return "\n      Submit\n      ";                                                                             // 49
        }), "\n      "), "\n    "), "\n    " ];                                                                        // 50
      }), "\n\n  " ];                                                                                                  // 51
    });                                                                                                                // 52
  });                                                                                                                  // 53
}));                                                                                                                   // 54
                                                                                                                       // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10523
}).call(this);                                                       // 10524
                                                                     // 10525
                                                                     // 10526
                                                                     // 10527
                                                                     // 10528
                                                                     // 10529
                                                                     // 10530
(function () {                                                       // 10531
                                                                     // 10532
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/quickForm/quickForm.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.quickForm_plain.helpers({                                                                                     // 1
  quickFieldsAtts: function () {                                                                                       // 2
    // These are the quickForm attributes that we want to forward to                                                   // 3
    // the afQuickFields component.                                                                                    // 4
    return _.pick(this.atts, 'id-prefix');                                                                             // 5
  },                                                                                                                   // 6
  submitButtonAtts: function plQuickFormSubmitButtonAtts() {                                                           // 7
    var qfAtts = this.atts;                                                                                            // 8
    var atts = {};                                                                                                     // 9
    if (typeof qfAtts.buttonClasses === "string") {                                                                    // 10
      atts['class'] = qfAtts.buttonClasses;                                                                            // 11
    }                                                                                                                  // 12
    return atts;                                                                                                       // 13
  }                                                                                                                    // 14
});                                                                                                                    // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10556
}).call(this);                                                       // 10557
                                                                     // 10558
                                                                     // 10559
                                                                     // 10560
                                                                     // 10561
                                                                     // 10562
                                                                     // 10563
(function () {                                                       // 10564
                                                                     // 10565
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/afArrayField/template.afArrayField.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afArrayField_plain");                                                                            // 2
Template["afArrayField_plain"] = new Template("Template.afArrayField_plain", (function() {                             // 3
  var view = this;                                                                                                     // 4
  return HTML.FIELDSET("\n    ", HTML.LEGEND(Blaze.View("lookup:afFieldLabelText", function() {                        // 5
    return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                          // 6
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 7
    }));                                                                                                               // 8
  })), "\n    ", Blaze.If(function() {                                                                                 // 9
    return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                      // 10
      name: Spacebars.dot(view.lookup("."), "atts", "name")                                                            // 11
    }));                                                                                                               // 12
  }, function() {                                                                                                      // 13
    return [ "\n    ", HTML.DIV({                                                                                      // 14
      "class": "autoform-array-field-error"                                                                            // 15
    }, "\n      ", Blaze.View("lookup:afFieldMessage", function() {                                                    // 16
      return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                        // 17
        name: Spacebars.dot(view.lookup("."), "atts", "name")                                                          // 18
      })));                                                                                                            // 19
    }), "\n    "), "\n    " ];                                                                                         // 20
  }), "\n    ", Blaze._TemplateWith(function() {                                                                       // 21
    return {                                                                                                           // 22
      name: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "name")),                                           // 23
      minCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "minCount")),                                   // 24
      maxCount: Spacebars.call(Spacebars.dot(view.lookup("."), "atts", "maxCount"))                                    // 25
    };                                                                                                                 // 26
  }, function() {                                                                                                      // 27
    return Spacebars.include(view.lookupTemplate("afEachArrayItem"), function() {                                      // 28
      return [ "\n    ", HTML.DIV({                                                                                    // 29
        "class": "autoform-array-item"                                                                                 // 30
      }, "\n      ", Blaze._TemplateWith(function() {                                                                  // 31
        return {                                                                                                       // 32
          name: Spacebars.call(Spacebars.dot(view.lookup("."), "name")),                                               // 33
          label: Spacebars.call(false)                                                                                 // 34
        };                                                                                                             // 35
      }, function() {                                                                                                  // 36
        return Spacebars.include(view.lookupTemplate("afQuickField"));                                                 // 37
      }), "\n      ", Blaze.If(function() {                                                                            // 38
        return Spacebars.dataMustache(view.lookup("afArrayFieldHasMoreThanMinimum"), Spacebars.kw({                    // 39
          name: Spacebars.dot(view.lookup(".."), "atts", "name"),                                                      // 40
          minCount: Spacebars.dot(view.lookup(".."), "atts", "minCount"),                                              // 41
          maxCount: Spacebars.dot(view.lookup(".."), "atts", "maxCount")                                               // 42
        }));                                                                                                           // 43
      }, function() {                                                                                                  // 44
        return [ "\n      ", HTML.BUTTON({                                                                             // 45
          type: "button",                                                                                              // 46
          "class": "autoform-remove-item"                                                                              // 47
        }, "Remove"), "\n      " ];                                                                                    // 48
      }), "\n    "), "\n    " ];                                                                                       // 49
    });                                                                                                                // 50
  }), "\n    ", Blaze.If(function() {                                                                                  // 51
    return Spacebars.dataMustache(view.lookup("afArrayFieldHasLessThanMaximum"), Spacebars.kw({                        // 52
      name: Spacebars.dot(view.lookup("."), "atts", "name"),                                                           // 53
      minCount: Spacebars.dot(view.lookup("."), "atts", "minCount"),                                                   // 54
      maxCount: Spacebars.dot(view.lookup("."), "atts", "maxCount")                                                    // 55
    }));                                                                                                               // 56
  }, function() {                                                                                                      // 57
    return [ "\n    ", HTML.DIV({                                                                                      // 58
      style: "margin-top: 20px;"                                                                                       // 59
    }, "\n      ", HTML.BUTTON({                                                                                       // 60
      type: "button",                                                                                                  // 61
      "class": "autoform-add-item",                                                                                    // 62
      "data-autoform-field": function() {                                                                              // 63
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "name"));                                    // 64
      },                                                                                                               // 65
      "data-autoform-mincount": function() {                                                                           // 66
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "minCount"));                                // 67
      },                                                                                                               // 68
      "data-autoform-maxcount": function() {                                                                           // 69
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "atts", "maxCount"));                                // 70
      }                                                                                                                // 71
    }, "Add"), "\n    "), "\n    " ];                                                                                  // 72
  }), "\n  ");                                                                                                         // 73
}));                                                                                                                   // 74
                                                                                                                       // 75
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10648
}).call(this);                                                       // 10649
                                                                     // 10650
                                                                     // 10651
                                                                     // 10652
                                                                     // 10653
                                                                     // 10654
                                                                     // 10655
(function () {                                                       // 10656
                                                                     // 10657
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/afFormGroup/template.afFormGroup.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afFormGroup_plain");                                                                             // 2
Template["afFormGroup_plain"] = new Template("Template.afFormGroup_plain", (function() {                               // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV(HTML.Attrs({                                                                                         // 5
    "class": function() {                                                                                              // 6
      return [ Blaze.If(function() {                                                                                   // 7
        return Spacebars.dataMustache(view.lookup("afFieldIsInvalid"), Spacebars.kw({                                  // 8
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 9
        }));                                                                                                           // 10
      }, function() {                                                                                                  // 11
        return "has-error";                                                                                            // 12
      }), " ", Spacebars.mustache(view.lookup("afFormGroupClass")) ];                                                  // 13
    },                                                                                                                 // 14
    "data-required": function() {                                                                                      // 15
      return Spacebars.mustache(view.lookup("required"));                                                              // 16
    }                                                                                                                  // 17
  }, function() {                                                                                                      // 18
    return Spacebars.attrMustache(view.lookup("afFormGroupAtts"));                                                     // 19
  }), "\n    ", Blaze.Unless(function() {                                                                              // 20
    return Spacebars.call(Spacebars.dot(view.lookup("."), "skipLabel"));                                               // 21
  }, function() {                                                                                                      // 22
    return [ "\n    ", HTML.LABEL(HTML.Attrs(function() {                                                              // 23
      return Spacebars.attrMustache(Spacebars.dot(view.lookup("."), "afFieldLabelAtts"));                              // 24
    }), Blaze.If(function() {                                                                                          // 25
      return Spacebars.call(Spacebars.dot(view.lookup("."), "labelText"));                                             // 26
    }, function() {                                                                                                    // 27
      return Blaze.View("lookup:..labelText", function() {                                                             // 28
        return Spacebars.mustache(Spacebars.dot(view.lookup("."), "labelText"));                                       // 29
      });                                                                                                              // 30
    }, function() {                                                                                                    // 31
      return Blaze.View("lookup:afFieldLabelText", function() {                                                        // 32
        return Spacebars.mustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 33
          name: Spacebars.dot(view.lookup("."), "name")                                                                // 34
        }));                                                                                                           // 35
      });                                                                                                              // 36
    })), "\n    " ];                                                                                                   // 37
  }), "\n    ", Blaze._TemplateWith(function() {                                                                       // 38
    return Spacebars.call(Spacebars.dot(view.lookup("."), "afFieldInputAtts"));                                        // 39
  }, function() {                                                                                                      // 40
    return Spacebars.include(view.lookupTemplate("afFieldInput"));                                                     // 41
  }), "\n    ", HTML.SPAN(Blaze.View("lookup:afFieldMessage", function() {                                             // 42
    return Spacebars.makeRaw(Spacebars.mustache(view.lookup("afFieldMessage"), Spacebars.kw({                          // 43
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 44
    })));                                                                                                              // 45
  })), "\n  ");                                                                                                        // 46
}));                                                                                                                   // 47
                                                                                                                       // 48
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10713
}).call(this);                                                       // 10714
                                                                     // 10715
                                                                     // 10716
                                                                     // 10717
                                                                     // 10718
                                                                     // 10719
                                                                     // 10720
(function () {                                                       // 10721
                                                                     // 10722
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/afObjectField/template.afObjectField.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("afObjectField_plain");                                                                           // 2
Template["afObjectField_plain"] = new Template("Template.afObjectField_plain", (function() {                           // 3
  var view = this;                                                                                                     // 4
  return HTML.FIELDSET("\n    ", Spacebars.With(function() {                                                           // 5
    return Spacebars.dataMustache(view.lookup("afFieldLabelText"), Spacebars.kw({                                      // 6
      name: Spacebars.dot(view.lookup("."), "name")                                                                    // 7
    }));                                                                                                               // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", HTML.LEGEND(Blaze.View("lookup:.", function() {                                                 // 10
      return Spacebars.mustache(view.lookup("."));                                                                     // 11
    })), "\n    " ];                                                                                                   // 12
  }), "\n    ", Blaze._TemplateWith(function() {                                                                       // 13
    return Spacebars.call(view.lookup("quickFieldsAtts"));                                                             // 14
  }, function() {                                                                                                      // 15
    return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                    // 16
  }), "\n  ");                                                                                                         // 17
}));                                                                                                                   // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10749
}).call(this);                                                       // 10750
                                                                     // 10751
                                                                     // 10752
                                                                     // 10753
                                                                     // 10754
                                                                     // 10755
                                                                     // 10756
(function () {                                                       // 10757
                                                                     // 10758
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain/components/afObjectField/afObjectField.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.afObjectField_plain.helpers({                                                                                 // 1
  quickFieldsAtts: function () {                                                                                       // 2
    return _.pick(this, 'name', 'id-prefix');                                                                          // 3
  }                                                                                                                    // 4
});                                                                                                                    // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10772
}).call(this);                                                       // 10773
                                                                     // 10774
                                                                     // 10775
                                                                     // 10776
                                                                     // 10777
                                                                     // 10778
                                                                     // 10779
(function () {                                                       // 10780
                                                                     // 10781
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain-fieldset/template.plain-fieldset.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("quickForm_plain-fieldset");                                                                      // 2
Template["quickForm_plain-fieldset"] = new Template("Template.quickForm_plain-fieldset", (function() {                 // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return Spacebars.call(view.lookup("qfAutoFormContext"));                                                           // 6
  }, function() {                                                                                                      // 7
    return Spacebars.include(view.lookupTemplate("autoForm"), function() {                                             // 8
      return [ "\n    ", HTML.FIELDSET("\n      ", Spacebars.With(function() {                                         // 9
        return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "legend"));                                     // 10
      }, function() {                                                                                                  // 11
        return [ "\n      ", HTML.LEGEND(Blaze.View("lookup:.", function() {                                           // 12
          return Spacebars.mustache(view.lookup("."));                                                                 // 13
        })), "\n      " ];                                                                                             // 14
      }), "\n      ", Blaze._TemplateWith(function() {                                                                 // 15
        return Spacebars.call(view.lookup("quickFieldsAtts"));                                                         // 16
      }, function() {                                                                                                  // 17
        return Spacebars.include(view.lookupTemplate("afQuickFields"));                                                // 18
      }), "\n    "), "\n    ", Blaze.If(function() {                                                                   // 19
        return Spacebars.call(view.lookup("qfShouldRenderButton"));                                                    // 20
      }, function() {                                                                                                  // 21
        return [ "\n    ", HTML.DIV("\n      ", HTML.BUTTON(HTML.Attrs({                                               // 22
          type: "submit"                                                                                               // 23
        }, function() {                                                                                                // 24
          return Spacebars.attrMustache(view.lookup("submitButtonAtts"));                                              // 25
        }), "\n        ", Spacebars.With(function() {                                                                  // 26
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "atts", "buttonContent"));                            // 27
        }, function() {                                                                                                // 28
          return [ "\n        ", Blaze.View("lookup:.", function() {                                                   // 29
            return Spacebars.mustache(view.lookup("."));                                                               // 30
          }), "\n        " ];                                                                                          // 31
        }, function() {                                                                                                // 32
          return "\n        Submit\n        ";                                                                         // 33
        }), "\n      "), "\n    "), "\n    " ];                                                                        // 34
      }), "\n  " ];                                                                                                    // 35
    });                                                                                                                // 36
  });                                                                                                                  // 37
}));                                                                                                                   // 38
                                                                                                                       // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10828
}).call(this);                                                       // 10829
                                                                     // 10830
                                                                     // 10831
                                                                     // 10832
                                                                     // 10833
                                                                     // 10834
                                                                     // 10835
(function () {                                                       // 10836
                                                                     // 10837
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed:autoform/templates/plain-fieldset/plain-fieldset.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template['quickForm_plain-fieldset'].helpers({                                                                         // 1
  quickFieldsAtts: function () {                                                                                       // 2
    // These are the quickForm attributes that we want to forward to                                                   // 3
    // the afQuickFields component.                                                                                    // 4
    return _.pick(this.atts, 'id-prefix');                                                                             // 5
  },                                                                                                                   // 6
  submitButtonAtts: function plfsQuickFormSubmitButtonAtts() {                                                         // 7
    var qfAtts = this.atts;                                                                                            // 8
    var atts = {};                                                                                                     // 9
    if (typeof qfAtts.buttonClasses === "string") {                                                                    // 10
      atts['class'] = qfAtts.buttonClasses;                                                                            // 11
    }                                                                                                                  // 12
    return atts;                                                                                                       // 13
  }                                                                                                                    // 14
});                                                                                                                    // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10861
}).call(this);                                                       // 10862
                                                                     // 10863
///////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['aldeed:autoform'] = {
  AutoForm: AutoForm,
  Utility: Utility
};

})();

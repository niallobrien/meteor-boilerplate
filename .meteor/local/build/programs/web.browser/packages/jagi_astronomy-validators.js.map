{"version":3,"sources":["meteor://ðŸ’»app/packages/jagi_astronomy-validators/packages/jagi_astronomy-validators.js"],"names":[],"mappingsfile":"/packages/jagi_astronomy-validators.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/global.js                                   //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.validators = Validators = {};                                                          // 1\n                                                                                             // 2\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/error.js                                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nValidationError = function(errors) {                                                         // 1\n  this.errors = errors;                                                                      // 2\n};                                                                                           // 3\n                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/utils.js                                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.utils.validators = {                                                                   // 1\n  findValidator: function(Class, validatorName) {                                            // 2\n    return Astro.utils.class.findInClass(Class, function(Class) {                            // 3\n      return Class.getValidator(validatorName);                                              // 4\n    });                                                                                      // 5\n  },                                                                                         // 6\n                                                                                             // 7\n  getAllValidators: function(Class) {                                                        // 8\n    var validators = {};                                                                     // 9\n                                                                                             // 10\n    Astro.utils.class.eachClass(Class, function(Class) {                                     // 11\n      _.extend(validators, Class.getValidators());                                           // 12\n    });                                                                                      // 13\n                                                                                             // 14\n    return validators;                                                                       // 15\n  }                                                                                          // 16\n};                                                                                           // 17\n                                                                                             // 18\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/validator_definition.js                     //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nvar checks = {                                                                               // 1\n  validatorDefinition: function(validatorDefinition) {                                       // 2\n    // Check if the validator definition is an object.                                       // 3\n    if (!_.isObject(validatorDefinition)) {                                                  // 4\n      throw new Error('Provide a validator definition');                                     // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    // Check if the validator name is provided.                                              // 8\n    if (!_.has(validatorDefinition, 'name')) {                                               // 9\n      throw new Error('Provide a validator name');                                           // 10\n    }                                                                                        // 11\n                                                                                             // 12\n    // Check if the validator name is a string.                                              // 13\n    if (!_.isString(validatorDefinition.name)) {                                             // 14\n      throw new Error('The validator name has to be a string');                              // 15\n    }                                                                                        // 16\n                                                                                             // 17\n    // Check if the validator with the given name already exists.                            // 18\n    if (_.has(Validators, validatorDefinition.name)) {                                       // 19\n      throw new Error('Validator with the name `' + validatorDefinition.name +               // 20\n        '` is already defined');                                                             // 21\n    }                                                                                        // 22\n                                                                                             // 23\n    // Check if the validation function is provided.                                         // 24\n    if (!_.has(validatorDefinition, 'validate')) {                                           // 25\n      throw new Error('Provide the `validate` function');                                    // 26\n    }                                                                                        // 27\n                                                                                             // 28\n    // Check if the `validate` attribute is function.                                        // 29\n    if (!_.isFunction(validatorDefinition.validate)) {                                       // 30\n      throw new Error('The `validate` attribute has to be a function');                      // 31\n    }                                                                                        // 32\n  }                                                                                          // 33\n};                                                                                           // 34\n                                                                                             // 35\nValidatorDefinition = function(validatorDefinition) {                                        // 36\n  checks.validatorDefinition(validatorDefinition);                                           // 37\n                                                                                             // 38\n  var self = this;                                                                           // 39\n                                                                                             // 40\n  self.name = validatorDefinition.name;                                                      // 41\n  self.validate = validatorDefinition.validate;                                              // 42\n                                                                                             // 43\n  if (_.has(validatorDefinition, 'events')) {                                                // 44\n    _.each(validatorDefinition.events, function(eventHandler, eventName) {                   // 45\n      self.on(eventName, eventHandler);                                                      // 46\n    });                                                                                      // 47\n  }                                                                                          // 48\n};                                                                                           // 49\n                                                                                             // 50\nAstro.Events.mixin(ValidatorDefinition.prototype);                                           // 51\n                                                                                             // 52\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/validator.js                                //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator = function(validatorDefinition) {                                      // 1\n  var definition = new ValidatorDefinition(validatorDefinition);                             // 2\n                                                                                             // 3\n  var validatorGenerator = function(options, userMessage) {                                  // 4\n    var validator = function(fieldValue, fieldName) {                                        // 5\n      return validator.definition.validate.call(                                             // 6\n        this,                                                                                // 7\n        fieldValue,                                                                          // 8\n        fieldName,                                                                           // 9\n        options, // Validator options passed by user.                                        // 10\n        validator // Parent validator.                                                       // 11\n      );                                                                                     // 12\n    };                                                                                       // 13\n                                                                                             // 14\n    _.extend(validator, {                                                                    // 15\n      definition: definition,                                                                // 16\n      options: options,                                                                      // 17\n      message: userMessage                                                                   // 18\n    });                                                                                      // 19\n                                                                                             // 20\n    return validator;                                                                        // 21\n  };                                                                                         // 22\n                                                                                             // 23\n  // Validator is just a function with the \"definition\" property where all the               // 24\n  // validator definition is stored.                                                         // 25\n  Validators[definition.name] = validatorGenerator;                                          // 26\n                                                                                             // 27\n  // We also return created validator if someone would like not to use long                  // 28\n  // default namespace which is e.g. `Validators.isString`.                                  // 29\n  return validatorGenerator;                                                                 // 30\n};                                                                                           // 31\n                                                                                             // 32\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/init_module.js                              //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nvar generateMessage = function(validator, fieldName, fieldValue) {                           // 1\n  // Prepare an event object for the \"validationerror\" event.                                // 2\n  var event = new Astro.Event('validationerror', {                                           // 3\n    validator: _.has(validator, 'definition') ? validator.definition.name : '',              // 4\n    value: fieldValue,                                                                       // 5\n    field: fieldName,                                                                        // 6\n    options: validator.options,                                                              // 7\n    message: null,                                                                           // 8\n  });                                                                                        // 9\n  event.target = this;                                                                       // 10\n                                                                                             // 11\n  // Prepare variable for storing an error message.                                          // 12\n  var errorMessage;                                                                          // 13\n                                                                                             // 14\n  // VALIDATION MESSAGE PASSED TO VALIDATOR.                                                 // 15\n  if (_.isString(validator.message)) {                                                       // 16\n    // If user passed a string message then use it.                                          // 17\n    errorMessage = validator.message;                                                        // 18\n  } else if (_.isFunction(validator.message)) {                                              // 19\n    // If user passed a function message then run it as it would be an event.                // 20\n    validator.message.call(this, event);                                                     // 21\n    errorMessage = event.data.message;                                                       // 22\n  }                                                                                          // 23\n  if (errorMessage) {                                                                        // 24\n    return errorMessage;                                                                     // 25\n  }                                                                                          // 26\n                                                                                             // 27\n  // VALIDATION MESSAGE ON THE LEVEL OF THE CLASS OR IN THE GLOBAL SCOPE.                    // 28\n  // If user haven't defined any custom validation message then check                        // 29\n  // whether there are any \"validationerror\" events that could generate                      // 30\n  // error message.                                                                          // 31\n  this.constructor.emitEvent(event);                                                         // 32\n  errorMessage = event.data.message;                                                         // 33\n  if (errorMessage) {                                                                        // 34\n    return errorMessage;                                                                     // 35\n  }                                                                                          // 36\n                                                                                             // 37\n  // DEFAULT VALIDATOR MESSAGE.                                                              // 38\n  // If in this place the \"errorMessage\" variable is still not set, then we                  // 39\n  // have to look for the \"validationerror\" event in the validator's                         // 40\n  // definition.                                                                             // 41\n  if (                                                                                       // 42\n    validator.definition &&                                                                  // 43\n    _.isFunction(validator.definition.emit)                                                  // 44\n  ) {                                                                                        // 45\n    validator.definition.emit(event);                                                        // 46\n    errorMessage = event.data.message;                                                       // 47\n  }                                                                                          // 48\n  if (errorMessage) {                                                                        // 49\n    return errorMessage;                                                                     // 50\n  }                                                                                          // 51\n                                                                                             // 52\n  // DEFAULT MESSAGE.                                                                        // 53\n  errorMessage = 'The \"' + fieldName + '\" field\\'s value is invalid';                        // 54\n  return errorMessage;                                                                       // 55\n};                                                                                           // 56\n                                                                                             // 57\nvar validateList = function(validatorsList, patternOrFieldName) {                            // 58\n  var doc = this;                                                                            // 59\n  var Class = doc.constructor;                                                               // 60\n                                                                                             // 61\n  // Variable for storing fields names. When the second argument of the                      // 62\n  // \"validateList\" function is pattern, then we have to take fields names out               // 63\n  // of this pattern. If the argument is a single field name then we just put it             // 64\n  // in the array.                                                                           // 65\n  var fieldsNames;                                                                           // 66\n  // Variable for storing information if the second argument is pattern or just              // 67\n  // a field name.                                                                           // 68\n  var isPattern = false;                                                                     // 69\n  // Try finding the \".$\" string which indicates that it's a pattern.                        // 70\n  if (patternOrFieldName.indexOf('.$') !== -1) {                                             // 71\n    // Get fields out of the pattern.                                                        // 72\n    fieldsNames = Astro.utils.fields.getFieldsNamesFromPattern(                              // 73\n      doc,                                                                                   // 74\n      patternOrFieldName                                                                     // 75\n    );                                                                                       // 76\n    isPattern = true;                                                                        // 77\n  } else {                                                                                   // 78\n    fieldsNames = [patternOrFieldName];                                                      // 79\n  }                                                                                          // 80\n                                                                                             // 81\n  // Loop through list of all fileds names and perform validation on each field.             // 82\n  _.each(fieldsNames, function(fieldName) {                                                  // 83\n    // Get the field's value.                                                                // 84\n    var fieldValue = Astro.utils.fields.getValue(doc, fieldName);                            // 85\n                                                                                             // 86\n    // Loop through validators list and run each one.                                        // 87\n    _.each(validatorsList, function(validator) {                                             // 88\n      var isValid = validator.call(doc, fieldValue, fieldName);                              // 89\n                                                                                             // 90\n      if (!isValid) {                                                                        // 91\n        // Prepare an object for storing error messages.                                     // 92\n        var errors = [];                                                                     // 93\n                                                                                             // 94\n        // Add a validation error message for the given field.                               // 95\n        errors.push({                                                                        // 96\n          validator: validator,                                                              // 97\n          patternOrFieldName: fieldName,                                                     // 98\n          fieldValue: fieldValue                                                             // 99\n        });                                                                                  // 100\n                                                                                             // 101\n        if (isPattern) {                                                                     // 102\n          // Add a validation error message for the given pattern.                           // 103\n          errors.push({                                                                      // 104\n            validator: validator,                                                            // 105\n            patternOrFieldName: patternOrFieldName,                                          // 106\n            fieldValue: fieldValue                                                           // 107\n          });                                                                                // 108\n        }                                                                                    // 109\n                                                                                             // 110\n        // Throw errors.                                                                     // 111\n        throw new ValidationError(errors);                                                   // 112\n      } else {                                                                               // 113\n        // Remove a validator error message if present.                                      // 114\n        doc._errors.delete(fieldName);                                                       // 115\n                                                                                             // 116\n        if (isPattern) {                                                                     // 117\n          doc._errors.delete(patternOrFieldName);                                            // 118\n        }                                                                                    // 119\n      }                                                                                      // 120\n    });                                                                                      // 121\n  });                                                                                        // 122\n};                                                                                           // 123\n                                                                                             // 124\nvar validateOne = function(patternOrFieldName) {                                             // 125\n  var doc = this;                                                                            // 126\n  var Class = doc.constructor;                                                               // 127\n                                                                                             // 128\n  var errors = [];                                                                           // 129\n                                                                                             // 130\n  try {                                                                                      // 131\n    // Get validators only for the given field name.                                         // 132\n    var validatorsList = Astro.utils.validators.findValidator(                               // 133\n      Class,                                                                                 // 134\n      patternOrFieldName                                                                     // 135\n    );                                                                                       // 136\n    // Validate field only if there are any validators.                                      // 137\n    if (validatorsList) {                                                                    // 138\n      validateList.call(doc, validatorsList, patternOrFieldName);                            // 139\n    }                                                                                        // 140\n  } catch (e) {                                                                              // 141\n    if (e instanceof ValidationError) {                                                      // 142\n      errors = errors.concat(e.errors);                                                      // 143\n    }                                                                                        // 144\n  }                                                                                          // 145\n                                                                                             // 146\n  return errors;                                                                             // 147\n};                                                                                           // 148\n                                                                                             // 149\nvar validateAll = function(stopOnFirst) {                                                    // 150\n  if (_.isUndefined(stopOnFirst)) {                                                          // 151\n    stopOnFirst = true;                                                                      // 152\n  }                                                                                          // 153\n                                                                                             // 154\n  var doc = this;                                                                            // 155\n  var Class = doc.constructor;                                                               // 156\n                                                                                             // 157\n  // Get list of the all validators for the given class and run validation.                  // 158\n  var validatorsLists = Astro.utils.validators.getAllValidators(Class);                      // 159\n                                                                                             // 160\n  // Get validation order.                                                                   // 161\n  var validationOrder = Class.getValidationOrder();                                          // 162\n  if (validationOrder) {                                                                     // 163\n    // Get keys of validators that are not present in validation order. We will              // 164\n    // add them at the end of the validation order to ensure that all validators             // 165\n    // have been invoked.                                                                    // 166\n    var diff = _.difference(_.keys(validatorsLists), validationOrder);                       // 167\n    // Add the rest of the validators at the end.                                            // 168\n    if (diff.length > 0) {                                                                   // 169\n      validationOrder = validationOrder.concat(diff);                                        // 170\n    }                                                                                        // 171\n  } else {                                                                                   // 172\n    validationOrder = _.keys(validatorsLists);                                               // 173\n  }                                                                                          // 174\n                                                                                             // 175\n  // Callect errors. If the \"stopOnFirst\" flag is set, then we stop collecting               // 176\n  // errors after first error. Otherwise, we continue until we reach the last                // 177\n  // validatorsList.                                                                         // 178\n  var errors = [];                                                                           // 179\n  _.every(validationOrder, function(patternOrFieldName) {                                    // 180\n    try {                                                                                    // 181\n      var validatorsList = validatorsLists[patternOrFieldName];                              // 182\n      if (validatorsList) {                                                                  // 183\n        validateList.call(doc, validatorsList, patternOrFieldName);                          // 184\n      }                                                                                      // 185\n    } catch (e) {                                                                            // 186\n      if (e instanceof ValidationError) {                                                    // 187\n        errors = errors.concat(e.errors);                                                    // 188\n      }                                                                                      // 189\n    }                                                                                        // 190\n                                                                                             // 191\n    if (stopOnFirst && errors.length > 0) {                                                  // 192\n      return false;                                                                          // 193\n    } else {                                                                                 // 194\n      return true;                                                                           // 195\n    }                                                                                        // 196\n  });                                                                                        // 197\n                                                                                             // 198\n  return errors;                                                                             // 199\n};                                                                                           // 200\n                                                                                             // 201\nvar setErrors = function(errors) {                                                           // 202\n  var doc = this;                                                                            // 203\n                                                                                             // 204\n  _.each(errors, function(error) {                                                           // 205\n    var message = generateMessage.call(                                                      // 206\n      doc,                                                                                   // 207\n      error.validator,                                                                       // 208\n      error.patternOrFieldName,                                                              // 209\n      error.fieldValue                                                                       // 210\n    );                                                                                       // 211\n    doc._errors.set(error.patternOrFieldName, message);                                      // 212\n  });                                                                                        // 213\n};                                                                                           // 214\n                                                                                             // 215\nvar methods = {                                                                              // 216\n  validate: function() {                                                                     // 217\n    var doc = this;                                                                          // 218\n                                                                                             // 219\n    var errors;                                                                              // 220\n    if (arguments.length === 1) {                                                            // 221\n      errors = validateOne.call(doc, arguments[0]);                                          // 222\n    } else if (arguments.length === 0) {                                                     // 223\n      errors = validateAll.call(doc);                                                        // 224\n    }                                                                                        // 225\n                                                                                             // 226\n    setErrors.call(doc, errors);                                                             // 227\n                                                                                             // 228\n    return errors.length === 0;                                                              // 229\n  },                                                                                         // 230\n                                                                                             // 231\n  validateAll: function() {                                                                  // 232\n    var doc = this;                                                                          // 233\n                                                                                             // 234\n    var errors = validateAll.call(doc, false);                                               // 235\n                                                                                             // 236\n    setErrors.call(doc, errors);                                                             // 237\n                                                                                             // 238\n    return errors.length === 0;                                                              // 239\n  },                                                                                         // 240\n                                                                                             // 241\n  getValidationError: function(fieldName) {                                                  // 242\n    return this._errors.get(fieldName);                                                      // 243\n  },                                                                                         // 244\n                                                                                             // 245\n  getValidationErrors: function() {                                                          // 246\n    return this._errors.all();                                                               // 247\n  },                                                                                         // 248\n                                                                                             // 249\n  hasValidationError: function(fieldName) {                                                  // 250\n    return this._errors.has(fieldName);                                                      // 251\n  },                                                                                         // 252\n                                                                                             // 253\n  hasValidationErrors: function() {                                                          // 254\n    return this._errors.size() > 0;                                                          // 255\n  },                                                                                         // 256\n                                                                                             // 257\n  throwValidationException: function() {                                                     // 258\n    throw new Meteor.Error('validation-error', this.getValidationErrors());                  // 259\n  },                                                                                         // 260\n                                                                                             // 261\n  catchValidationException: function(exception) {                                            // 262\n    if (!(exception instanceof Meteor.Error) ||                                              // 263\n      exception.error !== 'validation-error' ||                                              // 264\n      !_.isObject(exception.reason)                                                          // 265\n    ) {                                                                                      // 266\n      return;                                                                                // 267\n    }                                                                                        // 268\n                                                                                             // 269\n    this._errors.set(exception.reason);                                                      // 270\n  }                                                                                          // 271\n};                                                                                           // 272\n                                                                                             // 273\nvar events = {                                                                               // 274\n  toJsonValue: function(e) {                                                                 // 275\n    var self = this;                                                                         // 276\n                                                                                             // 277\n    Tracker.nonreactive(function() {                                                         // 278\n      e.data.errors = self._errors.all();                                                    // 279\n    });                                                                                      // 280\n  },                                                                                         // 281\n                                                                                             // 282\n  fromJsonValue: function(e) {                                                               // 283\n    this._errors.set(e.data.errors);                                                         // 284\n  }                                                                                          // 285\n};                                                                                           // 286\n                                                                                             // 287\nonInitModule = function() {                                                                  // 288\n  _.extend(Astro.BaseClass.prototype, methods);                                              // 289\n                                                                                             // 290\n  Astro.eventManager.on('toJsonValue', events.toJsonValue);                                  // 291\n  Astro.eventManager.on('fromJsonValue', events.fromJsonValue);                              // 292\n};                                                                                           // 293\n                                                                                             // 294\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/init_class.js                               //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nvar checks = {                                                                               // 1\n  fieldName: function(fieldName) {                                                           // 2\n    if (!Match.test(fieldName, String)) {                                                    // 3\n      throw new Error(                                                                       // 4\n        'The validator\\'s field name in the \"' + this.getName() +                            // 5\n        '\" class schema has to be a string'                                                  // 6\n      );                                                                                     // 7\n    }                                                                                        // 8\n  },                                                                                         // 9\n                                                                                             // 10\n  validator: function(fieldName, validator) {                                                // 11\n    if (!Match.test(validator, Match.OneOf(Function, [Function]))) {                         // 12\n      throw new Error(                                                                       // 13\n        'The validator for the \"' + fieldName +                                              // 14\n        '\" field in the \"' + this.getName() +                                                // 15\n        '\" class schema has to be a function or an array of functions'                       // 16\n      );                                                                                     // 17\n    }                                                                                        // 18\n  },                                                                                         // 19\n                                                                                             // 20\n  validators: function(validators) {                                                         // 21\n    if (!Match.test(validators, Object)) {                                                   // 22\n      throw new Error(                                                                       // 23\n        'The validator functions definition in the \"' + this.getName() +                     // 24\n        '\" class schema has to be an object'                                                 // 25\n      );                                                                                     // 26\n    }                                                                                        // 27\n  },                                                                                         // 28\n                                                                                             // 29\n  validationOrder: function(validationOrder) {                                               // 30\n    if (!Match.test(validationOrder, [String])) {                                            // 31\n      throw new Error(                                                                       // 32\n        'The validation order definition in the \"' + this.getName() +                        // 33\n        '\" class schema has to be an array of strings'                                       // 34\n      );                                                                                     // 35\n    }                                                                                        // 36\n  }                                                                                          // 37\n};                                                                                           // 38\n                                                                                             // 39\nvar methods = {                                                                              // 40\n  hasValidator: function(fieldName) {                                                        // 41\n    checks.fieldName.call(this, fieldName);                                                  // 42\n                                                                                             // 43\n    return _.has(this.schema.validators, fieldName);                                         // 44\n  },                                                                                         // 45\n                                                                                             // 46\n  getValidator: function(fieldName) {                                                        // 47\n    checks.fieldName.call(this, fieldName);                                                  // 48\n                                                                                             // 49\n    return this.schema.validators[fieldName];                                                // 50\n  },                                                                                         // 51\n                                                                                             // 52\n  getValidators: function() {                                                                // 53\n    return this.schema.validators;                                                           // 54\n  },                                                                                         // 55\n                                                                                             // 56\n  addValidator: function(fieldName, validators) {                                            // 57\n    // Check if field name had been provided and is a string.                                // 58\n    checks.fieldName.call(this, fieldName);                                                  // 59\n    // Check if validator is a function.                                                     // 60\n    checks.validator.call(this, fieldName, validators);                                      // 61\n                                                                                             // 62\n    this.schema.validators[fieldName] = this.schema.validators[fieldName] || [];             // 63\n    this.schema.validators[fieldName] = this.schema.validators[fieldName].                   // 64\n    concat(validators);                                                                      // 65\n  },                                                                                         // 66\n                                                                                             // 67\n  addValidators: function(validators) {                                                      // 68\n    var self = this;                                                                         // 69\n                                                                                             // 70\n    // Validators data has to be an object.                                                  // 71\n    checks.validators.call(self, validators);                                                // 72\n                                                                                             // 73\n    // Loop through list of validators data and add each one.                                // 74\n    _.each(validators, function(validator, fieldName) {                                      // 75\n      self.addValidator(fieldName, validator);                                               // 76\n    });                                                                                      // 77\n  },                                                                                         // 78\n                                                                                             // 79\n  setValidationOrder: function(validationOrder) {                                            // 80\n    // Check validity of the validation order option.                                        // 81\n    checks.validationOrder.call(this, validationOrder);                                      // 82\n                                                                                             // 83\n    this.schema.validationOrder = validationOrder;                                           // 84\n  },                                                                                         // 85\n                                                                                             // 86\n  getValidationOrder: function() {                                                           // 87\n    return this.schema.validationOrder;                                                      // 88\n  }                                                                                          // 89\n};                                                                                           // 90\n                                                                                             // 91\nvar events = {                                                                               // 92\n  afterset: function(e) {                                                                    // 93\n    var fieldName = e.data.field;                                                            // 94\n                                                                                             // 95\n    // If a validator is defined for given field then clear error message for                // 96\n    // that field.                                                                           // 97\n    this._errors.delete(fieldName);                                                          // 98\n  }                                                                                          // 99\n};                                                                                           // 100\n                                                                                             // 101\nonInitClass = function(schemaDefinition) {                                                   // 102\n  var Class = this;                                                                          // 103\n                                                                                             // 104\n  _.extend(Class, methods);                                                                  // 105\n                                                                                             // 106\n  // Add the \"validators\" attribute to the schema.                                           // 107\n  Class.schema.validators = {};                                                              // 108\n                                                                                             // 109\n  // Add validators that are defined next to the field definition.                           // 110\n  _.each(                                                                                    // 111\n    schemaDefinition.fields,                                                                 // 112\n    function(fieldDefinition, patternOrFieldName) {                                          // 113\n      if (_.has(fieldDefinition, 'validators')) {                                            // 114\n        Class.addValidator(patternOrFieldName, fieldDefinition.validators);                  // 115\n      }                                                                                      // 116\n    }                                                                                        // 117\n  );                                                                                         // 118\n                                                                                             // 119\n  if (_.has(schemaDefinition, 'validators')) {                                               // 120\n    Class.addValidators(schemaDefinition.validators);                                        // 121\n                                                                                             // 122\n    // Add \"afterset\" event to all classes having validators.                                // 123\n    Class.addEvents(events);                                                                 // 124\n  }                                                                                          // 125\n                                                                                             // 126\n  if (_.has(schemaDefinition, 'validationOrder')) {                                          // 127\n    // Add the validation order option to the class.                                         // 128\n    Class.setValidationOrder(schemaDefinition.validationOrder);                              // 129\n  }                                                                                          // 130\n};                                                                                           // 131\n                                                                                             // 132\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/init_instance.js                            //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nonInitInstance = function(attrs) {                                                           // 1\n  this._errors = new ReactiveMap();                                                          // 2\n};                                                                                           // 3\n                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/module/module.js                                   //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createModule({                                                                         // 1\n  name: 'validators',                                                                        // 2\n  init: onInitModule,                                                                        // 3\n  events: {                                                                                  // 4\n    initclass: onInitClass,                                                                  // 5\n    initinstance: onInitInstance                                                             // 6\n  }                                                                                          // 7\n});                                                                                          // 8\n                                                                                             // 9\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/string.js                          //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'string',                                                                            // 2\n  validate: _.isString,                                                                      // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be a string';                                               // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/number.js                          //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'number',                                                                            // 2\n  validate: function(value) {                                                                // 3\n    return !_.isNaN(value) && _.isNumber(value);                                             // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n                                                                                             // 9\n      e.data.message = 'The \"' + fieldName +                                                 // 10\n        '\" field\\'s value has to be a number';                                               // 11\n    }                                                                                        // 12\n  }                                                                                          // 13\n});                                                                                          // 14\n                                                                                             // 15\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/boolean.js                         //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'boolean',                                                                           // 2\n  validate: _.isBoolean,                                                                     // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be a boolean';                                              // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/array.js                           //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'array',                                                                             // 2\n  validate: _.isArray,                                                                       // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be an array';                                               // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/object.js                          //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'object',                                                                            // 2\n  validate: _.isObject,                                                                      // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be an object';                                              // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/date.js                            //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'date',                                                                              // 2\n  validate: _.isDate,                                                                        // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be a date';                                                 // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/type/email.js                           //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'email',                                                                             // 2\n  validate: function(fieldValue) {                                                           // 3\n    // Create email regular expression.                                                      // 4\n    var re = /^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,}$/i;                                 // 5\n                                                                                             // 6\n    return re.test(fieldValue);                                                              // 7\n  },                                                                                         // 8\n  events: {                                                                                  // 9\n    validationerror: function(e) {                                                           // 10\n      var fieldName = e.data.field;                                                          // 11\n                                                                                             // 12\n      e.data.message = 'The \"' + fieldName +                                                 // 13\n        '\" field\\'s value has to be an appropiate email address';                            // 14\n    }                                                                                        // 15\n  }                                                                                          // 16\n});                                                                                          // 17\n                                                                                             // 18\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/existence/required.js                   //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'required',                                                                          // 2\n  validate: function(fieldValue) {                                                           // 3\n    return !_.isNull(fieldValue) && fieldValue !== '';                                       // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n                                                                                             // 9\n      e.data.message = 'The \"' + fieldName +                                                 // 10\n        '\" field\\'s value is required';                                                      // 11\n    }                                                                                        // 12\n  }                                                                                          // 13\n});                                                                                          // 14\n                                                                                             // 15\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/existence/null.js                       //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'null',                                                                              // 2\n  validate: _.isNull,                                                                        // 3\n  events: {                                                                                  // 4\n    validationerror: function(e) {                                                           // 5\n      var fieldName = e.data.field;                                                          // 6\n                                                                                             // 7\n      e.data.message = 'The \"' + fieldName +                                                 // 8\n        '\" field\\'s value has to be null';                                                   // 9\n    }                                                                                        // 10\n  }                                                                                          // 11\n});                                                                                          // 12\n                                                                                             // 13\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/existence/not_null.js                   //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'notNull',                                                                           // 2\n  validate: function(fieldValue) {                                                           // 3\n    return !_.isNull(fieldValue);                                                            // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n                                                                                             // 9\n      e.data.message = 'The \"' + fieldName +                                                 // 10\n        '\" field\\'s value can\\'t be null';                                                   // 11\n    }                                                                                        // 12\n  }                                                                                          // 13\n});                                                                                          // 14\n                                                                                             // 15\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/existence/has.js                        //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'has',                                                                               // 2\n  validate: function(fieldValue, fieldName, propertyName) {                                  // 3\n    return _.has(fieldValue, propertyName);                                                  // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n      var propertyName = e.data.options;                                                     // 9\n                                                                                             // 10\n      e.data.message = 'The \"' + fieldName +                                                 // 11\n        '\" field\\'s value has to have \"' + propertyName + '\" property';                      // 12\n    }                                                                                        // 13\n  }                                                                                          // 14\n});                                                                                          // 15\n                                                                                             // 16\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/length.js                          //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'length',                                                                            // 2\n  validate: function(fieldValue, fieldName, length) {                                        // 3\n    if (!fieldValue) {                                                                       // 4\n      return false;                                                                          // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue.length === length;                                                     // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var length = e.data.options;                                                           // 13\n                                                                                             // 14\n      e.data.message = 'The \"' + fieldName +                                                 // 15\n        '\" field\\'s value length has to be ' + length;                                       // 16\n    }                                                                                        // 17\n  }                                                                                          // 18\n});                                                                                          // 19\n                                                                                             // 20\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/min_length.js                      //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'minLength',                                                                         // 2\n  validate: function(fieldValue, fieldName, minLength) {                                     // 3\n    if (!fieldValue) {                                                                       // 4\n      return false;                                                                          // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue.length >= minLength;                                                   // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var minLength = e.data.options;                                                        // 13\n                                                                                             // 14\n      e.data.message = 'The \"' + fieldName +                                                 // 15\n        '\" field\\'s value length has to be at least ' + minLength;                           // 16\n    }                                                                                        // 17\n  }                                                                                          // 18\n});                                                                                          // 19\n                                                                                             // 20\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/max_length.js                      //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'maxLength',                                                                         // 2\n  validate: function(fieldValue, fieldName, maxLength) {                                     // 3\n    if (_.isNull(fieldValue) || _.isUndefined(fieldValue) || !_.has(fieldValue, 'length')) { // 4\n      return false;                                                                          // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue.length <= maxLength;                                                   // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var maxLength = e.data.options;                                                        // 13\n                                                                                             // 14\n      e.data.message = 'The \"' + fieldName +                                                 // 15\n        '\" field\\'s value length has to be at most ' + maxLength;                            // 16\n    }                                                                                        // 17\n  }                                                                                          // 18\n});                                                                                          // 19\n                                                                                             // 20\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/gt.js                              //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'gt',                                                                                // 2\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3\n    if (_.isFunction(compareValue)) {                                                        // 4\n      compareValue = compareValue.call(this);                                                // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue > compareValue;                                                        // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var compareValue = e.data.options;                                                     // 13\n                                                                                             // 14\n      if (_.isFunction(compareValue)) {                                                      // 15\n        compareValue = compareValue.call(this);                                              // 16\n      }                                                                                      // 17\n                                                                                             // 18\n      e.data.message = 'The \"' + fieldName +                                                 // 19\n        '\" field\\'s value has to be greater than \"' + compareValue + '\"';                    // 20\n    }                                                                                        // 21\n  }                                                                                          // 22\n});                                                                                          // 23\n                                                                                             // 24\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/gte.js                             //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'gte',                                                                               // 2\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3\n    if (_.isFunction(compareValue)) {                                                        // 4\n      compareValue = compareValue.call(this);                                                // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue >= compareValue;                                                       // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var compareValue = e.data.options;                                                     // 13\n                                                                                             // 14\n      if (_.isFunction(compareValue)) {                                                      // 15\n        compareValue = compareValue.call(this);                                              // 16\n      }                                                                                      // 17\n                                                                                             // 18\n      e.data.message = 'The \"' + fieldName +                                                 // 19\n        '\" field\\'s value has to be greater than or equal \"' +                               // 20\n        compareValue + '\"';                                                                  // 21\n    }                                                                                        // 22\n  }                                                                                          // 23\n});                                                                                          // 24\n                                                                                             // 25\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/lt.js                              //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'lt',                                                                                // 2\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3\n    if (_.isFunction(compareValue)) {                                                        // 4\n      compareValue = compareValue.call(this);                                                // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue < compareValue;                                                        // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var compareValue = e.data.options;                                                     // 13\n                                                                                             // 14\n      if (_.isFunction(compareValue)) {                                                      // 15\n        compareValue = compareValue.call(this);                                              // 16\n      }                                                                                      // 17\n                                                                                             // 18\n      e.data.message = 'The \"' + fieldName +                                                 // 19\n        '\" field\\'s value has to be less than \"' + compareValue + '\"';                       // 20\n    }                                                                                        // 21\n  }                                                                                          // 22\n});                                                                                          // 23\n                                                                                             // 24\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/size/lte.js                             //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'lte',                                                                               // 2\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3\n    if (_.isFunction(compareValue)) {                                                        // 4\n      compareValue = compareValue.call(this);                                                // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue <= compareValue;                                                       // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var compareValue = e.data.options;                                                     // 13\n                                                                                             // 14\n      if (_.isFunction(compareValue)) {                                                      // 15\n        compareValue = compareValue.call(this);                                              // 16\n      }                                                                                      // 17\n                                                                                             // 18\n      e.data.message = 'The \"' + fieldName +                                                 // 19\n        '\" field\\'s value has to be less than or equal \"' + compareValue +                   // 20\n        '\"';                                                                                 // 21\n    }                                                                                        // 22\n  }                                                                                          // 23\n});                                                                                          // 24\n                                                                                             // 25\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/comparison/choice.js                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'choice',                                                                            // 2\n  validate: function(fieldValue, fieldName, choices) {                                       // 3\n    return _.contains(choices, fieldValue);                                                  // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n      var choices = e.data.options;                                                          // 9\n                                                                                             // 10\n      e.data.message = 'The \"' + fieldName +                                                 // 11\n        '\" field\\'s value has to be one of \"' + choices.join('\", \"') +                       // 12\n        '\"';                                                                                 // 13\n    }                                                                                        // 14\n  }                                                                                          // 15\n});                                                                                          // 16\n                                                                                             // 17\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/comparison/unique.js                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'unique',                                                                            // 2\n  validate: function(fieldValue, fieldName) {                                                // 3\n    var Collection = this.constructor.getCollection();                                       // 4\n                                                                                             // 5\n    // If a Class is not related with any collection then document is unique.                // 6\n    if (!Collection) {                                                                       // 7\n      return true;                                                                           // 8\n    }                                                                                        // 9\n                                                                                             // 10\n    // The unique validator is used only during insert operation. If the \"_id\"               // 11\n    // fields is present, then object is being updated not inserted.                         // 12\n    if (this._id) {                                                                          // 13\n      return true;                                                                           // 14\n    }                                                                                        // 15\n                                                                                             // 16\n    // Prepare selector.                                                                     // 17\n    var selector = {};                                                                       // 18\n    selector[fieldName] = fieldValue;                                                        // 19\n                                                                                             // 20\n    // Check if a record with the given field value exists.                                  // 21\n    return _.isUndefined(Collection.findOne(selector));                                      // 22\n  },                                                                                         // 23\n  events: {                                                                                  // 24\n    validationerror: function(e) {                                                           // 25\n      var fieldName = e.data.field;                                                          // 26\n                                                                                             // 27\n      e.data.message = 'The \"' + fieldName +                                                 // 28\n        '\" field\\'s value has to be unique';                                                 // 29\n    }                                                                                        // 30\n  }                                                                                          // 31\n});                                                                                          // 32\n                                                                                             // 33\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/comparison/equal.js                     //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'equal',                                                                             // 2\n  validate: function(fieldValue, fieldName, compareValue) {                                  // 3\n    if (_.isFunction(compareValue)) {                                                        // 4\n      compareValue = compareValue.call(this);                                                // 5\n    }                                                                                        // 6\n                                                                                             // 7\n    return fieldValue === compareValue;                                                      // 8\n  },                                                                                         // 9\n  events: {                                                                                  // 10\n    validationerror: function(e) {                                                           // 11\n      var fieldName = e.data.field;                                                          // 12\n      var compareValue = e.data.options;                                                     // 13\n                                                                                             // 14\n      if (_.isFunction(compareValue)) {                                                      // 15\n        compareValue = compareValue.call(this);                                              // 16\n      }                                                                                      // 17\n                                                                                             // 18\n      e.data.message = 'The \"' + fieldName +                                                 // 19\n        '\" field\\'s value has to be equal \"' + compareValue + '\"';                           // 20\n    }                                                                                        // 21\n  }                                                                                          // 22\n});                                                                                          // 23\n                                                                                             // 24\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/comparison/equal_to.js                  //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'equalTo',                                                                           // 2\n  validate: function(fieldValue, fieldName, compareFieldName) {                              // 3\n    var compareValue = this.get(compareFieldName);                                           // 4\n                                                                                             // 5\n    return fieldValue === compareValue;                                                      // 6\n  },                                                                                         // 7\n  events: {                                                                                  // 8\n    validationerror: function(e) {                                                           // 9\n      var fieldName = e.data.field;                                                          // 10\n      var compareValue = e.data.options;                                                     // 11\n                                                                                             // 12\n      if (_.isFunction(compareValue)) {                                                      // 13\n        compareValue = compareValue.call(this);                                              // 14\n      }                                                                                      // 15\n                                                                                             // 16\n      e.data.message = 'The \"' + fieldName + '\" and \"' + compareValue +                      // 17\n        '\" field\\'s values have to be equal';                                                // 18\n    }                                                                                        // 19\n  }                                                                                          // 20\n});                                                                                          // 21\n                                                                                             // 22\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/comparison/regexp.js                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'regexp',                                                                            // 2\n  validate: function(fieldValue, fieldName, pattern) {                                       // 3\n    return pattern.test(fieldValue);                                                         // 4\n  },                                                                                         // 5\n  events: {                                                                                  // 6\n    validationerror: function(e) {                                                           // 7\n      var fieldName = e.data.field;                                                          // 8\n      var pattern = e.data.options.toString();                                               // 9\n                                                                                             // 10\n      e.data.message = 'The \"' + fieldName +                                                 // 11\n        '\" field\\'s value has to match \"' + pattern +                                        // 12\n        '\" regular expression';                                                              // 13\n    }                                                                                        // 14\n  }                                                                                          // 15\n});                                                                                          // 16\n                                                                                             // 17\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/logical/and.js                          //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'and',                                                                               // 2\n  validate: function(fieldValue, fieldName, validators) {                                    // 3\n    var error;                                                                               // 4\n    var doc = this;                                                                          // 5\n                                                                                             // 6\n    var isValid = _.every(validators, function(validator, index) {                           // 7\n      try {                                                                                  // 8\n        var isValid = validator.call(doc, fieldValue, fieldName);                            // 9\n        if (!isValid && !error) {                                                            // 10\n          error = new ValidationError([{                                                     // 11\n            validator: validator,                                                            // 12\n            patternOrFieldName: fieldName,                                                   // 13\n            fieldValue: fieldValue,                                                          // 14\n            name: validator.definition.name                                                  // 15\n          }]);                                                                               // 16\n        }                                                                                    // 17\n        return isValid;                                                                      // 18\n      } catch (e) {                                                                          // 19\n        if (!error) {                                                                        // 20\n          error = e;                                                                         // 21\n        }                                                                                    // 22\n        return false;                                                                        // 23\n      }                                                                                      // 24\n    });                                                                                      // 25\n                                                                                             // 26\n    if (!isValid && error) {                                                                 // 27\n      throw error;                                                                           // 28\n    }                                                                                        // 29\n                                                                                             // 30\n    return isValid;                                                                          // 31\n  }                                                                                          // 32\n});                                                                                          // 33\n                                                                                             // 34\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// packages/jagi:astronomy-validators/lib/validators/logical/or.js                           //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAstro.createValidator({                                                                      // 1\n  name: 'or',                                                                                // 2\n  validate: function(fieldValue, fieldName, validators) {                                    // 3\n    var error;                                                                               // 4\n    var doc = this;                                                                          // 5\n                                                                                             // 6\n    var isValid = _.some(validators, function(validator, index) {                            // 7\n      try {                                                                                  // 8\n        var isValid = validator.call(doc, fieldValue, fieldName);                            // 9\n        if (!isValid && !error) {                                                            // 10\n          error = new ValidationError([{                                                     // 11\n            validator: validator,                                                            // 12\n            patternOrFieldName: fieldName,                                                   // 13\n            fieldValue: fieldValue,                                                          // 14\n            name: validator.definition.name                                                  // 15\n          }]);                                                                               // 16\n        }                                                                                    // 17\n        return isValid;                                                                      // 18\n      } catch (e) {                                                                          // 19\n        if (!error) {                                                                        // 20\n          error = e;                                                                         // 21\n        }                                                                                    // 22\n        return false;                                                                        // 23\n      }                                                                                      // 24\n    });                                                                                      // 25\n                                                                                             // 26\n    if (!isValid && error) {                                                                 // 27\n      throw error;                                                                           // 28\n    }                                                                                        // 29\n                                                                                             // 30\n    return isValid;                                                                          // 31\n  }                                                                                          // 32\n});                                                                                          // 33\n                                                                                             // 34\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
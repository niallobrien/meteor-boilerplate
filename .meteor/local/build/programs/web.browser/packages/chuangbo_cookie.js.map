{"version":3,"sources":["meteor://ðŸ’»app/packages/chuangbo_cookie/packages/chuangbo_cookie.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8F","file":"/packages/chuangbo_cookie.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/chuangbo:cookie/cookie.js                                            //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\nCookie = {};                                                                     // 1\n                                                                                 // 2\n(function(exports) {                                                             // 3\n                                                                                 // 4\n    // Cookie                                                                    // 5\n    // -------------                                                             // 6\n    // Thanks to:                                                                // 7\n    //  - http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/       // 8\n    //  - http://developer.yahoo.com/yui/3/cookie/                               // 9\n                                                                                 // 10\n                                                                                 // 11\n    var Cookie = exports;                                                        // 12\n                                                                                 // 13\n    var decode = decodeURIComponent;                                             // 14\n    var encode = encodeURIComponent;                                             // 15\n                                                                                 // 16\n                                                                                 // 17\n    /**                                                                          // 18\n     * Returns the cookie value for the given name.                              // 19\n     *                                                                           // 20\n     * @param {String} name The name of the cookie to retrieve.                  // 21\n     *                                                                           // 22\n     * @param {Function|Object} options (Optional) An object containing one or   // 23\n     *     more cookie options: raw (true/false) and converter (a function).     // 24\n     *     The converter function is run on the value before returning it. The   // 25\n     *     function is not used if the cookie doesn't exist. The function can be // 26\n     *     passed instead of the options object for conveniently. When raw is    // 27\n     *     set to true, the cookie value is not URI decoded.                     // 28\n     *                                                                           // 29\n     * @return {*} If no converter is specified, returns a string or undefined   // 30\n     *     if the cookie doesn't exist. If the converter is specified, returns   // 31\n     *     the value returned from the converter.                                // 32\n     */                                                                          // 33\n    Cookie.get = function(name, options) {                                       // 34\n        validateCookieName(name);                                                // 35\n                                                                                 // 36\n        if (typeof options === 'function') {                                     // 37\n            options = { converter: options };                                    // 38\n        }                                                                        // 39\n        else {                                                                   // 40\n            options = options || {};                                             // 41\n        }                                                                        // 42\n                                                                                 // 43\n        var cookies = parseCookieString(document.cookie, !options['raw']);       // 44\n        return (options.converter || same)(cookies[name]);                       // 45\n    };                                                                           // 46\n                                                                                 // 47\n                                                                                 // 48\n    /**                                                                          // 49\n     * Sets a cookie with a given name and value.                                // 50\n     *                                                                           // 51\n     * @param {string} name The name of the cookie to set.                       // 52\n     *                                                                           // 53\n     * @param {*} value The value to set for the cookie.                         // 54\n     *                                                                           // 55\n     * @param {Object} options (Optional) An object containing one or more       // 56\n     *     cookie options: path (a string), domain (a string),                   // 57\n     *     expires (number or a Date object), secure (true/false),               // 58\n     *     and raw (true/false). Setting raw to true indicates that the cookie   // 59\n     *     should not be URI encoded before being set.                           // 60\n     *                                                                           // 61\n     * @return {string} The created cookie string.                               // 62\n     */                                                                          // 63\n    Cookie.set = function(name, value, options) {                                // 64\n        validateCookieName(name);                                                // 65\n                                                                                 // 66\n        options = options || {};                                                 // 67\n        var expires = options['expires'];                                        // 68\n        var domain = options['domain'];                                          // 69\n        var path = options['path'];                                              // 70\n                                                                                 // 71\n        if (!options['raw']) {                                                   // 72\n            value = encode(String(value));                                       // 73\n        }                                                                        // 74\n                                                                                 // 75\n        var text = name + '=' + value;                                           // 76\n                                                                                 // 77\n        // expires                                                               // 78\n        var date = expires;                                                      // 79\n        if (typeof date === 'number') {                                          // 80\n            date = new Date();                                                   // 81\n            date.setDate(date.getDate() + expires);                              // 82\n        }                                                                        // 83\n        if (date instanceof Date) {                                              // 84\n            text += '; expires=' + date.toUTCString();                           // 85\n        }                                                                        // 86\n                                                                                 // 87\n        // domain                                                                // 88\n        if (isNonEmptyString(domain)) {                                          // 89\n            text += '; domain=' + domain;                                        // 90\n        }                                                                        // 91\n                                                                                 // 92\n        // path                                                                  // 93\n        if (isNonEmptyString(path)) {                                            // 94\n            text += '; path=' + path;                                            // 95\n        }                                                                        // 96\n                                                                                 // 97\n        // secure                                                                // 98\n        if (options['secure']) {                                                 // 99\n            text += '; secure';                                                  // 100\n        }                                                                        // 101\n                                                                                 // 102\n        document.cookie = text;                                                  // 103\n        return text;                                                             // 104\n    };                                                                           // 105\n                                                                                 // 106\n                                                                                 // 107\n    /**                                                                          // 108\n     * Removes a cookie from the machine by setting its expiration date to       // 109\n     * sometime in the past.                                                     // 110\n     *                                                                           // 111\n     * @param {string} name The name of the cookie to remove.                    // 112\n     *                                                                           // 113\n     * @param {Object} options (Optional) An object containing one or more       // 114\n     *     cookie options: path (a string), domain (a string),                   // 115\n     *     and secure (true/false). The expires option will be overwritten       // 116\n     *     by the method.                                                        // 117\n     *                                                                           // 118\n     * @return {string} The created cookie string.                               // 119\n     */                                                                          // 120\n    Cookie.remove = function(name, options) {                                    // 121\n        options = options || {};                                                 // 122\n        options['expires'] = new Date(0);                                        // 123\n        return this.set(name, '', options);                                      // 124\n    };                                                                           // 125\n                                                                                 // 126\n                                                                                 // 127\n    function parseCookieString(text, shouldDecode) {                             // 128\n        var cookies = {};                                                        // 129\n                                                                                 // 130\n        if (isString(text) && text.length > 0) {                                 // 131\n                                                                                 // 132\n            var decodeValue = shouldDecode ? decode : same;                      // 133\n            var cookieParts = text.split(/;\\s/g);                                // 134\n            var cookieName;                                                      // 135\n            var cookieValue;                                                     // 136\n            var cookieNameValue;                                                 // 137\n                                                                                 // 138\n            for (var i = 0, len = cookieParts.length; i < len; i++) {            // 139\n                                                                                 // 140\n                // Check for normally-formatted cookie (name-value)              // 141\n                cookieNameValue = cookieParts[i].match(/([^=]+)=/i);             // 142\n                if (cookieNameValue instanceof Array) {                          // 143\n                    try {                                                        // 144\n                        cookieName = decode(cookieNameValue[1]);                 // 145\n                        cookieValue = decodeValue(cookieParts[i]                 // 146\n                                .substring(cookieNameValue[1].length + 1));      // 147\n                    } catch (ex) {                                               // 148\n                        // Intentionally ignore the cookie -                     // 149\n                        // the encoding is wrong                                 // 150\n                    }                                                            // 151\n                } else {                                                         // 152\n                    // Means the cookie does not have an \"=\", so treat it as     // 153\n                    // a boolean flag                                            // 154\n                    cookieName = decode(cookieParts[i]);                         // 155\n                    cookieValue = '';                                            // 156\n                }                                                                // 157\n                                                                                 // 158\n                if (cookieName) {                                                // 159\n                    cookies[cookieName] = cookieValue;                           // 160\n                }                                                                // 161\n            }                                                                    // 162\n                                                                                 // 163\n        }                                                                        // 164\n                                                                                 // 165\n        return cookies;                                                          // 166\n    }                                                                            // 167\n                                                                                 // 168\n                                                                                 // 169\n    // Helpers                                                                   // 170\n                                                                                 // 171\n    function isString(o) {                                                       // 172\n        return typeof o === 'string';                                            // 173\n    }                                                                            // 174\n                                                                                 // 175\n    function isNonEmptyString(s) {                                               // 176\n        return isString(s) && s !== '';                                          // 177\n    }                                                                            // 178\n                                                                                 // 179\n    function validateCookieName(name) {                                          // 180\n        if (!isNonEmptyString(name)) {                                           // 181\n            throw new TypeError('Cookie name must be a non-empty string');       // 182\n        }                                                                        // 183\n    }                                                                            // 184\n                                                                                 // 185\n    function same(s) {                                                           // 186\n        return s;                                                                // 187\n    }                                                                            // 188\n                                                                                 // 189\n})(Cookie);                                                                      // 190\n                                                                                 // 191\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
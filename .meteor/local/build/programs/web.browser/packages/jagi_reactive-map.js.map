{"version":3,"sources":["meteor://ðŸ’»app/packages/jagi_reactive-map/packages/jagi_reactive-map.js"],"names":[],"mappingskF","file":"/packages/jagi_reactive-map.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/jagi:reactive-map/lib/reactive_map.js                    //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nvar stringify = function(value) {                                    // 1\n  if (value === undefined) {                                         // 2\n    return 'undefined';                                              // 3\n  }                                                                  // 4\n  return EJSON.stringify(value);                                     // 5\n};                                                                   // 6\n                                                                     // 7\nvar parse = function(serialized) {                                   // 8\n  if (serialized === undefined || serialized === 'undefined') {      // 9\n    return undefined;                                                // 10\n  }                                                                  // 11\n  return EJSON.parse(serialized);                                    // 12\n};                                                                   // 13\n                                                                     // 14\nvar changed = function(v) {                                          // 15\n  v && v.changed();                                                  // 16\n};                                                                   // 17\n                                                                     // 18\nvar ensureKey = function(key) {                                      // 19\n  if (!_.has(this._keyDeps, key)) {                                  // 20\n    this._keyDeps[key] = new Tracker.Dependency;                     // 21\n    this._hasDeps[key] = new Tracker.Dependency;                     // 22\n  }                                                                  // 23\n};                                                                   // 24\n                                                                     // 25\nvar setObject = function(object) {                                   // 26\n  var self = this;                                                   // 27\n                                                                     // 28\n  _.each(object, function(value, key) {                              // 29\n    self.set(key, value);                                            // 30\n  });                                                                // 31\n};                                                                   // 32\n                                                                     // 33\nReactiveMap = function(dictName) {                                   // 34\n  this._size = 0;                                                    // 35\n  this._values = {};                                                 // 36\n  this._sizeDeps = new Tracker.Dependency;                           // 37\n  this._allDeps = new Tracker.Dependency;                            // 38\n  this._keysDeps = new Tracker.Dependency;                           // 39\n  this._valuesDeps = new Tracker.Dependency;                         // 40\n  this._keyDeps = {};                                                // 41\n  this._hasDeps = {};                                                // 42\n};                                                                   // 43\n                                                                     // 44\n_.extend(ReactiveMap.prototype, {                                    // 45\n  set: function(key, value) {                                        // 46\n    if (_.isObject(key) && value === undefined) {                    // 47\n      setObject.call(this, key);                                     // 48\n      return;                                                        // 49\n    }                                                                // 50\n                                                                     // 51\n    serializedValue = stringify(value);                              // 52\n                                                                     // 53\n    if (_.has(this._values, key)) {                                  // 54\n      if (serializedValue === this._values[key]) {                   // 55\n        return;                                                      // 56\n      }                                                              // 57\n      this._valuesDeps.changed();                                    // 58\n    } else {                                                         // 59\n      this._size++;                                                  // 60\n      this._sizeDeps.changed();                                      // 61\n      changed(this._hasDeps[key]);                                   // 62\n      this._keysDeps.changed();                                      // 63\n      this._valuesDeps.changed();                                    // 64\n    }                                                                // 65\n                                                                     // 66\n    this._values[key] = serializedValue;                             // 67\n                                                                     // 68\n    this._allDeps.changed();                                         // 69\n    changed(this._keyDeps[key]);                                     // 70\n  },                                                                 // 71\n                                                                     // 72\n  get: function(key) {                                               // 73\n    ensureKey.call(this, key);                                       // 74\n    this._keyDeps[key].depend();                                     // 75\n                                                                     // 76\n    return parse(this._values[key]);                                 // 77\n  },                                                                 // 78\n                                                                     // 79\n  has: function(key) {                                               // 80\n    ensureKey.call(this, key);                                       // 81\n    this._hasDeps[key].depend();                                     // 82\n                                                                     // 83\n    return _.has(this._values, key);                                 // 84\n  },                                                                 // 85\n                                                                     // 86\n  delete: function(key) {                                            // 87\n    if (!_.has(this._values, key)) {                                 // 88\n      return;                                                        // 89\n    }                                                                // 90\n                                                                     // 91\n    delete this._values[key];                                        // 92\n    this._size--;                                                    // 93\n                                                                     // 94\n    changed(this._keyDeps[key]);                                     // 95\n    changed(this._hasDeps[key]);                                     // 96\n    this._sizeDeps.changed();                                        // 97\n    this._allDeps.changed();                                         // 98\n    this._keysDeps.changed();                                        // 99\n    this._valuesDeps.changed();                                      // 100\n  },                                                                 // 101\n                                                                     // 102\n  entries: function() {                                              // 103\n    this._allDeps.depend();                                          // 104\n                                                                     // 105\n    var allValues = {};                                              // 106\n                                                                     // 107\n    _.each(this._values, function(value, key) {                      // 108\n      allValues[key] = parse(value);                                 // 109\n    });                                                              // 110\n                                                                     // 111\n    return allValues;                                                // 112\n  },                                                                 // 113\n                                                                     // 114\n  keys: function() {                                                 // 115\n    this._keysDeps.depend();                                         // 116\n                                                                     // 117\n    var keys = [];                                                   // 118\n                                                                     // 119\n    _.each(this._values, function(value, key) {                      // 120\n      keys.push(key);                                                // 121\n    });                                                              // 122\n                                                                     // 123\n    return keys;                                                     // 124\n  },                                                                 // 125\n                                                                     // 126\n  values: function() {                                               // 127\n    this._valuesDeps.depend();                                       // 128\n                                                                     // 129\n    var values = [];                                                 // 130\n                                                                     // 131\n    _.each(this._values, function(value, key) {                      // 132\n      values.push(parse(value));                                     // 133\n    });                                                              // 134\n                                                                     // 135\n    return values;                                                   // 136\n  },                                                                 // 137\n                                                                     // 138\n  size: function() {                                                 // 139\n    this._sizeDeps.depend();                                         // 140\n                                                                     // 141\n    return this._size;                                               // 142\n  },                                                                 // 143\n                                                                     // 144\n  clear: function() {                                                // 145\n    var self = this;                                                 // 146\n                                                                     // 147\n    var oldValues = this._values;                                    // 148\n    this._values = {};                                               // 149\n    this._size = 0;                                                  // 150\n                                                                     // 151\n    this._sizeDeps.changed();                                        // 152\n    this._allDeps.changed();                                         // 153\n    this._keysDeps.changed();                                        // 154\n    this._valuesDeps.changed();                                      // 155\n                                                                     // 156\n    _.each(oldValues, function(value, key) {                         // 157\n      changed(self._keyDeps[key]);                                   // 158\n      changed(self._hasDeps[key]);                                   // 159\n    });                                                              // 160\n  }                                                                  // 161\n});                                                                  // 162\n                                                                     // 163\n// Define aliases.                                                   // 164\nReactiveMap.prototype.all = ReactiveMap.prototype.entries;           // 165\n                                                                     // 166\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
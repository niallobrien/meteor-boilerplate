{"version":3,"sources":["meteor://ðŸ’»app/packages/mizzao_user-status/packages/mizzao_user-status.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oG","file":"/packages/mizzao_user-status.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// packages/mizzao:user-status/monitor.coffee.js                                           //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n\n/*\n  The idle monitor watches for mouse, keyboard, and blur events,\n  and reports idle status to the server.\n\n  It uses TimeSync to report accurate time.\n\n  Everything is reactive, of course!\n */\nvar activityDep, focused, idle, idleDep, isIdle, isMonitoring, lastActivity, lastActivityTime, monitor, monitorDep, monitorId, start, stop, touch;                              \n\nmonitorId = null;\n\nidle = false;\n\nlastActivityTime = void 0;\n\nmonitorDep = new Deps.Dependency;\n\nidleDep = new Deps.Dependency;\n\nactivityDep = new Deps.Dependency;\n\nfocused = true;\n\nMonitorInternals = {\n  idleThreshold: null,\n  idleOnBlur: false,\n  computeState: function(lastActiveTime, currentTime, isWindowFocused) {\n    var inactiveTime;\n    inactiveTime = currentTime - lastActiveTime;\n    if (MonitorInternals.idleOnBlur && !isWindowFocused) {\n      return true;\n    }\n    if (inactiveTime > MonitorInternals.idleThreshold) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  connectionChange: function(isConnected, wasConnected) {\n    if (isConnected && !wasConnected && idle) {\n      return MonitorInternals.reportIdle(lastActivityTime);\n    }\n  },\n  onWindowBlur: function() {\n    focused = false;\n    return monitor();\n  },\n  onWindowFocus: function() {\n    focused = true;\n    return monitor(true);\n  },\n  reportIdle: function(time) {\n    return Meteor.call(\"user-status-idle\", time);\n  },\n  reportActive: function(time) {\n    return Meteor.call(\"user-status-active\", time);\n  }\n};\n\nstart = function(settings) {\n  var interval;\n  if (!TimeSync.isSynced()) {\n    throw new Error(\"Can't start idle monitor until synced to server\");\n  }\n  if (monitorId) {\n    throw new Error(\"Idle monitor is already active. Stop it first.\");\n  }\n  settings = settings || {};\n  MonitorInternals.idleThreshold = settings.threshold || 60000;\n  interval = Math.max(settings.interval || 1000, 1000);\n  MonitorInternals.idleOnBlur = settings.idleOnBlur != null ? settings.idleOnBlur : false;\n  monitorId = Meteor.setInterval(monitor, interval);\n  monitorDep.changed();\n  if (lastActivityTime == null) {\n    lastActivityTime = Deps.nonreactive(function() {\n      return TimeSync.serverTime();\n    });\n    activityDep.changed();\n  }\n  monitor();\n};\n\nstop = function() {\n  if (!monitorId) {\n    throw new Error(\"Idle monitor is not running.\");\n  }\n  Meteor.clearInterval(monitorId);\n  monitorId = null;\n  lastActivityTime = void 0;\n  monitorDep.changed();\n  if (idle) {\n    idle = false;\n    idleDep.changed();\n    MonitorInternals.reportActive(Deps.nonreactive(function() {\n      return TimeSync.serverTime();\n    }));\n  }\n};\n\nmonitor = function(setAction) {\n  var currentTime, newIdle;\n  if (!monitorId) {\n    return;\n  }\n  currentTime = Deps.nonreactive(function() {\n    return TimeSync.serverTime();\n  });\n  if (currentTime == null) {\n    return;\n  }\n  if (setAction && (focused || !MonitorInternals.idleOnBlur)) {\n    lastActivityTime = currentTime;\n    activityDep.changed();\n  }\n  newIdle = MonitorInternals.computeState(lastActivityTime, currentTime, focused);\n  if (newIdle !== idle) {\n    idle = newIdle;\n    idleDep.changed();\n  }\n};\n\ntouch = function() {\n  if (!monitorId) {\n    Meteor._debug(\"Cannot touch as idle monitor is not running.\");\n    return;\n  }\n  return monitor(true);\n};\n\nisIdle = function() {\n  idleDep.depend();\n  return idle;\n};\n\nisMonitoring = function() {\n  monitorDep.depend();\n  return monitorId != null;\n};\n\nlastActivity = function() {\n  if (!isMonitoring()) {\n    return;\n  }\n  activityDep.depend();\n  return lastActivityTime;\n};\n\nMeteor.startup(function() {\n  var wasConnected;\n  $(window).on(\"click keydown\", function() {\n    return monitor(true);\n  });\n  $(window).blur(MonitorInternals.onWindowBlur);\n  $(window).focus(MonitorInternals.onWindowFocus);\n  if (Meteor.isCordova) {\n    document.addEventListener(\"pause\", MonitorInternals.onWindowBlur);\n    document.addEventListener(\"resume\", MonitorInternals.onWindowFocus);\n  }\n  focused = document.hasFocus();\n  Deps.autorun(function() {\n    if (!isMonitoring()) {\n      return;\n    }\n    if (isIdle()) {\n      MonitorInternals.reportIdle(lastActivityTime);\n    } else {\n      MonitorInternals.reportActive(lastActivityTime);\n    }\n  });\n  wasConnected = Meteor.status().connected;\n  return Deps.autorun(function() {\n    var connected;\n    connected = Meteor.status().connected;\n    MonitorInternals.connectionChange(connected, wasConnected);\n    wasConnected = connected;\n  });\n});\n\nUserStatus = {\n  startMonitor: start,\n  stopMonitor: stop,\n  pingMonitor: touch,\n  isIdle: isIdle,\n  isMonitoring: isMonitoring,\n  lastActivity: lastActivity\n};\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
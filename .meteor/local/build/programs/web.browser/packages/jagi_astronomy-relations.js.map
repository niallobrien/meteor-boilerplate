{"version":3,"sources":["meteor://ðŸ’»app/packages/jagi_astronomy-relations/packages/jagi_astronomy-relations.js"],"names":[],"mappingsgG","file":"/packages/jagi_astronomy-relations.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/jagi:astronomy-relations/lib/module/init_module.js                     //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\nvar methods = {};                                                                  // 1\n                                                                                   // 2\nmethods.setRelated = function(relationName, value) {};                             // 3\n                                                                                   // 4\nmethods.getRelated = function(relationName) {                                      // 5\n  // If there is already a reference to the relation object(s) stored in the       // 6\n  // \"_references\" object then we can take it without looking in collection.       // 7\n  if (_.has(this._references, relationName)) {                                     // 8\n    return this._references[relationName];                                         // 9\n  }                                                                                // 10\n                                                                                   // 11\n  // Look for the relation definition in this and parent classes.                  // 12\n  var relation = Astro.utils.class.findInClass(this.constructor, function(Class) { // 13\n    return Class.getRelation(relationName);                                        // 14\n  });                                                                              // 15\n  if (!relation) {                                                                 // 16\n    return;                                                                        // 17\n  }                                                                                // 18\n                                                                                   // 19\n  // Get a collection defined in the relation.                                     // 20\n  var ForeignClass = Astro.classes[relation.class];                                // 21\n  var ForeignCollection = ForeignClass.getCollection();                            // 22\n                                                                                   // 23\n  // Prepare selector to select only these documents that much the relation.       // 24\n  var selector = {};                                                               // 25\n  selector[relation.foreign] = this.get(relation.local);                           // 26\n                                                                                   // 27\n  // Get a related object.                                                         // 28\n  var related;                                                                     // 29\n  if (relation.type === 'one') {                                                   // 30\n    related = ForeignCollection.findOne(selector);                                 // 31\n  } else if (relation.type === 'many') {                                           // 32\n    related = ForeignCollection.find(selector);                                    // 33\n  }                                                                                // 34\n                                                                                   // 35\n  // Assing the related object to the \"_references\" object for further use.        // 36\n  return this._references[relationName] = related;                                 // 37\n};                                                                                 // 38\n                                                                                   // 39\nrelationsOnInitModule = function() {                                               // 40\n  _.extend(Astro.BaseClass.prototype, methods);                                    // 41\n};                                                                                 // 42\n                                                                                   // 43\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/jagi:astronomy-relations/lib/module/init_class.js                      //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\nvar checks = {};                                                                   // 1\n                                                                                   // 2\nchecks.relationName = function(relationName) {                                     // 3\n  // Check if the field name had been provided and is a string.                    // 4\n  if (!_.isString(relationName)) {                                                 // 5\n    throw new Error(                                                               // 6\n      'The relation name in the \"' + this.getName() +                              // 7\n      '\" class schema has to be a string'                                          // 8\n    );                                                                             // 9\n  }                                                                                // 10\n};                                                                                 // 11\n                                                                                   // 12\nchecks.definitions = function(relationsDefinition) {                               // 13\n  if (!_.isObject(relationsDefinition)) {                                          // 14\n    // Relations definition has to be an object.                                   // 15\n    throw new Error(                                                               // 16\n      'The relations definition in the \"' + this.getName() +                       // 17\n      '\" class schema has to be an object'                                         // 18\n    );                                                                             // 19\n  }                                                                                // 20\n};                                                                                 // 21\n                                                                                   // 22\nchecks.definition = function(relationName, relationDefinition) {                   // 23\n  if (!_.isObject(relationDefinition)) {                                           // 24\n    // Relation definition has to be an object.                                    // 25\n    throw new Error(                                                               // 26\n      'The relation definition for the \"' + relationName +                         // 27\n      '\" relation in the \"' + this.getName() +                                     // 28\n      '\" class schema has to be an object'                                         // 29\n    );                                                                             // 30\n  }                                                                                // 31\n                                                                                   // 32\n  if (relationDefinition.type !== 'one' && relationDefinition.type !== 'many') {   // 33\n    // Relation type should be one of two values: \"one\" or \"many\".                 // 34\n    throw new Error(                                                               // 35\n      'The relation type for the \"' + relationName +                               // 36\n      '\" relation in the \"' + this.getName() +                                     // 37\n      '\" class schema should be \"one\" or \"many\"'                                   // 38\n    );                                                                             // 39\n  }                                                                                // 40\n};                                                                                 // 41\n                                                                                   // 42\nvar methods = {};                                                                  // 43\n                                                                                   // 44\nmethods.hasRelation = function(relationName) {                                     // 45\n  checks.relationName.call(this, relationName);                                    // 46\n                                                                                   // 47\n  return _.has(this.schema.relations, relationName);                               // 48\n};                                                                                 // 49\n                                                                                   // 50\nmethods.getRelation = function(relationName) {                                     // 51\n  checks.relationName.call(this, relationName);                                    // 52\n                                                                                   // 53\n  return this.schema.relations[relationName];                                      // 54\n};                                                                                 // 55\n                                                                                   // 56\nmethods.getRelations = function() {                                                // 57\n  return this.schema.relations;                                                    // 58\n};                                                                                 // 59\n                                                                                   // 60\nmethods.addRelations = function(relationsDefinition) {                             // 61\n  checks.definitions.call(this, relationsDefinition);                              // 62\n                                                                                   // 63\n  _.each(relationsDefinition, function(relationDefinition, relationName) {         // 64\n    this.addRelation(relationName, relationsDefinition[relationName]);             // 65\n  }, this);                                                                        // 66\n};                                                                                 // 67\n                                                                                   // 68\n                                                                                   // 69\nmethods.addRelation = function(relationName, relationDefinition) {                 // 70\n  // Do params checking. The params checking can throw an error.                   // 71\n  checks.relationName.call(this, relationName);                                    // 72\n  // If the relation already exists then just break. When adding relation, we also try to add an opposit relation to the foreign schema. It could cause circular method execution. It's why we have to stop execution.\n  if (this.hasRelation(relationName)) {                                            // 74\n    return;                                                                        // 75\n  }                                                                                // 76\n  checks.definition.call(this, relationName, relationDefinition);                  // 77\n                                                                                   // 78\n  // Define setter and getter for the relation.                                    // 79\n  Object.defineProperty(this.prototype, relationName, {                            // 80\n    get: function() {                                                              // 81\n      return this.getRelated(relationName);                                        // 82\n    },                                                                             // 83\n    set: function(value) {                                                         // 84\n      this.setRelated(relationName, value);                                        // 85\n    }                                                                              // 86\n  });                                                                              // 87\n                                                                                   // 88\n  // Add relation definition to the schema.                                        // 89\n  this.schema.relations[relationName] = relationDefinition;                        // 90\n};                                                                                 // 91\n                                                                                   // 92\nrelationsOnInitClass = function(schemaDefinition) {                                // 93\n  var Class = this;                                                                // 94\n                                                                                   // 95\n  _.extend(Class, methods);                                                        // 96\n                                                                                   // 97\n  // Add the \"relations\" attribute to the schema.                                  // 98\n  Class.schema.relations = {};                                                     // 99\n                                                                                   // 100\n  if (_.has(schemaDefinition, 'relations')) {                                      // 101\n    Class.addRelations(schemaDefinition.relations);                                // 102\n  }                                                                                // 103\n};                                                                                 // 104\n                                                                                   // 105\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/jagi:astronomy-relations/lib/module/init_instance.js                   //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\nrelationsOnInitInstance = function() {                                             // 1\n  // Object for storing references of related objects.                             // 2\n  this._references = {};                                                           // 3\n};                                                                                 // 4\n                                                                                   // 5\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/jagi:astronomy-relations/lib/module/module.js                          //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\nAstro.createModule({                                                               // 1\n  name: 'relations',                                                               // 2\n  init: relationsOnInitModule,                                                     // 3\n  events: {                                                                        // 4\n    initclass: relationsOnInitClass,                                               // 5\n    initinstance: relationsOnInitInstance                                          // 6\n  }                                                                                // 7\n});                                                                                // 8\n                                                                                   // 9\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
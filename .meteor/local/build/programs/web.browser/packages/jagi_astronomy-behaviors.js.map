{"version":3,"sources":["meteor://ðŸ’»app/packages/jagi_astronomy-behaviors/packages/jagi_astronomy-behaviors.js"],"names":[],"mappingsfile":"/packages/jagi_astronomy-behaviors.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/jagi:astronomy-behaviors/lib/module/global.js                       //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nAstro.behaviors = {};                                                           // 1\n                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/jagi:astronomy-behaviors/lib/module/utils.js                        //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nAstro.utils.behaviors = {                                                       // 1\n  findBehavior: function(Class, behaviorName) {                                 // 2\n    return Astro.utils.class.findInClass(Class, function(Class) {               // 3\n      return Class.getBehavior(behaviorName);                                   // 4\n    });                                                                         // 5\n  }                                                                             // 6\n};                                                                              // 7\n                                                                                // 8\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/jagi:astronomy-behaviors/lib/module/behavior.js                     //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nvar checks = {};                                                                // 1\n                                                                                // 2\nchecks.behaviorDefinition = function(behaviorDefinition) {                      // 3\n  // Check parameters validity.                                                 // 4\n  if (!_.isObject(behaviorDefinition)) {                                        // 5\n    throw new Error('The behavior definition has to be an object');             // 6\n  }                                                                             // 7\n                                                                                // 8\n  // Check if behavior name is provided.                                        // 9\n  if (!_.has(behaviorDefinition, 'name')) {                                     // 10\n    throw new Error('The behavior name can not be empty');                      // 11\n  }                                                                             // 12\n                                                                                // 13\n  // Check if behavior name is a string.                                        // 14\n  if (!_.isString(behaviorDefinition.name)) {                                   // 15\n    throw new Error('The behavior name has to be a string');                    // 16\n  }                                                                             // 17\n                                                                                // 18\n  // Check if behavior with given name already exists.                          // 19\n  if (_.has(Astro.behaviors, behaviorDefinition.name)) {                        // 20\n    throw new Error(                                                            // 21\n      'The behavior with the name \"' +                                          // 22\n      behaviorDefinition.name + '\" is already defined'                          // 23\n    );                                                                          // 24\n  }                                                                             // 25\n};                                                                              // 26\n                                                                                // 27\nAstro.createBehavior = function(behaviorDefinition) {                           // 28\n  // Check validity of the behavior definition.                                 // 29\n  checks.behaviorDefinition(behaviorDefinition);                                // 30\n                                                                                // 31\n  // Initialize a module if the \"init\" method had been defined.                 // 32\n  if (_.isFunction(behaviorDefinition.init)) {                                  // 33\n    behaviorDefinition.init();                                                  // 34\n  }                                                                             // 35\n                                                                                // 36\n  // Add the behavior definition to the global list of behaviors.               // 37\n  return Astro.behaviors[behaviorDefinition.name] = behaviorDefinition;         // 38\n};                                                                              // 39\n                                                                                // 40\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/jagi:astronomy-behaviors/lib/module/init_class.js                   //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nvar checks = {};                                                                // 1\n                                                                                // 2\nchecks.behaviorName = function(behaviorName) {                                  // 3\n  if (!_.isString(behaviorName)) {                                              // 4\n    throw new Error(                                                            // 5\n      'The behavior name in the \"' + this.getName() +                           // 6\n      '\" class schema has to be a string'                                       // 7\n    );                                                                          // 8\n  }                                                                             // 9\n};                                                                              // 10\n                                                                                // 11\nchecks.exists = function(behaviorName) {                                        // 12\n  if (!_.has(Astro.behaviors, behaviorName)) {                                  // 13\n    throw new Error(                                                            // 14\n      'The \"' + behaviorName + '\" behavior in \"' + this.getName() +             // 15\n      '\" class schema does not exist'                                           // 16\n    );                                                                          // 17\n  }                                                                             // 18\n};                                                                              // 19\n                                                                                // 20\nchecks.behaviorData = function(behaviorName, behaviorData) {                    // 21\n  if (!_.isObject(behaviorData)) {                                              // 22\n    throw new Error(                                                            // 23\n      'The behavior data in \"' + this.getName() +                               // 24\n      '\" class schema has to be an object'                                      // 25\n    );                                                                          // 26\n  }                                                                             // 27\n};                                                                              // 28\n                                                                                // 29\nchecks.added = function(behaviorName) {                                         // 30\n  if (Astro.utils.behaviors.findBehavior(this, behaviorName)) {                 // 31\n    throw new Error(                                                            // 32\n      'The \"' + behaviorName + '\" behavior in the \"' +                          // 33\n      this.getName() + '\" class schema had already been added'                  // 34\n    );                                                                          // 35\n  }                                                                             // 36\n};                                                                              // 37\n                                                                                // 38\nvar methods = {};                                                               // 39\n                                                                                // 40\nmethods.hasBehavior = function(behaviorName) {                                  // 41\n  // Check if the behavior name has been provided                               // 42\n  checks.behaviorName.call(this, behaviorName);                                 // 43\n                                                                                // 44\n  return _.has(this.schema.behaviors, behaviorName);                            // 45\n};                                                                              // 46\n                                                                                // 47\nmethods.getBehavior = function(behaviorName) {                                  // 48\n  // Check if the behavior name has been provided                               // 49\n  checks.behaviorName.call(this, behaviorName);                                 // 50\n                                                                                // 51\n  return this.schema.behaviors[behaviorName];                                   // 52\n};                                                                              // 53\n                                                                                // 54\nmethods.getBehaviors = function() {                                             // 55\n  return this.schema.behaviors;                                                 // 56\n};                                                                              // 57\n                                                                                // 58\nmethods.addBehavior = function(behaviorName, behaviorData) {                    // 59\n  behaviorData = behaviorData || {};                                            // 60\n                                                                                // 61\n  // Check if the behavior name has been provided                               // 62\n  checks.behaviorName.call(this, behaviorName);                                 // 63\n  // Check if the given bahavior exists.                                        // 64\n  checks.exists.call(this, behaviorName);                                       // 65\n  // Check if the behavior data is an object.                                   // 66\n  checks.behaviorData.call(this, behaviorName, behaviorData);                   // 67\n  // Check if the given behavior is already added to this or parent classes.    // 68\n  checks.added.call(this, behaviorName);                                        // 69\n                                                                                // 70\n  // Add behavior copy to behaviors list of given schema under the key equal    // 71\n  // to behavior type.                                                          // 72\n  this.schema.behaviors[behaviorName] = behaviorData;                           // 73\n                                                                                // 74\n  // Get behavior definition.                                                   // 75\n  var behavior = Astro.behaviors[behaviorName];                                 // 76\n  // Trigger \"addbehavior\" event.                                               // 77\n  if (behavior.events && behavior.events.addbehavior) {                         // 78\n    behavior.events.addbehavior.call(this, behaviorData);                       // 79\n  }                                                                             // 80\n};                                                                              // 81\n                                                                                // 82\nmethods.addBehaviors = function(behaviors) {                                    // 83\n  if (_.isArray(behaviors)) {                                                   // 84\n                                                                                // 85\n    _.each(behaviors, function(behaviorName) {                                  // 86\n      this.addBehavior(behaviorName);                                           // 87\n    }, this);                                                                   // 88\n                                                                                // 89\n  } else if (_.isObject(behaviors)) {                                           // 90\n                                                                                // 91\n    _.each(behaviors, function(behavior, behaviorName) {                        // 92\n      this.addBehavior(behaviorName, behavior);                                 // 93\n    }, this);                                                                   // 94\n                                                                                // 95\n  } else {                                                                      // 96\n                                                                                // 97\n    // Behaviors data has to be an object or an array.                          // 98\n    throw new Error(                                                            // 99\n      'The behavior data in the \"' + this.getName() +                           // 100\n      '\" class schema has to ' +                                                // 101\n      'be an object or an array'                                                // 102\n    );                                                                          // 103\n                                                                                // 104\n  }                                                                             // 105\n};                                                                              // 106\n                                                                                // 107\nonInitClass = function(schemaDefinition) {                                      // 108\n  var Class = this;                                                             // 109\n                                                                                // 110\n  _.extend(Class, methods);                                                     // 111\n                                                                                // 112\n  // Add the \"behaviors\" attribute to the schema.                               // 113\n  Class.schema.behaviors = {};                                                  // 114\n                                                                                // 115\n  if (_.has(schemaDefinition, 'behaviors')) {                                   // 116\n    Class.addBehaviors(schemaDefinition.behaviors);                             // 117\n                                                                                // 118\n    // Trigger on \"initclass\" event if it is provided. We do it here because we // 119\n    // are already in the process of execution \"initclass\" events, so adding it // 120\n    // to class would have no effect.                                           // 121\n    _.each(Class.getBehaviors(), function(behaviorData, behaviorName) {         // 122\n      var behavior = Astro.behaviors[behaviorName];                             // 123\n      if (behavior.events && behavior.events.initclass) {                       // 124\n        behavior.events.initclass.call(Class, schemaDefinition);                // 125\n      }                                                                         // 126\n    });                                                                         // 127\n  }                                                                             // 128\n};                                                                              // 129\n                                                                                // 130\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/jagi:astronomy-behaviors/lib/module/init_instance.js                //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nonInitInstance = function(attrs) {                                              // 1\n  var Class = this.constructor;                                                 // 2\n  var behaviors = Class.getBehaviors();                                         // 3\n                                                                                // 4\n  _.each(behaviors, function(behaviorData, behaviorName) {                      // 5\n    var behavior = Astro.behaviors[behaviorName];                               // 6\n    if (behavior.events && behavior.events.initinstance) {                      // 7\n      behavior.events.initinstance.call(Class, attrs);                          // 8\n    }                                                                           // 9\n  });                                                                           // 10\n};                                                                              // 11\n                                                                                // 12\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/jagi:astronomy-behaviors/lib/module/module.js                       //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nAstro.createModule({                                                            // 1\n  name: 'behaviors',                                                            // 2\n  events: {                                                                     // 3\n    initclass: onInitClass,                                                     // 4\n    initinstance: onInitInstance                                                // 5\n  }                                                                             // 6\n});                                                                             // 7\n                                                                                // 8\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}
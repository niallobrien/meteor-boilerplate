{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["class-call-check"]},"ignored":false,"code":"/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nAccountsCommon = (function () {\n  function AccountsCommon(options) {\n    babelHelpers.classCallCheck(this, AccountsCommon);\n\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n\n  AccountsCommon.prototype.userId = (function () {\n    function userId() {\n      throw new Error(\"userId method not implemented\");\n    }\n\n    return userId;\n  })();\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n\n  AccountsCommon.prototype.user = (function () {\n    function user() {\n      var userId = this.userId();\n      return userId ? this.users.findOne(userId) : null;\n    }\n\n    return user;\n  })();\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */\n\n  AccountsCommon.prototype.config = (function () {\n    function config(options) {\n      var self = this;\n\n      // We don't want users to accidentally only call Accounts.config on the\n      // client, where some of the options will have partial effects (eg removing\n      // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n      // is set, or redirecting Google login to a specific-domain page) without\n      // having their full effects.\n      if (Meteor.isServer) {\n        __meteor_runtime_config__.accountsConfigCalled = true;\n      } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n        // XXX would be nice to \"crash\" the client and replace the UI with an error\n        // message, but there's no trivial way to do this.\n        Meteor._debug(\"Accounts.config was called on the client but not on the \" + \"server; some configuration options may not take effect.\");\n      }\n\n      // We need to validate the oauthSecretKey option at the time\n      // Accounts.config is called. We also deliberately don't store the\n      // oauthSecretKey in Accounts._options.\n      if (_.has(options, \"oauthSecretKey\")) {\n        if (Meteor.isClient) throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n        if (!Package[\"oauth-encryption\"]) throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n        Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n        options = _.omit(options, \"oauthSecretKey\");\n      }\n\n      // validate option keys\n      var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n      _.each(_.keys(options), function (key) {\n        if (!_.contains(VALID_KEYS, key)) {\n          throw new Error(\"Accounts.config: Invalid key: \" + key);\n        }\n      });\n\n      // set values in Accounts._options\n      _.each(VALID_KEYS, function (key) {\n        if (key in options) {\n          if (key in self._options) {\n            throw new Error(\"Can't set `\" + key + \"` more than once\");\n          }\n          self._options[key] = options[key];\n        }\n      });\n    }\n\n    return config;\n  })();\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n\n  AccountsCommon.prototype.onLogin = (function () {\n    function onLogin(func) {\n      return this._onLoginHook.register(func);\n    }\n\n    return onLogin;\n  })();\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n\n  AccountsCommon.prototype.onLoginFailure = (function () {\n    function onLoginFailure(func) {\n      return this._onLoginFailureHook.register(func);\n    }\n\n    return onLoginFailure;\n  })();\n\n  AccountsCommon.prototype._initConnection = (function () {\n    function _initConnection(options) {\n      if (!Meteor.isClient) {\n        return;\n      }\n\n      // The connection used by the Accounts system. This is the connection\n      // that will get logged in by Meteor.login(), and this is the\n      // connection whose login state will be reflected by Meteor.userId().\n      //\n      // It would be much preferable for this to be in accounts_client.js,\n      // but it has to be here because it's needed to create the\n      // Meteor.users collection.\n\n      if (options.connection) {\n        this.connection = options.connection;\n      } else if (options.ddpUrl) {\n        this.connection = DDP.connect(options.ddpUrl);\n      } else if (typeof __meteor_runtime_config__ !== \"undefined\" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n        // Temporary, internal hook to allow the server to point the client\n        // to a different authentication server. This is for a very\n        // particular use case that comes up when implementing a oauth\n        // server. Unsupported and may go away at any point in time.\n        //\n        // We will eventually provide a general way to use account-base\n        // against any DDP connection, not just one special one.\n        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n      } else {\n        this.connection = Meteor.connection;\n      }\n    }\n\n    return _initConnection;\n  })();\n\n  AccountsCommon.prototype._getTokenLifetimeMs = (function () {\n    function _getTokenLifetimeMs() {\n      return (this._options.loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n    }\n\n    return _getTokenLifetimeMs;\n  })();\n\n  AccountsCommon.prototype._tokenExpiration = (function () {\n    function _tokenExpiration(when) {\n      // We pass when through the Date constructor for backwards compatibility;\n      // `when` used to be a number.\n      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n    }\n\n    return _tokenExpiration;\n  })();\n\n  AccountsCommon.prototype._tokenExpiresSoon = (function () {\n    function _tokenExpiresSoon(when) {\n      var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n      if (minLifetimeMs > minLifetimeCapMs) minLifetimeMs = minLifetimeCapMs;\n      return new Date() > new Date(when) - minLifetimeMs;\n    }\n\n    return _tokenExpiresSoon;\n  })();\n\n  return AccountsCommon;\n})();\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {\n  this.message = description;\n});\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;","ast":null,"map":{"version":3,"sources":["/accounts_common.js"],"names":[],"mappings":"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","file":"/accounts_common.js.map","sourcesContent":["/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nAccountsCommon = class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    return (this._options.loginExpirationInDays ||\n            DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n"]},"hash":"bf528747d973755f5c81897af41c71345a45e19f"}
